
Project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bab8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800bc58  0800bc58  0001bc58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0a8  0800c0a8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0a8  0800c0a8  0001c0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0b0  0800c0b0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0b0  0800c0b0  0001c0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0b4  0800c0b4  0001c0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c0b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bdc  200001e8  0800c2a0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004dc4  0800c2a0  00024dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e71  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003390  00000000  00000000  0003a089  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014f8  00000000  00000000  0003d420  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001380  00000000  00000000  0003e918  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017ad5  00000000  00000000  0003fc98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010a77  00000000  00000000  0005776d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009b04c  00000000  00000000  000681e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00103230  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006514  00000000  00000000  001032ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bc40 	.word	0x0800bc40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800bc40 	.word	0x0800bc40

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <DWT_Delay_Init+0x58>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	4a13      	ldr	r2, [pc, #76]	; (8000ff0 <DWT_Delay_Init+0x58>)
 8000fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fa6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <DWT_Delay_Init+0x58>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <DWT_Delay_Init+0x58>)
 8000fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fb2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fba:	f023 0301 	bic.w	r3, r3, #1
 8000fbe:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000fd2:	bf00      	nop
     __ASM volatile ("NOP");
 8000fd4:	bf00      	nop
  __ASM volatile ("NOP");
 8000fd6:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e000      	b.n	8000fe6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000fe4:	2301      	movs	r3, #1
  }
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000edf0 	.word	0xe000edf0
 8000ff4:	e0001000 	.word	0xe0001000

08000ff8 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <delay+0x3c>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001006:	f002 fed9 	bl	8003dbc <HAL_RCC_GetHCLKFreq>
 800100a:	4602      	mov	r2, r0
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <delay+0x40>)
 800100e:	fba3 2302 	umull	r2, r3, r3, r2
 8001012:	0c9b      	lsrs	r3, r3, #18
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	fb02 f303 	mul.w	r3, r2, r3
 800101a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800101c:	bf00      	nop
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <delay+0x3c>)
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	1ad2      	subs	r2, r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	d3f8      	bcc.n	800101e <delay+0x26>
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	e0001000 	.word	0xe0001000
 8001038:	431bde83 	.word	0x431bde83

0800103c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	4619      	mov	r1, r3
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f002 f8c4 	bl	80031f8 <HAL_GPIO_Init>
}
 8001070:	bf00      	nop
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4619      	mov	r1, r3
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f002 f8a6 	bl	80031f8 <HAL_GPIO_Init>
}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <DHT_Start>:


void DHT_Start (void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80010b8:	f7ff ff6e 	bl	8000f98 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 80010bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c0:	480e      	ldr	r0, [pc, #56]	; (80010fc <DHT_Start+0x48>)
 80010c2:	f7ff ffbb 	bl	800103c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010cc:	480b      	ldr	r0, [pc, #44]	; (80010fc <DHT_Start+0x48>)
 80010ce:	f002 fa2d 	bl	800352c <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 80010d2:	f244 6050 	movw	r0, #18000	; 0x4650
 80010d6:	f7ff ff8f 	bl	8000ff8 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <DHT_Start+0x48>)
 80010e2:	f002 fa23 	bl	800352c <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 80010e6:	2014      	movs	r0, #20
 80010e8:	f7ff ff86 	bl	8000ff8 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 80010ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <DHT_Start+0x48>)
 80010f2:	f7ff ffc1 	bl	8001078 <Set_Pin_Input>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40020000 	.word	0x40020000

08001100 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	71fb      	strb	r3, [r7, #7]
	delay (40);
 800110a:	2028      	movs	r0, #40	; 0x28
 800110c:	f7ff ff74 	bl	8000ff8 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001114:	4811      	ldr	r0, [pc, #68]	; (800115c <DHT_Check_Response+0x5c>)
 8001116:	f002 f9f1 	bl	80034fc <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10f      	bne.n	8001140 <DHT_Check_Response+0x40>
	{
		delay (80);
 8001120:	2050      	movs	r0, #80	; 0x50
 8001122:	f7ff ff69 	bl	8000ff8 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001126:	f44f 7180 	mov.w	r1, #256	; 0x100
 800112a:	480c      	ldr	r0, [pc, #48]	; (800115c <DHT_Check_Response+0x5c>)
 800112c:	f002 f9e6 	bl	80034fc <HAL_GPIO_ReadPin>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <DHT_Check_Response+0x3c>
 8001136:	2301      	movs	r3, #1
 8001138:	71fb      	strb	r3, [r7, #7]
 800113a:	e001      	b.n	8001140 <DHT_Check_Response+0x40>
		else Response = -1;
 800113c:	23ff      	movs	r3, #255	; 0xff
 800113e:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8001140:	bf00      	nop
 8001142:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <DHT_Check_Response+0x5c>)
 8001148:	f002 f9d8 	bl	80034fc <HAL_GPIO_ReadPin>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f7      	bne.n	8001142 <DHT_Check_Response+0x42>

	return Response;
 8001152:	79fb      	ldrb	r3, [r7, #7]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40020000 	.word	0x40020000

08001160 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001166:	2300      	movs	r3, #0
 8001168:	71bb      	strb	r3, [r7, #6]
 800116a:	e03a      	b.n	80011e2 <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 800116c:	bf00      	nop
 800116e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001172:	4820      	ldr	r0, [pc, #128]	; (80011f4 <DHT_Read+0x94>)
 8001174:	f002 f9c2 	bl	80034fc <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f7      	beq.n	800116e <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 800117e:	2028      	movs	r0, #40	; 0x28
 8001180:	f7ff ff3a 	bl	8000ff8 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8001184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001188:	481a      	ldr	r0, [pc, #104]	; (80011f4 <DHT_Read+0x94>)
 800118a:	f002 f9b7 	bl	80034fc <HAL_GPIO_ReadPin>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d10e      	bne.n	80011b2 <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8001194:	79bb      	ldrb	r3, [r7, #6]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2201      	movs	r2, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	b25a      	sxtb	r2, r3
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	4013      	ands	r3, r2
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	e00b      	b.n	80011ca <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	f1c3 0307 	rsb	r3, r3, #7
 80011b8:	2201      	movs	r2, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	b25a      	sxtb	r2, r3
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b25b      	sxtb	r3, r3
 80011c8:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80011ca:	bf00      	nop
 80011cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d0:	4808      	ldr	r0, [pc, #32]	; (80011f4 <DHT_Read+0x94>)
 80011d2:	f002 f993 	bl	80034fc <HAL_GPIO_ReadPin>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f7      	bne.n	80011cc <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 80011dc:	79bb      	ldrb	r3, [r7, #6]
 80011de:	3301      	adds	r3, #1
 80011e0:	71bb      	strb	r3, [r7, #6]
 80011e2:	79bb      	ldrb	r3, [r7, #6]
 80011e4:	2b07      	cmp	r3, #7
 80011e6:	d9c1      	bls.n	800116c <DHT_Read+0xc>
	}
	return i;
 80011e8:	79fb      	ldrb	r3, [r7, #7]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40020000 	.word	0x40020000

080011f8 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001200:	f7ff ff58 	bl	80010b4 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001204:	f7ff ff7c 	bl	8001100 <DHT_Check_Response>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	4b23      	ldr	r3, [pc, #140]	; (800129c <DHT_GetData+0xa4>)
 800120e:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001210:	f7ff ffa6 	bl	8001160 <DHT_Read>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <DHT_GetData+0xa8>)
 800121a:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 800121c:	f7ff ffa0 	bl	8001160 <DHT_Read>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <DHT_GetData+0xac>)
 8001226:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001228:	f7ff ff9a 	bl	8001160 <DHT_Read>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <DHT_GetData+0xb0>)
 8001232:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001234:	f7ff ff94 	bl	8001160 <DHT_Read>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <DHT_GetData+0xb4>)
 800123e:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8001240:	f7ff ff8e 	bl	8001160 <DHT_Read>
 8001244:	4603      	mov	r3, r0
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <DHT_GetData+0xb8>)
 800124a:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <DHT_GetData+0xb8>)
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <DHT_GetData+0xa8>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <DHT_GetData+0xac>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4413      	add	r3, r2
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <DHT_GetData+0xb0>)
 8001260:	7812      	ldrb	r2, [r2, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a11      	ldr	r2, [pc, #68]	; (80012ac <DHT_GetData+0xb4>)
 8001266:	7812      	ldrb	r2, [r2, #0]
 8001268:	4413      	add	r3, r2
 800126a:	4299      	cmp	r1, r3
 800126c:	d111      	bne.n	8001292 <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <DHT_GetData+0xb0>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	ee07 3a90 	vmov	s15, r3
 8001276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <DHT_GetData+0xa8>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000204 	.word	0x20000204
 80012a0:	20004b38 	.word	0x20004b38
 80012a4:	20004b3a 	.word	0x20004b3a
 80012a8:	20004b39 	.word	0x20004b39
 80012ac:	20004b3e 	.word	0x20004b3e
 80012b0:	20004b3c 	.word	0x20004b3c

080012b4 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay (uint16_t time)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SetCounter(&htim2, 0);
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <delay+0x2c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GetCounter(&htim2) < time);
 80012c6:	bf00      	nop
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <delay+0x2c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d3f9      	bcc.n	80012c8 <delay+0x14>
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	20004cb8 	.word	0x20004cb8

080012e4 <HCSR04_Read>:

#define DHT11_PORT GPIOA
#define DHT11_PIN GPIO_PIN_8

void HCSR04_Read (void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80012e8:	2201      	movs	r2, #1
 80012ea:	2102      	movs	r1, #2
 80012ec:	480a      	ldr	r0, [pc, #40]	; (8001318 <HCSR04_Read+0x34>)
 80012ee:	f002 f91d 	bl	800352c <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 80012f2:	200a      	movs	r0, #10
 80012f4:	f7ff ffde 	bl	80012b4 <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);  // pull the TRIG pin low
 80012f8:	2200      	movs	r2, #0
 80012fa:	2102      	movs	r1, #2
 80012fc:	4806      	ldr	r0, [pc, #24]	; (8001318 <HCSR04_Read+0x34>)
 80012fe:	f002 f915 	bl	800352c <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HCSR04_Read+0x38>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <HCSR04_Read+0x38>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f042 0202 	orr.w	r2, r2, #2
 8001310:	60da      	str	r2, [r3, #12]
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40020000 	.word	0x40020000
 800131c:	20004cb8 	.word	0x20004cb8

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001324:	f000 fef0 	bl	8002108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001328:	f000 f87a 	bl	8001420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132c:	f000 fa32 	bl	8001794 <MX_GPIO_Init>
  MX_DMA_Init();
 8001330:	f000 fa10 	bl	8001754 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001334:	f000 f9e4 	bl	8001700 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001338:	f000 f93a 	bl	80015b0 <MX_TIM2_Init>
  MX_ADC1_Init();
 800133c:	f000 f8d8 	bl	80014f0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001340:	f000 f988 	bl	8001654 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adc_val, 2);
 8001344:	2202      	movs	r2, #2
 8001346:	4920      	ldr	r1, [pc, #128]	; (80013c8 <main+0xa8>)
 8001348:	4820      	ldr	r0, [pc, #128]	; (80013cc <main+0xac>)
 800134a:	f000 ff63 	bl	8002214 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 800134e:	4820      	ldr	r0, [pc, #128]	; (80013d0 <main+0xb0>)
 8001350:	f002 fdcf 	bl	8003ef2 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001354:	2100      	movs	r1, #0
 8001356:	481f      	ldr	r0, [pc, #124]	; (80013d4 <main+0xb4>)
 8001358:	f002 fe6a 	bl	8004030 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800135c:	f004 f9c6 	bl	80056ec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001360:	4a1d      	ldr	r2, [pc, #116]	; (80013d8 <main+0xb8>)
 8001362:	2100      	movs	r1, #0
 8001364:	481d      	ldr	r0, [pc, #116]	; (80013dc <main+0xbc>)
 8001366:	f004 fa2b 	bl	80057c0 <osThreadNew>
 800136a:	4602      	mov	r2, r0
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <main+0xc0>)
 800136e:	601a      	str	r2, [r3, #0]

  /* creation of beep */
  beepHandle = osThreadNew(beep_task, NULL, &beep_attributes);
 8001370:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <main+0xc4>)
 8001372:	2100      	movs	r1, #0
 8001374:	481c      	ldr	r0, [pc, #112]	; (80013e8 <main+0xc8>)
 8001376:	f004 fa23 	bl	80057c0 <osThreadNew>
 800137a:	4602      	mov	r2, r0
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <main+0xcc>)
 800137e:	601a      	str	r2, [r3, #0]

  /* creation of checkTmp */
  checkTmpHandle = osThreadNew(temp_thread, NULL, &checkTmp_attributes);
 8001380:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <main+0xd0>)
 8001382:	2100      	movs	r1, #0
 8001384:	481b      	ldr	r0, [pc, #108]	; (80013f4 <main+0xd4>)
 8001386:	f004 fa1b 	bl	80057c0 <osThreadNew>
 800138a:	4602      	mov	r2, r0
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <main+0xd8>)
 800138e:	601a      	str	r2, [r3, #0]

  /* creation of threshold_adjus */
  threshold_adjusHandle = osThreadNew(threshold_adjust_thread, NULL, &threshold_adjus_attributes);
 8001390:	4a1a      	ldr	r2, [pc, #104]	; (80013fc <main+0xdc>)
 8001392:	2100      	movs	r1, #0
 8001394:	481a      	ldr	r0, [pc, #104]	; (8001400 <main+0xe0>)
 8001396:	f004 fa13 	bl	80057c0 <osThreadNew>
 800139a:	4602      	mov	r2, r0
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <main+0xe4>)
 800139e:	601a      	str	r2, [r3, #0]

  /* creation of ultrasonic */
  ultrasonicHandle = osThreadNew(ultrasonic_thread, NULL, &ultrasonic_attributes);
 80013a0:	4a19      	ldr	r2, [pc, #100]	; (8001408 <main+0xe8>)
 80013a2:	2100      	movs	r1, #0
 80013a4:	4819      	ldr	r0, [pc, #100]	; (800140c <main+0xec>)
 80013a6:	f004 fa0b 	bl	80057c0 <osThreadNew>
 80013aa:	4602      	mov	r2, r0
 80013ac:	4b18      	ldr	r3, [pc, #96]	; (8001410 <main+0xf0>)
 80013ae:	601a      	str	r2, [r3, #0]

  /* creation of debug */
  debugHandle = osThreadNew(debug_task, NULL, &debug_attributes);
 80013b0:	4a18      	ldr	r2, [pc, #96]	; (8001414 <main+0xf4>)
 80013b2:	2100      	movs	r1, #0
 80013b4:	4818      	ldr	r0, [pc, #96]	; (8001418 <main+0xf8>)
 80013b6:	f004 fa03 	bl	80057c0 <osThreadNew>
 80013ba:	4602      	mov	r2, r0
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <main+0xfc>)
 80013be:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013c0:	f004 f9c8 	bl	8005754 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <main+0xa4>
 80013c6:	bf00      	nop
 80013c8:	20004b40 	.word	0x20004b40
 80013cc:	20004b9c 	.word	0x20004b9c
 80013d0:	20004b58 	.word	0x20004b58
 80013d4:	20004cb8 	.word	0x20004cb8
 80013d8:	0800bcfc 	.word	0x0800bcfc
 80013dc:	0800188d 	.word	0x0800188d
 80013e0:	20004b48 	.word	0x20004b48
 80013e4:	0800bd20 	.word	0x0800bd20
 80013e8:	080018f1 	.word	0x080018f1
 80013ec:	20004d38 	.word	0x20004d38
 80013f0:	0800bd44 	.word	0x0800bd44
 80013f4:	08001981 	.word	0x08001981
 80013f8:	20004c50 	.word	0x20004c50
 80013fc:	0800bd68 	.word	0x0800bd68
 8001400:	080019b5 	.word	0x080019b5
 8001404:	20004b4c 	.word	0x20004b4c
 8001408:	0800bd8c 	.word	0x0800bd8c
 800140c:	08001a41 	.word	0x08001a41
 8001410:	20004cb4 	.word	0x20004cb4
 8001414:	0800bdb0 	.word	0x0800bdb0
 8001418:	08001a55 	.word	0x08001a55
 800141c:	20004b54 	.word	0x20004b54

08001420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b094      	sub	sp, #80	; 0x50
 8001424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001426:	f107 0320 	add.w	r3, r7, #32
 800142a:	2230      	movs	r2, #48	; 0x30
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f006 fed1 	bl	80081d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <SystemClock_Config+0xc8>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	4a26      	ldr	r2, [pc, #152]	; (80014e8 <SystemClock_Config+0xc8>)
 800144e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001452:	6413      	str	r3, [r2, #64]	; 0x40
 8001454:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <SystemClock_Config+0xc8>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001460:	2300      	movs	r3, #0
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	4b21      	ldr	r3, [pc, #132]	; (80014ec <SystemClock_Config+0xcc>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a20      	ldr	r2, [pc, #128]	; (80014ec <SystemClock_Config+0xcc>)
 800146a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <SystemClock_Config+0xcc>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800147c:	2302      	movs	r3, #2
 800147e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001480:	2301      	movs	r3, #1
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001484:	2310      	movs	r3, #16
 8001486:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001488:	2302      	movs	r3, #2
 800148a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800148c:	2300      	movs	r3, #0
 800148e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001490:	2308      	movs	r3, #8
 8001492:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001494:	2354      	movs	r3, #84	; 0x54
 8001496:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001498:	2302      	movs	r3, #2
 800149a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800149c:	2304      	movs	r3, #4
 800149e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a0:	f107 0320 	add.w	r3, r7, #32
 80014a4:	4618      	mov	r0, r3
 80014a6:	f002 f85b 	bl	8003560 <HAL_RCC_OscConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014b0:	f000 fb2c 	bl	8001b0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b4:	230f      	movs	r3, #15
 80014b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b8:	2302      	movs	r3, #2
 80014ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	2102      	movs	r1, #2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 fab5 	bl	8003a40 <HAL_RCC_ClockConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014dc:	f000 fb16 	bl	8001b0c <Error_Handler>
  }
}
 80014e0:	bf00      	nop
 80014e2:	3750      	adds	r7, #80	; 0x50
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40007000 	.word	0x40007000

080014f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014f6:	463b      	mov	r3, r7
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001502:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <MX_ADC1_Init+0xb8>)
 8001504:	4a29      	ldr	r2, [pc, #164]	; (80015ac <MX_ADC1_Init+0xbc>)
 8001506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001508:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <MX_ADC1_Init+0xb8>)
 800150a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800150e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001510:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <MX_ADC1_Init+0xb8>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <MX_ADC1_Init+0xb8>)
 8001518:	2201      	movs	r2, #1
 800151a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <MX_ADC1_Init+0xb8>)
 800151e:	2200      	movs	r2, #0
 8001520:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001522:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <MX_ADC1_Init+0xb8>)
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800152a:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <MX_ADC1_Init+0xb8>)
 800152c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001530:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001532:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <MX_ADC1_Init+0xb8>)
 8001534:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001538:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800153a:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <MX_ADC1_Init+0xb8>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <MX_ADC1_Init+0xb8>)
 8001542:	2202      	movs	r2, #2
 8001544:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <MX_ADC1_Init+0xb8>)
 8001548:	2201      	movs	r2, #1
 800154a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <MX_ADC1_Init+0xb8>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001554:	4814      	ldr	r0, [pc, #80]	; (80015a8 <MX_ADC1_Init+0xb8>)
 8001556:	f000 fe19 	bl	800218c <HAL_ADC_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001560:	f000 fad4 	bl	8001b0c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001564:	2304      	movs	r3, #4
 8001566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001568:	2301      	movs	r3, #1
 800156a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001570:	463b      	mov	r3, r7
 8001572:	4619      	mov	r1, r3
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <MX_ADC1_Init+0xb8>)
 8001576:	f000 ff3f 	bl	80023f8 <HAL_ADC_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001580:	f000 fac4 	bl	8001b0c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001584:	2307      	movs	r3, #7
 8001586:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001588:	2302      	movs	r3, #2
 800158a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800158c:	463b      	mov	r3, r7
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_ADC1_Init+0xb8>)
 8001592:	f000 ff31 	bl	80023f8 <HAL_ADC_ConfigChannel>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800159c:	f000 fab6 	bl	8001b0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20004b9c 	.word	0x20004b9c
 80015ac:	40012000 	.word	0x40012000

080015b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b6:	f107 0310 	add.w	r3, r7, #16
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015c0:	463b      	mov	r3, r7
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015cc:	4b20      	ldr	r3, [pc, #128]	; (8001650 <MX_TIM2_Init+0xa0>)
 80015ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80015d4:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <MX_TIM2_Init+0xa0>)
 80015d6:	2247      	movs	r2, #71	; 0x47
 80015d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015da:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <MX_TIM2_Init+0xa0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <MX_TIM2_Init+0xa0>)
 80015e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <MX_TIM2_Init+0xa0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <MX_TIM2_Init+0xa0>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80015f4:	4816      	ldr	r0, [pc, #88]	; (8001650 <MX_TIM2_Init+0xa0>)
 80015f6:	f002 fcef 	bl	8003fd8 <HAL_TIM_IC_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001600:	f000 fa84 	bl	8001b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	4619      	mov	r1, r3
 8001612:	480f      	ldr	r0, [pc, #60]	; (8001650 <MX_TIM2_Init+0xa0>)
 8001614:	f003 fb34 	bl	8004c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800161e:	f000 fa75 	bl	8001b0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001622:	230a      	movs	r3, #10
 8001624:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001626:	2301      	movs	r3, #1
 8001628:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001632:	463b      	mov	r3, r7
 8001634:	2200      	movs	r2, #0
 8001636:	4619      	mov	r1, r3
 8001638:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_TIM2_Init+0xa0>)
 800163a:	f002 fec9 	bl	80043d0 <HAL_TIM_IC_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001644:	f000 fa62 	bl	8001b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20004cb8 	.word	0x20004cb8

08001654 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165a:	f107 0320 	add.w	r3, r7, #32
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]
 8001672:	615a      	str	r2, [r3, #20]
 8001674:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001676:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <MX_TIM3_Init+0xa4>)
 8001678:	4a20      	ldr	r2, [pc, #128]	; (80016fc <MX_TIM3_Init+0xa8>)
 800167a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400;
 800167c:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <MX_TIM3_Init+0xa4>)
 800167e:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001682:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MX_TIM3_Init+0xa4>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <MX_TIM3_Init+0xa4>)
 800168c:	2264      	movs	r2, #100	; 0x64
 800168e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <MX_TIM3_Init+0xa4>)
 8001692:	2200      	movs	r2, #0
 8001694:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <MX_TIM3_Init+0xa4>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800169c:	4816      	ldr	r0, [pc, #88]	; (80016f8 <MX_TIM3_Init+0xa4>)
 800169e:	f002 fc70 	bl	8003f82 <HAL_TIM_OC_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80016a8:	f000 fa30 	bl	8001b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016ac:	2320      	movs	r3, #32
 80016ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016b4:	f107 0320 	add.w	r3, r7, #32
 80016b8:	4619      	mov	r1, r3
 80016ba:	480f      	ldr	r0, [pc, #60]	; (80016f8 <MX_TIM3_Init+0xa4>)
 80016bc:	f003 fae0 	bl	8004c80 <HAL_TIMEx_MasterConfigSynchronization>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80016c6:	f000 fa21 	bl	8001b0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2200      	movs	r2, #0
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_TIM3_Init+0xa4>)
 80016e2:	f002 fe15 	bl	8004310 <HAL_TIM_OC_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80016ec:	f000 fa0e 	bl	8001b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	3728      	adds	r7, #40	; 0x28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20004b58 	.word	0x20004b58
 80016fc:	40000400 	.word	0x40000400

08001700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_USART2_UART_Init+0x4c>)
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <MX_USART2_UART_Init+0x50>)
 8001708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <MX_USART2_UART_Init+0x4c>)
 800170c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_USART2_UART_Init+0x4c>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_USART2_UART_Init+0x4c>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <MX_USART2_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_USART2_UART_Init+0x4c>)
 8001726:	220c      	movs	r2, #12
 8001728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <MX_USART2_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_USART2_UART_Init+0x4c>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_USART2_UART_Init+0x4c>)
 8001738:	f003 fb24 	bl	8004d84 <HAL_UART_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001742:	f000 f9e3 	bl	8001b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20004cf8 	.word	0x20004cf8
 8001750:	40004400 	.word	0x40004400

08001754 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <MX_DMA_Init+0x3c>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <MX_DMA_Init+0x3c>)
 8001764:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <MX_DMA_Init+0x3c>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	2038      	movs	r0, #56	; 0x38
 800177c:	f001 f9a4 	bl	8002ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001780:	2038      	movs	r0, #56	; 0x38
 8001782:	f001 f9bd 	bl	8002b00 <HAL_NVIC_EnableIRQ>

}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800

08001794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	4b33      	ldr	r3, [pc, #204]	; (800187c <MX_GPIO_Init+0xe8>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a32      	ldr	r2, [pc, #200]	; (800187c <MX_GPIO_Init+0xe8>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b30      	ldr	r3, [pc, #192]	; (800187c <MX_GPIO_Init+0xe8>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b2c      	ldr	r3, [pc, #176]	; (800187c <MX_GPIO_Init+0xe8>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a2b      	ldr	r2, [pc, #172]	; (800187c <MX_GPIO_Init+0xe8>)
 80017d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b29      	ldr	r3, [pc, #164]	; (800187c <MX_GPIO_Init+0xe8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	4b25      	ldr	r3, [pc, #148]	; (800187c <MX_GPIO_Init+0xe8>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a24      	ldr	r2, [pc, #144]	; (800187c <MX_GPIO_Init+0xe8>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b22      	ldr	r3, [pc, #136]	; (800187c <MX_GPIO_Init+0xe8>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	4b1e      	ldr	r3, [pc, #120]	; (800187c <MX_GPIO_Init+0xe8>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a1d      	ldr	r2, [pc, #116]	; (800187c <MX_GPIO_Init+0xe8>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b1b      	ldr	r3, [pc, #108]	; (800187c <MX_GPIO_Init+0xe8>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ULTRASONIC_TRIGGER_Pin|LD2_Pin|SPEAKER_Pin, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	2162      	movs	r1, #98	; 0x62
 800181e:	4818      	ldr	r0, [pc, #96]	; (8001880 <MX_GPIO_Init+0xec>)
 8001820:	f001 fe84 	bl	800352c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001824:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800182a:	4b16      	ldr	r3, [pc, #88]	; (8001884 <MX_GPIO_Init+0xf0>)
 800182c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	4813      	ldr	r0, [pc, #76]	; (8001888 <MX_GPIO_Init+0xf4>)
 800183a:	f001 fcdd 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULTRASONIC_TRIGGER_Pin LD2_Pin SPEAKER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin|LD2_Pin|SPEAKER_Pin;
 800183e:	2362      	movs	r3, #98	; 0x62
 8001840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001842:	2301      	movs	r3, #1
 8001844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4619      	mov	r1, r3
 8001854:	480a      	ldr	r0, [pc, #40]	; (8001880 <MX_GPIO_Init+0xec>)
 8001856:	f001 fccf 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800185a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800185e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001860:	2300      	movs	r3, #0
 8001862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4619      	mov	r1, r3
 800186e:	4804      	ldr	r0, [pc, #16]	; (8001880 <MX_GPIO_Init+0xec>)
 8001870:	f001 fcc2 	bl	80031f8 <HAL_GPIO_Init>

}
 8001874:	bf00      	nop
 8001876:	3728      	adds	r7, #40	; 0x28
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800
 8001880:	40020000 	.word	0x40020000
 8001884:	10210000 	.word	0x10210000
 8001888:	40020800 	.word	0x40020800

0800188c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {
	  if (state == 1) {
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <StartDefaultTask+0x5c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d11a      	bne.n	80018d2 <StartDefaultTask+0x46>
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET) {
 800189c:	2140      	movs	r1, #64	; 0x40
 800189e:	4813      	ldr	r0, [pc, #76]	; (80018ec <StartDefaultTask+0x60>)
 80018a0:	f001 fe2c 	bl	80034fc <HAL_GPIO_ReadPin>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d01c      	beq.n	80018e4 <StartDefaultTask+0x58>
			  continue;
		  }
		  osDelay(3000);
 80018aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80018ae:	f004 f82d 	bl	800590c <osDelay>
		  if (state == 0) {
 80018b2:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <StartDefaultTask+0x5c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d105      	bne.n	80018c6 <StartDefaultTask+0x3a>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2140      	movs	r1, #64	; 0x40
 80018be:	480b      	ldr	r0, [pc, #44]	; (80018ec <StartDefaultTask+0x60>)
 80018c0:	f001 fe34 	bl	800352c <HAL_GPIO_WritePin>
			  continue;
 80018c4:	e00f      	b.n	80018e6 <StartDefaultTask+0x5a>
		  }
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80018c6:	2201      	movs	r2, #1
 80018c8:	2140      	movs	r1, #64	; 0x40
 80018ca:	4808      	ldr	r0, [pc, #32]	; (80018ec <StartDefaultTask+0x60>)
 80018cc:	f001 fe2e 	bl	800352c <HAL_GPIO_WritePin>
 80018d0:	e004      	b.n	80018dc <StartDefaultTask+0x50>
	  } else {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2140      	movs	r1, #64	; 0x40
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <StartDefaultTask+0x60>)
 80018d8:	f001 fe28 	bl	800352c <HAL_GPIO_WritePin>
	  }
	  osDelay(50);
 80018dc:	2032      	movs	r0, #50	; 0x32
 80018de:	f004 f815 	bl	800590c <osDelay>
 80018e2:	e7d7      	b.n	8001894 <StartDefaultTask+0x8>
			  continue;
 80018e4:	bf00      	nop
	  if (state == 1) {
 80018e6:	e7d5      	b.n	8001894 <StartDefaultTask+0x8>
 80018e8:	20000218 	.word	0x20000218
 80018ec:	40020000 	.word	0x40020000

080018f0 <beep_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_beep_task */
void beep_task(void *argument)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN beep_task */
  /* Infinite loop */
  for(;;)
  {
	if (Temperature > 28 || Distance == 0) {
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <beep_task+0x78>)
 80018fa:	edd3 7a00 	vldr	s15, [r3]
 80018fe:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8001902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190a:	dc03      	bgt.n	8001914 <beep_task+0x24>
 800190c:	4b17      	ldr	r3, [pc, #92]	; (800196c <beep_task+0x7c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d108      	bne.n	8001926 <beep_task+0x36>
    	state = 0;
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <beep_task+0x80>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	2140      	movs	r1, #64	; 0x40
 800191e:	4815      	ldr	r0, [pc, #84]	; (8001974 <beep_task+0x84>)
 8001920:	f001 fe04 	bl	800352c <HAL_GPIO_WritePin>
		continue;
 8001924:	e01f      	b.n	8001966 <beep_task+0x76>
	}
    if (Distance >= threshold - range && Distance < threshold + 5 || Distance > 240) {
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <beep_task+0x7c>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	4619      	mov	r1, r3
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <beep_task+0x88>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <beep_task+0x8c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	4299      	cmp	r1, r3
 8001938:	db07      	blt.n	800194a <beep_task+0x5a>
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <beep_task+0x7c>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <beep_task+0x88>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	3305      	adds	r3, #5
 8001946:	429a      	cmp	r2, r3
 8001948:	db03      	blt.n	8001952 <beep_task+0x62>
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <beep_task+0x7c>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2bf0      	cmp	r3, #240	; 0xf0
 8001950:	d903      	bls.n	800195a <beep_task+0x6a>
    	state = 1;
 8001952:	4b07      	ldr	r3, [pc, #28]	; (8001970 <beep_task+0x80>)
 8001954:	2201      	movs	r2, #1
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	e002      	b.n	8001960 <beep_task+0x70>
    } else {
    	state = 0;
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <beep_task+0x80>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
    }
    osDelay(50);
 8001960:	2032      	movs	r0, #50	; 0x32
 8001962:	f003 ffd3 	bl	800590c <osDelay>
	if (Temperature > 28 || Distance == 0) {
 8001966:	e7c7      	b.n	80018f8 <beep_task+0x8>
 8001968:	2000021c 	.word	0x2000021c
 800196c:	20000215 	.word	0x20000215
 8001970:	20000218 	.word	0x20000218
 8001974:	40020000 	.word	0x40020000
 8001978:	20000000 	.word	0x20000000
 800197c:	20000004 	.word	0x20000004

08001980 <temp_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_temp_thread */
void temp_thread(void *argument)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temp_thread */
  /* Infinite loop */
  while(1)
  {
	  DHT_GetData(&DHT11_Data);
 8001988:	4807      	ldr	r0, [pc, #28]	; (80019a8 <temp_thread+0x28>)
 800198a:	f7ff fc35 	bl	80011f8 <DHT_GetData>
	  Temperature = DHT11_Data.Temperature;
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <temp_thread+0x28>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a06      	ldr	r2, [pc, #24]	; (80019ac <temp_thread+0x2c>)
 8001994:	6013      	str	r3, [r2, #0]
	  Humidity = DHT11_Data.Humidity;;
 8001996:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <temp_thread+0x28>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <temp_thread+0x30>)
 800199c:	6013      	str	r3, [r2, #0]
	  osDelay(5000);
 800199e:	f241 3088 	movw	r0, #5000	; 0x1388
 80019a2:	f003 ffb3 	bl	800590c <osDelay>
	  DHT_GetData(&DHT11_Data);
 80019a6:	e7ef      	b.n	8001988 <temp_thread+0x8>
 80019a8:	20004be4 	.word	0x20004be4
 80019ac:	2000021c 	.word	0x2000021c
 80019b0:	20000220 	.word	0x20000220

080019b4 <threshold_adjust_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_threshold_adjust_thread */
void threshold_adjust_thread(void *argument)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN threshold_adjust_thread */
  /* Infinite loop */
//  HAL_ADC_Start_DMA(&hadc1, adc_val, 2);
  while(1)
  {
	  threshold = (((float) adc_val[0]/4096) * 200 + 10);
 80019bc:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <threshold_adjust_thread+0x74>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019c8:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001a2c <threshold_adjust_thread+0x78>
 80019cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001a30 <threshold_adjust_thread+0x7c>
 80019d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e4:	ee17 2a90 	vmov	r2, s15
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <threshold_adjust_thread+0x80>)
 80019ea:	601a      	str	r2, [r3, #0]
	  range = (((float) adc_val[1]/4096) * 100 + 10);
 80019ec:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <threshold_adjust_thread+0x74>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	ee07 3a90 	vmov	s15, r3
 80019f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019f8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001a2c <threshold_adjust_thread+0x78>
 80019fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a00:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001a38 <threshold_adjust_thread+0x84>
 8001a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a08:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a14:	ee17 2a90 	vmov	r2, s15
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <threshold_adjust_thread+0x88>)
 8001a1a:	601a      	str	r2, [r3, #0]
	  osDelay(300);
 8001a1c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a20:	f003 ff74 	bl	800590c <osDelay>
	  threshold = (((float) adc_val[0]/4096) * 200 + 10);
 8001a24:	e7ca      	b.n	80019bc <threshold_adjust_thread+0x8>
 8001a26:	bf00      	nop
 8001a28:	20004b40 	.word	0x20004b40
 8001a2c:	45800000 	.word	0x45800000
 8001a30:	43480000 	.word	0x43480000
 8001a34:	20000000 	.word	0x20000000
 8001a38:	42c80000 	.word	0x42c80000
 8001a3c:	20000004 	.word	0x20000004

08001a40 <ultrasonic_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ultrasonic_thread */
void ultrasonic_thread(void *argument)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ultrasonic_thread */
  /* Infinite loop */
  for(;;)
  {
	HCSR04_Read();
 8001a48:	f7ff fc4c 	bl	80012e4 <HCSR04_Read>
	osDelay(100);
 8001a4c:	2064      	movs	r0, #100	; 0x64
 8001a4e:	f003 ff5d 	bl	800590c <osDelay>
	HCSR04_Read();
 8001a52:	e7f9      	b.n	8001a48 <ultrasonic_thread+0x8>

08001a54 <debug_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_debug_task */
void debug_task(void *argument)
{
 8001a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a56:	b0a1      	sub	sp, #132	; 0x84
 8001a58:	af04      	add	r7, sp, #16
 8001a5a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//	  sprintf(buffer, "State: %d, Dist %d, Threshold %d, Tmp %.2f, Hum %.2f \r\n", state, Distance, threshold, Temperature, Humidity);
//	  HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 500);
  	  // sprintf(buffer, "Distance: %d, Threshold: %d \r\n", Distance, threshold);
  	  sprintf(buffer, "State: %d, Dist: %d, Threshold: %d, Range, %d, Tmp: %.2d, Hum: %.2d \r\n", state, Distance, threshold, range, (int) Temperature, (int) Humidity);
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <debug_task+0x74>)
 8001a5e:	681c      	ldr	r4, [r3, #0]
 8001a60:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <debug_task+0x78>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461e      	mov	r6, r3
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <debug_task+0x7c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a1a      	ldr	r2, [pc, #104]	; (8001ad4 <debug_task+0x80>)
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	491a      	ldr	r1, [pc, #104]	; (8001ad8 <debug_task+0x84>)
 8001a70:	edd1 7a00 	vldr	s15, [r1]
 8001a74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a78:	ee17 5a90 	vmov	r5, s15
 8001a7c:	4917      	ldr	r1, [pc, #92]	; (8001adc <debug_task+0x88>)
 8001a7e:	edd1 7a00 	vldr	s15, [r1]
 8001a82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a86:	ee17 1a90 	vmov	r1, s15
 8001a8a:	f107 000c 	add.w	r0, r7, #12
 8001a8e:	9103      	str	r1, [sp, #12]
 8001a90:	9502      	str	r5, [sp, #8]
 8001a92:	9201      	str	r2, [sp, #4]
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	4633      	mov	r3, r6
 8001a98:	4622      	mov	r2, r4
 8001a9a:	4911      	ldr	r1, [pc, #68]	; (8001ae0 <debug_task+0x8c>)
 8001a9c:	f007 f9e8 	bl	8008e70 <siprintf>
  	  HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 8001aa0:	f107 030c 	add.w	r3, r7, #12
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fb9b 	bl	80001e0 <strlen>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	f107 010c 	add.w	r1, r7, #12
 8001ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab6:	480b      	ldr	r0, [pc, #44]	; (8001ae4 <debug_task+0x90>)
 8001ab8:	f003 f9b1 	bl	8004e1e <HAL_UART_Transmit>
	  osDelay(2000);
 8001abc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ac0:	f003 ff24 	bl	800590c <osDelay>
  {
 8001ac4:	e7ca      	b.n	8001a5c <debug_task+0x8>
 8001ac6:	bf00      	nop
 8001ac8:	20000218 	.word	0x20000218
 8001acc:	20000215 	.word	0x20000215
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000004 	.word	0x20000004
 8001ad8:	2000021c 	.word	0x2000021c
 8001adc:	20000220 	.word	0x20000220
 8001ae0:	0800bc9c 	.word	0x0800bc9c
 8001ae4:	20004cf8 	.word	0x20004cf8

08001ae8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d101      	bne.n	8001afe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001afa:	f000 fb27 	bl	800214c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40010000 	.word	0x40010000

08001b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	4a0f      	ldr	r2, [pc, #60]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b30:	6453      	str	r3, [r2, #68]	; 0x44
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	4a08      	ldr	r2, [pc, #32]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800

08001b6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a2f      	ldr	r2, [pc, #188]	; (8001c48 <HAL_ADC_MspInit+0xdc>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d158      	bne.n	8001c40 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <HAL_ADC_MspInit+0xe0>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	4a2d      	ldr	r2, [pc, #180]	; (8001c4c <HAL_ADC_MspInit+0xe0>)
 8001b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9e:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <HAL_ADC_MspInit+0xe0>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <HAL_ADC_MspInit+0xe0>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a26      	ldr	r2, [pc, #152]	; (8001c4c <HAL_ADC_MspInit+0xe0>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_ADC_MspInit+0xe0>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = THRESHOLD_POTENTIOMETER_Pin|GPIO_PIN_7;
 8001bc6:	2390      	movs	r3, #144	; 0x90
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	481d      	ldr	r0, [pc, #116]	; (8001c50 <HAL_ADC_MspInit+0xe4>)
 8001bda:	f001 fb0d 	bl	80031f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001be0:	4a1d      	ldr	r2, [pc, #116]	; (8001c58 <HAL_ADC_MspInit+0xec>)
 8001be2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001bf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bfc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001c00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c04:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001c08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001c10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c14:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001c18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c1c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c24:	480b      	ldr	r0, [pc, #44]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001c26:	f000 ff79 	bl	8002b1c <HAL_DMA_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001c30:	f7ff ff6c 	bl	8001b0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001c38:	639a      	str	r2, [r3, #56]	; 0x38
 8001c3a:	4a06      	ldr	r2, [pc, #24]	; (8001c54 <HAL_ADC_MspInit+0xe8>)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c40:	bf00      	nop
 8001c42:	3728      	adds	r7, #40	; 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40012000 	.word	0x40012000
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40020000 	.word	0x40020000
 8001c54:	20004c54 	.word	0x20004c54
 8001c58:	40026410 	.word	0x40026410

08001c5c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7c:	d133      	bne.n	8001ce6 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <HAL_TIM_IC_MspInit+0x94>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a1a      	ldr	r2, [pc, #104]	; (8001cf0 <HAL_TIM_IC_MspInit+0x94>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <HAL_TIM_IC_MspInit+0x94>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_TIM_IC_MspInit+0x94>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a13      	ldr	r2, [pc, #76]	; (8001cf0 <HAL_TIM_IC_MspInit+0x94>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <HAL_TIM_IC_MspInit+0x94>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4808      	ldr	r0, [pc, #32]	; (8001cf4 <HAL_TIM_IC_MspInit+0x98>)
 8001cd2:	f001 fa91 	bl	80031f8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2100      	movs	r1, #0
 8001cda:	201c      	movs	r0, #28
 8001cdc:	f000 fef4 	bl	8002ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ce0:	201c      	movs	r0, #28
 8001ce2:	f000 ff0d 	bl	8002b00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ce6:	bf00      	nop
 8001ce8:	3728      	adds	r7, #40	; 0x28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020000 	.word	0x40020000

08001cf8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <HAL_TIM_OC_MspInit+0x3c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d10d      	bne.n	8001d26 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_TIM_OC_MspInit+0x40>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	4a09      	ldr	r2, [pc, #36]	; (8001d38 <HAL_TIM_OC_MspInit+0x40>)
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <HAL_TIM_OC_MspInit+0x40>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40000400 	.word	0x40000400
 8001d38:	40023800 	.word	0x40023800

08001d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a19      	ldr	r2, [pc, #100]	; (8001dc0 <HAL_UART_MspInit+0x84>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d12b      	bne.n	8001db6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <HAL_UART_MspInit+0x88>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	4a17      	ldr	r2, [pc, #92]	; (8001dc4 <HAL_UART_MspInit+0x88>)
 8001d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_UART_MspInit+0x88>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_UART_MspInit+0x88>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a10      	ldr	r2, [pc, #64]	; (8001dc4 <HAL_UART_MspInit+0x88>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <HAL_UART_MspInit+0x88>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d96:	230c      	movs	r3, #12
 8001d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001da6:	2307      	movs	r3, #7
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <HAL_UART_MspInit+0x8c>)
 8001db2:	f001 fa21 	bl	80031f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001db6:	bf00      	nop
 8001db8:	3728      	adds	r7, #40	; 0x28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40004400 	.word	0x40004400
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020000 	.word	0x40020000

08001dcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08c      	sub	sp, #48	; 0x30
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	2019      	movs	r0, #25
 8001de2:	f000 fe71 	bl	8002ac8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001de6:	2019      	movs	r0, #25
 8001de8:	f000 fe8a 	bl	8002b00 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <HAL_InitTick+0xa0>)
 8001df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df4:	4a1d      	ldr	r2, [pc, #116]	; (8001e6c <HAL_InitTick+0xa0>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <HAL_InitTick+0xa0>)
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e08:	f107 0210 	add.w	r2, r7, #16
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4611      	mov	r1, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f002 f806 	bl	8003e24 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e18:	f001 fff0 	bl	8003dfc <HAL_RCC_GetPCLK2Freq>
 8001e1c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e20:	4a13      	ldr	r2, [pc, #76]	; (8001e70 <HAL_InitTick+0xa4>)
 8001e22:	fba2 2303 	umull	r2, r3, r2, r3
 8001e26:	0c9b      	lsrs	r3, r3, #18
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <HAL_InitTick+0xa8>)
 8001e2e:	4a12      	ldr	r2, [pc, #72]	; (8001e78 <HAL_InitTick+0xac>)
 8001e30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <HAL_InitTick+0xa8>)
 8001e34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e38:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e3a:	4a0e      	ldr	r2, [pc, #56]	; (8001e74 <HAL_InitTick+0xa8>)
 8001e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <HAL_InitTick+0xa8>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e46:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <HAL_InitTick+0xa8>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001e4c:	4809      	ldr	r0, [pc, #36]	; (8001e74 <HAL_InitTick+0xa8>)
 8001e4e:	f002 f81b 	bl	8003e88 <HAL_TIM_Base_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d104      	bne.n	8001e62 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001e58:	4806      	ldr	r0, [pc, #24]	; (8001e74 <HAL_InitTick+0xa8>)
 8001e5a:	f002 f86e 	bl	8003f3a <HAL_TIM_Base_Start_IT>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	e000      	b.n	8001e64 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3730      	adds	r7, #48	; 0x30
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	431bde83 	.word	0x431bde83
 8001e74:	20004d3c 	.word	0x20004d3c
 8001e78:	40010000 	.word	0x40010000

08001e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e8e:	e7fe      	b.n	8001e8e <HardFault_Handler+0x4>

08001e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <MemManage_Handler+0x4>

08001e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e9a:	e7fe      	b.n	8001e9a <BusFault_Handler+0x4>

08001e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <UsageFault_Handler+0x4>

08001ea2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001eb6:	f002 f923 	bl	8004100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20004d3c 	.word	0x20004d3c
 8001ec4:	00000000 	.word	0x00000000

08001ec8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b09b      	sub	sp, #108	; 0x6c
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//	if (&htim2.Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
//	{
		 char buffer[100];
		if (Is_First_Captured==0) // if the first value is not captured
 8001ece:	4b48      	ldr	r3, [pc, #288]	; (8001ff0 <TIM2_IRQHandler+0x128>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d11a      	bne.n	8001f0c <TIM2_IRQHandler+0x44>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1); // read the first value
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4846      	ldr	r0, [pc, #280]	; (8001ff4 <TIM2_IRQHandler+0x12c>)
 8001eda:	f002 fb15 	bl	8004508 <HAL_TIM_ReadCapturedValue>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	4b45      	ldr	r3, [pc, #276]	; (8001ff8 <TIM2_IRQHandler+0x130>)
 8001ee2:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001ee4:	4b42      	ldr	r3, [pc, #264]	; (8001ff0 <TIM2_IRQHandler+0x128>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001eea:	4b42      	ldr	r3, [pc, #264]	; (8001ff4 <TIM2_IRQHandler+0x12c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6a1a      	ldr	r2, [r3, #32]
 8001ef0:	4b40      	ldr	r3, [pc, #256]	; (8001ff4 <TIM2_IRQHandler+0x12c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 020a 	bic.w	r2, r2, #10
 8001ef8:	621a      	str	r2, [r3, #32]
 8001efa:	4b3e      	ldr	r3, [pc, #248]	; (8001ff4 <TIM2_IRQHandler+0x12c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6a1a      	ldr	r2, [r3, #32]
 8001f00:	4b3c      	ldr	r3, [pc, #240]	; (8001ff4 <TIM2_IRQHandler+0x12c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 0202 	orr.w	r2, r2, #2
 8001f08:	621a      	str	r2, [r3, #32]
 8001f0a:	e063      	b.n	8001fd4 <TIM2_IRQHandler+0x10c>
		}

		else if (Is_First_Captured==1)   // if the first is already captured
 8001f0c:	4b38      	ldr	r3, [pc, #224]	; (8001ff0 <TIM2_IRQHandler+0x128>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d15f      	bne.n	8001fd4 <TIM2_IRQHandler+0x10c>
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);  // read second value
 8001f14:	2100      	movs	r1, #0
 8001f16:	4837      	ldr	r0, [pc, #220]	; (8001ff4 <TIM2_IRQHandler+0x12c>)
 8001f18:	f002 faf6 	bl	8004508 <HAL_TIM_ReadCapturedValue>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	4b37      	ldr	r3, [pc, #220]	; (8001ffc <TIM2_IRQHandler+0x134>)
 8001f20:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim2, 0);  // reset the counter
 8001f22:	4b34      	ldr	r3, [pc, #208]	; (8001ff4 <TIM2_IRQHandler+0x12c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2200      	movs	r2, #0
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24

			if (IC_Val2 > IC_Val1)
 8001f2a:	4b34      	ldr	r3, [pc, #208]	; (8001ffc <TIM2_IRQHandler+0x134>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4b32      	ldr	r3, [pc, #200]	; (8001ff8 <TIM2_IRQHandler+0x130>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d907      	bls.n	8001f46 <TIM2_IRQHandler+0x7e>
			{
				Difference = IC_Val2-IC_Val1;
 8001f36:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <TIM2_IRQHandler+0x134>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ff8 <TIM2_IRQHandler+0x130>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	4a2f      	ldr	r2, [pc, #188]	; (8002000 <TIM2_IRQHandler+0x138>)
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	e00f      	b.n	8001f66 <TIM2_IRQHandler+0x9e>
			}

			else if (IC_Val1 > IC_Val2)
 8001f46:	4b2c      	ldr	r3, [pc, #176]	; (8001ff8 <TIM2_IRQHandler+0x130>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4b2c      	ldr	r3, [pc, #176]	; (8001ffc <TIM2_IRQHandler+0x134>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d909      	bls.n	8001f66 <TIM2_IRQHandler+0x9e>
			{
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001f52:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <TIM2_IRQHandler+0x134>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	4b28      	ldr	r3, [pc, #160]	; (8001ff8 <TIM2_IRQHandler+0x130>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001f60:	33ff      	adds	r3, #255	; 0xff
 8001f62:	4a27      	ldr	r2, [pc, #156]	; (8002000 <TIM2_IRQHandler+0x138>)
 8001f64:	6013      	str	r3, [r2, #0]
			}

			Distance = Difference * .034/2;
 8001f66:	4b26      	ldr	r3, [pc, #152]	; (8002000 <TIM2_IRQHandler+0x138>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fad2 	bl	8000514 <__aeabi_ui2d>
 8001f70:	a31d      	add	r3, pc, #116	; (adr r3, 8001fe8 <TIM2_IRQHandler+0x120>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe fb47 	bl	8000608 <__aeabi_dmul>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	460c      	mov	r4, r1
 8001f7e:	4618      	mov	r0, r3
 8001f80:	4621      	mov	r1, r4
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f8a:	f7fe fc67 	bl	800085c <__aeabi_ddiv>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	460c      	mov	r4, r1
 8001f92:	4618      	mov	r0, r3
 8001f94:	4621      	mov	r1, r4
 8001f96:	f7fe fe0f 	bl	8000bb8 <__aeabi_d2uiz>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4b19      	ldr	r3, [pc, #100]	; (8002004 <TIM2_IRQHandler+0x13c>)
 8001fa0:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8001fa2:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <TIM2_IRQHandler+0x128>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <TIM2_IRQHandler+0x12c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6a1a      	ldr	r2, [r3, #32]
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <TIM2_IRQHandler+0x12c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 020a 	bic.w	r2, r2, #10
 8001fb6:	621a      	str	r2, [r3, #32]
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <TIM2_IRQHandler+0x12c>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <TIM2_IRQHandler+0x12c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6a12      	ldr	r2, [r2, #32]
 8001fc2:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <TIM2_IRQHandler+0x12c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <TIM2_IRQHandler+0x12c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0202 	bic.w	r2, r2, #2
 8001fd2:	60da      	str	r2, [r3, #12]
		}
//		 sprintf(buffer, "IFC %d Val1 %d Val2 %d \r\n", Is_First_Captured, IC_Val1, IC_Val2);
//		HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
//	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fd4:	4807      	ldr	r0, [pc, #28]	; (8001ff4 <TIM2_IRQHandler+0x12c>)
 8001fd6:	f002 f893 	bl	8004100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	376c      	adds	r7, #108	; 0x6c
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd90      	pop	{r4, r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	f3af 8000 	nop.w
 8001fe8:	b020c49c 	.word	0xb020c49c
 8001fec:	3fa16872 	.word	0x3fa16872
 8001ff0:	20000214 	.word	0x20000214
 8001ff4:	20004cb8 	.word	0x20004cb8
 8001ff8:	20000208 	.word	0x20000208
 8001ffc:	2000020c 	.word	0x2000020c
 8002000:	20000210 	.word	0x20000210
 8002004:	20000215 	.word	0x20000215

08002008 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <DMA2_Stream0_IRQHandler+0x10>)
 800200e:	f000 fe8b 	bl	8002d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20004c54 	.word	0x20004c54

0800201c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002024:	4a14      	ldr	r2, [pc, #80]	; (8002078 <_sbrk+0x5c>)
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <_sbrk+0x60>)
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <_sbrk+0x64>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d102      	bne.n	800203e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <_sbrk+0x64>)
 800203a:	4a12      	ldr	r2, [pc, #72]	; (8002084 <_sbrk+0x68>)
 800203c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <_sbrk+0x64>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	429a      	cmp	r2, r3
 800204a:	d207      	bcs.n	800205c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800204c:	f006 f88e 	bl	800816c <__errno>
 8002050:	4602      	mov	r2, r0
 8002052:	230c      	movs	r3, #12
 8002054:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800205a:	e009      	b.n	8002070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <_sbrk+0x64>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <_sbrk+0x64>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	4a05      	ldr	r2, [pc, #20]	; (8002080 <_sbrk+0x64>)
 800206c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800206e:	68fb      	ldr	r3, [r7, #12]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20020000 	.word	0x20020000
 800207c:	00000400 	.word	0x00000400
 8002080:	20000224 	.word	0x20000224
 8002084:	20004dc8 	.word	0x20004dc8

08002088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <SystemInit+0x28>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002092:	4a07      	ldr	r2, [pc, #28]	; (80020b0 <SystemInit+0x28>)
 8002094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <SystemInit+0x28>)
 800209e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020a2:	609a      	str	r2, [r3, #8]
#endif
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80020b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80020ba:	e003      	b.n	80020c4 <LoopCopyDataInit>

080020bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80020be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020c2:	3104      	adds	r1, #4

080020c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80020c4:	480b      	ldr	r0, [pc, #44]	; (80020f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80020c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020cc:	d3f6      	bcc.n	80020bc <CopyDataInit>
  ldr  r2, =_sbss
 80020ce:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80020d0:	e002      	b.n	80020d8 <LoopFillZerobss>

080020d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80020d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80020d4:	f842 3b04 	str.w	r3, [r2], #4

080020d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020dc:	d3f9      	bcc.n	80020d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020de:	f7ff ffd3 	bl	8002088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020e2:	f006 f849 	bl	8008178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020e6:	f7ff f91b 	bl	8001320 <main>
  bx  lr    
 80020ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80020f0:	0800c0b8 	.word	0x0800c0b8
  ldr  r0, =_sdata
 80020f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020f8:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 80020fc:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8002100:	20004dc4 	.word	0x20004dc4

08002104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002104:	e7fe      	b.n	8002104 <ADC_IRQHandler>
	...

08002108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800210c:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <HAL_Init+0x40>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0d      	ldr	r2, [pc, #52]	; (8002148 <HAL_Init+0x40>)
 8002112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002116:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_Init+0x40>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <HAL_Init+0x40>)
 800211e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002122:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <HAL_Init+0x40>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a07      	ldr	r2, [pc, #28]	; (8002148 <HAL_Init+0x40>)
 800212a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002130:	2003      	movs	r0, #3
 8002132:	f000 fcbe 	bl	8002ab2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002136:	2000      	movs	r0, #0
 8002138:	f7ff fe48 	bl	8001dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800213c:	f7ff fcee 	bl	8001b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40023c00 	.word	0x40023c00

0800214c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_IncTick+0x20>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_IncTick+0x24>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4413      	add	r3, r2
 800215c:	4a04      	ldr	r2, [pc, #16]	; (8002170 <HAL_IncTick+0x24>)
 800215e:	6013      	str	r3, [r2, #0]
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000010 	.word	0x20000010
 8002170:	20004d7c 	.word	0x20004d7c

08002174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return uwTick;
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <HAL_GetTick+0x14>)
 800217a:	681b      	ldr	r3, [r3, #0]
}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	20004d7c 	.word	0x20004d7c

0800218c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e033      	b.n	800220a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d109      	bne.n	80021be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff fcde 	bl	8001b6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d118      	bne.n	80021fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021d2:	f023 0302 	bic.w	r3, r3, #2
 80021d6:	f043 0202 	orr.w	r2, r3, #2
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 fa3c 	bl	800265c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f023 0303 	bic.w	r3, r3, #3
 80021f2:	f043 0201 	orr.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	641a      	str	r2, [r3, #64]	; 0x40
 80021fa:	e001      	b.n	8002200 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002208:	7bfb      	ldrb	r3, [r7, #15]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_ADC_Start_DMA+0x1e>
 800222e:	2302      	movs	r3, #2
 8002230:	e0b1      	b.n	8002396 <HAL_ADC_Start_DMA+0x182>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b01      	cmp	r3, #1
 8002246:	d018      	beq.n	800227a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002258:	4b51      	ldr	r3, [pc, #324]	; (80023a0 <HAL_ADC_Start_DMA+0x18c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a51      	ldr	r2, [pc, #324]	; (80023a4 <HAL_ADC_Start_DMA+0x190>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	0c9a      	lsrs	r2, r3, #18
 8002264:	4613      	mov	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800226c:	e002      	b.n	8002274 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	3b01      	subs	r3, #1
 8002272:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f9      	bne.n	800226e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b01      	cmp	r3, #1
 8002286:	f040 8085 	bne.w	8002394 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002292:	f023 0301 	bic.w	r3, r3, #1
 8002296:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d007      	beq.n	80022bc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c8:	d106      	bne.n	80022d8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f023 0206 	bic.w	r2, r3, #6
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	645a      	str	r2, [r3, #68]	; 0x44
 80022d6:	e002      	b.n	80022de <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022e6:	4b30      	ldr	r3, [pc, #192]	; (80023a8 <HAL_ADC_Start_DMA+0x194>)
 80022e8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ee:	4a2f      	ldr	r2, [pc, #188]	; (80023ac <HAL_ADC_Start_DMA+0x198>)
 80022f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f6:	4a2e      	ldr	r2, [pc, #184]	; (80023b0 <HAL_ADC_Start_DMA+0x19c>)
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fe:	4a2d      	ldr	r2, [pc, #180]	; (80023b4 <HAL_ADC_Start_DMA+0x1a0>)
 8002300:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800230a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800231a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800232a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	334c      	adds	r3, #76	; 0x4c
 8002336:	4619      	mov	r1, r3
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f000 fc9c 	bl	8002c78 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 031f 	and.w	r3, r3, #31
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10f      	bne.n	800236c <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d11c      	bne.n	8002394 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002368:	609a      	str	r2, [r3, #8]
 800236a:	e013      	b.n	8002394 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a11      	ldr	r2, [pc, #68]	; (80023b8 <HAL_ADC_Start_DMA+0x1a4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d10e      	bne.n	8002394 <HAL_ADC_Start_DMA+0x180>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d107      	bne.n	8002394 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002392:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000008 	.word	0x20000008
 80023a4:	431bde83 	.word	0x431bde83
 80023a8:	40012300 	.word	0x40012300
 80023ac:	08002855 	.word	0x08002855
 80023b0:	0800290f 	.word	0x0800290f
 80023b4:	0800292b 	.word	0x0800292b
 80023b8:	40012000 	.word	0x40012000

080023bc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x1c>
 8002410:	2302      	movs	r3, #2
 8002412:	e113      	b.n	800263c <HAL_ADC_ConfigChannel+0x244>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b09      	cmp	r3, #9
 8002422:	d925      	bls.n	8002470 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68d9      	ldr	r1, [r3, #12]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	461a      	mov	r2, r3
 8002432:	4613      	mov	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4413      	add	r3, r2
 8002438:	3b1e      	subs	r3, #30
 800243a:	2207      	movs	r2, #7
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43da      	mvns	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	400a      	ands	r2, r1
 8002448:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68d9      	ldr	r1, [r3, #12]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	b29b      	uxth	r3, r3
 800245a:	4618      	mov	r0, r3
 800245c:	4603      	mov	r3, r0
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4403      	add	r3, r0
 8002462:	3b1e      	subs	r3, #30
 8002464:	409a      	lsls	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	e022      	b.n	80024b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6919      	ldr	r1, [r3, #16]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	461a      	mov	r2, r3
 800247e:	4613      	mov	r3, r2
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	4413      	add	r3, r2
 8002484:	2207      	movs	r2, #7
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43da      	mvns	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	400a      	ands	r2, r1
 8002492:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6919      	ldr	r1, [r3, #16]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	4618      	mov	r0, r3
 80024a6:	4603      	mov	r3, r0
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	4403      	add	r3, r0
 80024ac:	409a      	lsls	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b06      	cmp	r3, #6
 80024bc:	d824      	bhi.n	8002508 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	3b05      	subs	r3, #5
 80024d0:	221f      	movs	r2, #31
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43da      	mvns	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	400a      	ands	r2, r1
 80024de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	4618      	mov	r0, r3
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	3b05      	subs	r3, #5
 80024fa:	fa00 f203 	lsl.w	r2, r0, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	635a      	str	r2, [r3, #52]	; 0x34
 8002506:	e04c      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b0c      	cmp	r3, #12
 800250e:	d824      	bhi.n	800255a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	3b23      	subs	r3, #35	; 0x23
 8002522:	221f      	movs	r2, #31
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43da      	mvns	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	400a      	ands	r2, r1
 8002530:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	b29b      	uxth	r3, r3
 800253e:	4618      	mov	r0, r3
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	3b23      	subs	r3, #35	; 0x23
 800254c:	fa00 f203 	lsl.w	r2, r0, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
 8002558:	e023      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	3b41      	subs	r3, #65	; 0x41
 800256c:	221f      	movs	r2, #31
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	400a      	ands	r2, r1
 800257a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	b29b      	uxth	r3, r3
 8002588:	4618      	mov	r0, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	3b41      	subs	r3, #65	; 0x41
 8002596:	fa00 f203 	lsl.w	r2, r0, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025a2:	4b29      	ldr	r3, [pc, #164]	; (8002648 <HAL_ADC_ConfigChannel+0x250>)
 80025a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a28      	ldr	r2, [pc, #160]	; (800264c <HAL_ADC_ConfigChannel+0x254>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d10f      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x1d8>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b12      	cmp	r3, #18
 80025b6:	d10b      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a1d      	ldr	r2, [pc, #116]	; (800264c <HAL_ADC_ConfigChannel+0x254>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d12b      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x23a>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1c      	ldr	r2, [pc, #112]	; (8002650 <HAL_ADC_ConfigChannel+0x258>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d003      	beq.n	80025ec <HAL_ADC_ConfigChannel+0x1f4>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b11      	cmp	r3, #17
 80025ea:	d122      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a11      	ldr	r2, [pc, #68]	; (8002650 <HAL_ADC_ConfigChannel+0x258>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d111      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800260e:	4b11      	ldr	r3, [pc, #68]	; (8002654 <HAL_ADC_ConfigChannel+0x25c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a11      	ldr	r2, [pc, #68]	; (8002658 <HAL_ADC_ConfigChannel+0x260>)
 8002614:	fba2 2303 	umull	r2, r3, r2, r3
 8002618:	0c9a      	lsrs	r2, r3, #18
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002624:	e002      	b.n	800262c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	3b01      	subs	r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f9      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	40012300 	.word	0x40012300
 800264c:	40012000 	.word	0x40012000
 8002650:	10000012 	.word	0x10000012
 8002654:	20000008 	.word	0x20000008
 8002658:	431bde83 	.word	0x431bde83

0800265c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002664:	4b79      	ldr	r3, [pc, #484]	; (800284c <ADC_Init+0x1f0>)
 8002666:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	431a      	orrs	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002690:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	021a      	lsls	r2, r3, #8
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6899      	ldr	r1, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	4a58      	ldr	r2, [pc, #352]	; (8002850 <ADC_Init+0x1f4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d022      	beq.n	800273a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002702:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6899      	ldr	r1, [r3, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002724:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6899      	ldr	r1, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	e00f      	b.n	800275a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002748:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002758:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0202 	bic.w	r2, r2, #2
 8002768:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6899      	ldr	r1, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	7e1b      	ldrb	r3, [r3, #24]
 8002774:	005a      	lsls	r2, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d01b      	beq.n	80027c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002796:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6859      	ldr	r1, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	3b01      	subs	r3, #1
 80027b4:	035a      	lsls	r2, r3, #13
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	e007      	b.n	80027d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	051a      	lsls	r2, r3, #20
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002804:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6899      	ldr	r1, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002812:	025a      	lsls	r2, r3, #9
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800282a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6899      	ldr	r1, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	029a      	lsls	r2, r3, #10
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	609a      	str	r2, [r3, #8]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	40012300 	.word	0x40012300
 8002850:	0f000001 	.word	0x0f000001

08002854 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800286a:	2b00      	cmp	r3, #0
 800286c:	d13c      	bne.n	80028e8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d12b      	bne.n	80028e0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800288c:	2b00      	cmp	r3, #0
 800288e:	d127      	bne.n	80028e0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002896:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800289a:	2b00      	cmp	r3, #0
 800289c:	d006      	beq.n	80028ac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d119      	bne.n	80028e0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0220 	bic.w	r2, r2, #32
 80028ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d105      	bne.n	80028e0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	f043 0201 	orr.w	r2, r3, #1
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f7ff fd6b 	bl	80023bc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028e6:	e00e      	b.n	8002906 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f7ff fd75 	bl	80023e4 <HAL_ADC_ErrorCallback>
}
 80028fa:	e004      	b.n	8002906 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	4798      	blx	r3
}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b084      	sub	sp, #16
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f7ff fd57 	bl	80023d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002936:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2240      	movs	r2, #64	; 0x40
 800293c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	f043 0204 	orr.w	r2, r3, #4
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f7ff fd4a 	bl	80023e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002950:	bf00      	nop
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <__NVIC_SetPriorityGrouping+0x44>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002974:	4013      	ands	r3, r2
 8002976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800298a:	4a04      	ldr	r2, [pc, #16]	; (800299c <__NVIC_SetPriorityGrouping+0x44>)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	60d3      	str	r3, [r2, #12]
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a4:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <__NVIC_GetPriorityGrouping+0x18>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	0a1b      	lsrs	r3, r3, #8
 80029aa:	f003 0307 	and.w	r3, r3, #7
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	db0b      	blt.n	80029e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	f003 021f 	and.w	r2, r3, #31
 80029d4:	4907      	ldr	r1, [pc, #28]	; (80029f4 <__NVIC_EnableIRQ+0x38>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	2001      	movs	r0, #1
 80029de:	fa00 f202 	lsl.w	r2, r0, r2
 80029e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	e000e100 	.word	0xe000e100

080029f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	6039      	str	r1, [r7, #0]
 8002a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	db0a      	blt.n	8002a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	490c      	ldr	r1, [pc, #48]	; (8002a44 <__NVIC_SetPriority+0x4c>)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	0112      	lsls	r2, r2, #4
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a20:	e00a      	b.n	8002a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	4908      	ldr	r1, [pc, #32]	; (8002a48 <__NVIC_SetPriority+0x50>)
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	3b04      	subs	r3, #4
 8002a30:	0112      	lsls	r2, r2, #4
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	440b      	add	r3, r1
 8002a36:	761a      	strb	r2, [r3, #24]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	e000e100 	.word	0xe000e100
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b089      	sub	sp, #36	; 0x24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f1c3 0307 	rsb	r3, r3, #7
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	bf28      	it	cs
 8002a6a:	2304      	movcs	r3, #4
 8002a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3304      	adds	r3, #4
 8002a72:	2b06      	cmp	r3, #6
 8002a74:	d902      	bls.n	8002a7c <NVIC_EncodePriority+0x30>
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	3b03      	subs	r3, #3
 8002a7a:	e000      	b.n	8002a7e <NVIC_EncodePriority+0x32>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	401a      	ands	r2, r3
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	43d9      	mvns	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa4:	4313      	orrs	r3, r2
         );
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3724      	adds	r7, #36	; 0x24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff ff4c 	bl	8002958 <__NVIC_SetPriorityGrouping>
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ada:	f7ff ff61 	bl	80029a0 <__NVIC_GetPriorityGrouping>
 8002ade:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	68b9      	ldr	r1, [r7, #8]
 8002ae4:	6978      	ldr	r0, [r7, #20]
 8002ae6:	f7ff ffb1 	bl	8002a4c <NVIC_EncodePriority>
 8002aea:	4602      	mov	r2, r0
 8002aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff ff80 	bl	80029f8 <__NVIC_SetPriority>
}
 8002af8:	bf00      	nop
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff ff54 	bl	80029bc <__NVIC_EnableIRQ>
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b28:	f7ff fb24 	bl	8002174 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e099      	b.n	8002c6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b58:	e00f      	b.n	8002b7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b5a:	f7ff fb0b 	bl	8002174 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b05      	cmp	r3, #5
 8002b66:	d908      	bls.n	8002b7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2203      	movs	r2, #3
 8002b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e078      	b.n	8002c6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1e8      	bne.n	8002b5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	4b38      	ldr	r3, [pc, #224]	; (8002c74 <HAL_DMA_Init+0x158>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d107      	bne.n	8002be4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f023 0307 	bic.w	r3, r3, #7
 8002bfa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d117      	bne.n	8002c3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00e      	beq.n	8002c3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fa6f 	bl	8003104 <DMA_CheckFifoParam>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2240      	movs	r2, #64	; 0x40
 8002c30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e016      	b.n	8002c6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fa26 	bl	8003098 <DMA_CalcBaseAndBitshift>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c54:	223f      	movs	r2, #63	; 0x3f
 8002c56:	409a      	lsls	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	f010803f 	.word	0xf010803f

08002c78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_DMA_Start_IT+0x26>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e040      	b.n	8002d20 <HAL_DMA_Start_IT+0xa8>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d12f      	bne.n	8002d12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f9b8 	bl	800303c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd0:	223f      	movs	r2, #63	; 0x3f
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0216 	orr.w	r2, r2, #22
 8002ce6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d007      	beq.n	8002d00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0208 	orr.w	r2, r2, #8
 8002cfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0201 	orr.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	e005      	b.n	8002d1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d34:	4b92      	ldr	r3, [pc, #584]	; (8002f80 <HAL_DMA_IRQHandler+0x258>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a92      	ldr	r2, [pc, #584]	; (8002f84 <HAL_DMA_IRQHandler+0x25c>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	0a9b      	lsrs	r3, r3, #10
 8002d40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d52:	2208      	movs	r2, #8
 8002d54:	409a      	lsls	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d01a      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d013      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0204 	bic.w	r2, r2, #4
 8002d7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d80:	2208      	movs	r2, #8
 8002d82:	409a      	lsls	r2, r3
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	2201      	movs	r2, #1
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d012      	beq.n	8002dca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00b      	beq.n	8002dca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db6:	2201      	movs	r2, #1
 8002db8:	409a      	lsls	r2, r3
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc2:	f043 0202 	orr.w	r2, r3, #2
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dce:	2204      	movs	r2, #4
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d012      	beq.n	8002e00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	2204      	movs	r2, #4
 8002dee:	409a      	lsls	r2, r3
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df8:	f043 0204 	orr.w	r2, r3, #4
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e04:	2210      	movs	r2, #16
 8002e06:	409a      	lsls	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d043      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d03c      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e22:	2210      	movs	r2, #16
 8002e24:	409a      	lsls	r2, r3
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d018      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d108      	bne.n	8002e58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d024      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	4798      	blx	r3
 8002e56:	e01f      	b.n	8002e98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01b      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	4798      	blx	r3
 8002e68:	e016      	b.n	8002e98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d107      	bne.n	8002e88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0208 	bic.w	r2, r2, #8
 8002e86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	409a      	lsls	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 808e 	beq.w	8002fc6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 8086 	beq.w	8002fc6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	d136      	bne.n	8002f40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0216 	bic.w	r2, r2, #22
 8002ee0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ef0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d103      	bne.n	8002f02 <HAL_DMA_IRQHandler+0x1da>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d007      	beq.n	8002f12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0208 	bic.w	r2, r2, #8
 8002f10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f16:	223f      	movs	r2, #63	; 0x3f
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d07d      	beq.n	8003032 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	4798      	blx	r3
        }
        return;
 8002f3e:	e078      	b.n	8003032 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01c      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d108      	bne.n	8002f6e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d030      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	4798      	blx	r3
 8002f6c:	e02b      	b.n	8002fc6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d027      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
 8002f7e:	e022      	b.n	8002fc6 <HAL_DMA_IRQHandler+0x29e>
 8002f80:	20000008 	.word	0x20000008
 8002f84:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10f      	bne.n	8002fb6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0210 	bic.w	r2, r2, #16
 8002fa4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d032      	beq.n	8003034 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d022      	beq.n	8003020 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2205      	movs	r2, #5
 8002fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0201 	bic.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d307      	bcc.n	800300e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f2      	bne.n	8002ff2 <HAL_DMA_IRQHandler+0x2ca>
 800300c:	e000      	b.n	8003010 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800300e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4798      	blx	r3
 8003030:	e000      	b.n	8003034 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003032:	bf00      	nop
    }
  }
}
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop

0800303c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003058:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b40      	cmp	r3, #64	; 0x40
 8003068:	d108      	bne.n	800307c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800307a:	e007      	b.n	800308c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	60da      	str	r2, [r3, #12]
}
 800308c:	bf00      	nop
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	3b10      	subs	r3, #16
 80030a8:	4a14      	ldr	r2, [pc, #80]	; (80030fc <DMA_CalcBaseAndBitshift+0x64>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	091b      	lsrs	r3, r3, #4
 80030b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030b2:	4a13      	ldr	r2, [pc, #76]	; (8003100 <DMA_CalcBaseAndBitshift+0x68>)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4413      	add	r3, r2
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d909      	bls.n	80030da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030ce:	f023 0303 	bic.w	r3, r3, #3
 80030d2:	1d1a      	adds	r2, r3, #4
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	659a      	str	r2, [r3, #88]	; 0x58
 80030d8:	e007      	b.n	80030ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030e2:	f023 0303 	bic.w	r3, r3, #3
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	aaaaaaab 	.word	0xaaaaaaab
 8003100:	0800bdec 	.word	0x0800bdec

08003104 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d11f      	bne.n	800315e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d855      	bhi.n	80031d0 <DMA_CheckFifoParam+0xcc>
 8003124:	a201      	add	r2, pc, #4	; (adr r2, 800312c <DMA_CheckFifoParam+0x28>)
 8003126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312a:	bf00      	nop
 800312c:	0800313d 	.word	0x0800313d
 8003130:	0800314f 	.word	0x0800314f
 8003134:	0800313d 	.word	0x0800313d
 8003138:	080031d1 	.word	0x080031d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d045      	beq.n	80031d4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800314c:	e042      	b.n	80031d4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003156:	d13f      	bne.n	80031d8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800315c:	e03c      	b.n	80031d8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003166:	d121      	bne.n	80031ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b03      	cmp	r3, #3
 800316c:	d836      	bhi.n	80031dc <DMA_CheckFifoParam+0xd8>
 800316e:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <DMA_CheckFifoParam+0x70>)
 8003170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003174:	08003185 	.word	0x08003185
 8003178:	0800318b 	.word	0x0800318b
 800317c:	08003185 	.word	0x08003185
 8003180:	0800319d 	.word	0x0800319d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	73fb      	strb	r3, [r7, #15]
      break;
 8003188:	e02f      	b.n	80031ea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d024      	beq.n	80031e0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800319a:	e021      	b.n	80031e0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031a4:	d11e      	bne.n	80031e4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031aa:	e01b      	b.n	80031e4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d902      	bls.n	80031b8 <DMA_CheckFifoParam+0xb4>
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d003      	beq.n	80031be <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031b6:	e018      	b.n	80031ea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
      break;
 80031bc:	e015      	b.n	80031ea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00e      	beq.n	80031e8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
      break;
 80031ce:	e00b      	b.n	80031e8 <DMA_CheckFifoParam+0xe4>
      break;
 80031d0:	bf00      	nop
 80031d2:	e00a      	b.n	80031ea <DMA_CheckFifoParam+0xe6>
      break;
 80031d4:	bf00      	nop
 80031d6:	e008      	b.n	80031ea <DMA_CheckFifoParam+0xe6>
      break;
 80031d8:	bf00      	nop
 80031da:	e006      	b.n	80031ea <DMA_CheckFifoParam+0xe6>
      break;
 80031dc:	bf00      	nop
 80031de:	e004      	b.n	80031ea <DMA_CheckFifoParam+0xe6>
      break;
 80031e0:	bf00      	nop
 80031e2:	e002      	b.n	80031ea <DMA_CheckFifoParam+0xe6>
      break;   
 80031e4:	bf00      	nop
 80031e6:	e000      	b.n	80031ea <DMA_CheckFifoParam+0xe6>
      break;
 80031e8:	bf00      	nop
    }
  } 
  
  return status; 
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b089      	sub	sp, #36	; 0x24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800320a:	2300      	movs	r3, #0
 800320c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	e159      	b.n	80034c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003214:	2201      	movs	r2, #1
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4013      	ands	r3, r2
 8003226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	429a      	cmp	r2, r3
 800322e:	f040 8148 	bne.w	80034c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d00b      	beq.n	8003252 <HAL_GPIO_Init+0x5a>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d007      	beq.n	8003252 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003246:	2b11      	cmp	r3, #17
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b12      	cmp	r3, #18
 8003250:	d130      	bne.n	80032b4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	2203      	movs	r2, #3
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4013      	ands	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4313      	orrs	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003288:	2201      	movs	r2, #1
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	f003 0201 	and.w	r2, r3, #1
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	2203      	movs	r2, #3
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_Init+0xfc>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b12      	cmp	r3, #18
 80032f2:	d123      	bne.n	800333c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	08da      	lsrs	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3208      	adds	r2, #8
 80032fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	220f      	movs	r2, #15
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	08da      	lsrs	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3208      	adds	r2, #8
 8003336:	69b9      	ldr	r1, [r7, #24]
 8003338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	2203      	movs	r2, #3
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0203 	and.w	r2, r3, #3
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80a2 	beq.w	80034c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	4b56      	ldr	r3, [pc, #344]	; (80034dc <HAL_GPIO_Init+0x2e4>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	4a55      	ldr	r2, [pc, #340]	; (80034dc <HAL_GPIO_Init+0x2e4>)
 8003388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800338c:	6453      	str	r3, [r2, #68]	; 0x44
 800338e:	4b53      	ldr	r3, [pc, #332]	; (80034dc <HAL_GPIO_Init+0x2e4>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800339a:	4a51      	ldr	r2, [pc, #324]	; (80034e0 <HAL_GPIO_Init+0x2e8>)
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	3302      	adds	r3, #2
 80033a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	220f      	movs	r2, #15
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a48      	ldr	r2, [pc, #288]	; (80034e4 <HAL_GPIO_Init+0x2ec>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d019      	beq.n	80033fa <HAL_GPIO_Init+0x202>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a47      	ldr	r2, [pc, #284]	; (80034e8 <HAL_GPIO_Init+0x2f0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d013      	beq.n	80033f6 <HAL_GPIO_Init+0x1fe>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a46      	ldr	r2, [pc, #280]	; (80034ec <HAL_GPIO_Init+0x2f4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00d      	beq.n	80033f2 <HAL_GPIO_Init+0x1fa>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a45      	ldr	r2, [pc, #276]	; (80034f0 <HAL_GPIO_Init+0x2f8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d007      	beq.n	80033ee <HAL_GPIO_Init+0x1f6>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a44      	ldr	r2, [pc, #272]	; (80034f4 <HAL_GPIO_Init+0x2fc>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d101      	bne.n	80033ea <HAL_GPIO_Init+0x1f2>
 80033e6:	2304      	movs	r3, #4
 80033e8:	e008      	b.n	80033fc <HAL_GPIO_Init+0x204>
 80033ea:	2307      	movs	r3, #7
 80033ec:	e006      	b.n	80033fc <HAL_GPIO_Init+0x204>
 80033ee:	2303      	movs	r3, #3
 80033f0:	e004      	b.n	80033fc <HAL_GPIO_Init+0x204>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e002      	b.n	80033fc <HAL_GPIO_Init+0x204>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_GPIO_Init+0x204>
 80033fa:	2300      	movs	r3, #0
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	f002 0203 	and.w	r2, r2, #3
 8003402:	0092      	lsls	r2, r2, #2
 8003404:	4093      	lsls	r3, r2
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800340c:	4934      	ldr	r1, [pc, #208]	; (80034e0 <HAL_GPIO_Init+0x2e8>)
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	089b      	lsrs	r3, r3, #2
 8003412:	3302      	adds	r3, #2
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800341a:	4b37      	ldr	r3, [pc, #220]	; (80034f8 <HAL_GPIO_Init+0x300>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	43db      	mvns	r3, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4013      	ands	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800343e:	4a2e      	ldr	r2, [pc, #184]	; (80034f8 <HAL_GPIO_Init+0x300>)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003444:	4b2c      	ldr	r3, [pc, #176]	; (80034f8 <HAL_GPIO_Init+0x300>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003468:	4a23      	ldr	r2, [pc, #140]	; (80034f8 <HAL_GPIO_Init+0x300>)
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800346e:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <HAL_GPIO_Init+0x300>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	43db      	mvns	r3, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4013      	ands	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003492:	4a19      	ldr	r2, [pc, #100]	; (80034f8 <HAL_GPIO_Init+0x300>)
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003498:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <HAL_GPIO_Init+0x300>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034bc:	4a0e      	ldr	r2, [pc, #56]	; (80034f8 <HAL_GPIO_Init+0x300>)
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3301      	adds	r3, #1
 80034c6:	61fb      	str	r3, [r7, #28]
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	2b0f      	cmp	r3, #15
 80034cc:	f67f aea2 	bls.w	8003214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034d0:	bf00      	nop
 80034d2:	3724      	adds	r7, #36	; 0x24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	40023800 	.word	0x40023800
 80034e0:	40013800 	.word	0x40013800
 80034e4:	40020000 	.word	0x40020000
 80034e8:	40020400 	.word	0x40020400
 80034ec:	40020800 	.word	0x40020800
 80034f0:	40020c00 	.word	0x40020c00
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40013c00 	.word	0x40013c00

080034fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	887b      	ldrh	r3, [r7, #2]
 800350e:	4013      	ands	r3, r2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003514:	2301      	movs	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
 8003518:	e001      	b.n	800351e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800351a:	2300      	movs	r3, #0
 800351c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800351e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	807b      	strh	r3, [r7, #2]
 8003538:	4613      	mov	r3, r2
 800353a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800353c:	787b      	ldrb	r3, [r7, #1]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003542:	887a      	ldrh	r2, [r7, #2]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003548:	e003      	b.n	8003552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800354a:	887b      	ldrh	r3, [r7, #2]
 800354c:	041a      	lsls	r2, r3, #16
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	619a      	str	r2, [r3, #24]
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e25b      	b.n	8003a2a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d075      	beq.n	800366a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800357e:	4ba3      	ldr	r3, [pc, #652]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b04      	cmp	r3, #4
 8003588:	d00c      	beq.n	80035a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800358a:	4ba0      	ldr	r3, [pc, #640]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003592:	2b08      	cmp	r3, #8
 8003594:	d112      	bne.n	80035bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003596:	4b9d      	ldr	r3, [pc, #628]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035a2:	d10b      	bne.n	80035bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a4:	4b99      	ldr	r3, [pc, #612]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d05b      	beq.n	8003668 <HAL_RCC_OscConfig+0x108>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d157      	bne.n	8003668 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e236      	b.n	8003a2a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c4:	d106      	bne.n	80035d4 <HAL_RCC_OscConfig+0x74>
 80035c6:	4b91      	ldr	r3, [pc, #580]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a90      	ldr	r2, [pc, #576]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 80035cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	e01d      	b.n	8003610 <HAL_RCC_OscConfig+0xb0>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x98>
 80035de:	4b8b      	ldr	r3, [pc, #556]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a8a      	ldr	r2, [pc, #552]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 80035e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b88      	ldr	r3, [pc, #544]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a87      	ldr	r2, [pc, #540]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e00b      	b.n	8003610 <HAL_RCC_OscConfig+0xb0>
 80035f8:	4b84      	ldr	r3, [pc, #528]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a83      	ldr	r2, [pc, #524]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 80035fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003602:	6013      	str	r3, [r2, #0]
 8003604:	4b81      	ldr	r3, [pc, #516]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a80      	ldr	r2, [pc, #512]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 800360a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800360e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d013      	beq.n	8003640 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003618:	f7fe fdac 	bl	8002174 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003620:	f7fe fda8 	bl	8002174 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b64      	cmp	r3, #100	; 0x64
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e1fb      	b.n	8003a2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003632:	4b76      	ldr	r3, [pc, #472]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f0      	beq.n	8003620 <HAL_RCC_OscConfig+0xc0>
 800363e:	e014      	b.n	800366a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7fe fd98 	bl	8002174 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003648:	f7fe fd94 	bl	8002174 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b64      	cmp	r3, #100	; 0x64
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e1e7      	b.n	8003a2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800365a:	4b6c      	ldr	r3, [pc, #432]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0xe8>
 8003666:	e000      	b.n	800366a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d063      	beq.n	800373e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003676:	4b65      	ldr	r3, [pc, #404]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00b      	beq.n	800369a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003682:	4b62      	ldr	r3, [pc, #392]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800368a:	2b08      	cmp	r3, #8
 800368c:	d11c      	bne.n	80036c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800368e:	4b5f      	ldr	r3, [pc, #380]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d116      	bne.n	80036c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800369a:	4b5c      	ldr	r3, [pc, #368]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d005      	beq.n	80036b2 <HAL_RCC_OscConfig+0x152>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d001      	beq.n	80036b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e1bb      	b.n	8003a2a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b2:	4b56      	ldr	r3, [pc, #344]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4952      	ldr	r1, [pc, #328]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c6:	e03a      	b.n	800373e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d020      	beq.n	8003712 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036d0:	4b4f      	ldr	r3, [pc, #316]	; (8003810 <HAL_RCC_OscConfig+0x2b0>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d6:	f7fe fd4d 	bl	8002174 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036de:	f7fe fd49 	bl	8002174 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e19c      	b.n	8003a2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f0:	4b46      	ldr	r3, [pc, #280]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f0      	beq.n	80036de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fc:	4b43      	ldr	r3, [pc, #268]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4940      	ldr	r1, [pc, #256]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 800370c:	4313      	orrs	r3, r2
 800370e:	600b      	str	r3, [r1, #0]
 8003710:	e015      	b.n	800373e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003712:	4b3f      	ldr	r3, [pc, #252]	; (8003810 <HAL_RCC_OscConfig+0x2b0>)
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fe fd2c 	bl	8002174 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003720:	f7fe fd28 	bl	8002174 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e17b      	b.n	8003a2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003732:	4b36      	ldr	r3, [pc, #216]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d030      	beq.n	80037ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d016      	beq.n	8003780 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003752:	4b30      	ldr	r3, [pc, #192]	; (8003814 <HAL_RCC_OscConfig+0x2b4>)
 8003754:	2201      	movs	r2, #1
 8003756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003758:	f7fe fd0c 	bl	8002174 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003760:	f7fe fd08 	bl	8002174 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e15b      	b.n	8003a2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003772:	4b26      	ldr	r3, [pc, #152]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 8003774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f0      	beq.n	8003760 <HAL_RCC_OscConfig+0x200>
 800377e:	e015      	b.n	80037ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003780:	4b24      	ldr	r3, [pc, #144]	; (8003814 <HAL_RCC_OscConfig+0x2b4>)
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003786:	f7fe fcf5 	bl	8002174 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800378e:	f7fe fcf1 	bl	8002174 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e144      	b.n	8003a2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a0:	4b1a      	ldr	r3, [pc, #104]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 80037a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f0      	bne.n	800378e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80a0 	beq.w	80038fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ba:	2300      	movs	r3, #0
 80037bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037be:	4b13      	ldr	r3, [pc, #76]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10f      	bne.n	80037ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	4b0f      	ldr	r3, [pc, #60]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	4a0e      	ldr	r2, [pc, #56]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 80037d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d8:	6413      	str	r3, [r2, #64]	; 0x40
 80037da:	4b0c      	ldr	r3, [pc, #48]	; (800380c <HAL_RCC_OscConfig+0x2ac>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e2:	60bb      	str	r3, [r7, #8]
 80037e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e6:	2301      	movs	r3, #1
 80037e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ea:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <HAL_RCC_OscConfig+0x2b8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d121      	bne.n	800383a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f6:	4b08      	ldr	r3, [pc, #32]	; (8003818 <HAL_RCC_OscConfig+0x2b8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a07      	ldr	r2, [pc, #28]	; (8003818 <HAL_RCC_OscConfig+0x2b8>)
 80037fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003802:	f7fe fcb7 	bl	8002174 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003808:	e011      	b.n	800382e <HAL_RCC_OscConfig+0x2ce>
 800380a:	bf00      	nop
 800380c:	40023800 	.word	0x40023800
 8003810:	42470000 	.word	0x42470000
 8003814:	42470e80 	.word	0x42470e80
 8003818:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800381c:	f7fe fcaa 	bl	8002174 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e0fd      	b.n	8003a2a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382e:	4b81      	ldr	r3, [pc, #516]	; (8003a34 <HAL_RCC_OscConfig+0x4d4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f0      	beq.n	800381c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d106      	bne.n	8003850 <HAL_RCC_OscConfig+0x2f0>
 8003842:	4b7d      	ldr	r3, [pc, #500]	; (8003a38 <HAL_RCC_OscConfig+0x4d8>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003846:	4a7c      	ldr	r2, [pc, #496]	; (8003a38 <HAL_RCC_OscConfig+0x4d8>)
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	6713      	str	r3, [r2, #112]	; 0x70
 800384e:	e01c      	b.n	800388a <HAL_RCC_OscConfig+0x32a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b05      	cmp	r3, #5
 8003856:	d10c      	bne.n	8003872 <HAL_RCC_OscConfig+0x312>
 8003858:	4b77      	ldr	r3, [pc, #476]	; (8003a38 <HAL_RCC_OscConfig+0x4d8>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	4a76      	ldr	r2, [pc, #472]	; (8003a38 <HAL_RCC_OscConfig+0x4d8>)
 800385e:	f043 0304 	orr.w	r3, r3, #4
 8003862:	6713      	str	r3, [r2, #112]	; 0x70
 8003864:	4b74      	ldr	r3, [pc, #464]	; (8003a38 <HAL_RCC_OscConfig+0x4d8>)
 8003866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003868:	4a73      	ldr	r2, [pc, #460]	; (8003a38 <HAL_RCC_OscConfig+0x4d8>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6713      	str	r3, [r2, #112]	; 0x70
 8003870:	e00b      	b.n	800388a <HAL_RCC_OscConfig+0x32a>
 8003872:	4b71      	ldr	r3, [pc, #452]	; (8003a38 <HAL_RCC_OscConfig+0x4d8>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003876:	4a70      	ldr	r2, [pc, #448]	; (8003a38 <HAL_RCC_OscConfig+0x4d8>)
 8003878:	f023 0301 	bic.w	r3, r3, #1
 800387c:	6713      	str	r3, [r2, #112]	; 0x70
 800387e:	4b6e      	ldr	r3, [pc, #440]	; (8003a38 <HAL_RCC_OscConfig+0x4d8>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003882:	4a6d      	ldr	r2, [pc, #436]	; (8003a38 <HAL_RCC_OscConfig+0x4d8>)
 8003884:	f023 0304 	bic.w	r3, r3, #4
 8003888:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d015      	beq.n	80038be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003892:	f7fe fc6f 	bl	8002174 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003898:	e00a      	b.n	80038b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800389a:	f7fe fc6b 	bl	8002174 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e0bc      	b.n	8003a2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b0:	4b61      	ldr	r3, [pc, #388]	; (8003a38 <HAL_RCC_OscConfig+0x4d8>)
 80038b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0ee      	beq.n	800389a <HAL_RCC_OscConfig+0x33a>
 80038bc:	e014      	b.n	80038e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038be:	f7fe fc59 	bl	8002174 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c4:	e00a      	b.n	80038dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038c6:	f7fe fc55 	bl	8002174 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e0a6      	b.n	8003a2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038dc:	4b56      	ldr	r3, [pc, #344]	; (8003a38 <HAL_RCC_OscConfig+0x4d8>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1ee      	bne.n	80038c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d105      	bne.n	80038fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ee:	4b52      	ldr	r3, [pc, #328]	; (8003a38 <HAL_RCC_OscConfig+0x4d8>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	4a51      	ldr	r2, [pc, #324]	; (8003a38 <HAL_RCC_OscConfig+0x4d8>)
 80038f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 8092 	beq.w	8003a28 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003904:	4b4c      	ldr	r3, [pc, #304]	; (8003a38 <HAL_RCC_OscConfig+0x4d8>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	2b08      	cmp	r3, #8
 800390e:	d05c      	beq.n	80039ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	2b02      	cmp	r3, #2
 8003916:	d141      	bne.n	800399c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003918:	4b48      	ldr	r3, [pc, #288]	; (8003a3c <HAL_RCC_OscConfig+0x4dc>)
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391e:	f7fe fc29 	bl	8002174 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003926:	f7fe fc25 	bl	8002174 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e078      	b.n	8003a2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003938:	4b3f      	ldr	r3, [pc, #252]	; (8003a38 <HAL_RCC_OscConfig+0x4d8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1f0      	bne.n	8003926 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	431a      	orrs	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	019b      	lsls	r3, r3, #6
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	085b      	lsrs	r3, r3, #1
 800395c:	3b01      	subs	r3, #1
 800395e:	041b      	lsls	r3, r3, #16
 8003960:	431a      	orrs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	061b      	lsls	r3, r3, #24
 8003968:	4933      	ldr	r1, [pc, #204]	; (8003a38 <HAL_RCC_OscConfig+0x4d8>)
 800396a:	4313      	orrs	r3, r2
 800396c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800396e:	4b33      	ldr	r3, [pc, #204]	; (8003a3c <HAL_RCC_OscConfig+0x4dc>)
 8003970:	2201      	movs	r2, #1
 8003972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7fe fbfe 	bl	8002174 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800397c:	f7fe fbfa 	bl	8002174 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e04d      	b.n	8003a2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800398e:	4b2a      	ldr	r3, [pc, #168]	; (8003a38 <HAL_RCC_OscConfig+0x4d8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0f0      	beq.n	800397c <HAL_RCC_OscConfig+0x41c>
 800399a:	e045      	b.n	8003a28 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800399c:	4b27      	ldr	r3, [pc, #156]	; (8003a3c <HAL_RCC_OscConfig+0x4dc>)
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a2:	f7fe fbe7 	bl	8002174 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039aa:	f7fe fbe3 	bl	8002174 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e036      	b.n	8003a2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039bc:	4b1e      	ldr	r3, [pc, #120]	; (8003a38 <HAL_RCC_OscConfig+0x4d8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1f0      	bne.n	80039aa <HAL_RCC_OscConfig+0x44a>
 80039c8:	e02e      	b.n	8003a28 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e029      	b.n	8003a2a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039d6:	4b18      	ldr	r3, [pc, #96]	; (8003a38 <HAL_RCC_OscConfig+0x4d8>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d11c      	bne.n	8003a24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d115      	bne.n	8003a24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039fe:	4013      	ands	r3, r2
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d10d      	bne.n	8003a24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d106      	bne.n	8003a24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e000      	b.n	8003a2a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40007000 	.word	0x40007000
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	42470060 	.word	0x42470060

08003a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e0cc      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a54:	4b68      	ldr	r3, [pc, #416]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d90c      	bls.n	8003a7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a62:	4b65      	ldr	r3, [pc, #404]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6a:	4b63      	ldr	r3, [pc, #396]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d001      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0b8      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d020      	beq.n	8003aca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a94:	4b59      	ldr	r3, [pc, #356]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	4a58      	ldr	r2, [pc, #352]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aac:	4b53      	ldr	r3, [pc, #332]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	4a52      	ldr	r2, [pc, #328]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ab6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab8:	4b50      	ldr	r3, [pc, #320]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	494d      	ldr	r1, [pc, #308]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d044      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d107      	bne.n	8003aee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ade:	4b47      	ldr	r3, [pc, #284]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d119      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e07f      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d003      	beq.n	8003afe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d107      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afe:	4b3f      	ldr	r3, [pc, #252]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e06f      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0e:	4b3b      	ldr	r3, [pc, #236]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e067      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b1e:	4b37      	ldr	r3, [pc, #220]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f023 0203 	bic.w	r2, r3, #3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	4934      	ldr	r1, [pc, #208]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b30:	f7fe fb20 	bl	8002174 <HAL_GetTick>
 8003b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b36:	e00a      	b.n	8003b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b38:	f7fe fb1c 	bl	8002174 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e04f      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4e:	4b2b      	ldr	r3, [pc, #172]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 020c 	and.w	r2, r3, #12
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d1eb      	bne.n	8003b38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b60:	4b25      	ldr	r3, [pc, #148]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d20c      	bcs.n	8003b88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6e:	4b22      	ldr	r3, [pc, #136]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b76:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d001      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e032      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d008      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b94:	4b19      	ldr	r3, [pc, #100]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4916      	ldr	r1, [pc, #88]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d009      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bb2:	4b12      	ldr	r3, [pc, #72]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	490e      	ldr	r1, [pc, #56]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bc6:	f000 f821 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8003bca:	4601      	mov	r1, r0
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	4a0a      	ldr	r2, [pc, #40]	; (8003c00 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd8:	5cd3      	ldrb	r3, [r2, r3]
 8003bda:	fa21 f303 	lsr.w	r3, r1, r3
 8003bde:	4a09      	ldr	r2, [pc, #36]	; (8003c04 <HAL_RCC_ClockConfig+0x1c4>)
 8003be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <HAL_RCC_ClockConfig+0x1c8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fe f8f0 	bl	8001dcc <HAL_InitTick>

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40023c00 	.word	0x40023c00
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	0800bdd4 	.word	0x0800bdd4
 8003c04:	20000008 	.word	0x20000008
 8003c08:	2000000c 	.word	0x2000000c

08003c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	607b      	str	r3, [r7, #4]
 8003c16:	2300      	movs	r3, #0
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c22:	4b63      	ldr	r3, [pc, #396]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d007      	beq.n	8003c3e <HAL_RCC_GetSysClockFreq+0x32>
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d008      	beq.n	8003c44 <HAL_RCC_GetSysClockFreq+0x38>
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f040 80b4 	bne.w	8003da0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c38:	4b5e      	ldr	r3, [pc, #376]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003c3a:	60bb      	str	r3, [r7, #8]
       break;
 8003c3c:	e0b3      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c3e:	4b5e      	ldr	r3, [pc, #376]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003c40:	60bb      	str	r3, [r7, #8]
      break;
 8003c42:	e0b0      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c44:	4b5a      	ldr	r3, [pc, #360]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c4e:	4b58      	ldr	r3, [pc, #352]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d04a      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c5a:	4b55      	ldr	r3, [pc, #340]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	099b      	lsrs	r3, r3, #6
 8003c60:	f04f 0400 	mov.w	r4, #0
 8003c64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	ea03 0501 	and.w	r5, r3, r1
 8003c70:	ea04 0602 	and.w	r6, r4, r2
 8003c74:	4629      	mov	r1, r5
 8003c76:	4632      	mov	r2, r6
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	f04f 0400 	mov.w	r4, #0
 8003c80:	0154      	lsls	r4, r2, #5
 8003c82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c86:	014b      	lsls	r3, r1, #5
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4622      	mov	r2, r4
 8003c8c:	1b49      	subs	r1, r1, r5
 8003c8e:	eb62 0206 	sbc.w	r2, r2, r6
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	f04f 0400 	mov.w	r4, #0
 8003c9a:	0194      	lsls	r4, r2, #6
 8003c9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ca0:	018b      	lsls	r3, r1, #6
 8003ca2:	1a5b      	subs	r3, r3, r1
 8003ca4:	eb64 0402 	sbc.w	r4, r4, r2
 8003ca8:	f04f 0100 	mov.w	r1, #0
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	00e2      	lsls	r2, r4, #3
 8003cb2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003cb6:	00d9      	lsls	r1, r3, #3
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4614      	mov	r4, r2
 8003cbc:	195b      	adds	r3, r3, r5
 8003cbe:	eb44 0406 	adc.w	r4, r4, r6
 8003cc2:	f04f 0100 	mov.w	r1, #0
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	0262      	lsls	r2, r4, #9
 8003ccc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003cd0:	0259      	lsls	r1, r3, #9
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4614      	mov	r4, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	4621      	mov	r1, r4
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f04f 0400 	mov.w	r4, #0
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4623      	mov	r3, r4
 8003ce4:	f7fc ffd8 	bl	8000c98 <__aeabi_uldivmod>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	460c      	mov	r4, r1
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	e049      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cf0:	4b2f      	ldr	r3, [pc, #188]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	099b      	lsrs	r3, r3, #6
 8003cf6:	f04f 0400 	mov.w	r4, #0
 8003cfa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	ea03 0501 	and.w	r5, r3, r1
 8003d06:	ea04 0602 	and.w	r6, r4, r2
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	4632      	mov	r2, r6
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	f04f 0400 	mov.w	r4, #0
 8003d16:	0154      	lsls	r4, r2, #5
 8003d18:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d1c:	014b      	lsls	r3, r1, #5
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4622      	mov	r2, r4
 8003d22:	1b49      	subs	r1, r1, r5
 8003d24:	eb62 0206 	sbc.w	r2, r2, r6
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	f04f 0400 	mov.w	r4, #0
 8003d30:	0194      	lsls	r4, r2, #6
 8003d32:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d36:	018b      	lsls	r3, r1, #6
 8003d38:	1a5b      	subs	r3, r3, r1
 8003d3a:	eb64 0402 	sbc.w	r4, r4, r2
 8003d3e:	f04f 0100 	mov.w	r1, #0
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	00e2      	lsls	r2, r4, #3
 8003d48:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d4c:	00d9      	lsls	r1, r3, #3
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4614      	mov	r4, r2
 8003d52:	195b      	adds	r3, r3, r5
 8003d54:	eb44 0406 	adc.w	r4, r4, r6
 8003d58:	f04f 0100 	mov.w	r1, #0
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	02a2      	lsls	r2, r4, #10
 8003d62:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d66:	0299      	lsls	r1, r3, #10
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4614      	mov	r4, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	4621      	mov	r1, r4
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f04f 0400 	mov.w	r4, #0
 8003d76:	461a      	mov	r2, r3
 8003d78:	4623      	mov	r3, r4
 8003d7a:	f7fc ff8d 	bl	8000c98 <__aeabi_uldivmod>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	460c      	mov	r4, r1
 8003d82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d84:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	0c1b      	lsrs	r3, r3, #16
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	3301      	adds	r3, #1
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9c:	60bb      	str	r3, [r7, #8]
      break;
 8003d9e:	e002      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003da0:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003da2:	60bb      	str	r3, [r7, #8]
      break;
 8003da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003da6:	68bb      	ldr	r3, [r7, #8]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003db0:	40023800 	.word	0x40023800
 8003db4:	00f42400 	.word	0x00f42400
 8003db8:	007a1200 	.word	0x007a1200

08003dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc0:	4b03      	ldr	r3, [pc, #12]	; (8003dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20000008 	.word	0x20000008

08003dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dd8:	f7ff fff0 	bl	8003dbc <HAL_RCC_GetHCLKFreq>
 8003ddc:	4601      	mov	r1, r0
 8003dde:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	0a9b      	lsrs	r3, r3, #10
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	4a03      	ldr	r2, [pc, #12]	; (8003df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dea:	5cd3      	ldrb	r3, [r2, r3]
 8003dec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40023800 	.word	0x40023800
 8003df8:	0800bde4 	.word	0x0800bde4

08003dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e00:	f7ff ffdc 	bl	8003dbc <HAL_RCC_GetHCLKFreq>
 8003e04:	4601      	mov	r1, r0
 8003e06:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	0b5b      	lsrs	r3, r3, #13
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	4a03      	ldr	r2, [pc, #12]	; (8003e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e12:	5cd3      	ldrb	r3, [r2, r3]
 8003e14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	0800bde4 	.word	0x0800bde4

08003e24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	220f      	movs	r2, #15
 8003e32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e34:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <HAL_RCC_GetClockConfig+0x5c>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 0203 	and.w	r2, r3, #3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e40:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <HAL_RCC_GetClockConfig+0x5c>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e4c:	4b0c      	ldr	r3, [pc, #48]	; (8003e80 <HAL_RCC_GetClockConfig+0x5c>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e58:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <HAL_RCC_GetClockConfig+0x5c>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	08db      	lsrs	r3, r3, #3
 8003e5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e66:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <HAL_RCC_GetClockConfig+0x60>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 020f 	and.w	r2, r3, #15
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	601a      	str	r2, [r3, #0]
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800
 8003e84:	40023c00 	.word	0x40023c00

08003e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e01d      	b.n	8003ed6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f815 	bl	8003ede <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	f000 fb8a 	bl	80045e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b085      	sub	sp, #20
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2202      	movs	r2, #2
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b06      	cmp	r3, #6
 8003f12:	d007      	beq.n	8003f24 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b085      	sub	sp, #20
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0201 	orr.w	r2, r2, #1
 8003f50:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2b06      	cmp	r3, #6
 8003f62:	d007      	beq.n	8003f74 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e01d      	b.n	8003fd0 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d106      	bne.n	8003fae <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7fd fea5 	bl	8001cf8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4610      	mov	r0, r2
 8003fc2:	f000 fb0d 	bl	80045e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e01d      	b.n	8004026 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fd fe2c 	bl	8001c5c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f000 fae2 	bl	80045e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b0c      	cmp	r3, #12
 800403e:	d841      	bhi.n	80040c4 <HAL_TIM_IC_Start_IT+0x94>
 8004040:	a201      	add	r2, pc, #4	; (adr r2, 8004048 <HAL_TIM_IC_Start_IT+0x18>)
 8004042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004046:	bf00      	nop
 8004048:	0800407d 	.word	0x0800407d
 800404c:	080040c5 	.word	0x080040c5
 8004050:	080040c5 	.word	0x080040c5
 8004054:	080040c5 	.word	0x080040c5
 8004058:	0800408f 	.word	0x0800408f
 800405c:	080040c5 	.word	0x080040c5
 8004060:	080040c5 	.word	0x080040c5
 8004064:	080040c5 	.word	0x080040c5
 8004068:	080040a1 	.word	0x080040a1
 800406c:	080040c5 	.word	0x080040c5
 8004070:	080040c5 	.word	0x080040c5
 8004074:	080040c5 	.word	0x080040c5
 8004078:	080040b3 	.word	0x080040b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0202 	orr.w	r2, r2, #2
 800408a:	60da      	str	r2, [r3, #12]
      break;
 800408c:	e01b      	b.n	80040c6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0204 	orr.w	r2, r2, #4
 800409c:	60da      	str	r2, [r3, #12]
      break;
 800409e:	e012      	b.n	80040c6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0208 	orr.w	r2, r2, #8
 80040ae:	60da      	str	r2, [r3, #12]
      break;
 80040b0:	e009      	b.n	80040c6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 0210 	orr.w	r2, r2, #16
 80040c0:	60da      	str	r2, [r3, #12]
      break;
 80040c2:	e000      	b.n	80040c6 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80040c4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2201      	movs	r2, #1
 80040cc:	6839      	ldr	r1, [r7, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fdb0 	bl	8004c34 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b06      	cmp	r3, #6
 80040e4:	d007      	beq.n	80040f6 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0201 	orr.w	r2, r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b02      	cmp	r3, #2
 8004114:	d122      	bne.n	800415c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b02      	cmp	r3, #2
 8004122:	d11b      	bne.n	800415c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0202 	mvn.w	r2, #2
 800412c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fa2e 	bl	80045a4 <HAL_TIM_IC_CaptureCallback>
 8004148:	e005      	b.n	8004156 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fa20 	bl	8004590 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fa31 	bl	80045b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	2b04      	cmp	r3, #4
 8004168:	d122      	bne.n	80041b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b04      	cmp	r3, #4
 8004176:	d11b      	bne.n	80041b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0204 	mvn.w	r2, #4
 8004180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2202      	movs	r2, #2
 8004186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fa04 	bl	80045a4 <HAL_TIM_IC_CaptureCallback>
 800419c:	e005      	b.n	80041aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f9f6 	bl	8004590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fa07 	bl	80045b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d122      	bne.n	8004204 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d11b      	bne.n	8004204 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0208 	mvn.w	r2, #8
 80041d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2204      	movs	r2, #4
 80041da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f9da 	bl	80045a4 <HAL_TIM_IC_CaptureCallback>
 80041f0:	e005      	b.n	80041fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f9cc 	bl	8004590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f9dd 	bl	80045b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0310 	and.w	r3, r3, #16
 800420e:	2b10      	cmp	r3, #16
 8004210:	d122      	bne.n	8004258 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	2b10      	cmp	r3, #16
 800421e:	d11b      	bne.n	8004258 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0210 	mvn.w	r2, #16
 8004228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2208      	movs	r2, #8
 800422e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f9b0 	bl	80045a4 <HAL_TIM_IC_CaptureCallback>
 8004244:	e005      	b.n	8004252 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f9a2 	bl	8004590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f9b3 	bl	80045b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b01      	cmp	r3, #1
 8004264:	d10e      	bne.n	8004284 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b01      	cmp	r3, #1
 8004272:	d107      	bne.n	8004284 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0201 	mvn.w	r2, #1
 800427c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fd fc32 	bl	8001ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428e:	2b80      	cmp	r3, #128	; 0x80
 8004290:	d10e      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429c:	2b80      	cmp	r3, #128	; 0x80
 800429e:	d107      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fd60 	bl	8004d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ba:	2b40      	cmp	r3, #64	; 0x40
 80042bc:	d10e      	bne.n	80042dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c8:	2b40      	cmp	r3, #64	; 0x40
 80042ca:	d107      	bne.n	80042dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f978 	bl	80045cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d10e      	bne.n	8004308 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d107      	bne.n	8004308 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0220 	mvn.w	r2, #32
 8004300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fd2a 	bl	8004d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004308:	bf00      	nop
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_TIM_OC_ConfigChannel+0x1a>
 8004326:	2302      	movs	r3, #2
 8004328:	e04e      	b.n	80043c8 <HAL_TIM_OC_ConfigChannel+0xb8>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2202      	movs	r2, #2
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b0c      	cmp	r3, #12
 800433e:	d839      	bhi.n	80043b4 <HAL_TIM_OC_ConfigChannel+0xa4>
 8004340:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <HAL_TIM_OC_ConfigChannel+0x38>)
 8004342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004346:	bf00      	nop
 8004348:	0800437d 	.word	0x0800437d
 800434c:	080043b5 	.word	0x080043b5
 8004350:	080043b5 	.word	0x080043b5
 8004354:	080043b5 	.word	0x080043b5
 8004358:	0800438b 	.word	0x0800438b
 800435c:	080043b5 	.word	0x080043b5
 8004360:	080043b5 	.word	0x080043b5
 8004364:	080043b5 	.word	0x080043b5
 8004368:	08004399 	.word	0x08004399
 800436c:	080043b5 	.word	0x080043b5
 8004370:	080043b5 	.word	0x080043b5
 8004374:	080043b5 	.word	0x080043b5
 8004378:	080043a7 	.word	0x080043a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	4618      	mov	r0, r3
 8004384:	f000 f9ac 	bl	80046e0 <TIM_OC1_SetConfig>
      break;
 8004388:	e015      	b.n	80043b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68b9      	ldr	r1, [r7, #8]
 8004390:	4618      	mov	r0, r3
 8004392:	f000 fa0b 	bl	80047ac <TIM_OC2_SetConfig>
      break;
 8004396:	e00e      	b.n	80043b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68b9      	ldr	r1, [r7, #8]
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fa70 	bl	8004884 <TIM_OC3_SetConfig>
      break;
 80043a4:	e007      	b.n	80043b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68b9      	ldr	r1, [r7, #8]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fad3 	bl	8004958 <TIM_OC4_SetConfig>
      break;
 80043b2:	e000      	b.n	80043b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80043b4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_TIM_IC_ConfigChannel+0x1a>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e08a      	b.n	8004500 <HAL_TIM_IC_ConfigChannel+0x130>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2202      	movs	r2, #2
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d11b      	bne.n	8004438 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	6819      	ldr	r1, [r3, #0]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f000 faf2 	bl	80049f8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 020c 	bic.w	r2, r2, #12
 8004422:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6999      	ldr	r1, [r3, #24]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	619a      	str	r2, [r3, #24]
 8004436:	e05a      	b.n	80044ee <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b04      	cmp	r3, #4
 800443c:	d11c      	bne.n	8004478 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6818      	ldr	r0, [r3, #0]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	6819      	ldr	r1, [r3, #0]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f000 fb3b 	bl	8004ac8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699a      	ldr	r2, [r3, #24]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004460:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6999      	ldr	r1, [r3, #24]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	021a      	lsls	r2, r3, #8
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	619a      	str	r2, [r3, #24]
 8004476:	e03a      	b.n	80044ee <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b08      	cmp	r3, #8
 800447c:	d11b      	bne.n	80044b6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	6819      	ldr	r1, [r3, #0]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f000 fb58 	bl	8004b42 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69da      	ldr	r2, [r3, #28]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 020c 	bic.w	r2, r2, #12
 80044a0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69d9      	ldr	r1, [r3, #28]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	61da      	str	r2, [r3, #28]
 80044b4:	e01b      	b.n	80044ee <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	6819      	ldr	r1, [r3, #0]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f000 fb78 	bl	8004bba <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69da      	ldr	r2, [r3, #28]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80044d8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69d9      	ldr	r1, [r3, #28]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	021a      	lsls	r2, r3, #8
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b0c      	cmp	r3, #12
 800451a:	d831      	bhi.n	8004580 <HAL_TIM_ReadCapturedValue+0x78>
 800451c:	a201      	add	r2, pc, #4	; (adr r2, 8004524 <HAL_TIM_ReadCapturedValue+0x1c>)
 800451e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004522:	bf00      	nop
 8004524:	08004559 	.word	0x08004559
 8004528:	08004581 	.word	0x08004581
 800452c:	08004581 	.word	0x08004581
 8004530:	08004581 	.word	0x08004581
 8004534:	08004563 	.word	0x08004563
 8004538:	08004581 	.word	0x08004581
 800453c:	08004581 	.word	0x08004581
 8004540:	08004581 	.word	0x08004581
 8004544:	0800456d 	.word	0x0800456d
 8004548:	08004581 	.word	0x08004581
 800454c:	08004581 	.word	0x08004581
 8004550:	08004581 	.word	0x08004581
 8004554:	08004577 	.word	0x08004577
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455e:	60fb      	str	r3, [r7, #12]

      break;
 8004560:	e00f      	b.n	8004582 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004568:	60fb      	str	r3, [r7, #12]

      break;
 800456a:	e00a      	b.n	8004582 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004572:	60fb      	str	r3, [r7, #12]

      break;
 8004574:	e005      	b.n	8004582 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	60fb      	str	r3, [r7, #12]

      break;
 800457e:	e000      	b.n	8004582 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004580:	bf00      	nop
  }

  return tmpreg;
 8004582:	68fb      	ldr	r3, [r7, #12]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a34      	ldr	r2, [pc, #208]	; (80046c4 <TIM_Base_SetConfig+0xe4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00f      	beq.n	8004618 <TIM_Base_SetConfig+0x38>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fe:	d00b      	beq.n	8004618 <TIM_Base_SetConfig+0x38>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a31      	ldr	r2, [pc, #196]	; (80046c8 <TIM_Base_SetConfig+0xe8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d007      	beq.n	8004618 <TIM_Base_SetConfig+0x38>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a30      	ldr	r2, [pc, #192]	; (80046cc <TIM_Base_SetConfig+0xec>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d003      	beq.n	8004618 <TIM_Base_SetConfig+0x38>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a2f      	ldr	r2, [pc, #188]	; (80046d0 <TIM_Base_SetConfig+0xf0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d108      	bne.n	800462a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	4313      	orrs	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a25      	ldr	r2, [pc, #148]	; (80046c4 <TIM_Base_SetConfig+0xe4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d01b      	beq.n	800466a <TIM_Base_SetConfig+0x8a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004638:	d017      	beq.n	800466a <TIM_Base_SetConfig+0x8a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a22      	ldr	r2, [pc, #136]	; (80046c8 <TIM_Base_SetConfig+0xe8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d013      	beq.n	800466a <TIM_Base_SetConfig+0x8a>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a21      	ldr	r2, [pc, #132]	; (80046cc <TIM_Base_SetConfig+0xec>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d00f      	beq.n	800466a <TIM_Base_SetConfig+0x8a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a20      	ldr	r2, [pc, #128]	; (80046d0 <TIM_Base_SetConfig+0xf0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00b      	beq.n	800466a <TIM_Base_SetConfig+0x8a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a1f      	ldr	r2, [pc, #124]	; (80046d4 <TIM_Base_SetConfig+0xf4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d007      	beq.n	800466a <TIM_Base_SetConfig+0x8a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a1e      	ldr	r2, [pc, #120]	; (80046d8 <TIM_Base_SetConfig+0xf8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d003      	beq.n	800466a <TIM_Base_SetConfig+0x8a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a1d      	ldr	r2, [pc, #116]	; (80046dc <TIM_Base_SetConfig+0xfc>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d108      	bne.n	800467c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a08      	ldr	r2, [pc, #32]	; (80046c4 <TIM_Base_SetConfig+0xe4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d103      	bne.n	80046b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	615a      	str	r2, [r3, #20]
}
 80046b6:	bf00      	nop
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40010000 	.word	0x40010000
 80046c8:	40000400 	.word	0x40000400
 80046cc:	40000800 	.word	0x40000800
 80046d0:	40000c00 	.word	0x40000c00
 80046d4:	40014000 	.word	0x40014000
 80046d8:	40014400 	.word	0x40014400
 80046dc:	40014800 	.word	0x40014800

080046e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	f023 0201 	bic.w	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0303 	bic.w	r3, r3, #3
 8004716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f023 0302 	bic.w	r3, r3, #2
 8004728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a1c      	ldr	r2, [pc, #112]	; (80047a8 <TIM_OC1_SetConfig+0xc8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d10c      	bne.n	8004756 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f023 0308 	bic.w	r3, r3, #8
 8004742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f023 0304 	bic.w	r3, r3, #4
 8004754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a13      	ldr	r2, [pc, #76]	; (80047a8 <TIM_OC1_SetConfig+0xc8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d111      	bne.n	8004782 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800476c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	621a      	str	r2, [r3, #32]
}
 800479c:	bf00      	nop
 800479e:	371c      	adds	r7, #28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	40010000 	.word	0x40010000

080047ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	f023 0210 	bic.w	r2, r3, #16
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f023 0320 	bic.w	r3, r3, #32
 80047f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	4313      	orrs	r3, r2
 8004802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a1e      	ldr	r2, [pc, #120]	; (8004880 <TIM_OC2_SetConfig+0xd4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d10d      	bne.n	8004828 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004826:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a15      	ldr	r2, [pc, #84]	; (8004880 <TIM_OC2_SetConfig+0xd4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d113      	bne.n	8004858 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800483e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40010000 	.word	0x40010000

08004884 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0303 	bic.w	r3, r3, #3
 80048ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	021b      	lsls	r3, r3, #8
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a1d      	ldr	r2, [pc, #116]	; (8004954 <TIM_OC3_SetConfig+0xd0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d10d      	bne.n	80048fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a14      	ldr	r2, [pc, #80]	; (8004954 <TIM_OC3_SetConfig+0xd0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d113      	bne.n	800492e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800490c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	4313      	orrs	r3, r2
 800492c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	621a      	str	r2, [r3, #32]
}
 8004948:	bf00      	nop
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	40010000 	.word	0x40010000

08004958 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	021b      	lsls	r3, r3, #8
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4313      	orrs	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	031b      	lsls	r3, r3, #12
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a10      	ldr	r2, [pc, #64]	; (80049f4 <TIM_OC4_SetConfig+0x9c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d109      	bne.n	80049cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	019b      	lsls	r3, r3, #6
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	621a      	str	r2, [r3, #32]
}
 80049e6:	bf00      	nop
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	40010000 	.word	0x40010000

080049f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	f023 0201 	bic.w	r2, r3, #1
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4a24      	ldr	r2, [pc, #144]	; (8004ab4 <TIM_TI1_SetConfig+0xbc>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <TIM_TI1_SetConfig+0x56>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2c:	d00f      	beq.n	8004a4e <TIM_TI1_SetConfig+0x56>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4a21      	ldr	r2, [pc, #132]	; (8004ab8 <TIM_TI1_SetConfig+0xc0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00b      	beq.n	8004a4e <TIM_TI1_SetConfig+0x56>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4a20      	ldr	r2, [pc, #128]	; (8004abc <TIM_TI1_SetConfig+0xc4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d007      	beq.n	8004a4e <TIM_TI1_SetConfig+0x56>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4a1f      	ldr	r2, [pc, #124]	; (8004ac0 <TIM_TI1_SetConfig+0xc8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d003      	beq.n	8004a4e <TIM_TI1_SetConfig+0x56>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4a1e      	ldr	r2, [pc, #120]	; (8004ac4 <TIM_TI1_SetConfig+0xcc>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d101      	bne.n	8004a52 <TIM_TI1_SetConfig+0x5a>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <TIM_TI1_SetConfig+0x5c>
 8004a52:	2300      	movs	r3, #0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d008      	beq.n	8004a6a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f023 0303 	bic.w	r3, r3, #3
 8004a5e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	e003      	b.n	8004a72 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f043 0301 	orr.w	r3, r3, #1
 8004a70:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f023 030a 	bic.w	r3, r3, #10
 8004a8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f003 030a 	and.w	r3, r3, #10
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	621a      	str	r2, [r3, #32]
}
 8004aa6:	bf00      	nop
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40010000 	.word	0x40010000
 8004ab8:	40000400 	.word	0x40000400
 8004abc:	40000800 	.word	0x40000800
 8004ac0:	40000c00 	.word	0x40000c00
 8004ac4:	40014000 	.word	0x40014000

08004ac8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	f023 0210 	bic.w	r2, r3, #16
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	021b      	lsls	r3, r3, #8
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	031b      	lsls	r3, r3, #12
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b1a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	621a      	str	r2, [r3, #32]
}
 8004b36:	bf00      	nop
 8004b38:	371c      	adds	r7, #28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b087      	sub	sp, #28
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	60f8      	str	r0, [r7, #12]
 8004b4a:	60b9      	str	r1, [r7, #8]
 8004b4c:	607a      	str	r2, [r7, #4]
 8004b4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f023 0303 	bic.w	r3, r3, #3
 8004b6e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b7e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004b92:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	021b      	lsls	r3, r3, #8
 8004b98:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	621a      	str	r2, [r3, #32]
}
 8004bae:	bf00      	nop
 8004bb0:	371c      	adds	r7, #28
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b087      	sub	sp, #28
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	607a      	str	r2, [r7, #4]
 8004bc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	021b      	lsls	r3, r3, #8
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bf8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	031b      	lsls	r3, r3, #12
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004c0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	031b      	lsls	r3, r3, #12
 8004c12:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	621a      	str	r2, [r3, #32]
}
 8004c28:	bf00      	nop
 8004c2a:	371c      	adds	r7, #28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f003 031f 	and.w	r3, r3, #31
 8004c46:	2201      	movs	r2, #1
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6a1a      	ldr	r2, [r3, #32]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	43db      	mvns	r3, r3
 8004c56:	401a      	ands	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6a1a      	ldr	r2, [r3, #32]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f003 031f 	and.w	r3, r3, #31
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	621a      	str	r2, [r3, #32]
}
 8004c72:	bf00      	nop
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
	...

08004c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e050      	b.n	8004d3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a1c      	ldr	r2, [pc, #112]	; (8004d48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d018      	beq.n	8004d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce4:	d013      	beq.n	8004d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a18      	ldr	r2, [pc, #96]	; (8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00e      	beq.n	8004d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a16      	ldr	r2, [pc, #88]	; (8004d50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d009      	beq.n	8004d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a15      	ldr	r2, [pc, #84]	; (8004d54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d004      	beq.n	8004d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a13      	ldr	r2, [pc, #76]	; (8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d10c      	bne.n	8004d28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40010000 	.word	0x40010000
 8004d4c:	40000400 	.word	0x40000400
 8004d50:	40000800 	.word	0x40000800
 8004d54:	40000c00 	.word	0x40000c00
 8004d58:	40014000 	.word	0x40014000

08004d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e03f      	b.n	8004e16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fc ffc6 	bl	8001d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2224      	movs	r2, #36	; 0x24
 8004db4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f90b 	bl	8004fe4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691a      	ldr	r2, [r3, #16]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695a      	ldr	r2, [r3, #20]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b088      	sub	sp, #32
 8004e22:	af02      	add	r7, sp, #8
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	603b      	str	r3, [r7, #0]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b20      	cmp	r3, #32
 8004e3c:	f040 8083 	bne.w	8004f46 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <HAL_UART_Transmit+0x2e>
 8004e46:	88fb      	ldrh	r3, [r7, #6]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e07b      	b.n	8004f48 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_UART_Transmit+0x40>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e074      	b.n	8004f48 <HAL_UART_Transmit+0x12a>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2221      	movs	r2, #33	; 0x21
 8004e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004e74:	f7fd f97e 	bl	8002174 <HAL_GetTick>
 8004e78:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	88fa      	ldrh	r2, [r7, #6]
 8004e7e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	88fa      	ldrh	r2, [r7, #6]
 8004e84:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004e8e:	e042      	b.n	8004f16 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea6:	d122      	bne.n	8004eee <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	2180      	movs	r1, #128	; 0x80
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 f84c 	bl	8004f50 <UART_WaitOnFlagUntilTimeout>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e042      	b.n	8004f48 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ed4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d103      	bne.n	8004ee6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	3302      	adds	r3, #2
 8004ee2:	60bb      	str	r3, [r7, #8]
 8004ee4:	e017      	b.n	8004f16 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	60bb      	str	r3, [r7, #8]
 8004eec:	e013      	b.n	8004f16 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	2180      	movs	r1, #128	; 0x80
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 f829 	bl	8004f50 <UART_WaitOnFlagUntilTimeout>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e01f      	b.n	8004f48 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	60ba      	str	r2, [r7, #8]
 8004f0e:	781a      	ldrb	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1b7      	bne.n	8004e90 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2200      	movs	r2, #0
 8004f28:	2140      	movs	r1, #64	; 0x40
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 f810 	bl	8004f50 <UART_WaitOnFlagUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e006      	b.n	8004f48 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	e000      	b.n	8004f48 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004f46:	2302      	movs	r3, #2
  }
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	603b      	str	r3, [r7, #0]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f60:	e02c      	b.n	8004fbc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f68:	d028      	beq.n	8004fbc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d007      	beq.n	8004f80 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f70:	f7fd f900 	bl	8002174 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d21d      	bcs.n	8004fbc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f8e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695a      	ldr	r2, [r3, #20]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0201 	bic.w	r2, r2, #1
 8004f9e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e00f      	b.n	8004fdc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	bf0c      	ite	eq
 8004fcc:	2301      	moveq	r3, #1
 8004fce:	2300      	movne	r3, #0
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	79fb      	ldrb	r3, [r7, #7]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d0c3      	beq.n	8004f62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe8:	b085      	sub	sp, #20
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	431a      	orrs	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	4313      	orrs	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005026:	f023 030c 	bic.w	r3, r3, #12
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6812      	ldr	r2, [r2, #0]
 800502e:	68f9      	ldr	r1, [r7, #12]
 8005030:	430b      	orrs	r3, r1
 8005032:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699a      	ldr	r2, [r3, #24]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005052:	f040 818b 	bne.w	800536c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4ac1      	ldr	r2, [pc, #772]	; (8005360 <UART_SetConfig+0x37c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d005      	beq.n	800506c <UART_SetConfig+0x88>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4abf      	ldr	r2, [pc, #764]	; (8005364 <UART_SetConfig+0x380>)
 8005066:	4293      	cmp	r3, r2
 8005068:	f040 80bd 	bne.w	80051e6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800506c:	f7fe fec6 	bl	8003dfc <HAL_RCC_GetPCLK2Freq>
 8005070:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	461d      	mov	r5, r3
 8005076:	f04f 0600 	mov.w	r6, #0
 800507a:	46a8      	mov	r8, r5
 800507c:	46b1      	mov	r9, r6
 800507e:	eb18 0308 	adds.w	r3, r8, r8
 8005082:	eb49 0409 	adc.w	r4, r9, r9
 8005086:	4698      	mov	r8, r3
 8005088:	46a1      	mov	r9, r4
 800508a:	eb18 0805 	adds.w	r8, r8, r5
 800508e:	eb49 0906 	adc.w	r9, r9, r6
 8005092:	f04f 0100 	mov.w	r1, #0
 8005096:	f04f 0200 	mov.w	r2, #0
 800509a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800509e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80050a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80050a6:	4688      	mov	r8, r1
 80050a8:	4691      	mov	r9, r2
 80050aa:	eb18 0005 	adds.w	r0, r8, r5
 80050ae:	eb49 0106 	adc.w	r1, r9, r6
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	461d      	mov	r5, r3
 80050b8:	f04f 0600 	mov.w	r6, #0
 80050bc:	196b      	adds	r3, r5, r5
 80050be:	eb46 0406 	adc.w	r4, r6, r6
 80050c2:	461a      	mov	r2, r3
 80050c4:	4623      	mov	r3, r4
 80050c6:	f7fb fde7 	bl	8000c98 <__aeabi_uldivmod>
 80050ca:	4603      	mov	r3, r0
 80050cc:	460c      	mov	r4, r1
 80050ce:	461a      	mov	r2, r3
 80050d0:	4ba5      	ldr	r3, [pc, #660]	; (8005368 <UART_SetConfig+0x384>)
 80050d2:	fba3 2302 	umull	r2, r3, r3, r2
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	461d      	mov	r5, r3
 80050e0:	f04f 0600 	mov.w	r6, #0
 80050e4:	46a9      	mov	r9, r5
 80050e6:	46b2      	mov	sl, r6
 80050e8:	eb19 0309 	adds.w	r3, r9, r9
 80050ec:	eb4a 040a 	adc.w	r4, sl, sl
 80050f0:	4699      	mov	r9, r3
 80050f2:	46a2      	mov	sl, r4
 80050f4:	eb19 0905 	adds.w	r9, r9, r5
 80050f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80050fc:	f04f 0100 	mov.w	r1, #0
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005108:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800510c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005110:	4689      	mov	r9, r1
 8005112:	4692      	mov	sl, r2
 8005114:	eb19 0005 	adds.w	r0, r9, r5
 8005118:	eb4a 0106 	adc.w	r1, sl, r6
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	461d      	mov	r5, r3
 8005122:	f04f 0600 	mov.w	r6, #0
 8005126:	196b      	adds	r3, r5, r5
 8005128:	eb46 0406 	adc.w	r4, r6, r6
 800512c:	461a      	mov	r2, r3
 800512e:	4623      	mov	r3, r4
 8005130:	f7fb fdb2 	bl	8000c98 <__aeabi_uldivmod>
 8005134:	4603      	mov	r3, r0
 8005136:	460c      	mov	r4, r1
 8005138:	461a      	mov	r2, r3
 800513a:	4b8b      	ldr	r3, [pc, #556]	; (8005368 <UART_SetConfig+0x384>)
 800513c:	fba3 1302 	umull	r1, r3, r3, r2
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	2164      	movs	r1, #100	; 0x64
 8005144:	fb01 f303 	mul.w	r3, r1, r3
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	3332      	adds	r3, #50	; 0x32
 800514e:	4a86      	ldr	r2, [pc, #536]	; (8005368 <UART_SetConfig+0x384>)
 8005150:	fba2 2303 	umull	r2, r3, r2, r3
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800515c:	4498      	add	r8, r3
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	461d      	mov	r5, r3
 8005162:	f04f 0600 	mov.w	r6, #0
 8005166:	46a9      	mov	r9, r5
 8005168:	46b2      	mov	sl, r6
 800516a:	eb19 0309 	adds.w	r3, r9, r9
 800516e:	eb4a 040a 	adc.w	r4, sl, sl
 8005172:	4699      	mov	r9, r3
 8005174:	46a2      	mov	sl, r4
 8005176:	eb19 0905 	adds.w	r9, r9, r5
 800517a:	eb4a 0a06 	adc.w	sl, sl, r6
 800517e:	f04f 0100 	mov.w	r1, #0
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800518a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800518e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005192:	4689      	mov	r9, r1
 8005194:	4692      	mov	sl, r2
 8005196:	eb19 0005 	adds.w	r0, r9, r5
 800519a:	eb4a 0106 	adc.w	r1, sl, r6
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	461d      	mov	r5, r3
 80051a4:	f04f 0600 	mov.w	r6, #0
 80051a8:	196b      	adds	r3, r5, r5
 80051aa:	eb46 0406 	adc.w	r4, r6, r6
 80051ae:	461a      	mov	r2, r3
 80051b0:	4623      	mov	r3, r4
 80051b2:	f7fb fd71 	bl	8000c98 <__aeabi_uldivmod>
 80051b6:	4603      	mov	r3, r0
 80051b8:	460c      	mov	r4, r1
 80051ba:	461a      	mov	r2, r3
 80051bc:	4b6a      	ldr	r3, [pc, #424]	; (8005368 <UART_SetConfig+0x384>)
 80051be:	fba3 1302 	umull	r1, r3, r3, r2
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	2164      	movs	r1, #100	; 0x64
 80051c6:	fb01 f303 	mul.w	r3, r1, r3
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	3332      	adds	r3, #50	; 0x32
 80051d0:	4a65      	ldr	r2, [pc, #404]	; (8005368 <UART_SetConfig+0x384>)
 80051d2:	fba2 2303 	umull	r2, r3, r2, r3
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	f003 0207 	and.w	r2, r3, #7
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4442      	add	r2, r8
 80051e2:	609a      	str	r2, [r3, #8]
 80051e4:	e26f      	b.n	80056c6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051e6:	f7fe fdf5 	bl	8003dd4 <HAL_RCC_GetPCLK1Freq>
 80051ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	461d      	mov	r5, r3
 80051f0:	f04f 0600 	mov.w	r6, #0
 80051f4:	46a8      	mov	r8, r5
 80051f6:	46b1      	mov	r9, r6
 80051f8:	eb18 0308 	adds.w	r3, r8, r8
 80051fc:	eb49 0409 	adc.w	r4, r9, r9
 8005200:	4698      	mov	r8, r3
 8005202:	46a1      	mov	r9, r4
 8005204:	eb18 0805 	adds.w	r8, r8, r5
 8005208:	eb49 0906 	adc.w	r9, r9, r6
 800520c:	f04f 0100 	mov.w	r1, #0
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005218:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800521c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005220:	4688      	mov	r8, r1
 8005222:	4691      	mov	r9, r2
 8005224:	eb18 0005 	adds.w	r0, r8, r5
 8005228:	eb49 0106 	adc.w	r1, r9, r6
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	461d      	mov	r5, r3
 8005232:	f04f 0600 	mov.w	r6, #0
 8005236:	196b      	adds	r3, r5, r5
 8005238:	eb46 0406 	adc.w	r4, r6, r6
 800523c:	461a      	mov	r2, r3
 800523e:	4623      	mov	r3, r4
 8005240:	f7fb fd2a 	bl	8000c98 <__aeabi_uldivmod>
 8005244:	4603      	mov	r3, r0
 8005246:	460c      	mov	r4, r1
 8005248:	461a      	mov	r2, r3
 800524a:	4b47      	ldr	r3, [pc, #284]	; (8005368 <UART_SetConfig+0x384>)
 800524c:	fba3 2302 	umull	r2, r3, r3, r2
 8005250:	095b      	lsrs	r3, r3, #5
 8005252:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	461d      	mov	r5, r3
 800525a:	f04f 0600 	mov.w	r6, #0
 800525e:	46a9      	mov	r9, r5
 8005260:	46b2      	mov	sl, r6
 8005262:	eb19 0309 	adds.w	r3, r9, r9
 8005266:	eb4a 040a 	adc.w	r4, sl, sl
 800526a:	4699      	mov	r9, r3
 800526c:	46a2      	mov	sl, r4
 800526e:	eb19 0905 	adds.w	r9, r9, r5
 8005272:	eb4a 0a06 	adc.w	sl, sl, r6
 8005276:	f04f 0100 	mov.w	r1, #0
 800527a:	f04f 0200 	mov.w	r2, #0
 800527e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005282:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005286:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800528a:	4689      	mov	r9, r1
 800528c:	4692      	mov	sl, r2
 800528e:	eb19 0005 	adds.w	r0, r9, r5
 8005292:	eb4a 0106 	adc.w	r1, sl, r6
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	461d      	mov	r5, r3
 800529c:	f04f 0600 	mov.w	r6, #0
 80052a0:	196b      	adds	r3, r5, r5
 80052a2:	eb46 0406 	adc.w	r4, r6, r6
 80052a6:	461a      	mov	r2, r3
 80052a8:	4623      	mov	r3, r4
 80052aa:	f7fb fcf5 	bl	8000c98 <__aeabi_uldivmod>
 80052ae:	4603      	mov	r3, r0
 80052b0:	460c      	mov	r4, r1
 80052b2:	461a      	mov	r2, r3
 80052b4:	4b2c      	ldr	r3, [pc, #176]	; (8005368 <UART_SetConfig+0x384>)
 80052b6:	fba3 1302 	umull	r1, r3, r3, r2
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	2164      	movs	r1, #100	; 0x64
 80052be:	fb01 f303 	mul.w	r3, r1, r3
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	3332      	adds	r3, #50	; 0x32
 80052c8:	4a27      	ldr	r2, [pc, #156]	; (8005368 <UART_SetConfig+0x384>)
 80052ca:	fba2 2303 	umull	r2, r3, r2, r3
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052d6:	4498      	add	r8, r3
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	461d      	mov	r5, r3
 80052dc:	f04f 0600 	mov.w	r6, #0
 80052e0:	46a9      	mov	r9, r5
 80052e2:	46b2      	mov	sl, r6
 80052e4:	eb19 0309 	adds.w	r3, r9, r9
 80052e8:	eb4a 040a 	adc.w	r4, sl, sl
 80052ec:	4699      	mov	r9, r3
 80052ee:	46a2      	mov	sl, r4
 80052f0:	eb19 0905 	adds.w	r9, r9, r5
 80052f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80052f8:	f04f 0100 	mov.w	r1, #0
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005304:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005308:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800530c:	4689      	mov	r9, r1
 800530e:	4692      	mov	sl, r2
 8005310:	eb19 0005 	adds.w	r0, r9, r5
 8005314:	eb4a 0106 	adc.w	r1, sl, r6
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	461d      	mov	r5, r3
 800531e:	f04f 0600 	mov.w	r6, #0
 8005322:	196b      	adds	r3, r5, r5
 8005324:	eb46 0406 	adc.w	r4, r6, r6
 8005328:	461a      	mov	r2, r3
 800532a:	4623      	mov	r3, r4
 800532c:	f7fb fcb4 	bl	8000c98 <__aeabi_uldivmod>
 8005330:	4603      	mov	r3, r0
 8005332:	460c      	mov	r4, r1
 8005334:	461a      	mov	r2, r3
 8005336:	4b0c      	ldr	r3, [pc, #48]	; (8005368 <UART_SetConfig+0x384>)
 8005338:	fba3 1302 	umull	r1, r3, r3, r2
 800533c:	095b      	lsrs	r3, r3, #5
 800533e:	2164      	movs	r1, #100	; 0x64
 8005340:	fb01 f303 	mul.w	r3, r1, r3
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	3332      	adds	r3, #50	; 0x32
 800534a:	4a07      	ldr	r2, [pc, #28]	; (8005368 <UART_SetConfig+0x384>)
 800534c:	fba2 2303 	umull	r2, r3, r2, r3
 8005350:	095b      	lsrs	r3, r3, #5
 8005352:	f003 0207 	and.w	r2, r3, #7
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4442      	add	r2, r8
 800535c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800535e:	e1b2      	b.n	80056c6 <UART_SetConfig+0x6e2>
 8005360:	40011000 	.word	0x40011000
 8005364:	40011400 	.word	0x40011400
 8005368:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4ad7      	ldr	r2, [pc, #860]	; (80056d0 <UART_SetConfig+0x6ec>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d005      	beq.n	8005382 <UART_SetConfig+0x39e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4ad6      	ldr	r2, [pc, #856]	; (80056d4 <UART_SetConfig+0x6f0>)
 800537c:	4293      	cmp	r3, r2
 800537e:	f040 80d1 	bne.w	8005524 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005382:	f7fe fd3b 	bl	8003dfc <HAL_RCC_GetPCLK2Freq>
 8005386:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	469a      	mov	sl, r3
 800538c:	f04f 0b00 	mov.w	fp, #0
 8005390:	46d0      	mov	r8, sl
 8005392:	46d9      	mov	r9, fp
 8005394:	eb18 0308 	adds.w	r3, r8, r8
 8005398:	eb49 0409 	adc.w	r4, r9, r9
 800539c:	4698      	mov	r8, r3
 800539e:	46a1      	mov	r9, r4
 80053a0:	eb18 080a 	adds.w	r8, r8, sl
 80053a4:	eb49 090b 	adc.w	r9, r9, fp
 80053a8:	f04f 0100 	mov.w	r1, #0
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80053b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80053b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80053bc:	4688      	mov	r8, r1
 80053be:	4691      	mov	r9, r2
 80053c0:	eb1a 0508 	adds.w	r5, sl, r8
 80053c4:	eb4b 0609 	adc.w	r6, fp, r9
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	4619      	mov	r1, r3
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	f04f 0400 	mov.w	r4, #0
 80053da:	0094      	lsls	r4, r2, #2
 80053dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053e0:	008b      	lsls	r3, r1, #2
 80053e2:	461a      	mov	r2, r3
 80053e4:	4623      	mov	r3, r4
 80053e6:	4628      	mov	r0, r5
 80053e8:	4631      	mov	r1, r6
 80053ea:	f7fb fc55 	bl	8000c98 <__aeabi_uldivmod>
 80053ee:	4603      	mov	r3, r0
 80053f0:	460c      	mov	r4, r1
 80053f2:	461a      	mov	r2, r3
 80053f4:	4bb8      	ldr	r3, [pc, #736]	; (80056d8 <UART_SetConfig+0x6f4>)
 80053f6:	fba3 2302 	umull	r2, r3, r3, r2
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	469b      	mov	fp, r3
 8005404:	f04f 0c00 	mov.w	ip, #0
 8005408:	46d9      	mov	r9, fp
 800540a:	46e2      	mov	sl, ip
 800540c:	eb19 0309 	adds.w	r3, r9, r9
 8005410:	eb4a 040a 	adc.w	r4, sl, sl
 8005414:	4699      	mov	r9, r3
 8005416:	46a2      	mov	sl, r4
 8005418:	eb19 090b 	adds.w	r9, r9, fp
 800541c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005420:	f04f 0100 	mov.w	r1, #0
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800542c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005430:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005434:	4689      	mov	r9, r1
 8005436:	4692      	mov	sl, r2
 8005438:	eb1b 0509 	adds.w	r5, fp, r9
 800543c:	eb4c 060a 	adc.w	r6, ip, sl
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	4619      	mov	r1, r3
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	f04f 0300 	mov.w	r3, #0
 800544e:	f04f 0400 	mov.w	r4, #0
 8005452:	0094      	lsls	r4, r2, #2
 8005454:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005458:	008b      	lsls	r3, r1, #2
 800545a:	461a      	mov	r2, r3
 800545c:	4623      	mov	r3, r4
 800545e:	4628      	mov	r0, r5
 8005460:	4631      	mov	r1, r6
 8005462:	f7fb fc19 	bl	8000c98 <__aeabi_uldivmod>
 8005466:	4603      	mov	r3, r0
 8005468:	460c      	mov	r4, r1
 800546a:	461a      	mov	r2, r3
 800546c:	4b9a      	ldr	r3, [pc, #616]	; (80056d8 <UART_SetConfig+0x6f4>)
 800546e:	fba3 1302 	umull	r1, r3, r3, r2
 8005472:	095b      	lsrs	r3, r3, #5
 8005474:	2164      	movs	r1, #100	; 0x64
 8005476:	fb01 f303 	mul.w	r3, r1, r3
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	3332      	adds	r3, #50	; 0x32
 8005480:	4a95      	ldr	r2, [pc, #596]	; (80056d8 <UART_SetConfig+0x6f4>)
 8005482:	fba2 2303 	umull	r2, r3, r2, r3
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800548c:	4498      	add	r8, r3
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	469b      	mov	fp, r3
 8005492:	f04f 0c00 	mov.w	ip, #0
 8005496:	46d9      	mov	r9, fp
 8005498:	46e2      	mov	sl, ip
 800549a:	eb19 0309 	adds.w	r3, r9, r9
 800549e:	eb4a 040a 	adc.w	r4, sl, sl
 80054a2:	4699      	mov	r9, r3
 80054a4:	46a2      	mov	sl, r4
 80054a6:	eb19 090b 	adds.w	r9, r9, fp
 80054aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80054ae:	f04f 0100 	mov.w	r1, #0
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054c2:	4689      	mov	r9, r1
 80054c4:	4692      	mov	sl, r2
 80054c6:	eb1b 0509 	adds.w	r5, fp, r9
 80054ca:	eb4c 060a 	adc.w	r6, ip, sl
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	4619      	mov	r1, r3
 80054d4:	f04f 0200 	mov.w	r2, #0
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	f04f 0400 	mov.w	r4, #0
 80054e0:	0094      	lsls	r4, r2, #2
 80054e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054e6:	008b      	lsls	r3, r1, #2
 80054e8:	461a      	mov	r2, r3
 80054ea:	4623      	mov	r3, r4
 80054ec:	4628      	mov	r0, r5
 80054ee:	4631      	mov	r1, r6
 80054f0:	f7fb fbd2 	bl	8000c98 <__aeabi_uldivmod>
 80054f4:	4603      	mov	r3, r0
 80054f6:	460c      	mov	r4, r1
 80054f8:	461a      	mov	r2, r3
 80054fa:	4b77      	ldr	r3, [pc, #476]	; (80056d8 <UART_SetConfig+0x6f4>)
 80054fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005500:	095b      	lsrs	r3, r3, #5
 8005502:	2164      	movs	r1, #100	; 0x64
 8005504:	fb01 f303 	mul.w	r3, r1, r3
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	3332      	adds	r3, #50	; 0x32
 800550e:	4a72      	ldr	r2, [pc, #456]	; (80056d8 <UART_SetConfig+0x6f4>)
 8005510:	fba2 2303 	umull	r2, r3, r2, r3
 8005514:	095b      	lsrs	r3, r3, #5
 8005516:	f003 020f 	and.w	r2, r3, #15
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4442      	add	r2, r8
 8005520:	609a      	str	r2, [r3, #8]
 8005522:	e0d0      	b.n	80056c6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005524:	f7fe fc56 	bl	8003dd4 <HAL_RCC_GetPCLK1Freq>
 8005528:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	469a      	mov	sl, r3
 800552e:	f04f 0b00 	mov.w	fp, #0
 8005532:	46d0      	mov	r8, sl
 8005534:	46d9      	mov	r9, fp
 8005536:	eb18 0308 	adds.w	r3, r8, r8
 800553a:	eb49 0409 	adc.w	r4, r9, r9
 800553e:	4698      	mov	r8, r3
 8005540:	46a1      	mov	r9, r4
 8005542:	eb18 080a 	adds.w	r8, r8, sl
 8005546:	eb49 090b 	adc.w	r9, r9, fp
 800554a:	f04f 0100 	mov.w	r1, #0
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005556:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800555a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800555e:	4688      	mov	r8, r1
 8005560:	4691      	mov	r9, r2
 8005562:	eb1a 0508 	adds.w	r5, sl, r8
 8005566:	eb4b 0609 	adc.w	r6, fp, r9
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	4619      	mov	r1, r3
 8005570:	f04f 0200 	mov.w	r2, #0
 8005574:	f04f 0300 	mov.w	r3, #0
 8005578:	f04f 0400 	mov.w	r4, #0
 800557c:	0094      	lsls	r4, r2, #2
 800557e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005582:	008b      	lsls	r3, r1, #2
 8005584:	461a      	mov	r2, r3
 8005586:	4623      	mov	r3, r4
 8005588:	4628      	mov	r0, r5
 800558a:	4631      	mov	r1, r6
 800558c:	f7fb fb84 	bl	8000c98 <__aeabi_uldivmod>
 8005590:	4603      	mov	r3, r0
 8005592:	460c      	mov	r4, r1
 8005594:	461a      	mov	r2, r3
 8005596:	4b50      	ldr	r3, [pc, #320]	; (80056d8 <UART_SetConfig+0x6f4>)
 8005598:	fba3 2302 	umull	r2, r3, r3, r2
 800559c:	095b      	lsrs	r3, r3, #5
 800559e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	469b      	mov	fp, r3
 80055a6:	f04f 0c00 	mov.w	ip, #0
 80055aa:	46d9      	mov	r9, fp
 80055ac:	46e2      	mov	sl, ip
 80055ae:	eb19 0309 	adds.w	r3, r9, r9
 80055b2:	eb4a 040a 	adc.w	r4, sl, sl
 80055b6:	4699      	mov	r9, r3
 80055b8:	46a2      	mov	sl, r4
 80055ba:	eb19 090b 	adds.w	r9, r9, fp
 80055be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80055c2:	f04f 0100 	mov.w	r1, #0
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055d6:	4689      	mov	r9, r1
 80055d8:	4692      	mov	sl, r2
 80055da:	eb1b 0509 	adds.w	r5, fp, r9
 80055de:	eb4c 060a 	adc.w	r6, ip, sl
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	4619      	mov	r1, r3
 80055e8:	f04f 0200 	mov.w	r2, #0
 80055ec:	f04f 0300 	mov.w	r3, #0
 80055f0:	f04f 0400 	mov.w	r4, #0
 80055f4:	0094      	lsls	r4, r2, #2
 80055f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80055fa:	008b      	lsls	r3, r1, #2
 80055fc:	461a      	mov	r2, r3
 80055fe:	4623      	mov	r3, r4
 8005600:	4628      	mov	r0, r5
 8005602:	4631      	mov	r1, r6
 8005604:	f7fb fb48 	bl	8000c98 <__aeabi_uldivmod>
 8005608:	4603      	mov	r3, r0
 800560a:	460c      	mov	r4, r1
 800560c:	461a      	mov	r2, r3
 800560e:	4b32      	ldr	r3, [pc, #200]	; (80056d8 <UART_SetConfig+0x6f4>)
 8005610:	fba3 1302 	umull	r1, r3, r3, r2
 8005614:	095b      	lsrs	r3, r3, #5
 8005616:	2164      	movs	r1, #100	; 0x64
 8005618:	fb01 f303 	mul.w	r3, r1, r3
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	3332      	adds	r3, #50	; 0x32
 8005622:	4a2d      	ldr	r2, [pc, #180]	; (80056d8 <UART_SetConfig+0x6f4>)
 8005624:	fba2 2303 	umull	r2, r3, r2, r3
 8005628:	095b      	lsrs	r3, r3, #5
 800562a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800562e:	4498      	add	r8, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	469b      	mov	fp, r3
 8005634:	f04f 0c00 	mov.w	ip, #0
 8005638:	46d9      	mov	r9, fp
 800563a:	46e2      	mov	sl, ip
 800563c:	eb19 0309 	adds.w	r3, r9, r9
 8005640:	eb4a 040a 	adc.w	r4, sl, sl
 8005644:	4699      	mov	r9, r3
 8005646:	46a2      	mov	sl, r4
 8005648:	eb19 090b 	adds.w	r9, r9, fp
 800564c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005650:	f04f 0100 	mov.w	r1, #0
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800565c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005660:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005664:	4689      	mov	r9, r1
 8005666:	4692      	mov	sl, r2
 8005668:	eb1b 0509 	adds.w	r5, fp, r9
 800566c:	eb4c 060a 	adc.w	r6, ip, sl
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	4619      	mov	r1, r3
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	f04f 0300 	mov.w	r3, #0
 800567e:	f04f 0400 	mov.w	r4, #0
 8005682:	0094      	lsls	r4, r2, #2
 8005684:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005688:	008b      	lsls	r3, r1, #2
 800568a:	461a      	mov	r2, r3
 800568c:	4623      	mov	r3, r4
 800568e:	4628      	mov	r0, r5
 8005690:	4631      	mov	r1, r6
 8005692:	f7fb fb01 	bl	8000c98 <__aeabi_uldivmod>
 8005696:	4603      	mov	r3, r0
 8005698:	460c      	mov	r4, r1
 800569a:	461a      	mov	r2, r3
 800569c:	4b0e      	ldr	r3, [pc, #56]	; (80056d8 <UART_SetConfig+0x6f4>)
 800569e:	fba3 1302 	umull	r1, r3, r3, r2
 80056a2:	095b      	lsrs	r3, r3, #5
 80056a4:	2164      	movs	r1, #100	; 0x64
 80056a6:	fb01 f303 	mul.w	r3, r1, r3
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	011b      	lsls	r3, r3, #4
 80056ae:	3332      	adds	r3, #50	; 0x32
 80056b0:	4a09      	ldr	r2, [pc, #36]	; (80056d8 <UART_SetConfig+0x6f4>)
 80056b2:	fba2 2303 	umull	r2, r3, r2, r3
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	f003 020f 	and.w	r2, r3, #15
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4442      	add	r2, r8
 80056c2:	609a      	str	r2, [r3, #8]
}
 80056c4:	e7ff      	b.n	80056c6 <UART_SetConfig+0x6e2>
 80056c6:	bf00      	nop
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d0:	40011000 	.word	0x40011000
 80056d4:	40011400 	.word	0x40011400
 80056d8:	51eb851f 	.word	0x51eb851f

080056dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80056e0:	bf00      	nop
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
	...

080056ec <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056f2:	f3ef 8305 	mrs	r3, IPSR
 80056f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80056f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10f      	bne.n	800571e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005702:	607b      	str	r3, [r7, #4]
  return(result);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d105      	bne.n	8005716 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800570a:	f3ef 8311 	mrs	r3, BASEPRI
 800570e:	603b      	str	r3, [r7, #0]
  return(result);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d007      	beq.n	8005726 <osKernelInitialize+0x3a>
 8005716:	4b0e      	ldr	r3, [pc, #56]	; (8005750 <osKernelInitialize+0x64>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b02      	cmp	r3, #2
 800571c:	d103      	bne.n	8005726 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800571e:	f06f 0305 	mvn.w	r3, #5
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	e00c      	b.n	8005740 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005726:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <osKernelInitialize+0x64>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d105      	bne.n	800573a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800572e:	4b08      	ldr	r3, [pc, #32]	; (8005750 <osKernelInitialize+0x64>)
 8005730:	2201      	movs	r2, #1
 8005732:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005734:	2300      	movs	r3, #0
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	e002      	b.n	8005740 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800573a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800573e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005740:	68fb      	ldr	r3, [r7, #12]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	20000228 	.word	0x20000228

08005754 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800575a:	f3ef 8305 	mrs	r3, IPSR
 800575e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005760:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10f      	bne.n	8005786 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005766:	f3ef 8310 	mrs	r3, PRIMASK
 800576a:	607b      	str	r3, [r7, #4]
  return(result);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d105      	bne.n	800577e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005772:	f3ef 8311 	mrs	r3, BASEPRI
 8005776:	603b      	str	r3, [r7, #0]
  return(result);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d007      	beq.n	800578e <osKernelStart+0x3a>
 800577e:	4b0f      	ldr	r3, [pc, #60]	; (80057bc <osKernelStart+0x68>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b02      	cmp	r3, #2
 8005784:	d103      	bne.n	800578e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005786:	f06f 0305 	mvn.w	r3, #5
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	e010      	b.n	80057b0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800578e:	4b0b      	ldr	r3, [pc, #44]	; (80057bc <osKernelStart+0x68>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d109      	bne.n	80057aa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005796:	f7ff ffa1 	bl	80056dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800579a:	4b08      	ldr	r3, [pc, #32]	; (80057bc <osKernelStart+0x68>)
 800579c:	2202      	movs	r2, #2
 800579e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80057a0:	f001 f870 	bl	8006884 <vTaskStartScheduler>
      stat = osOK;
 80057a4:	2300      	movs	r3, #0
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	e002      	b.n	80057b0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80057aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80057b0:	68fb      	ldr	r3, [r7, #12]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	20000228 	.word	0x20000228

080057c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b090      	sub	sp, #64	; 0x40
 80057c4:	af04      	add	r7, sp, #16
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80057cc:	2300      	movs	r3, #0
 80057ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057d0:	f3ef 8305 	mrs	r3, IPSR
 80057d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80057d6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f040 808f 	bne.w	80058fc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057de:	f3ef 8310 	mrs	r3, PRIMASK
 80057e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d105      	bne.n	80057f6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057ea:	f3ef 8311 	mrs	r3, BASEPRI
 80057ee:	617b      	str	r3, [r7, #20]
  return(result);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <osThreadNew+0x3e>
 80057f6:	4b44      	ldr	r3, [pc, #272]	; (8005908 <osThreadNew+0x148>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d07e      	beq.n	80058fc <osThreadNew+0x13c>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d07b      	beq.n	80058fc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005804:	2380      	movs	r3, #128	; 0x80
 8005806:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005808:	2318      	movs	r3, #24
 800580a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800580c:	2300      	movs	r3, #0
 800580e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005814:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d045      	beq.n	80058a8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <osThreadNew+0x6a>
        name = attr->name;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	2b00      	cmp	r3, #0
 800583c:	d008      	beq.n	8005850 <osThreadNew+0x90>
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	2b38      	cmp	r3, #56	; 0x38
 8005842:	d805      	bhi.n	8005850 <osThreadNew+0x90>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <osThreadNew+0x94>
        return (NULL);
 8005850:	2300      	movs	r3, #0
 8005852:	e054      	b.n	80058fe <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	089b      	lsrs	r3, r3, #2
 8005862:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00e      	beq.n	800588a <osThreadNew+0xca>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	2b5b      	cmp	r3, #91	; 0x5b
 8005872:	d90a      	bls.n	800588a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005878:	2b00      	cmp	r3, #0
 800587a:	d006      	beq.n	800588a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <osThreadNew+0xca>
        mem = 1;
 8005884:	2301      	movs	r3, #1
 8005886:	623b      	str	r3, [r7, #32]
 8005888:	e010      	b.n	80058ac <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10c      	bne.n	80058ac <osThreadNew+0xec>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d108      	bne.n	80058ac <osThreadNew+0xec>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d104      	bne.n	80058ac <osThreadNew+0xec>
          mem = 0;
 80058a2:	2300      	movs	r3, #0
 80058a4:	623b      	str	r3, [r7, #32]
 80058a6:	e001      	b.n	80058ac <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80058a8:	2300      	movs	r3, #0
 80058aa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d110      	bne.n	80058d4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058ba:	9202      	str	r2, [sp, #8]
 80058bc:	9301      	str	r3, [sp, #4]
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 fe09 	bl	80064e0 <xTaskCreateStatic>
 80058ce:	4603      	mov	r3, r0
 80058d0:	613b      	str	r3, [r7, #16]
 80058d2:	e013      	b.n	80058fc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d110      	bne.n	80058fc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	b29a      	uxth	r2, r3
 80058de:	f107 0310 	add.w	r3, r7, #16
 80058e2:	9301      	str	r3, [sp, #4]
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 fe51 	bl	8006594 <xTaskCreate>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d001      	beq.n	80058fc <osThreadNew+0x13c>
          hTask = NULL;
 80058f8:	2300      	movs	r3, #0
 80058fa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80058fc:	693b      	ldr	r3, [r7, #16]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3730      	adds	r7, #48	; 0x30
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20000228 	.word	0x20000228

0800590c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005914:	f3ef 8305 	mrs	r3, IPSR
 8005918:	613b      	str	r3, [r7, #16]
  return(result);
 800591a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10f      	bne.n	8005940 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005920:	f3ef 8310 	mrs	r3, PRIMASK
 8005924:	60fb      	str	r3, [r7, #12]
  return(result);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d105      	bne.n	8005938 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800592c:	f3ef 8311 	mrs	r3, BASEPRI
 8005930:	60bb      	str	r3, [r7, #8]
  return(result);
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d007      	beq.n	8005948 <osDelay+0x3c>
 8005938:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <osDelay+0x58>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b02      	cmp	r3, #2
 800593e:	d103      	bne.n	8005948 <osDelay+0x3c>
    stat = osErrorISR;
 8005940:	f06f 0305 	mvn.w	r3, #5
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	e007      	b.n	8005958 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005948:	2300      	movs	r3, #0
 800594a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 ff62 	bl	800681c <vTaskDelay>
    }
  }

  return (stat);
 8005958:	697b      	ldr	r3, [r7, #20]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3718      	adds	r7, #24
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	20000228 	.word	0x20000228

08005968 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4a07      	ldr	r2, [pc, #28]	; (8005994 <vApplicationGetIdleTaskMemory+0x2c>)
 8005978:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	4a06      	ldr	r2, [pc, #24]	; (8005998 <vApplicationGetIdleTaskMemory+0x30>)
 800597e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2280      	movs	r2, #128	; 0x80
 8005984:	601a      	str	r2, [r3, #0]
}
 8005986:	bf00      	nop
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	2000022c 	.word	0x2000022c
 8005998:	20000288 	.word	0x20000288

0800599c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4a07      	ldr	r2, [pc, #28]	; (80059c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80059ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	4a06      	ldr	r2, [pc, #24]	; (80059cc <vApplicationGetTimerTaskMemory+0x30>)
 80059b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059ba:	601a      	str	r2, [r3, #0]
}
 80059bc:	bf00      	nop
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	20000488 	.word	0x20000488
 80059cc:	200004e4 	.word	0x200004e4

080059d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f103 0208 	add.w	r2, r3, #8
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f103 0208 	add.w	r2, r3, #8
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f103 0208 	add.w	r2, r3, #8
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b085      	sub	sp, #20
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	601a      	str	r2, [r3, #0]
}
 8005a66:	bf00      	nop
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a72:	b480      	push	{r7}
 8005a74:	b085      	sub	sp, #20
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a88:	d103      	bne.n	8005a92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	e00c      	b.n	8005aac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3308      	adds	r3, #8
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	e002      	b.n	8005aa0 <vListInsert+0x2e>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d2f6      	bcs.n	8005a9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	601a      	str	r2, [r3, #0]
}
 8005ad8:	bf00      	nop
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6892      	ldr	r2, [r2, #8]
 8005afa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6852      	ldr	r2, [r2, #4]
 8005b04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d103      	bne.n	8005b18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	1e5a      	subs	r2, r3, #1
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d109      	bne.n	8005b60 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	60bb      	str	r3, [r7, #8]
 8005b5e:	e7fe      	b.n	8005b5e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005b60:	f002 f814 	bl	8007b8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6c:	68f9      	ldr	r1, [r7, #12]
 8005b6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b70:	fb01 f303 	mul.w	r3, r1, r3
 8005b74:	441a      	add	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b90:	3b01      	subs	r3, #1
 8005b92:	68f9      	ldr	r1, [r7, #12]
 8005b94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b96:	fb01 f303 	mul.w	r3, r1, r3
 8005b9a:	441a      	add	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	22ff      	movs	r2, #255	; 0xff
 8005ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	22ff      	movs	r2, #255	; 0xff
 8005bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d114      	bne.n	8005be0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d01a      	beq.n	8005bf4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3310      	adds	r3, #16
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f001 f8de 	bl	8006d84 <xTaskRemoveFromEventList>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d012      	beq.n	8005bf4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005bce:	4b0d      	ldr	r3, [pc, #52]	; (8005c04 <xQueueGenericReset+0xcc>)
 8005bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	e009      	b.n	8005bf4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3310      	adds	r3, #16
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff fef3 	bl	80059d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3324      	adds	r3, #36	; 0x24
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff feee 	bl	80059d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005bf4:	f001 fff8 	bl	8007be8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005bf8:	2301      	movs	r3, #1
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	e000ed04 	.word	0xe000ed04

08005c08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08e      	sub	sp, #56	; 0x38
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d109      	bne.n	8005c30 <xQueueGenericCreateStatic+0x28>
 8005c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c2e:	e7fe      	b.n	8005c2e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d109      	bne.n	8005c4a <xQueueGenericCreateStatic+0x42>
 8005c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
 8005c48:	e7fe      	b.n	8005c48 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <xQueueGenericCreateStatic+0x4e>
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <xQueueGenericCreateStatic+0x52>
 8005c56:	2301      	movs	r3, #1
 8005c58:	e000      	b.n	8005c5c <xQueueGenericCreateStatic+0x54>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d109      	bne.n	8005c74 <xQueueGenericCreateStatic+0x6c>
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	623b      	str	r3, [r7, #32]
 8005c72:	e7fe      	b.n	8005c72 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d102      	bne.n	8005c80 <xQueueGenericCreateStatic+0x78>
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <xQueueGenericCreateStatic+0x7c>
 8005c80:	2301      	movs	r3, #1
 8005c82:	e000      	b.n	8005c86 <xQueueGenericCreateStatic+0x7e>
 8005c84:	2300      	movs	r3, #0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d109      	bne.n	8005c9e <xQueueGenericCreateStatic+0x96>
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	61fb      	str	r3, [r7, #28]
 8005c9c:	e7fe      	b.n	8005c9c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c9e:	2350      	movs	r3, #80	; 0x50
 8005ca0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b50      	cmp	r3, #80	; 0x50
 8005ca6:	d009      	beq.n	8005cbc <xQueueGenericCreateStatic+0xb4>
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	61bb      	str	r3, [r7, #24]
 8005cba:	e7fe      	b.n	8005cba <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005cbc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00d      	beq.n	8005ce4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cd0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	68b9      	ldr	r1, [r7, #8]
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 f805 	bl	8005cee <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3730      	adds	r7, #48	; 0x30
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	60f8      	str	r0, [r7, #12]
 8005cf6:	60b9      	str	r1, [r7, #8]
 8005cf8:	607a      	str	r2, [r7, #4]
 8005cfa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d103      	bne.n	8005d0a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	601a      	str	r2, [r3, #0]
 8005d08:	e002      	b.n	8005d10 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	69b8      	ldr	r0, [r7, #24]
 8005d20:	f7ff ff0a 	bl	8005b38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	78fa      	ldrb	r2, [r7, #3]
 8005d28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d2c:	bf00      	nop
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08e      	sub	sp, #56	; 0x38
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
 8005d40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d42:	2300      	movs	r3, #0
 8005d44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d109      	bne.n	8005d64 <xQueueGenericSend+0x30>
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d62:	e7fe      	b.n	8005d62 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d103      	bne.n	8005d72 <xQueueGenericSend+0x3e>
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <xQueueGenericSend+0x42>
 8005d72:	2301      	movs	r3, #1
 8005d74:	e000      	b.n	8005d78 <xQueueGenericSend+0x44>
 8005d76:	2300      	movs	r3, #0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d109      	bne.n	8005d90 <xQueueGenericSend+0x5c>
 8005d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d8e:	e7fe      	b.n	8005d8e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d103      	bne.n	8005d9e <xQueueGenericSend+0x6a>
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d101      	bne.n	8005da2 <xQueueGenericSend+0x6e>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e000      	b.n	8005da4 <xQueueGenericSend+0x70>
 8005da2:	2300      	movs	r3, #0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d109      	bne.n	8005dbc <xQueueGenericSend+0x88>
 8005da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	623b      	str	r3, [r7, #32]
 8005dba:	e7fe      	b.n	8005dba <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005dbc:	f001 f998 	bl	80070f0 <xTaskGetSchedulerState>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d102      	bne.n	8005dcc <xQueueGenericSend+0x98>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <xQueueGenericSend+0x9c>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e000      	b.n	8005dd2 <xQueueGenericSend+0x9e>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d109      	bne.n	8005dea <xQueueGenericSend+0xb6>
 8005dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dda:	f383 8811 	msr	BASEPRI, r3
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	61fb      	str	r3, [r7, #28]
 8005de8:	e7fe      	b.n	8005de8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dea:	f001 fecf 	bl	8007b8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d302      	bcc.n	8005e00 <xQueueGenericSend+0xcc>
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d129      	bne.n	8005e54 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	68b9      	ldr	r1, [r7, #8]
 8005e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e06:	f000 f9ff 	bl	8006208 <prvCopyDataToQueue>
 8005e0a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d010      	beq.n	8005e36 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e16:	3324      	adds	r3, #36	; 0x24
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 ffb3 	bl	8006d84 <xTaskRemoveFromEventList>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d013      	beq.n	8005e4c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e24:	4b3f      	ldr	r3, [pc, #252]	; (8005f24 <xQueueGenericSend+0x1f0>)
 8005e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	e00a      	b.n	8005e4c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d007      	beq.n	8005e4c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e3c:	4b39      	ldr	r3, [pc, #228]	; (8005f24 <xQueueGenericSend+0x1f0>)
 8005e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e4c:	f001 fecc 	bl	8007be8 <vPortExitCritical>
				return pdPASS;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e063      	b.n	8005f1c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d103      	bne.n	8005e62 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e5a:	f001 fec5 	bl	8007be8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	e05c      	b.n	8005f1c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d106      	bne.n	8005e76 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e68:	f107 0314 	add.w	r3, r7, #20
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 ffeb 	bl	8006e48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e72:	2301      	movs	r3, #1
 8005e74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e76:	f001 feb7 	bl	8007be8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e7a:	f000 fd67 	bl	800694c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e7e:	f001 fe85 	bl	8007b8c <vPortEnterCritical>
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e88:	b25b      	sxtb	r3, r3
 8005e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e8e:	d103      	bne.n	8005e98 <xQueueGenericSend+0x164>
 8005e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e9e:	b25b      	sxtb	r3, r3
 8005ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ea4:	d103      	bne.n	8005eae <xQueueGenericSend+0x17a>
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005eae:	f001 fe9b 	bl	8007be8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005eb2:	1d3a      	adds	r2, r7, #4
 8005eb4:	f107 0314 	add.w	r3, r7, #20
 8005eb8:	4611      	mov	r1, r2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 ffda 	bl	8006e74 <xTaskCheckForTimeOut>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d124      	bne.n	8005f10 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ec6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ec8:	f000 fa96 	bl	80063f8 <prvIsQueueFull>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d018      	beq.n	8005f04 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed4:	3310      	adds	r3, #16
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	4611      	mov	r1, r2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 ff04 	bl	8006ce8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ee2:	f000 fa21 	bl	8006328 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ee6:	f000 fd3f 	bl	8006968 <xTaskResumeAll>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f47f af7c 	bne.w	8005dea <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005ef2:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <xQueueGenericSend+0x1f0>)
 8005ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	e772      	b.n	8005dea <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f06:	f000 fa0f 	bl	8006328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f0a:	f000 fd2d 	bl	8006968 <xTaskResumeAll>
 8005f0e:	e76c      	b.n	8005dea <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f12:	f000 fa09 	bl	8006328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f16:	f000 fd27 	bl	8006968 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3738      	adds	r7, #56	; 0x38
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	e000ed04 	.word	0xe000ed04

08005f28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08e      	sub	sp, #56	; 0x38
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
 8005f34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d109      	bne.n	8005f54 <xQueueGenericSendFromISR+0x2c>
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	627b      	str	r3, [r7, #36]	; 0x24
 8005f52:	e7fe      	b.n	8005f52 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d103      	bne.n	8005f62 <xQueueGenericSendFromISR+0x3a>
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <xQueueGenericSendFromISR+0x3e>
 8005f62:	2301      	movs	r3, #1
 8005f64:	e000      	b.n	8005f68 <xQueueGenericSendFromISR+0x40>
 8005f66:	2300      	movs	r3, #0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d109      	bne.n	8005f80 <xQueueGenericSendFromISR+0x58>
 8005f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	623b      	str	r3, [r7, #32]
 8005f7e:	e7fe      	b.n	8005f7e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d103      	bne.n	8005f8e <xQueueGenericSendFromISR+0x66>
 8005f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d101      	bne.n	8005f92 <xQueueGenericSendFromISR+0x6a>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e000      	b.n	8005f94 <xQueueGenericSendFromISR+0x6c>
 8005f92:	2300      	movs	r3, #0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d109      	bne.n	8005fac <xQueueGenericSendFromISR+0x84>
 8005f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9c:	f383 8811 	msr	BASEPRI, r3
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	61fb      	str	r3, [r7, #28]
 8005faa:	e7fe      	b.n	8005faa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fac:	f001 feca 	bl	8007d44 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005fb0:	f3ef 8211 	mrs	r2, BASEPRI
 8005fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	61ba      	str	r2, [r7, #24]
 8005fc6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005fc8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d302      	bcc.n	8005fde <xQueueGenericSendFromISR+0xb6>
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d12c      	bne.n	8006038 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	68b9      	ldr	r1, [r7, #8]
 8005fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fee:	f000 f90b 	bl	8006208 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ff2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ffa:	d112      	bne.n	8006022 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	2b00      	cmp	r3, #0
 8006002:	d016      	beq.n	8006032 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006006:	3324      	adds	r3, #36	; 0x24
 8006008:	4618      	mov	r0, r3
 800600a:	f000 febb 	bl	8006d84 <xTaskRemoveFromEventList>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00e      	beq.n	8006032 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00b      	beq.n	8006032 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	e007      	b.n	8006032 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006022:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006026:	3301      	adds	r3, #1
 8006028:	b2db      	uxtb	r3, r3
 800602a:	b25a      	sxtb	r2, r3
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006032:	2301      	movs	r3, #1
 8006034:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006036:	e001      	b.n	800603c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006038:	2300      	movs	r3, #0
 800603a:	637b      	str	r3, [r7, #52]	; 0x34
 800603c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006048:	4618      	mov	r0, r3
 800604a:	3738      	adds	r7, #56	; 0x38
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08c      	sub	sp, #48	; 0x30
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800605c:	2300      	movs	r3, #0
 800605e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006066:	2b00      	cmp	r3, #0
 8006068:	d109      	bne.n	800607e <xQueueReceive+0x2e>
	__asm volatile
 800606a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	623b      	str	r3, [r7, #32]
 800607c:	e7fe      	b.n	800607c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d103      	bne.n	800608c <xQueueReceive+0x3c>
 8006084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <xQueueReceive+0x40>
 800608c:	2301      	movs	r3, #1
 800608e:	e000      	b.n	8006092 <xQueueReceive+0x42>
 8006090:	2300      	movs	r3, #0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d109      	bne.n	80060aa <xQueueReceive+0x5a>
 8006096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	61fb      	str	r3, [r7, #28]
 80060a8:	e7fe      	b.n	80060a8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060aa:	f001 f821 	bl	80070f0 <xTaskGetSchedulerState>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d102      	bne.n	80060ba <xQueueReceive+0x6a>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <xQueueReceive+0x6e>
 80060ba:	2301      	movs	r3, #1
 80060bc:	e000      	b.n	80060c0 <xQueueReceive+0x70>
 80060be:	2300      	movs	r3, #0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d109      	bne.n	80060d8 <xQueueReceive+0x88>
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	61bb      	str	r3, [r7, #24]
 80060d6:	e7fe      	b.n	80060d6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060d8:	f001 fd58 	bl	8007b8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d01f      	beq.n	8006128 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060e8:	68b9      	ldr	r1, [r7, #8]
 80060ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060ec:	f000 f8f6 	bl	80062dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	1e5a      	subs	r2, r3, #1
 80060f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00f      	beq.n	8006120 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006102:	3310      	adds	r3, #16
 8006104:	4618      	mov	r0, r3
 8006106:	f000 fe3d 	bl	8006d84 <xTaskRemoveFromEventList>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d007      	beq.n	8006120 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006110:	4b3c      	ldr	r3, [pc, #240]	; (8006204 <xQueueReceive+0x1b4>)
 8006112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006120:	f001 fd62 	bl	8007be8 <vPortExitCritical>
				return pdPASS;
 8006124:	2301      	movs	r3, #1
 8006126:	e069      	b.n	80061fc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d103      	bne.n	8006136 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800612e:	f001 fd5b 	bl	8007be8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006132:	2300      	movs	r3, #0
 8006134:	e062      	b.n	80061fc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006138:	2b00      	cmp	r3, #0
 800613a:	d106      	bne.n	800614a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800613c:	f107 0310 	add.w	r3, r7, #16
 8006140:	4618      	mov	r0, r3
 8006142:	f000 fe81 	bl	8006e48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006146:	2301      	movs	r3, #1
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800614a:	f001 fd4d 	bl	8007be8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800614e:	f000 fbfd 	bl	800694c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006152:	f001 fd1b 	bl	8007b8c <vPortEnterCritical>
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006158:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800615c:	b25b      	sxtb	r3, r3
 800615e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006162:	d103      	bne.n	800616c <xQueueReceive+0x11c>
 8006164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800616c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006172:	b25b      	sxtb	r3, r3
 8006174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006178:	d103      	bne.n	8006182 <xQueueReceive+0x132>
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006182:	f001 fd31 	bl	8007be8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006186:	1d3a      	adds	r2, r7, #4
 8006188:	f107 0310 	add.w	r3, r7, #16
 800618c:	4611      	mov	r1, r2
 800618e:	4618      	mov	r0, r3
 8006190:	f000 fe70 	bl	8006e74 <xTaskCheckForTimeOut>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d123      	bne.n	80061e2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800619a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800619c:	f000 f916 	bl	80063cc <prvIsQueueEmpty>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d017      	beq.n	80061d6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a8:	3324      	adds	r3, #36	; 0x24
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	4611      	mov	r1, r2
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fd9a 	bl	8006ce8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061b6:	f000 f8b7 	bl	8006328 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061ba:	f000 fbd5 	bl	8006968 <xTaskResumeAll>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d189      	bne.n	80060d8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80061c4:	4b0f      	ldr	r3, [pc, #60]	; (8006204 <xQueueReceive+0x1b4>)
 80061c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	e780      	b.n	80060d8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80061d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061d8:	f000 f8a6 	bl	8006328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061dc:	f000 fbc4 	bl	8006968 <xTaskResumeAll>
 80061e0:	e77a      	b.n	80060d8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80061e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061e4:	f000 f8a0 	bl	8006328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061e8:	f000 fbbe 	bl	8006968 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ee:	f000 f8ed 	bl	80063cc <prvIsQueueEmpty>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f43f af6f 	beq.w	80060d8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80061fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3730      	adds	r7, #48	; 0x30
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	e000ed04 	.word	0xe000ed04

08006208 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006214:	2300      	movs	r3, #0
 8006216:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10d      	bne.n	8006242 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d14d      	bne.n	80062ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	4618      	mov	r0, r3
 8006234:	f000 ff7a 	bl	800712c <xTaskPriorityDisinherit>
 8006238:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	609a      	str	r2, [r3, #8]
 8006240:	e043      	b.n	80062ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d119      	bne.n	800627c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6858      	ldr	r0, [r3, #4]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006250:	461a      	mov	r2, r3
 8006252:	68b9      	ldr	r1, [r7, #8]
 8006254:	f001 ffb4 	bl	80081c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006260:	441a      	add	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	429a      	cmp	r2, r3
 8006270:	d32b      	bcc.n	80062ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	605a      	str	r2, [r3, #4]
 800627a:	e026      	b.n	80062ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	68d8      	ldr	r0, [r3, #12]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006284:	461a      	mov	r2, r3
 8006286:	68b9      	ldr	r1, [r7, #8]
 8006288:	f001 ff9a 	bl	80081c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	68da      	ldr	r2, [r3, #12]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006294:	425b      	negs	r3, r3
 8006296:	441a      	add	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	68da      	ldr	r2, [r3, #12]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d207      	bcs.n	80062b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b0:	425b      	negs	r3, r3
 80062b2:	441a      	add	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d105      	bne.n	80062ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	3b01      	subs	r3, #1
 80062c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80062d2:	697b      	ldr	r3, [r7, #20]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3718      	adds	r7, #24
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d018      	beq.n	8006320 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f6:	441a      	add	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68da      	ldr	r2, [r3, #12]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	429a      	cmp	r2, r3
 8006306:	d303      	bcc.n	8006310 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68d9      	ldr	r1, [r3, #12]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006318:	461a      	mov	r2, r3
 800631a:	6838      	ldr	r0, [r7, #0]
 800631c:	f001 ff50 	bl	80081c0 <memcpy>
	}
}
 8006320:	bf00      	nop
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006330:	f001 fc2c 	bl	8007b8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800633a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800633c:	e011      	b.n	8006362 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	2b00      	cmp	r3, #0
 8006344:	d012      	beq.n	800636c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	3324      	adds	r3, #36	; 0x24
 800634a:	4618      	mov	r0, r3
 800634c:	f000 fd1a 	bl	8006d84 <xTaskRemoveFromEventList>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006356:	f000 fded 	bl	8006f34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	3b01      	subs	r3, #1
 800635e:	b2db      	uxtb	r3, r3
 8006360:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006366:	2b00      	cmp	r3, #0
 8006368:	dce9      	bgt.n	800633e <prvUnlockQueue+0x16>
 800636a:	e000      	b.n	800636e <prvUnlockQueue+0x46>
					break;
 800636c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	22ff      	movs	r2, #255	; 0xff
 8006372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006376:	f001 fc37 	bl	8007be8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800637a:	f001 fc07 	bl	8007b8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006384:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006386:	e011      	b.n	80063ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d012      	beq.n	80063b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	3310      	adds	r3, #16
 8006394:	4618      	mov	r0, r3
 8006396:	f000 fcf5 	bl	8006d84 <xTaskRemoveFromEventList>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80063a0:	f000 fdc8 	bl	8006f34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80063a4:	7bbb      	ldrb	r3, [r7, #14]
 80063a6:	3b01      	subs	r3, #1
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	dce9      	bgt.n	8006388 <prvUnlockQueue+0x60>
 80063b4:	e000      	b.n	80063b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80063b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	22ff      	movs	r2, #255	; 0xff
 80063bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80063c0:	f001 fc12 	bl	8007be8 <vPortExitCritical>
}
 80063c4:	bf00      	nop
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063d4:	f001 fbda 	bl	8007b8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d102      	bne.n	80063e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80063e0:	2301      	movs	r3, #1
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	e001      	b.n	80063ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80063e6:	2300      	movs	r3, #0
 80063e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063ea:	f001 fbfd 	bl	8007be8 <vPortExitCritical>

	return xReturn;
 80063ee:	68fb      	ldr	r3, [r7, #12]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006400:	f001 fbc4 	bl	8007b8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640c:	429a      	cmp	r2, r3
 800640e:	d102      	bne.n	8006416 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006410:	2301      	movs	r3, #1
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	e001      	b.n	800641a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006416:	2300      	movs	r3, #0
 8006418:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800641a:	f001 fbe5 	bl	8007be8 <vPortExitCritical>

	return xReturn;
 800641e:	68fb      	ldr	r3, [r7, #12]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	e014      	b.n	8006462 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006438:	4a0e      	ldr	r2, [pc, #56]	; (8006474 <vQueueAddToRegistry+0x4c>)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10b      	bne.n	800645c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006444:	490b      	ldr	r1, [pc, #44]	; (8006474 <vQueueAddToRegistry+0x4c>)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800644e:	4a09      	ldr	r2, [pc, #36]	; (8006474 <vQueueAddToRegistry+0x4c>)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	00db      	lsls	r3, r3, #3
 8006454:	4413      	add	r3, r2
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800645a:	e005      	b.n	8006468 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3301      	adds	r3, #1
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2b07      	cmp	r3, #7
 8006466:	d9e7      	bls.n	8006438 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006468:	bf00      	nop
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	20004d80 	.word	0x20004d80

08006478 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006488:	f001 fb80 	bl	8007b8c <vPortEnterCritical>
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006492:	b25b      	sxtb	r3, r3
 8006494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006498:	d103      	bne.n	80064a2 <vQueueWaitForMessageRestricted+0x2a>
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064a8:	b25b      	sxtb	r3, r3
 80064aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064ae:	d103      	bne.n	80064b8 <vQueueWaitForMessageRestricted+0x40>
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064b8:	f001 fb96 	bl	8007be8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d106      	bne.n	80064d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	3324      	adds	r3, #36	; 0x24
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	68b9      	ldr	r1, [r7, #8]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 fc2f 	bl	8006d30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80064d2:	6978      	ldr	r0, [r7, #20]
 80064d4:	f7ff ff28 	bl	8006328 <prvUnlockQueue>
	}
 80064d8:	bf00      	nop
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08e      	sub	sp, #56	; 0x38
 80064e4:	af04      	add	r7, sp, #16
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80064ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d109      	bne.n	8006508 <xTaskCreateStatic+0x28>
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	623b      	str	r3, [r7, #32]
 8006506:	e7fe      	b.n	8006506 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650a:	2b00      	cmp	r3, #0
 800650c:	d109      	bne.n	8006522 <xTaskCreateStatic+0x42>
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	61fb      	str	r3, [r7, #28]
 8006520:	e7fe      	b.n	8006520 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006522:	235c      	movs	r3, #92	; 0x5c
 8006524:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	2b5c      	cmp	r3, #92	; 0x5c
 800652a:	d009      	beq.n	8006540 <xTaskCreateStatic+0x60>
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	61bb      	str	r3, [r7, #24]
 800653e:	e7fe      	b.n	800653e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006540:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006544:	2b00      	cmp	r3, #0
 8006546:	d01e      	beq.n	8006586 <xTaskCreateStatic+0xa6>
 8006548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654a:	2b00      	cmp	r3, #0
 800654c:	d01b      	beq.n	8006586 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800654e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006550:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006556:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	2202      	movs	r2, #2
 800655c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006560:	2300      	movs	r3, #0
 8006562:	9303      	str	r3, [sp, #12]
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	9302      	str	r3, [sp, #8]
 8006568:	f107 0314 	add.w	r3, r7, #20
 800656c:	9301      	str	r3, [sp, #4]
 800656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	68b9      	ldr	r1, [r7, #8]
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 f850 	bl	800661e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800657e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006580:	f000 f8dc 	bl	800673c <prvAddNewTaskToReadyList>
 8006584:	e001      	b.n	800658a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006586:	2300      	movs	r3, #0
 8006588:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800658a:	697b      	ldr	r3, [r7, #20]
	}
 800658c:	4618      	mov	r0, r3
 800658e:	3728      	adds	r7, #40	; 0x28
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08c      	sub	sp, #48	; 0x30
 8006598:	af04      	add	r7, sp, #16
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	603b      	str	r3, [r7, #0]
 80065a0:	4613      	mov	r3, r2
 80065a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065a4:	88fb      	ldrh	r3, [r7, #6]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4618      	mov	r0, r3
 80065aa:	f001 fc09 	bl	8007dc0 <pvPortMalloc>
 80065ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00e      	beq.n	80065d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80065b6:	205c      	movs	r0, #92	; 0x5c
 80065b8:	f001 fc02 	bl	8007dc0 <pvPortMalloc>
 80065bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	631a      	str	r2, [r3, #48]	; 0x30
 80065ca:	e005      	b.n	80065d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80065cc:	6978      	ldr	r0, [r7, #20]
 80065ce:	f001 fcb9 	bl	8007f44 <vPortFree>
 80065d2:	e001      	b.n	80065d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80065d4:	2300      	movs	r3, #0
 80065d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d017      	beq.n	800660e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065e6:	88fa      	ldrh	r2, [r7, #6]
 80065e8:	2300      	movs	r3, #0
 80065ea:	9303      	str	r3, [sp, #12]
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	9302      	str	r3, [sp, #8]
 80065f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f2:	9301      	str	r3, [sp, #4]
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	68b9      	ldr	r1, [r7, #8]
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 f80e 	bl	800661e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006602:	69f8      	ldr	r0, [r7, #28]
 8006604:	f000 f89a 	bl	800673c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006608:	2301      	movs	r3, #1
 800660a:	61bb      	str	r3, [r7, #24]
 800660c:	e002      	b.n	8006614 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800660e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006612:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006614:	69bb      	ldr	r3, [r7, #24]
	}
 8006616:	4618      	mov	r0, r3
 8006618:	3720      	adds	r7, #32
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b088      	sub	sp, #32
 8006622:	af00      	add	r7, sp, #0
 8006624:	60f8      	str	r0, [r7, #12]
 8006626:	60b9      	str	r1, [r7, #8]
 8006628:	607a      	str	r2, [r7, #4]
 800662a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	461a      	mov	r2, r3
 8006636:	21a5      	movs	r1, #165	; 0xa5
 8006638:	f001 fdcd 	bl	80081d6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006646:	3b01      	subs	r3, #1
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	f023 0307 	bic.w	r3, r3, #7
 8006654:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	2b00      	cmp	r3, #0
 800665e:	d009      	beq.n	8006674 <prvInitialiseNewTask+0x56>
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	617b      	str	r3, [r7, #20]
 8006672:	e7fe      	b.n	8006672 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d01f      	beq.n	80066ba <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800667a:	2300      	movs	r3, #0
 800667c:	61fb      	str	r3, [r7, #28]
 800667e:	e012      	b.n	80066a6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	4413      	add	r3, r2
 8006686:	7819      	ldrb	r1, [r3, #0]
 8006688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	4413      	add	r3, r2
 800668e:	3334      	adds	r3, #52	; 0x34
 8006690:	460a      	mov	r2, r1
 8006692:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	4413      	add	r3, r2
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d006      	beq.n	80066ae <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	3301      	adds	r3, #1
 80066a4:	61fb      	str	r3, [r7, #28]
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	2b0f      	cmp	r3, #15
 80066aa:	d9e9      	bls.n	8006680 <prvInitialiseNewTask+0x62>
 80066ac:	e000      	b.n	80066b0 <prvInitialiseNewTask+0x92>
			{
				break;
 80066ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066b8:	e003      	b.n	80066c2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80066ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c4:	2b37      	cmp	r3, #55	; 0x37
 80066c6:	d901      	bls.n	80066cc <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066c8:	2337      	movs	r3, #55	; 0x37
 80066ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80066d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066da:	2200      	movs	r2, #0
 80066dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	3304      	adds	r3, #4
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7ff f994 	bl	8005a10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	3318      	adds	r3, #24
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7ff f98f 	bl	8005a10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80066fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006700:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006706:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670a:	2200      	movs	r2, #0
 800670c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800670e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	68f9      	ldr	r1, [r7, #12]
 800671a:	69b8      	ldr	r0, [r7, #24]
 800671c:	f001 f90c 	bl	8007938 <pxPortInitialiseStack>
 8006720:	4602      	mov	r2, r0
 8006722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006724:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006730:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006732:	bf00      	nop
 8006734:	3720      	adds	r7, #32
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006744:	f001 fa22 	bl	8007b8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006748:	4b2d      	ldr	r3, [pc, #180]	; (8006800 <prvAddNewTaskToReadyList+0xc4>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3301      	adds	r3, #1
 800674e:	4a2c      	ldr	r2, [pc, #176]	; (8006800 <prvAddNewTaskToReadyList+0xc4>)
 8006750:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006752:	4b2c      	ldr	r3, [pc, #176]	; (8006804 <prvAddNewTaskToReadyList+0xc8>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d109      	bne.n	800676e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800675a:	4a2a      	ldr	r2, [pc, #168]	; (8006804 <prvAddNewTaskToReadyList+0xc8>)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006760:	4b27      	ldr	r3, [pc, #156]	; (8006800 <prvAddNewTaskToReadyList+0xc4>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d110      	bne.n	800678a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006768:	f000 fc08 	bl	8006f7c <prvInitialiseTaskLists>
 800676c:	e00d      	b.n	800678a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800676e:	4b26      	ldr	r3, [pc, #152]	; (8006808 <prvAddNewTaskToReadyList+0xcc>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d109      	bne.n	800678a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006776:	4b23      	ldr	r3, [pc, #140]	; (8006804 <prvAddNewTaskToReadyList+0xc8>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006780:	429a      	cmp	r2, r3
 8006782:	d802      	bhi.n	800678a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006784:	4a1f      	ldr	r2, [pc, #124]	; (8006804 <prvAddNewTaskToReadyList+0xc8>)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800678a:	4b20      	ldr	r3, [pc, #128]	; (800680c <prvAddNewTaskToReadyList+0xd0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3301      	adds	r3, #1
 8006790:	4a1e      	ldr	r2, [pc, #120]	; (800680c <prvAddNewTaskToReadyList+0xd0>)
 8006792:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006794:	4b1d      	ldr	r3, [pc, #116]	; (800680c <prvAddNewTaskToReadyList+0xd0>)
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a0:	4b1b      	ldr	r3, [pc, #108]	; (8006810 <prvAddNewTaskToReadyList+0xd4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d903      	bls.n	80067b0 <prvAddNewTaskToReadyList+0x74>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	4a18      	ldr	r2, [pc, #96]	; (8006810 <prvAddNewTaskToReadyList+0xd4>)
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4a15      	ldr	r2, [pc, #84]	; (8006814 <prvAddNewTaskToReadyList+0xd8>)
 80067be:	441a      	add	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3304      	adds	r3, #4
 80067c4:	4619      	mov	r1, r3
 80067c6:	4610      	mov	r0, r2
 80067c8:	f7ff f92f 	bl	8005a2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80067cc:	f001 fa0c 	bl	8007be8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80067d0:	4b0d      	ldr	r3, [pc, #52]	; (8006808 <prvAddNewTaskToReadyList+0xcc>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00e      	beq.n	80067f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80067d8:	4b0a      	ldr	r3, [pc, #40]	; (8006804 <prvAddNewTaskToReadyList+0xc8>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d207      	bcs.n	80067f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067e6:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <prvAddNewTaskToReadyList+0xdc>)
 80067e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067f6:	bf00      	nop
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20000db8 	.word	0x20000db8
 8006804:	200008e4 	.word	0x200008e4
 8006808:	20000dc4 	.word	0x20000dc4
 800680c:	20000dd4 	.word	0x20000dd4
 8006810:	20000dc0 	.word	0x20000dc0
 8006814:	200008e8 	.word	0x200008e8
 8006818:	e000ed04 	.word	0xe000ed04

0800681c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006824:	2300      	movs	r3, #0
 8006826:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d016      	beq.n	800685c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800682e:	4b13      	ldr	r3, [pc, #76]	; (800687c <vTaskDelay+0x60>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d009      	beq.n	800684a <vTaskDelay+0x2e>
 8006836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	60bb      	str	r3, [r7, #8]
 8006848:	e7fe      	b.n	8006848 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800684a:	f000 f87f 	bl	800694c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800684e:	2100      	movs	r1, #0
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fcd7 	bl	8007204 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006856:	f000 f887 	bl	8006968 <xTaskResumeAll>
 800685a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d107      	bne.n	8006872 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006862:	4b07      	ldr	r3, [pc, #28]	; (8006880 <vTaskDelay+0x64>)
 8006864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006872:	bf00      	nop
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	20000de0 	.word	0x20000de0
 8006880:	e000ed04 	.word	0xe000ed04

08006884 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08a      	sub	sp, #40	; 0x28
 8006888:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800688a:	2300      	movs	r3, #0
 800688c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800688e:	2300      	movs	r3, #0
 8006890:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006892:	463a      	mov	r2, r7
 8006894:	1d39      	adds	r1, r7, #4
 8006896:	f107 0308 	add.w	r3, r7, #8
 800689a:	4618      	mov	r0, r3
 800689c:	f7ff f864 	bl	8005968 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068a0:	6839      	ldr	r1, [r7, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	9202      	str	r2, [sp, #8]
 80068a8:	9301      	str	r3, [sp, #4]
 80068aa:	2300      	movs	r3, #0
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	2300      	movs	r3, #0
 80068b0:	460a      	mov	r2, r1
 80068b2:	4920      	ldr	r1, [pc, #128]	; (8006934 <vTaskStartScheduler+0xb0>)
 80068b4:	4820      	ldr	r0, [pc, #128]	; (8006938 <vTaskStartScheduler+0xb4>)
 80068b6:	f7ff fe13 	bl	80064e0 <xTaskCreateStatic>
 80068ba:	4602      	mov	r2, r0
 80068bc:	4b1f      	ldr	r3, [pc, #124]	; (800693c <vTaskStartScheduler+0xb8>)
 80068be:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068c0:	4b1e      	ldr	r3, [pc, #120]	; (800693c <vTaskStartScheduler+0xb8>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d002      	beq.n	80068ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068c8:	2301      	movs	r3, #1
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	e001      	b.n	80068d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80068ce:	2300      	movs	r3, #0
 80068d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d102      	bne.n	80068de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80068d8:	f000 fce8 	bl	80072ac <xTimerCreateTimerTask>
 80068dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d115      	bne.n	8006910 <vTaskStartScheduler+0x8c>
 80068e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068f6:	4b12      	ldr	r3, [pc, #72]	; (8006940 <vTaskStartScheduler+0xbc>)
 80068f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068fe:	4b11      	ldr	r3, [pc, #68]	; (8006944 <vTaskStartScheduler+0xc0>)
 8006900:	2201      	movs	r2, #1
 8006902:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006904:	4b10      	ldr	r3, [pc, #64]	; (8006948 <vTaskStartScheduler+0xc4>)
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800690a:	f001 f8a1 	bl	8007a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800690e:	e00d      	b.n	800692c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006916:	d109      	bne.n	800692c <vTaskStartScheduler+0xa8>
 8006918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	60fb      	str	r3, [r7, #12]
 800692a:	e7fe      	b.n	800692a <vTaskStartScheduler+0xa6>
}
 800692c:	bf00      	nop
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	0800bce4 	.word	0x0800bce4
 8006938:	08006f4d 	.word	0x08006f4d
 800693c:	20000ddc 	.word	0x20000ddc
 8006940:	20000dd8 	.word	0x20000dd8
 8006944:	20000dc4 	.word	0x20000dc4
 8006948:	20000dbc 	.word	0x20000dbc

0800694c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006950:	4b04      	ldr	r3, [pc, #16]	; (8006964 <vTaskSuspendAll+0x18>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3301      	adds	r3, #1
 8006956:	4a03      	ldr	r2, [pc, #12]	; (8006964 <vTaskSuspendAll+0x18>)
 8006958:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800695a:	bf00      	nop
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	20000de0 	.word	0x20000de0

08006968 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006972:	2300      	movs	r3, #0
 8006974:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006976:	4b41      	ldr	r3, [pc, #260]	; (8006a7c <xTaskResumeAll+0x114>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d109      	bne.n	8006992 <xTaskResumeAll+0x2a>
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	603b      	str	r3, [r7, #0]
 8006990:	e7fe      	b.n	8006990 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006992:	f001 f8fb 	bl	8007b8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006996:	4b39      	ldr	r3, [pc, #228]	; (8006a7c <xTaskResumeAll+0x114>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3b01      	subs	r3, #1
 800699c:	4a37      	ldr	r2, [pc, #220]	; (8006a7c <xTaskResumeAll+0x114>)
 800699e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069a0:	4b36      	ldr	r3, [pc, #216]	; (8006a7c <xTaskResumeAll+0x114>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d162      	bne.n	8006a6e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069a8:	4b35      	ldr	r3, [pc, #212]	; (8006a80 <xTaskResumeAll+0x118>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d05e      	beq.n	8006a6e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069b0:	e02f      	b.n	8006a12 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069b2:	4b34      	ldr	r3, [pc, #208]	; (8006a84 <xTaskResumeAll+0x11c>)
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3318      	adds	r3, #24
 80069be:	4618      	mov	r0, r3
 80069c0:	f7ff f890 	bl	8005ae4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3304      	adds	r3, #4
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7ff f88b 	bl	8005ae4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d2:	4b2d      	ldr	r3, [pc, #180]	; (8006a88 <xTaskResumeAll+0x120>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d903      	bls.n	80069e2 <xTaskResumeAll+0x7a>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069de:	4a2a      	ldr	r2, [pc, #168]	; (8006a88 <xTaskResumeAll+0x120>)
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e6:	4613      	mov	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4a27      	ldr	r2, [pc, #156]	; (8006a8c <xTaskResumeAll+0x124>)
 80069f0:	441a      	add	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	3304      	adds	r3, #4
 80069f6:	4619      	mov	r1, r3
 80069f8:	4610      	mov	r0, r2
 80069fa:	f7ff f816 	bl	8005a2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a02:	4b23      	ldr	r3, [pc, #140]	; (8006a90 <xTaskResumeAll+0x128>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d302      	bcc.n	8006a12 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006a0c:	4b21      	ldr	r3, [pc, #132]	; (8006a94 <xTaskResumeAll+0x12c>)
 8006a0e:	2201      	movs	r2, #1
 8006a10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a12:	4b1c      	ldr	r3, [pc, #112]	; (8006a84 <xTaskResumeAll+0x11c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1cb      	bne.n	80069b2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a20:	f000 fb46 	bl	80070b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006a24:	4b1c      	ldr	r3, [pc, #112]	; (8006a98 <xTaskResumeAll+0x130>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d010      	beq.n	8006a52 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a30:	f000 f846 	bl	8006ac0 <xTaskIncrementTick>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d002      	beq.n	8006a40 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006a3a:	4b16      	ldr	r3, [pc, #88]	; (8006a94 <xTaskResumeAll+0x12c>)
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	3b01      	subs	r3, #1
 8006a44:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1f1      	bne.n	8006a30 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006a4c:	4b12      	ldr	r3, [pc, #72]	; (8006a98 <xTaskResumeAll+0x130>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a52:	4b10      	ldr	r3, [pc, #64]	; (8006a94 <xTaskResumeAll+0x12c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d009      	beq.n	8006a6e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a5e:	4b0f      	ldr	r3, [pc, #60]	; (8006a9c <xTaskResumeAll+0x134>)
 8006a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a6e:	f001 f8bb 	bl	8007be8 <vPortExitCritical>

	return xAlreadyYielded;
 8006a72:	68bb      	ldr	r3, [r7, #8]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	20000de0 	.word	0x20000de0
 8006a80:	20000db8 	.word	0x20000db8
 8006a84:	20000d78 	.word	0x20000d78
 8006a88:	20000dc0 	.word	0x20000dc0
 8006a8c:	200008e8 	.word	0x200008e8
 8006a90:	200008e4 	.word	0x200008e4
 8006a94:	20000dcc 	.word	0x20000dcc
 8006a98:	20000dc8 	.word	0x20000dc8
 8006a9c:	e000ed04 	.word	0xe000ed04

08006aa0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006aa6:	4b05      	ldr	r3, [pc, #20]	; (8006abc <xTaskGetTickCount+0x1c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006aac:	687b      	ldr	r3, [r7, #4]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	20000dbc 	.word	0x20000dbc

08006ac0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aca:	4b4e      	ldr	r3, [pc, #312]	; (8006c04 <xTaskIncrementTick+0x144>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f040 8088 	bne.w	8006be4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ad4:	4b4c      	ldr	r3, [pc, #304]	; (8006c08 <xTaskIncrementTick+0x148>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006adc:	4a4a      	ldr	r2, [pc, #296]	; (8006c08 <xTaskIncrementTick+0x148>)
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d11f      	bne.n	8006b28 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ae8:	4b48      	ldr	r3, [pc, #288]	; (8006c0c <xTaskIncrementTick+0x14c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d009      	beq.n	8006b06 <xTaskIncrementTick+0x46>
 8006af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	603b      	str	r3, [r7, #0]
 8006b04:	e7fe      	b.n	8006b04 <xTaskIncrementTick+0x44>
 8006b06:	4b41      	ldr	r3, [pc, #260]	; (8006c0c <xTaskIncrementTick+0x14c>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	4b40      	ldr	r3, [pc, #256]	; (8006c10 <xTaskIncrementTick+0x150>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a3e      	ldr	r2, [pc, #248]	; (8006c0c <xTaskIncrementTick+0x14c>)
 8006b12:	6013      	str	r3, [r2, #0]
 8006b14:	4a3e      	ldr	r2, [pc, #248]	; (8006c10 <xTaskIncrementTick+0x150>)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	4b3e      	ldr	r3, [pc, #248]	; (8006c14 <xTaskIncrementTick+0x154>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	4a3c      	ldr	r2, [pc, #240]	; (8006c14 <xTaskIncrementTick+0x154>)
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	f000 fac4 	bl	80070b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b28:	4b3b      	ldr	r3, [pc, #236]	; (8006c18 <xTaskIncrementTick+0x158>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d349      	bcc.n	8006bc6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b32:	4b36      	ldr	r3, [pc, #216]	; (8006c0c <xTaskIncrementTick+0x14c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d104      	bne.n	8006b46 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b3c:	4b36      	ldr	r3, [pc, #216]	; (8006c18 <xTaskIncrementTick+0x158>)
 8006b3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b42:	601a      	str	r2, [r3, #0]
					break;
 8006b44:	e03f      	b.n	8006bc6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b46:	4b31      	ldr	r3, [pc, #196]	; (8006c0c <xTaskIncrementTick+0x14c>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d203      	bcs.n	8006b66 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b5e:	4a2e      	ldr	r2, [pc, #184]	; (8006c18 <xTaskIncrementTick+0x158>)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b64:	e02f      	b.n	8006bc6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	3304      	adds	r3, #4
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fe ffba 	bl	8005ae4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d004      	beq.n	8006b82 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	3318      	adds	r3, #24
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fe ffb1 	bl	8005ae4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b86:	4b25      	ldr	r3, [pc, #148]	; (8006c1c <xTaskIncrementTick+0x15c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d903      	bls.n	8006b96 <xTaskIncrementTick+0xd6>
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b92:	4a22      	ldr	r2, [pc, #136]	; (8006c1c <xTaskIncrementTick+0x15c>)
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4a1f      	ldr	r2, [pc, #124]	; (8006c20 <xTaskIncrementTick+0x160>)
 8006ba4:	441a      	add	r2, r3
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	3304      	adds	r3, #4
 8006baa:	4619      	mov	r1, r3
 8006bac:	4610      	mov	r0, r2
 8006bae:	f7fe ff3c 	bl	8005a2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb6:	4b1b      	ldr	r3, [pc, #108]	; (8006c24 <xTaskIncrementTick+0x164>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d3b8      	bcc.n	8006b32 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bc4:	e7b5      	b.n	8006b32 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bc6:	4b17      	ldr	r3, [pc, #92]	; (8006c24 <xTaskIncrementTick+0x164>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bcc:	4914      	ldr	r1, [pc, #80]	; (8006c20 <xTaskIncrementTick+0x160>)
 8006bce:	4613      	mov	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	440b      	add	r3, r1
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d907      	bls.n	8006bee <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8006bde:	2301      	movs	r3, #1
 8006be0:	617b      	str	r3, [r7, #20]
 8006be2:	e004      	b.n	8006bee <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006be4:	4b10      	ldr	r3, [pc, #64]	; (8006c28 <xTaskIncrementTick+0x168>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	3301      	adds	r3, #1
 8006bea:	4a0f      	ldr	r2, [pc, #60]	; (8006c28 <xTaskIncrementTick+0x168>)
 8006bec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006bee:	4b0f      	ldr	r3, [pc, #60]	; (8006c2c <xTaskIncrementTick+0x16c>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006bfa:	697b      	ldr	r3, [r7, #20]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3718      	adds	r7, #24
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	20000de0 	.word	0x20000de0
 8006c08:	20000dbc 	.word	0x20000dbc
 8006c0c:	20000d70 	.word	0x20000d70
 8006c10:	20000d74 	.word	0x20000d74
 8006c14:	20000dd0 	.word	0x20000dd0
 8006c18:	20000dd8 	.word	0x20000dd8
 8006c1c:	20000dc0 	.word	0x20000dc0
 8006c20:	200008e8 	.word	0x200008e8
 8006c24:	200008e4 	.word	0x200008e4
 8006c28:	20000dc8 	.word	0x20000dc8
 8006c2c:	20000dcc 	.word	0x20000dcc

08006c30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c36:	4b27      	ldr	r3, [pc, #156]	; (8006cd4 <vTaskSwitchContext+0xa4>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c3e:	4b26      	ldr	r3, [pc, #152]	; (8006cd8 <vTaskSwitchContext+0xa8>)
 8006c40:	2201      	movs	r2, #1
 8006c42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c44:	e040      	b.n	8006cc8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006c46:	4b24      	ldr	r3, [pc, #144]	; (8006cd8 <vTaskSwitchContext+0xa8>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c4c:	4b23      	ldr	r3, [pc, #140]	; (8006cdc <vTaskSwitchContext+0xac>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	60fb      	str	r3, [r7, #12]
 8006c52:	e00f      	b.n	8006c74 <vTaskSwitchContext+0x44>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d109      	bne.n	8006c6e <vTaskSwitchContext+0x3e>
 8006c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	607b      	str	r3, [r7, #4]
 8006c6c:	e7fe      	b.n	8006c6c <vTaskSwitchContext+0x3c>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	491a      	ldr	r1, [pc, #104]	; (8006ce0 <vTaskSwitchContext+0xb0>)
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	440b      	add	r3, r1
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0e5      	beq.n	8006c54 <vTaskSwitchContext+0x24>
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4a13      	ldr	r2, [pc, #76]	; (8006ce0 <vTaskSwitchContext+0xb0>)
 8006c94:	4413      	add	r3, r2
 8006c96:	60bb      	str	r3, [r7, #8]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	605a      	str	r2, [r3, #4]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	3308      	adds	r3, #8
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d104      	bne.n	8006cb8 <vTaskSwitchContext+0x88>
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	605a      	str	r2, [r3, #4]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	4a09      	ldr	r2, [pc, #36]	; (8006ce4 <vTaskSwitchContext+0xb4>)
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	4a06      	ldr	r2, [pc, #24]	; (8006cdc <vTaskSwitchContext+0xac>)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6013      	str	r3, [r2, #0]
}
 8006cc8:	bf00      	nop
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	20000de0 	.word	0x20000de0
 8006cd8:	20000dcc 	.word	0x20000dcc
 8006cdc:	20000dc0 	.word	0x20000dc0
 8006ce0:	200008e8 	.word	0x200008e8
 8006ce4:	200008e4 	.word	0x200008e4

08006ce8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d109      	bne.n	8006d0c <vTaskPlaceOnEventList+0x24>
 8006cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	60fb      	str	r3, [r7, #12]
 8006d0a:	e7fe      	b.n	8006d0a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d0c:	4b07      	ldr	r3, [pc, #28]	; (8006d2c <vTaskPlaceOnEventList+0x44>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	3318      	adds	r3, #24
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7fe feac 	bl	8005a72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	6838      	ldr	r0, [r7, #0]
 8006d1e:	f000 fa71 	bl	8007204 <prvAddCurrentTaskToDelayedList>
}
 8006d22:	bf00      	nop
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	200008e4 	.word	0x200008e4

08006d30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d109      	bne.n	8006d56 <vTaskPlaceOnEventListRestricted+0x26>
 8006d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d46:	f383 8811 	msr	BASEPRI, r3
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	617b      	str	r3, [r7, #20]
 8006d54:	e7fe      	b.n	8006d54 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d56:	4b0a      	ldr	r3, [pc, #40]	; (8006d80 <vTaskPlaceOnEventListRestricted+0x50>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3318      	adds	r3, #24
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f7fe fe63 	bl	8005a2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d6e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d70:	6879      	ldr	r1, [r7, #4]
 8006d72:	68b8      	ldr	r0, [r7, #8]
 8006d74:	f000 fa46 	bl	8007204 <prvAddCurrentTaskToDelayedList>
	}
 8006d78:	bf00      	nop
 8006d7a:	3718      	adds	r7, #24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	200008e4 	.word	0x200008e4

08006d84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d109      	bne.n	8006dae <xTaskRemoveFromEventList+0x2a>
 8006d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	e7fe      	b.n	8006dac <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	3318      	adds	r3, #24
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe fe96 	bl	8005ae4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006db8:	4b1d      	ldr	r3, [pc, #116]	; (8006e30 <xTaskRemoveFromEventList+0xac>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d11d      	bne.n	8006dfc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fe fe8d 	bl	8005ae4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dce:	4b19      	ldr	r3, [pc, #100]	; (8006e34 <xTaskRemoveFromEventList+0xb0>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d903      	bls.n	8006dde <xTaskRemoveFromEventList+0x5a>
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dda:	4a16      	ldr	r2, [pc, #88]	; (8006e34 <xTaskRemoveFromEventList+0xb0>)
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4a13      	ldr	r2, [pc, #76]	; (8006e38 <xTaskRemoveFromEventList+0xb4>)
 8006dec:	441a      	add	r2, r3
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	3304      	adds	r3, #4
 8006df2:	4619      	mov	r1, r3
 8006df4:	4610      	mov	r0, r2
 8006df6:	f7fe fe18 	bl	8005a2a <vListInsertEnd>
 8006dfa:	e005      	b.n	8006e08 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	3318      	adds	r3, #24
 8006e00:	4619      	mov	r1, r3
 8006e02:	480e      	ldr	r0, [pc, #56]	; (8006e3c <xTaskRemoveFromEventList+0xb8>)
 8006e04:	f7fe fe11 	bl	8005a2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0c:	4b0c      	ldr	r3, [pc, #48]	; (8006e40 <xTaskRemoveFromEventList+0xbc>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d905      	bls.n	8006e22 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e16:	2301      	movs	r3, #1
 8006e18:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e1a:	4b0a      	ldr	r3, [pc, #40]	; (8006e44 <xTaskRemoveFromEventList+0xc0>)
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	e001      	b.n	8006e26 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006e22:	2300      	movs	r3, #0
 8006e24:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e26:	697b      	ldr	r3, [r7, #20]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3718      	adds	r7, #24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	20000de0 	.word	0x20000de0
 8006e34:	20000dc0 	.word	0x20000dc0
 8006e38:	200008e8 	.word	0x200008e8
 8006e3c:	20000d78 	.word	0x20000d78
 8006e40:	200008e4 	.word	0x200008e4
 8006e44:	20000dcc 	.word	0x20000dcc

08006e48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e50:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <vTaskInternalSetTimeOutState+0x24>)
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e58:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <vTaskInternalSetTimeOutState+0x28>)
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	605a      	str	r2, [r3, #4]
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	20000dd0 	.word	0x20000dd0
 8006e70:	20000dbc 	.word	0x20000dbc

08006e74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b088      	sub	sp, #32
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d109      	bne.n	8006e98 <xTaskCheckForTimeOut+0x24>
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	613b      	str	r3, [r7, #16]
 8006e96:	e7fe      	b.n	8006e96 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d109      	bne.n	8006eb2 <xTaskCheckForTimeOut+0x3e>
 8006e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	e7fe      	b.n	8006eb0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006eb2:	f000 fe6b 	bl	8007b8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006eb6:	4b1d      	ldr	r3, [pc, #116]	; (8006f2c <xTaskCheckForTimeOut+0xb8>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ece:	d102      	bne.n	8006ed6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	61fb      	str	r3, [r7, #28]
 8006ed4:	e023      	b.n	8006f1e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	4b15      	ldr	r3, [pc, #84]	; (8006f30 <xTaskCheckForTimeOut+0xbc>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d007      	beq.n	8006ef2 <xTaskCheckForTimeOut+0x7e>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d302      	bcc.n	8006ef2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006eec:	2301      	movs	r3, #1
 8006eee:	61fb      	str	r3, [r7, #28]
 8006ef0:	e015      	b.n	8006f1e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d20b      	bcs.n	8006f14 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	1ad2      	subs	r2, r2, r3
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7ff ff9d 	bl	8006e48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	61fb      	str	r3, [r7, #28]
 8006f12:	e004      	b.n	8006f1e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	2200      	movs	r2, #0
 8006f18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f1e:	f000 fe63 	bl	8007be8 <vPortExitCritical>

	return xReturn;
 8006f22:	69fb      	ldr	r3, [r7, #28]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3720      	adds	r7, #32
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	20000dbc 	.word	0x20000dbc
 8006f30:	20000dd0 	.word	0x20000dd0

08006f34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f34:	b480      	push	{r7}
 8006f36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f38:	4b03      	ldr	r3, [pc, #12]	; (8006f48 <vTaskMissedYield+0x14>)
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	601a      	str	r2, [r3, #0]
}
 8006f3e:	bf00      	nop
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr
 8006f48:	20000dcc 	.word	0x20000dcc

08006f4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f54:	f000 f852 	bl	8006ffc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f58:	4b06      	ldr	r3, [pc, #24]	; (8006f74 <prvIdleTask+0x28>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d9f9      	bls.n	8006f54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f60:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <prvIdleTask+0x2c>)
 8006f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f70:	e7f0      	b.n	8006f54 <prvIdleTask+0x8>
 8006f72:	bf00      	nop
 8006f74:	200008e8 	.word	0x200008e8
 8006f78:	e000ed04 	.word	0xe000ed04

08006f7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f82:	2300      	movs	r3, #0
 8006f84:	607b      	str	r3, [r7, #4]
 8006f86:	e00c      	b.n	8006fa2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4a12      	ldr	r2, [pc, #72]	; (8006fdc <prvInitialiseTaskLists+0x60>)
 8006f94:	4413      	add	r3, r2
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fe fd1a 	bl	80059d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	607b      	str	r3, [r7, #4]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b37      	cmp	r3, #55	; 0x37
 8006fa6:	d9ef      	bls.n	8006f88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006fa8:	480d      	ldr	r0, [pc, #52]	; (8006fe0 <prvInitialiseTaskLists+0x64>)
 8006faa:	f7fe fd11 	bl	80059d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006fae:	480d      	ldr	r0, [pc, #52]	; (8006fe4 <prvInitialiseTaskLists+0x68>)
 8006fb0:	f7fe fd0e 	bl	80059d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006fb4:	480c      	ldr	r0, [pc, #48]	; (8006fe8 <prvInitialiseTaskLists+0x6c>)
 8006fb6:	f7fe fd0b 	bl	80059d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006fba:	480c      	ldr	r0, [pc, #48]	; (8006fec <prvInitialiseTaskLists+0x70>)
 8006fbc:	f7fe fd08 	bl	80059d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006fc0:	480b      	ldr	r0, [pc, #44]	; (8006ff0 <prvInitialiseTaskLists+0x74>)
 8006fc2:	f7fe fd05 	bl	80059d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006fc6:	4b0b      	ldr	r3, [pc, #44]	; (8006ff4 <prvInitialiseTaskLists+0x78>)
 8006fc8:	4a05      	ldr	r2, [pc, #20]	; (8006fe0 <prvInitialiseTaskLists+0x64>)
 8006fca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006fcc:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <prvInitialiseTaskLists+0x7c>)
 8006fce:	4a05      	ldr	r2, [pc, #20]	; (8006fe4 <prvInitialiseTaskLists+0x68>)
 8006fd0:	601a      	str	r2, [r3, #0]
}
 8006fd2:	bf00      	nop
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	200008e8 	.word	0x200008e8
 8006fe0:	20000d48 	.word	0x20000d48
 8006fe4:	20000d5c 	.word	0x20000d5c
 8006fe8:	20000d78 	.word	0x20000d78
 8006fec:	20000d8c 	.word	0x20000d8c
 8006ff0:	20000da4 	.word	0x20000da4
 8006ff4:	20000d70 	.word	0x20000d70
 8006ff8:	20000d74 	.word	0x20000d74

08006ffc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007002:	e019      	b.n	8007038 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007004:	f000 fdc2 	bl	8007b8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007008:	4b0f      	ldr	r3, [pc, #60]	; (8007048 <prvCheckTasksWaitingTermination+0x4c>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3304      	adds	r3, #4
 8007014:	4618      	mov	r0, r3
 8007016:	f7fe fd65 	bl	8005ae4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800701a:	4b0c      	ldr	r3, [pc, #48]	; (800704c <prvCheckTasksWaitingTermination+0x50>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3b01      	subs	r3, #1
 8007020:	4a0a      	ldr	r2, [pc, #40]	; (800704c <prvCheckTasksWaitingTermination+0x50>)
 8007022:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007024:	4b0a      	ldr	r3, [pc, #40]	; (8007050 <prvCheckTasksWaitingTermination+0x54>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3b01      	subs	r3, #1
 800702a:	4a09      	ldr	r2, [pc, #36]	; (8007050 <prvCheckTasksWaitingTermination+0x54>)
 800702c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800702e:	f000 fddb 	bl	8007be8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f80e 	bl	8007054 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007038:	4b05      	ldr	r3, [pc, #20]	; (8007050 <prvCheckTasksWaitingTermination+0x54>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1e1      	bne.n	8007004 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007040:	bf00      	nop
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	20000d8c 	.word	0x20000d8c
 800704c:	20000db8 	.word	0x20000db8
 8007050:	20000da0 	.word	0x20000da0

08007054 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007062:	2b00      	cmp	r3, #0
 8007064:	d108      	bne.n	8007078 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706a:	4618      	mov	r0, r3
 800706c:	f000 ff6a 	bl	8007f44 <vPortFree>
				vPortFree( pxTCB );
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 ff67 	bl	8007f44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007076:	e017      	b.n	80070a8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800707e:	2b01      	cmp	r3, #1
 8007080:	d103      	bne.n	800708a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 ff5e 	bl	8007f44 <vPortFree>
	}
 8007088:	e00e      	b.n	80070a8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007090:	2b02      	cmp	r3, #2
 8007092:	d009      	beq.n	80070a8 <prvDeleteTCB+0x54>
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	60fb      	str	r3, [r7, #12]
 80070a6:	e7fe      	b.n	80070a6 <prvDeleteTCB+0x52>
	}
 80070a8:	bf00      	nop
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070b6:	4b0c      	ldr	r3, [pc, #48]	; (80070e8 <prvResetNextTaskUnblockTime+0x38>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d104      	bne.n	80070ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80070c0:	4b0a      	ldr	r3, [pc, #40]	; (80070ec <prvResetNextTaskUnblockTime+0x3c>)
 80070c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80070c8:	e008      	b.n	80070dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ca:	4b07      	ldr	r3, [pc, #28]	; (80070e8 <prvResetNextTaskUnblockTime+0x38>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	4a04      	ldr	r2, [pc, #16]	; (80070ec <prvResetNextTaskUnblockTime+0x3c>)
 80070da:	6013      	str	r3, [r2, #0]
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	20000d70 	.word	0x20000d70
 80070ec:	20000dd8 	.word	0x20000dd8

080070f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80070f6:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <xTaskGetSchedulerState+0x34>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d102      	bne.n	8007104 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070fe:	2301      	movs	r3, #1
 8007100:	607b      	str	r3, [r7, #4]
 8007102:	e008      	b.n	8007116 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007104:	4b08      	ldr	r3, [pc, #32]	; (8007128 <xTaskGetSchedulerState+0x38>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d102      	bne.n	8007112 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800710c:	2302      	movs	r3, #2
 800710e:	607b      	str	r3, [r7, #4]
 8007110:	e001      	b.n	8007116 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007112:	2300      	movs	r3, #0
 8007114:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007116:	687b      	ldr	r3, [r7, #4]
	}
 8007118:	4618      	mov	r0, r3
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	20000dc4 	.word	0x20000dc4
 8007128:	20000de0 	.word	0x20000de0

0800712c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007138:	2300      	movs	r3, #0
 800713a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d054      	beq.n	80071ec <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007142:	4b2d      	ldr	r3, [pc, #180]	; (80071f8 <xTaskPriorityDisinherit+0xcc>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	429a      	cmp	r2, r3
 800714a:	d009      	beq.n	8007160 <xTaskPriorityDisinherit+0x34>
 800714c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	60fb      	str	r3, [r7, #12]
 800715e:	e7fe      	b.n	800715e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007164:	2b00      	cmp	r3, #0
 8007166:	d109      	bne.n	800717c <xTaskPriorityDisinherit+0x50>
 8007168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	60bb      	str	r3, [r7, #8]
 800717a:	e7fe      	b.n	800717a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007180:	1e5a      	subs	r2, r3, #1
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800718e:	429a      	cmp	r2, r3
 8007190:	d02c      	beq.n	80071ec <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007196:	2b00      	cmp	r3, #0
 8007198:	d128      	bne.n	80071ec <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	3304      	adds	r3, #4
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe fca0 	bl	8005ae4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071bc:	4b0f      	ldr	r3, [pc, #60]	; (80071fc <xTaskPriorityDisinherit+0xd0>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d903      	bls.n	80071cc <xTaskPriorityDisinherit+0xa0>
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	4a0c      	ldr	r2, [pc, #48]	; (80071fc <xTaskPriorityDisinherit+0xd0>)
 80071ca:	6013      	str	r3, [r2, #0]
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d0:	4613      	mov	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4a09      	ldr	r2, [pc, #36]	; (8007200 <xTaskPriorityDisinherit+0xd4>)
 80071da:	441a      	add	r2, r3
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	3304      	adds	r3, #4
 80071e0:	4619      	mov	r1, r3
 80071e2:	4610      	mov	r0, r2
 80071e4:	f7fe fc21 	bl	8005a2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071e8:	2301      	movs	r3, #1
 80071ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071ec:	697b      	ldr	r3, [r7, #20]
	}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	200008e4 	.word	0x200008e4
 80071fc:	20000dc0 	.word	0x20000dc0
 8007200:	200008e8 	.word	0x200008e8

08007204 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800720e:	4b21      	ldr	r3, [pc, #132]	; (8007294 <prvAddCurrentTaskToDelayedList+0x90>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007214:	4b20      	ldr	r3, [pc, #128]	; (8007298 <prvAddCurrentTaskToDelayedList+0x94>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3304      	adds	r3, #4
 800721a:	4618      	mov	r0, r3
 800721c:	f7fe fc62 	bl	8005ae4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007226:	d10a      	bne.n	800723e <prvAddCurrentTaskToDelayedList+0x3a>
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d007      	beq.n	800723e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800722e:	4b1a      	ldr	r3, [pc, #104]	; (8007298 <prvAddCurrentTaskToDelayedList+0x94>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	3304      	adds	r3, #4
 8007234:	4619      	mov	r1, r3
 8007236:	4819      	ldr	r0, [pc, #100]	; (800729c <prvAddCurrentTaskToDelayedList+0x98>)
 8007238:	f7fe fbf7 	bl	8005a2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800723c:	e026      	b.n	800728c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4413      	add	r3, r2
 8007244:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007246:	4b14      	ldr	r3, [pc, #80]	; (8007298 <prvAddCurrentTaskToDelayedList+0x94>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	429a      	cmp	r2, r3
 8007254:	d209      	bcs.n	800726a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007256:	4b12      	ldr	r3, [pc, #72]	; (80072a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	4b0f      	ldr	r3, [pc, #60]	; (8007298 <prvAddCurrentTaskToDelayedList+0x94>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3304      	adds	r3, #4
 8007260:	4619      	mov	r1, r3
 8007262:	4610      	mov	r0, r2
 8007264:	f7fe fc05 	bl	8005a72 <vListInsert>
}
 8007268:	e010      	b.n	800728c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800726a:	4b0e      	ldr	r3, [pc, #56]	; (80072a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	4b0a      	ldr	r3, [pc, #40]	; (8007298 <prvAddCurrentTaskToDelayedList+0x94>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3304      	adds	r3, #4
 8007274:	4619      	mov	r1, r3
 8007276:	4610      	mov	r0, r2
 8007278:	f7fe fbfb 	bl	8005a72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800727c:	4b0a      	ldr	r3, [pc, #40]	; (80072a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	429a      	cmp	r2, r3
 8007284:	d202      	bcs.n	800728c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007286:	4a08      	ldr	r2, [pc, #32]	; (80072a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	6013      	str	r3, [r2, #0]
}
 800728c:	bf00      	nop
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	20000dbc 	.word	0x20000dbc
 8007298:	200008e4 	.word	0x200008e4
 800729c:	20000da4 	.word	0x20000da4
 80072a0:	20000d74 	.word	0x20000d74
 80072a4:	20000d70 	.word	0x20000d70
 80072a8:	20000dd8 	.word	0x20000dd8

080072ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b08a      	sub	sp, #40	; 0x28
 80072b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80072b6:	f000 faff 	bl	80078b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80072ba:	4b1c      	ldr	r3, [pc, #112]	; (800732c <xTimerCreateTimerTask+0x80>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d021      	beq.n	8007306 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80072ca:	1d3a      	adds	r2, r7, #4
 80072cc:	f107 0108 	add.w	r1, r7, #8
 80072d0:	f107 030c 	add.w	r3, r7, #12
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7fe fb61 	bl	800599c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80072da:	6879      	ldr	r1, [r7, #4]
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	9202      	str	r2, [sp, #8]
 80072e2:	9301      	str	r3, [sp, #4]
 80072e4:	2302      	movs	r3, #2
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	2300      	movs	r3, #0
 80072ea:	460a      	mov	r2, r1
 80072ec:	4910      	ldr	r1, [pc, #64]	; (8007330 <xTimerCreateTimerTask+0x84>)
 80072ee:	4811      	ldr	r0, [pc, #68]	; (8007334 <xTimerCreateTimerTask+0x88>)
 80072f0:	f7ff f8f6 	bl	80064e0 <xTaskCreateStatic>
 80072f4:	4602      	mov	r2, r0
 80072f6:	4b10      	ldr	r3, [pc, #64]	; (8007338 <xTimerCreateTimerTask+0x8c>)
 80072f8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80072fa:	4b0f      	ldr	r3, [pc, #60]	; (8007338 <xTimerCreateTimerTask+0x8c>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007302:	2301      	movs	r3, #1
 8007304:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d109      	bne.n	8007320 <xTimerCreateTimerTask+0x74>
 800730c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	613b      	str	r3, [r7, #16]
 800731e:	e7fe      	b.n	800731e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007320:	697b      	ldr	r3, [r7, #20]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3718      	adds	r7, #24
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20000e14 	.word	0x20000e14
 8007330:	0800bcec 	.word	0x0800bcec
 8007334:	0800746d 	.word	0x0800746d
 8007338:	20000e18 	.word	0x20000e18

0800733c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08a      	sub	sp, #40	; 0x28
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
 8007348:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800734a:	2300      	movs	r3, #0
 800734c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d109      	bne.n	8007368 <xTimerGenericCommand+0x2c>
 8007354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007358:	f383 8811 	msr	BASEPRI, r3
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	623b      	str	r3, [r7, #32]
 8007366:	e7fe      	b.n	8007366 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007368:	4b19      	ldr	r3, [pc, #100]	; (80073d0 <xTimerGenericCommand+0x94>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d02a      	beq.n	80073c6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2b05      	cmp	r3, #5
 8007380:	dc18      	bgt.n	80073b4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007382:	f7ff feb5 	bl	80070f0 <xTaskGetSchedulerState>
 8007386:	4603      	mov	r3, r0
 8007388:	2b02      	cmp	r3, #2
 800738a:	d109      	bne.n	80073a0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800738c:	4b10      	ldr	r3, [pc, #64]	; (80073d0 <xTimerGenericCommand+0x94>)
 800738e:	6818      	ldr	r0, [r3, #0]
 8007390:	f107 0110 	add.w	r1, r7, #16
 8007394:	2300      	movs	r3, #0
 8007396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007398:	f7fe fccc 	bl	8005d34 <xQueueGenericSend>
 800739c:	6278      	str	r0, [r7, #36]	; 0x24
 800739e:	e012      	b.n	80073c6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80073a0:	4b0b      	ldr	r3, [pc, #44]	; (80073d0 <xTimerGenericCommand+0x94>)
 80073a2:	6818      	ldr	r0, [r3, #0]
 80073a4:	f107 0110 	add.w	r1, r7, #16
 80073a8:	2300      	movs	r3, #0
 80073aa:	2200      	movs	r2, #0
 80073ac:	f7fe fcc2 	bl	8005d34 <xQueueGenericSend>
 80073b0:	6278      	str	r0, [r7, #36]	; 0x24
 80073b2:	e008      	b.n	80073c6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80073b4:	4b06      	ldr	r3, [pc, #24]	; (80073d0 <xTimerGenericCommand+0x94>)
 80073b6:	6818      	ldr	r0, [r3, #0]
 80073b8:	f107 0110 	add.w	r1, r7, #16
 80073bc:	2300      	movs	r3, #0
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	f7fe fdb2 	bl	8005f28 <xQueueGenericSendFromISR>
 80073c4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80073c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3728      	adds	r7, #40	; 0x28
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	20000e14 	.word	0x20000e14

080073d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b088      	sub	sp, #32
 80073d8:	af02      	add	r7, sp, #8
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073de:	4b22      	ldr	r3, [pc, #136]	; (8007468 <prvProcessExpiredTimer+0x94>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	3304      	adds	r3, #4
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fe fb79 	bl	8005ae4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073f8:	f003 0304 	and.w	r3, r3, #4
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d021      	beq.n	8007444 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	699a      	ldr	r2, [r3, #24]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	18d1      	adds	r1, r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	6978      	ldr	r0, [r7, #20]
 800740e:	f000 f8d1 	bl	80075b4 <prvInsertTimerInActiveList>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01e      	beq.n	8007456 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007418:	2300      	movs	r3, #0
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	2300      	movs	r3, #0
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	2100      	movs	r1, #0
 8007422:	6978      	ldr	r0, [r7, #20]
 8007424:	f7ff ff8a 	bl	800733c <xTimerGenericCommand>
 8007428:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d112      	bne.n	8007456 <prvProcessExpiredTimer+0x82>
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	e7fe      	b.n	8007442 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800744a:	f023 0301 	bic.w	r3, r3, #1
 800744e:	b2da      	uxtb	r2, r3
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	6978      	ldr	r0, [r7, #20]
 800745c:	4798      	blx	r3
}
 800745e:	bf00      	nop
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20000e0c 	.word	0x20000e0c

0800746c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007474:	f107 0308 	add.w	r3, r7, #8
 8007478:	4618      	mov	r0, r3
 800747a:	f000 f857 	bl	800752c <prvGetNextExpireTime>
 800747e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	4619      	mov	r1, r3
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 f803 	bl	8007490 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800748a:	f000 f8d5 	bl	8007638 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800748e:	e7f1      	b.n	8007474 <prvTimerTask+0x8>

08007490 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800749a:	f7ff fa57 	bl	800694c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800749e:	f107 0308 	add.w	r3, r7, #8
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 f866 	bl	8007574 <prvSampleTimeNow>
 80074a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d130      	bne.n	8007512 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10a      	bne.n	80074cc <prvProcessTimerOrBlockTask+0x3c>
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d806      	bhi.n	80074cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80074be:	f7ff fa53 	bl	8006968 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80074c2:	68f9      	ldr	r1, [r7, #12]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7ff ff85 	bl	80073d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80074ca:	e024      	b.n	8007516 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d008      	beq.n	80074e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80074d2:	4b13      	ldr	r3, [pc, #76]	; (8007520 <prvProcessTimerOrBlockTask+0x90>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <prvProcessTimerOrBlockTask+0x50>
 80074dc:	2301      	movs	r3, #1
 80074de:	e000      	b.n	80074e2 <prvProcessTimerOrBlockTask+0x52>
 80074e0:	2300      	movs	r3, #0
 80074e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80074e4:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <prvProcessTimerOrBlockTask+0x94>)
 80074e6:	6818      	ldr	r0, [r3, #0]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	4619      	mov	r1, r3
 80074f2:	f7fe ffc1 	bl	8006478 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80074f6:	f7ff fa37 	bl	8006968 <xTaskResumeAll>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10a      	bne.n	8007516 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007500:	4b09      	ldr	r3, [pc, #36]	; (8007528 <prvProcessTimerOrBlockTask+0x98>)
 8007502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	f3bf 8f6f 	isb	sy
}
 8007510:	e001      	b.n	8007516 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007512:	f7ff fa29 	bl	8006968 <xTaskResumeAll>
}
 8007516:	bf00      	nop
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	20000e10 	.word	0x20000e10
 8007524:	20000e14 	.word	0x20000e14
 8007528:	e000ed04 	.word	0xe000ed04

0800752c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007534:	4b0e      	ldr	r3, [pc, #56]	; (8007570 <prvGetNextExpireTime+0x44>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <prvGetNextExpireTime+0x16>
 800753e:	2201      	movs	r2, #1
 8007540:	e000      	b.n	8007544 <prvGetNextExpireTime+0x18>
 8007542:	2200      	movs	r2, #0
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d105      	bne.n	800755c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007550:	4b07      	ldr	r3, [pc, #28]	; (8007570 <prvGetNextExpireTime+0x44>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	60fb      	str	r3, [r7, #12]
 800755a:	e001      	b.n	8007560 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800755c:	2300      	movs	r3, #0
 800755e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007560:	68fb      	ldr	r3, [r7, #12]
}
 8007562:	4618      	mov	r0, r3
 8007564:	3714      	adds	r7, #20
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	20000e0c 	.word	0x20000e0c

08007574 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800757c:	f7ff fa90 	bl	8006aa0 <xTaskGetTickCount>
 8007580:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007582:	4b0b      	ldr	r3, [pc, #44]	; (80075b0 <prvSampleTimeNow+0x3c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	429a      	cmp	r2, r3
 800758a:	d205      	bcs.n	8007598 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800758c:	f000 f930 	bl	80077f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	e002      	b.n	800759e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800759e:	4a04      	ldr	r2, [pc, #16]	; (80075b0 <prvSampleTimeNow+0x3c>)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80075a4:	68fb      	ldr	r3, [r7, #12]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20000e1c 	.word	0x20000e1c

080075b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
 80075c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80075c2:	2300      	movs	r3, #0
 80075c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d812      	bhi.n	8007600 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	1ad2      	subs	r2, r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d302      	bcc.n	80075ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80075e8:	2301      	movs	r3, #1
 80075ea:	617b      	str	r3, [r7, #20]
 80075ec:	e01b      	b.n	8007626 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80075ee:	4b10      	ldr	r3, [pc, #64]	; (8007630 <prvInsertTimerInActiveList+0x7c>)
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	3304      	adds	r3, #4
 80075f6:	4619      	mov	r1, r3
 80075f8:	4610      	mov	r0, r2
 80075fa:	f7fe fa3a 	bl	8005a72 <vListInsert>
 80075fe:	e012      	b.n	8007626 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	429a      	cmp	r2, r3
 8007606:	d206      	bcs.n	8007616 <prvInsertTimerInActiveList+0x62>
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	429a      	cmp	r2, r3
 800760e:	d302      	bcc.n	8007616 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007610:	2301      	movs	r3, #1
 8007612:	617b      	str	r3, [r7, #20]
 8007614:	e007      	b.n	8007626 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007616:	4b07      	ldr	r3, [pc, #28]	; (8007634 <prvInsertTimerInActiveList+0x80>)
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	3304      	adds	r3, #4
 800761e:	4619      	mov	r1, r3
 8007620:	4610      	mov	r0, r2
 8007622:	f7fe fa26 	bl	8005a72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007626:	697b      	ldr	r3, [r7, #20]
}
 8007628:	4618      	mov	r0, r3
 800762a:	3718      	adds	r7, #24
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	20000e10 	.word	0x20000e10
 8007634:	20000e0c 	.word	0x20000e0c

08007638 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b08e      	sub	sp, #56	; 0x38
 800763c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800763e:	e0c6      	b.n	80077ce <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	da17      	bge.n	8007676 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007646:	1d3b      	adds	r3, r7, #4
 8007648:	3304      	adds	r3, #4
 800764a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800764c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764e:	2b00      	cmp	r3, #0
 8007650:	d109      	bne.n	8007666 <prvProcessReceivedCommands+0x2e>
 8007652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	61fb      	str	r3, [r7, #28]
 8007664:	e7fe      	b.n	8007664 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800766c:	6850      	ldr	r0, [r2, #4]
 800766e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007670:	6892      	ldr	r2, [r2, #8]
 8007672:	4611      	mov	r1, r2
 8007674:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	f2c0 80a7 	blt.w	80077cc <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d004      	beq.n	8007694 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800768a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768c:	3304      	adds	r3, #4
 800768e:	4618      	mov	r0, r3
 8007690:	f7fe fa28 	bl	8005ae4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007694:	463b      	mov	r3, r7
 8007696:	4618      	mov	r0, r3
 8007698:	f7ff ff6c 	bl	8007574 <prvSampleTimeNow>
 800769c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b09      	cmp	r3, #9
 80076a2:	f200 8094 	bhi.w	80077ce <prvProcessReceivedCommands+0x196>
 80076a6:	a201      	add	r2, pc, #4	; (adr r2, 80076ac <prvProcessReceivedCommands+0x74>)
 80076a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ac:	080076d5 	.word	0x080076d5
 80076b0:	080076d5 	.word	0x080076d5
 80076b4:	080076d5 	.word	0x080076d5
 80076b8:	08007747 	.word	0x08007747
 80076bc:	0800775b 	.word	0x0800775b
 80076c0:	080077a3 	.word	0x080077a3
 80076c4:	080076d5 	.word	0x080076d5
 80076c8:	080076d5 	.word	0x080076d5
 80076cc:	08007747 	.word	0x08007747
 80076d0:	0800775b 	.word	0x0800775b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076da:	f043 0301 	orr.w	r3, r3, #1
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	18d1      	adds	r1, r2, r3
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076f4:	f7ff ff5e 	bl	80075b4 <prvInsertTimerInActiveList>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d067      	beq.n	80077ce <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007704:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007708:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800770c:	f003 0304 	and.w	r3, r3, #4
 8007710:	2b00      	cmp	r3, #0
 8007712:	d05c      	beq.n	80077ce <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	441a      	add	r2, r3
 800771c:	2300      	movs	r3, #0
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	2300      	movs	r3, #0
 8007722:	2100      	movs	r1, #0
 8007724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007726:	f7ff fe09 	bl	800733c <xTimerGenericCommand>
 800772a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d14d      	bne.n	80077ce <prvProcessReceivedCommands+0x196>
 8007732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	61bb      	str	r3, [r7, #24]
 8007744:	e7fe      	b.n	8007744 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007748:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800774c:	f023 0301 	bic.w	r3, r3, #1
 8007750:	b2da      	uxtb	r2, r3
 8007752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007754:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007758:	e039      	b.n	80077ce <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007760:	f043 0301 	orr.w	r3, r3, #1
 8007764:	b2da      	uxtb	r2, r3
 8007766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007768:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007770:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d109      	bne.n	800778e <prvProcessReceivedCommands+0x156>
 800777a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	617b      	str	r3, [r7, #20]
 800778c:	e7fe      	b.n	800778c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800778e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007790:	699a      	ldr	r2, [r3, #24]
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	18d1      	adds	r1, r2, r3
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800779a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800779c:	f7ff ff0a 	bl	80075b4 <prvInsertTimerInActiveList>
					break;
 80077a0:	e015      	b.n	80077ce <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80077a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077a8:	f003 0302 	and.w	r3, r3, #2
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d103      	bne.n	80077b8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80077b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077b2:	f000 fbc7 	bl	8007f44 <vPortFree>
 80077b6:	e00a      	b.n	80077ce <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077be:	f023 0301 	bic.w	r3, r3, #1
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80077ca:	e000      	b.n	80077ce <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80077cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077ce:	4b07      	ldr	r3, [pc, #28]	; (80077ec <prvProcessReceivedCommands+0x1b4>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	1d39      	adds	r1, r7, #4
 80077d4:	2200      	movs	r2, #0
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fe fc3a 	bl	8006050 <xQueueReceive>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f47f af2e 	bne.w	8007640 <prvProcessReceivedCommands+0x8>
	}
}
 80077e4:	bf00      	nop
 80077e6:	3730      	adds	r7, #48	; 0x30
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	20000e14 	.word	0x20000e14

080077f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b088      	sub	sp, #32
 80077f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80077f6:	e047      	b.n	8007888 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077f8:	4b2d      	ldr	r3, [pc, #180]	; (80078b0 <prvSwitchTimerLists+0xc0>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007802:	4b2b      	ldr	r3, [pc, #172]	; (80078b0 <prvSwitchTimerLists+0xc0>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	3304      	adds	r3, #4
 8007810:	4618      	mov	r0, r3
 8007812:	f7fe f967 	bl	8005ae4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6a1b      	ldr	r3, [r3, #32]
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007824:	f003 0304 	and.w	r3, r3, #4
 8007828:	2b00      	cmp	r3, #0
 800782a:	d02d      	beq.n	8007888 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	4413      	add	r3, r2
 8007834:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	429a      	cmp	r2, r3
 800783c:	d90e      	bls.n	800785c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800784a:	4b19      	ldr	r3, [pc, #100]	; (80078b0 <prvSwitchTimerLists+0xc0>)
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	3304      	adds	r3, #4
 8007852:	4619      	mov	r1, r3
 8007854:	4610      	mov	r0, r2
 8007856:	f7fe f90c 	bl	8005a72 <vListInsert>
 800785a:	e015      	b.n	8007888 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800785c:	2300      	movs	r3, #0
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	2300      	movs	r3, #0
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	2100      	movs	r1, #0
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f7ff fd68 	bl	800733c <xTimerGenericCommand>
 800786c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d109      	bne.n	8007888 <prvSwitchTimerLists+0x98>
 8007874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	603b      	str	r3, [r7, #0]
 8007886:	e7fe      	b.n	8007886 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007888:	4b09      	ldr	r3, [pc, #36]	; (80078b0 <prvSwitchTimerLists+0xc0>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1b2      	bne.n	80077f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007892:	4b07      	ldr	r3, [pc, #28]	; (80078b0 <prvSwitchTimerLists+0xc0>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007898:	4b06      	ldr	r3, [pc, #24]	; (80078b4 <prvSwitchTimerLists+0xc4>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a04      	ldr	r2, [pc, #16]	; (80078b0 <prvSwitchTimerLists+0xc0>)
 800789e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80078a0:	4a04      	ldr	r2, [pc, #16]	; (80078b4 <prvSwitchTimerLists+0xc4>)
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	6013      	str	r3, [r2, #0]
}
 80078a6:	bf00      	nop
 80078a8:	3718      	adds	r7, #24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20000e0c 	.word	0x20000e0c
 80078b4:	20000e10 	.word	0x20000e10

080078b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80078be:	f000 f965 	bl	8007b8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80078c2:	4b15      	ldr	r3, [pc, #84]	; (8007918 <prvCheckForValidListAndQueue+0x60>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d120      	bne.n	800790c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80078ca:	4814      	ldr	r0, [pc, #80]	; (800791c <prvCheckForValidListAndQueue+0x64>)
 80078cc:	f7fe f880 	bl	80059d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80078d0:	4813      	ldr	r0, [pc, #76]	; (8007920 <prvCheckForValidListAndQueue+0x68>)
 80078d2:	f7fe f87d 	bl	80059d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80078d6:	4b13      	ldr	r3, [pc, #76]	; (8007924 <prvCheckForValidListAndQueue+0x6c>)
 80078d8:	4a10      	ldr	r2, [pc, #64]	; (800791c <prvCheckForValidListAndQueue+0x64>)
 80078da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80078dc:	4b12      	ldr	r3, [pc, #72]	; (8007928 <prvCheckForValidListAndQueue+0x70>)
 80078de:	4a10      	ldr	r2, [pc, #64]	; (8007920 <prvCheckForValidListAndQueue+0x68>)
 80078e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80078e2:	2300      	movs	r3, #0
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	4b11      	ldr	r3, [pc, #68]	; (800792c <prvCheckForValidListAndQueue+0x74>)
 80078e8:	4a11      	ldr	r2, [pc, #68]	; (8007930 <prvCheckForValidListAndQueue+0x78>)
 80078ea:	2110      	movs	r1, #16
 80078ec:	200a      	movs	r0, #10
 80078ee:	f7fe f98b 	bl	8005c08 <xQueueGenericCreateStatic>
 80078f2:	4602      	mov	r2, r0
 80078f4:	4b08      	ldr	r3, [pc, #32]	; (8007918 <prvCheckForValidListAndQueue+0x60>)
 80078f6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80078f8:	4b07      	ldr	r3, [pc, #28]	; (8007918 <prvCheckForValidListAndQueue+0x60>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d005      	beq.n	800790c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007900:	4b05      	ldr	r3, [pc, #20]	; (8007918 <prvCheckForValidListAndQueue+0x60>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	490b      	ldr	r1, [pc, #44]	; (8007934 <prvCheckForValidListAndQueue+0x7c>)
 8007906:	4618      	mov	r0, r3
 8007908:	f7fe fd8e 	bl	8006428 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800790c:	f000 f96c 	bl	8007be8 <vPortExitCritical>
}
 8007910:	bf00      	nop
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	20000e14 	.word	0x20000e14
 800791c:	20000de4 	.word	0x20000de4
 8007920:	20000df8 	.word	0x20000df8
 8007924:	20000e0c 	.word	0x20000e0c
 8007928:	20000e10 	.word	0x20000e10
 800792c:	20000ec0 	.word	0x20000ec0
 8007930:	20000e20 	.word	0x20000e20
 8007934:	0800bcf4 	.word	0x0800bcf4

08007938 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	3b04      	subs	r3, #4
 8007948:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	3b04      	subs	r3, #4
 8007956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	f023 0201 	bic.w	r2, r3, #1
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3b04      	subs	r3, #4
 8007966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007968:	4a0c      	ldr	r2, [pc, #48]	; (800799c <pxPortInitialiseStack+0x64>)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3b14      	subs	r3, #20
 8007972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	3b04      	subs	r3, #4
 800797e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f06f 0202 	mvn.w	r2, #2
 8007986:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	3b20      	subs	r3, #32
 800798c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800798e:	68fb      	ldr	r3, [r7, #12]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	080079a1 	.word	0x080079a1

080079a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80079a6:	2300      	movs	r3, #0
 80079a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80079aa:	4b11      	ldr	r3, [pc, #68]	; (80079f0 <prvTaskExitError+0x50>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079b2:	d009      	beq.n	80079c8 <prvTaskExitError+0x28>
 80079b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	60fb      	str	r3, [r7, #12]
 80079c6:	e7fe      	b.n	80079c6 <prvTaskExitError+0x26>
 80079c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80079da:	bf00      	nop
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d0fc      	beq.n	80079dc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80079e2:	bf00      	nop
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	20000014 	.word	0x20000014
	...

08007a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a00:	4b07      	ldr	r3, [pc, #28]	; (8007a20 <pxCurrentTCBConst2>)
 8007a02:	6819      	ldr	r1, [r3, #0]
 8007a04:	6808      	ldr	r0, [r1, #0]
 8007a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0a:	f380 8809 	msr	PSP, r0
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f04f 0000 	mov.w	r0, #0
 8007a16:	f380 8811 	msr	BASEPRI, r0
 8007a1a:	4770      	bx	lr
 8007a1c:	f3af 8000 	nop.w

08007a20 <pxCurrentTCBConst2>:
 8007a20:	200008e4 	.word	0x200008e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop

08007a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a28:	4808      	ldr	r0, [pc, #32]	; (8007a4c <prvPortStartFirstTask+0x24>)
 8007a2a:	6800      	ldr	r0, [r0, #0]
 8007a2c:	6800      	ldr	r0, [r0, #0]
 8007a2e:	f380 8808 	msr	MSP, r0
 8007a32:	f04f 0000 	mov.w	r0, #0
 8007a36:	f380 8814 	msr	CONTROL, r0
 8007a3a:	b662      	cpsie	i
 8007a3c:	b661      	cpsie	f
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	df00      	svc	0
 8007a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a4a:	bf00      	nop
 8007a4c:	e000ed08 	.word	0xe000ed08

08007a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a56:	4b44      	ldr	r3, [pc, #272]	; (8007b68 <xPortStartScheduler+0x118>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a44      	ldr	r2, [pc, #272]	; (8007b6c <xPortStartScheduler+0x11c>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d109      	bne.n	8007a74 <xPortStartScheduler+0x24>
 8007a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	613b      	str	r3, [r7, #16]
 8007a72:	e7fe      	b.n	8007a72 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a74:	4b3c      	ldr	r3, [pc, #240]	; (8007b68 <xPortStartScheduler+0x118>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a3d      	ldr	r2, [pc, #244]	; (8007b70 <xPortStartScheduler+0x120>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d109      	bne.n	8007a92 <xPortStartScheduler+0x42>
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	60fb      	str	r3, [r7, #12]
 8007a90:	e7fe      	b.n	8007a90 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a92:	4b38      	ldr	r3, [pc, #224]	; (8007b74 <xPortStartScheduler+0x124>)
 8007a94:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	22ff      	movs	r2, #255	; 0xff
 8007aa2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007aac:	78fb      	ldrb	r3, [r7, #3]
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ab4:	b2da      	uxtb	r2, r3
 8007ab6:	4b30      	ldr	r3, [pc, #192]	; (8007b78 <xPortStartScheduler+0x128>)
 8007ab8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007aba:	4b30      	ldr	r3, [pc, #192]	; (8007b7c <xPortStartScheduler+0x12c>)
 8007abc:	2207      	movs	r2, #7
 8007abe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ac0:	e009      	b.n	8007ad6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007ac2:	4b2e      	ldr	r3, [pc, #184]	; (8007b7c <xPortStartScheduler+0x12c>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	4a2c      	ldr	r2, [pc, #176]	; (8007b7c <xPortStartScheduler+0x12c>)
 8007aca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007acc:	78fb      	ldrb	r3, [r7, #3]
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ad6:	78fb      	ldrb	r3, [r7, #3]
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ade:	2b80      	cmp	r3, #128	; 0x80
 8007ae0:	d0ef      	beq.n	8007ac2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ae2:	4b26      	ldr	r3, [pc, #152]	; (8007b7c <xPortStartScheduler+0x12c>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f1c3 0307 	rsb	r3, r3, #7
 8007aea:	2b04      	cmp	r3, #4
 8007aec:	d009      	beq.n	8007b02 <xPortStartScheduler+0xb2>
 8007aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	60bb      	str	r3, [r7, #8]
 8007b00:	e7fe      	b.n	8007b00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b02:	4b1e      	ldr	r3, [pc, #120]	; (8007b7c <xPortStartScheduler+0x12c>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	021b      	lsls	r3, r3, #8
 8007b08:	4a1c      	ldr	r2, [pc, #112]	; (8007b7c <xPortStartScheduler+0x12c>)
 8007b0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b0c:	4b1b      	ldr	r3, [pc, #108]	; (8007b7c <xPortStartScheduler+0x12c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b14:	4a19      	ldr	r2, [pc, #100]	; (8007b7c <xPortStartScheduler+0x12c>)
 8007b16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b20:	4b17      	ldr	r3, [pc, #92]	; (8007b80 <xPortStartScheduler+0x130>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a16      	ldr	r2, [pc, #88]	; (8007b80 <xPortStartScheduler+0x130>)
 8007b26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b2c:	4b14      	ldr	r3, [pc, #80]	; (8007b80 <xPortStartScheduler+0x130>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a13      	ldr	r2, [pc, #76]	; (8007b80 <xPortStartScheduler+0x130>)
 8007b32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b38:	f000 f8d6 	bl	8007ce8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b3c:	4b11      	ldr	r3, [pc, #68]	; (8007b84 <xPortStartScheduler+0x134>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b42:	f000 f8f5 	bl	8007d30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b46:	4b10      	ldr	r3, [pc, #64]	; (8007b88 <xPortStartScheduler+0x138>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a0f      	ldr	r2, [pc, #60]	; (8007b88 <xPortStartScheduler+0x138>)
 8007b4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b52:	f7ff ff69 	bl	8007a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b56:	f7ff f86b 	bl	8006c30 <vTaskSwitchContext>
	prvTaskExitError();
 8007b5a:	f7ff ff21 	bl	80079a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3718      	adds	r7, #24
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	e000ed00 	.word	0xe000ed00
 8007b6c:	410fc271 	.word	0x410fc271
 8007b70:	410fc270 	.word	0x410fc270
 8007b74:	e000e400 	.word	0xe000e400
 8007b78:	20000f10 	.word	0x20000f10
 8007b7c:	20000f14 	.word	0x20000f14
 8007b80:	e000ed20 	.word	0xe000ed20
 8007b84:	20000014 	.word	0x20000014
 8007b88:	e000ef34 	.word	0xe000ef34

08007b8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ba4:	4b0e      	ldr	r3, [pc, #56]	; (8007be0 <vPortEnterCritical+0x54>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	4a0d      	ldr	r2, [pc, #52]	; (8007be0 <vPortEnterCritical+0x54>)
 8007bac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007bae:	4b0c      	ldr	r3, [pc, #48]	; (8007be0 <vPortEnterCritical+0x54>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d10e      	bne.n	8007bd4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007bb6:	4b0b      	ldr	r3, [pc, #44]	; (8007be4 <vPortEnterCritical+0x58>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d009      	beq.n	8007bd4 <vPortEnterCritical+0x48>
 8007bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	603b      	str	r3, [r7, #0]
 8007bd2:	e7fe      	b.n	8007bd2 <vPortEnterCritical+0x46>
	}
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr
 8007be0:	20000014 	.word	0x20000014
 8007be4:	e000ed04 	.word	0xe000ed04

08007be8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007bee:	4b11      	ldr	r3, [pc, #68]	; (8007c34 <vPortExitCritical+0x4c>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d109      	bne.n	8007c0a <vPortExitCritical+0x22>
 8007bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfa:	f383 8811 	msr	BASEPRI, r3
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	607b      	str	r3, [r7, #4]
 8007c08:	e7fe      	b.n	8007c08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007c0a:	4b0a      	ldr	r3, [pc, #40]	; (8007c34 <vPortExitCritical+0x4c>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	4a08      	ldr	r2, [pc, #32]	; (8007c34 <vPortExitCritical+0x4c>)
 8007c12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c14:	4b07      	ldr	r3, [pc, #28]	; (8007c34 <vPortExitCritical+0x4c>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d104      	bne.n	8007c26 <vPortExitCritical+0x3e>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c26:	bf00      	nop
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	20000014 	.word	0x20000014
	...

08007c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c40:	f3ef 8009 	mrs	r0, PSP
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	4b15      	ldr	r3, [pc, #84]	; (8007ca0 <pxCurrentTCBConst>)
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	f01e 0f10 	tst.w	lr, #16
 8007c50:	bf08      	it	eq
 8007c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c5a:	6010      	str	r0, [r2, #0]
 8007c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c64:	f380 8811 	msr	BASEPRI, r0
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f7fe ffde 	bl	8006c30 <vTaskSwitchContext>
 8007c74:	f04f 0000 	mov.w	r0, #0
 8007c78:	f380 8811 	msr	BASEPRI, r0
 8007c7c:	bc09      	pop	{r0, r3}
 8007c7e:	6819      	ldr	r1, [r3, #0]
 8007c80:	6808      	ldr	r0, [r1, #0]
 8007c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c86:	f01e 0f10 	tst.w	lr, #16
 8007c8a:	bf08      	it	eq
 8007c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c90:	f380 8809 	msr	PSP, r0
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	f3af 8000 	nop.w

08007ca0 <pxCurrentTCBConst>:
 8007ca0:	200008e4 	.word	0x200008e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ca4:	bf00      	nop
 8007ca6:	bf00      	nop

08007ca8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
	__asm volatile
 8007cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007cc0:	f7fe fefe 	bl	8006ac0 <xTaskIncrementTick>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007cca:	4b06      	ldr	r3, [pc, #24]	; (8007ce4 <SysTick_Handler+0x3c>)
 8007ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cd0:	601a      	str	r2, [r3, #0]
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007cdc:	bf00      	nop
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	e000ed04 	.word	0xe000ed04

08007ce8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ce8:	b480      	push	{r7}
 8007cea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007cec:	4b0b      	ldr	r3, [pc, #44]	; (8007d1c <vPortSetupTimerInterrupt+0x34>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007cf2:	4b0b      	ldr	r3, [pc, #44]	; (8007d20 <vPortSetupTimerInterrupt+0x38>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cf8:	4b0a      	ldr	r3, [pc, #40]	; (8007d24 <vPortSetupTimerInterrupt+0x3c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a0a      	ldr	r2, [pc, #40]	; (8007d28 <vPortSetupTimerInterrupt+0x40>)
 8007cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007d02:	099b      	lsrs	r3, r3, #6
 8007d04:	4a09      	ldr	r2, [pc, #36]	; (8007d2c <vPortSetupTimerInterrupt+0x44>)
 8007d06:	3b01      	subs	r3, #1
 8007d08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d0a:	4b04      	ldr	r3, [pc, #16]	; (8007d1c <vPortSetupTimerInterrupt+0x34>)
 8007d0c:	2207      	movs	r2, #7
 8007d0e:	601a      	str	r2, [r3, #0]
}
 8007d10:	bf00      	nop
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	e000e010 	.word	0xe000e010
 8007d20:	e000e018 	.word	0xe000e018
 8007d24:	20000008 	.word	0x20000008
 8007d28:	10624dd3 	.word	0x10624dd3
 8007d2c:	e000e014 	.word	0xe000e014

08007d30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d40 <vPortEnableVFP+0x10>
 8007d34:	6801      	ldr	r1, [r0, #0]
 8007d36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d3a:	6001      	str	r1, [r0, #0]
 8007d3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d3e:	bf00      	nop
 8007d40:	e000ed88 	.word	0xe000ed88

08007d44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d4a:	f3ef 8305 	mrs	r3, IPSR
 8007d4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2b0f      	cmp	r3, #15
 8007d54:	d913      	bls.n	8007d7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d56:	4a16      	ldr	r2, [pc, #88]	; (8007db0 <vPortValidateInterruptPriority+0x6c>)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d60:	4b14      	ldr	r3, [pc, #80]	; (8007db4 <vPortValidateInterruptPriority+0x70>)
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	7afa      	ldrb	r2, [r7, #11]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d209      	bcs.n	8007d7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	607b      	str	r3, [r7, #4]
 8007d7c:	e7fe      	b.n	8007d7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d7e:	4b0e      	ldr	r3, [pc, #56]	; (8007db8 <vPortValidateInterruptPriority+0x74>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d86:	4b0d      	ldr	r3, [pc, #52]	; (8007dbc <vPortValidateInterruptPriority+0x78>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d909      	bls.n	8007da2 <vPortValidateInterruptPriority+0x5e>
 8007d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	603b      	str	r3, [r7, #0]
 8007da0:	e7fe      	b.n	8007da0 <vPortValidateInterruptPriority+0x5c>
	}
 8007da2:	bf00      	nop
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	e000e3f0 	.word	0xe000e3f0
 8007db4:	20000f10 	.word	0x20000f10
 8007db8:	e000ed0c 	.word	0xe000ed0c
 8007dbc:	20000f14 	.word	0x20000f14

08007dc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b08a      	sub	sp, #40	; 0x28
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007dcc:	f7fe fdbe 	bl	800694c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007dd0:	4b57      	ldr	r3, [pc, #348]	; (8007f30 <pvPortMalloc+0x170>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d101      	bne.n	8007ddc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007dd8:	f000 f90c 	bl	8007ff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ddc:	4b55      	ldr	r3, [pc, #340]	; (8007f34 <pvPortMalloc+0x174>)
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4013      	ands	r3, r2
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f040 808c 	bne.w	8007f02 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d01c      	beq.n	8007e2a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007df0:	2208      	movs	r2, #8
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4413      	add	r3, r2
 8007df6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f003 0307 	and.w	r3, r3, #7
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d013      	beq.n	8007e2a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f023 0307 	bic.w	r3, r3, #7
 8007e08:	3308      	adds	r3, #8
 8007e0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f003 0307 	and.w	r3, r3, #7
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d009      	beq.n	8007e2a <pvPortMalloc+0x6a>
 8007e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	e7fe      	b.n	8007e28 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d068      	beq.n	8007f02 <pvPortMalloc+0x142>
 8007e30:	4b41      	ldr	r3, [pc, #260]	; (8007f38 <pvPortMalloc+0x178>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d863      	bhi.n	8007f02 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e3a:	4b40      	ldr	r3, [pc, #256]	; (8007f3c <pvPortMalloc+0x17c>)
 8007e3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e3e:	4b3f      	ldr	r3, [pc, #252]	; (8007f3c <pvPortMalloc+0x17c>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e44:	e004      	b.n	8007e50 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d903      	bls.n	8007e62 <pvPortMalloc+0xa2>
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1f1      	bne.n	8007e46 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e62:	4b33      	ldr	r3, [pc, #204]	; (8007f30 <pvPortMalloc+0x170>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d04a      	beq.n	8007f02 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e6c:	6a3b      	ldr	r3, [r7, #32]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2208      	movs	r2, #8
 8007e72:	4413      	add	r3, r2
 8007e74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	6a3b      	ldr	r3, [r7, #32]
 8007e7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e80:	685a      	ldr	r2, [r3, #4]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	1ad2      	subs	r2, r2, r3
 8007e86:	2308      	movs	r3, #8
 8007e88:	005b      	lsls	r3, r3, #1
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d91e      	bls.n	8007ecc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4413      	add	r3, r2
 8007e94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	f003 0307 	and.w	r3, r3, #7
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d009      	beq.n	8007eb4 <pvPortMalloc+0xf4>
 8007ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	613b      	str	r3, [r7, #16]
 8007eb2:	e7fe      	b.n	8007eb2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb6:	685a      	ldr	r2, [r3, #4]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	1ad2      	subs	r2, r2, r3
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ec6:	69b8      	ldr	r0, [r7, #24]
 8007ec8:	f000 f8f6 	bl	80080b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ecc:	4b1a      	ldr	r3, [pc, #104]	; (8007f38 <pvPortMalloc+0x178>)
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	4a18      	ldr	r2, [pc, #96]	; (8007f38 <pvPortMalloc+0x178>)
 8007ed8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007eda:	4b17      	ldr	r3, [pc, #92]	; (8007f38 <pvPortMalloc+0x178>)
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	4b18      	ldr	r3, [pc, #96]	; (8007f40 <pvPortMalloc+0x180>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d203      	bcs.n	8007eee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ee6:	4b14      	ldr	r3, [pc, #80]	; (8007f38 <pvPortMalloc+0x178>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a15      	ldr	r2, [pc, #84]	; (8007f40 <pvPortMalloc+0x180>)
 8007eec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	4b10      	ldr	r3, [pc, #64]	; (8007f34 <pvPortMalloc+0x174>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	2200      	movs	r2, #0
 8007f00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f02:	f7fe fd31 	bl	8006968 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	f003 0307 	and.w	r3, r3, #7
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d009      	beq.n	8007f24 <pvPortMalloc+0x164>
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	60fb      	str	r3, [r7, #12]
 8007f22:	e7fe      	b.n	8007f22 <pvPortMalloc+0x162>
	return pvReturn;
 8007f24:	69fb      	ldr	r3, [r7, #28]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3728      	adds	r7, #40	; 0x28
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	20004b20 	.word	0x20004b20
 8007f34:	20004b2c 	.word	0x20004b2c
 8007f38:	20004b24 	.word	0x20004b24
 8007f3c:	20004b18 	.word	0x20004b18
 8007f40:	20004b28 	.word	0x20004b28

08007f44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d046      	beq.n	8007fe4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f56:	2308      	movs	r3, #8
 8007f58:	425b      	negs	r3, r3
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	4b20      	ldr	r3, [pc, #128]	; (8007fec <vPortFree+0xa8>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d109      	bne.n	8007f86 <vPortFree+0x42>
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	e7fe      	b.n	8007f84 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d009      	beq.n	8007fa2 <vPortFree+0x5e>
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	60bb      	str	r3, [r7, #8]
 8007fa0:	e7fe      	b.n	8007fa0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	4b11      	ldr	r3, [pc, #68]	; (8007fec <vPortFree+0xa8>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4013      	ands	r3, r2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d019      	beq.n	8007fe4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d115      	bne.n	8007fe4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	4b0b      	ldr	r3, [pc, #44]	; (8007fec <vPortFree+0xa8>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	43db      	mvns	r3, r3
 8007fc2:	401a      	ands	r2, r3
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007fc8:	f7fe fcc0 	bl	800694c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	4b07      	ldr	r3, [pc, #28]	; (8007ff0 <vPortFree+0xac>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	4a06      	ldr	r2, [pc, #24]	; (8007ff0 <vPortFree+0xac>)
 8007fd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007fda:	6938      	ldr	r0, [r7, #16]
 8007fdc:	f000 f86c 	bl	80080b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007fe0:	f7fe fcc2 	bl	8006968 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007fe4:	bf00      	nop
 8007fe6:	3718      	adds	r7, #24
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	20004b2c 	.word	0x20004b2c
 8007ff0:	20004b24 	.word	0x20004b24

08007ff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ffa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007ffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008000:	4b27      	ldr	r3, [pc, #156]	; (80080a0 <prvHeapInit+0xac>)
 8008002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f003 0307 	and.w	r3, r3, #7
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00c      	beq.n	8008028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	3307      	adds	r3, #7
 8008012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f023 0307 	bic.w	r3, r3, #7
 800801a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	4a1f      	ldr	r2, [pc, #124]	; (80080a0 <prvHeapInit+0xac>)
 8008024:	4413      	add	r3, r2
 8008026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800802c:	4a1d      	ldr	r2, [pc, #116]	; (80080a4 <prvHeapInit+0xb0>)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008032:	4b1c      	ldr	r3, [pc, #112]	; (80080a4 <prvHeapInit+0xb0>)
 8008034:	2200      	movs	r2, #0
 8008036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	4413      	add	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008040:	2208      	movs	r2, #8
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	1a9b      	subs	r3, r3, r2
 8008046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f023 0307 	bic.w	r3, r3, #7
 800804e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4a15      	ldr	r2, [pc, #84]	; (80080a8 <prvHeapInit+0xb4>)
 8008054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008056:	4b14      	ldr	r3, [pc, #80]	; (80080a8 <prvHeapInit+0xb4>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2200      	movs	r2, #0
 800805c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800805e:	4b12      	ldr	r3, [pc, #72]	; (80080a8 <prvHeapInit+0xb4>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2200      	movs	r2, #0
 8008064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	1ad2      	subs	r2, r2, r3
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008074:	4b0c      	ldr	r3, [pc, #48]	; (80080a8 <prvHeapInit+0xb4>)
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	4a0a      	ldr	r2, [pc, #40]	; (80080ac <prvHeapInit+0xb8>)
 8008082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	4a09      	ldr	r2, [pc, #36]	; (80080b0 <prvHeapInit+0xbc>)
 800808a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800808c:	4b09      	ldr	r3, [pc, #36]	; (80080b4 <prvHeapInit+0xc0>)
 800808e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008092:	601a      	str	r2, [r3, #0]
}
 8008094:	bf00      	nop
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	20000f18 	.word	0x20000f18
 80080a4:	20004b18 	.word	0x20004b18
 80080a8:	20004b20 	.word	0x20004b20
 80080ac:	20004b28 	.word	0x20004b28
 80080b0:	20004b24 	.word	0x20004b24
 80080b4:	20004b2c 	.word	0x20004b2c

080080b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080c0:	4b28      	ldr	r3, [pc, #160]	; (8008164 <prvInsertBlockIntoFreeList+0xac>)
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	e002      	b.n	80080cc <prvInsertBlockIntoFreeList+0x14>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d8f7      	bhi.n	80080c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	4413      	add	r3, r2
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d108      	bne.n	80080fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	441a      	add	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	441a      	add	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	429a      	cmp	r2, r3
 800810c:	d118      	bne.n	8008140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	4b15      	ldr	r3, [pc, #84]	; (8008168 <prvInsertBlockIntoFreeList+0xb0>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	429a      	cmp	r2, r3
 8008118:	d00d      	beq.n	8008136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	441a      	add	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	601a      	str	r2, [r3, #0]
 8008134:	e008      	b.n	8008148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008136:	4b0c      	ldr	r3, [pc, #48]	; (8008168 <prvInsertBlockIntoFreeList+0xb0>)
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	e003      	b.n	8008148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	429a      	cmp	r2, r3
 800814e:	d002      	beq.n	8008156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008156:	bf00      	nop
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	20004b18 	.word	0x20004b18
 8008168:	20004b20 	.word	0x20004b20

0800816c <__errno>:
 800816c:	4b01      	ldr	r3, [pc, #4]	; (8008174 <__errno+0x8>)
 800816e:	6818      	ldr	r0, [r3, #0]
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	20000018 	.word	0x20000018

08008178 <__libc_init_array>:
 8008178:	b570      	push	{r4, r5, r6, lr}
 800817a:	4e0d      	ldr	r6, [pc, #52]	; (80081b0 <__libc_init_array+0x38>)
 800817c:	4c0d      	ldr	r4, [pc, #52]	; (80081b4 <__libc_init_array+0x3c>)
 800817e:	1ba4      	subs	r4, r4, r6
 8008180:	10a4      	asrs	r4, r4, #2
 8008182:	2500      	movs	r5, #0
 8008184:	42a5      	cmp	r5, r4
 8008186:	d109      	bne.n	800819c <__libc_init_array+0x24>
 8008188:	4e0b      	ldr	r6, [pc, #44]	; (80081b8 <__libc_init_array+0x40>)
 800818a:	4c0c      	ldr	r4, [pc, #48]	; (80081bc <__libc_init_array+0x44>)
 800818c:	f003 fd58 	bl	800bc40 <_init>
 8008190:	1ba4      	subs	r4, r4, r6
 8008192:	10a4      	asrs	r4, r4, #2
 8008194:	2500      	movs	r5, #0
 8008196:	42a5      	cmp	r5, r4
 8008198:	d105      	bne.n	80081a6 <__libc_init_array+0x2e>
 800819a:	bd70      	pop	{r4, r5, r6, pc}
 800819c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081a0:	4798      	blx	r3
 80081a2:	3501      	adds	r5, #1
 80081a4:	e7ee      	b.n	8008184 <__libc_init_array+0xc>
 80081a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081aa:	4798      	blx	r3
 80081ac:	3501      	adds	r5, #1
 80081ae:	e7f2      	b.n	8008196 <__libc_init_array+0x1e>
 80081b0:	0800c0b0 	.word	0x0800c0b0
 80081b4:	0800c0b0 	.word	0x0800c0b0
 80081b8:	0800c0b0 	.word	0x0800c0b0
 80081bc:	0800c0b4 	.word	0x0800c0b4

080081c0 <memcpy>:
 80081c0:	b510      	push	{r4, lr}
 80081c2:	1e43      	subs	r3, r0, #1
 80081c4:	440a      	add	r2, r1
 80081c6:	4291      	cmp	r1, r2
 80081c8:	d100      	bne.n	80081cc <memcpy+0xc>
 80081ca:	bd10      	pop	{r4, pc}
 80081cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081d4:	e7f7      	b.n	80081c6 <memcpy+0x6>

080081d6 <memset>:
 80081d6:	4402      	add	r2, r0
 80081d8:	4603      	mov	r3, r0
 80081da:	4293      	cmp	r3, r2
 80081dc:	d100      	bne.n	80081e0 <memset+0xa>
 80081de:	4770      	bx	lr
 80081e0:	f803 1b01 	strb.w	r1, [r3], #1
 80081e4:	e7f9      	b.n	80081da <memset+0x4>

080081e6 <__cvt>:
 80081e6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081ea:	ec55 4b10 	vmov	r4, r5, d0
 80081ee:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80081f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80081f4:	2d00      	cmp	r5, #0
 80081f6:	460e      	mov	r6, r1
 80081f8:	4691      	mov	r9, r2
 80081fa:	4619      	mov	r1, r3
 80081fc:	bfb8      	it	lt
 80081fe:	4622      	movlt	r2, r4
 8008200:	462b      	mov	r3, r5
 8008202:	f027 0720 	bic.w	r7, r7, #32
 8008206:	bfbb      	ittet	lt
 8008208:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800820c:	461d      	movlt	r5, r3
 800820e:	2300      	movge	r3, #0
 8008210:	232d      	movlt	r3, #45	; 0x2d
 8008212:	bfb8      	it	lt
 8008214:	4614      	movlt	r4, r2
 8008216:	2f46      	cmp	r7, #70	; 0x46
 8008218:	700b      	strb	r3, [r1, #0]
 800821a:	d004      	beq.n	8008226 <__cvt+0x40>
 800821c:	2f45      	cmp	r7, #69	; 0x45
 800821e:	d100      	bne.n	8008222 <__cvt+0x3c>
 8008220:	3601      	adds	r6, #1
 8008222:	2102      	movs	r1, #2
 8008224:	e000      	b.n	8008228 <__cvt+0x42>
 8008226:	2103      	movs	r1, #3
 8008228:	ab03      	add	r3, sp, #12
 800822a:	9301      	str	r3, [sp, #4]
 800822c:	ab02      	add	r3, sp, #8
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	4632      	mov	r2, r6
 8008232:	4653      	mov	r3, sl
 8008234:	ec45 4b10 	vmov	d0, r4, r5
 8008238:	f001 fd76 	bl	8009d28 <_dtoa_r>
 800823c:	2f47      	cmp	r7, #71	; 0x47
 800823e:	4680      	mov	r8, r0
 8008240:	d102      	bne.n	8008248 <__cvt+0x62>
 8008242:	f019 0f01 	tst.w	r9, #1
 8008246:	d026      	beq.n	8008296 <__cvt+0xb0>
 8008248:	2f46      	cmp	r7, #70	; 0x46
 800824a:	eb08 0906 	add.w	r9, r8, r6
 800824e:	d111      	bne.n	8008274 <__cvt+0x8e>
 8008250:	f898 3000 	ldrb.w	r3, [r8]
 8008254:	2b30      	cmp	r3, #48	; 0x30
 8008256:	d10a      	bne.n	800826e <__cvt+0x88>
 8008258:	2200      	movs	r2, #0
 800825a:	2300      	movs	r3, #0
 800825c:	4620      	mov	r0, r4
 800825e:	4629      	mov	r1, r5
 8008260:	f7f8 fc3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008264:	b918      	cbnz	r0, 800826e <__cvt+0x88>
 8008266:	f1c6 0601 	rsb	r6, r6, #1
 800826a:	f8ca 6000 	str.w	r6, [sl]
 800826e:	f8da 3000 	ldr.w	r3, [sl]
 8008272:	4499      	add	r9, r3
 8008274:	2200      	movs	r2, #0
 8008276:	2300      	movs	r3, #0
 8008278:	4620      	mov	r0, r4
 800827a:	4629      	mov	r1, r5
 800827c:	f7f8 fc2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008280:	b938      	cbnz	r0, 8008292 <__cvt+0xac>
 8008282:	2230      	movs	r2, #48	; 0x30
 8008284:	9b03      	ldr	r3, [sp, #12]
 8008286:	454b      	cmp	r3, r9
 8008288:	d205      	bcs.n	8008296 <__cvt+0xb0>
 800828a:	1c59      	adds	r1, r3, #1
 800828c:	9103      	str	r1, [sp, #12]
 800828e:	701a      	strb	r2, [r3, #0]
 8008290:	e7f8      	b.n	8008284 <__cvt+0x9e>
 8008292:	f8cd 900c 	str.w	r9, [sp, #12]
 8008296:	9b03      	ldr	r3, [sp, #12]
 8008298:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800829a:	eba3 0308 	sub.w	r3, r3, r8
 800829e:	4640      	mov	r0, r8
 80082a0:	6013      	str	r3, [r2, #0]
 80082a2:	b004      	add	sp, #16
 80082a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080082a8 <__exponent>:
 80082a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082aa:	2900      	cmp	r1, #0
 80082ac:	4604      	mov	r4, r0
 80082ae:	bfba      	itte	lt
 80082b0:	4249      	neglt	r1, r1
 80082b2:	232d      	movlt	r3, #45	; 0x2d
 80082b4:	232b      	movge	r3, #43	; 0x2b
 80082b6:	2909      	cmp	r1, #9
 80082b8:	f804 2b02 	strb.w	r2, [r4], #2
 80082bc:	7043      	strb	r3, [r0, #1]
 80082be:	dd20      	ble.n	8008302 <__exponent+0x5a>
 80082c0:	f10d 0307 	add.w	r3, sp, #7
 80082c4:	461f      	mov	r7, r3
 80082c6:	260a      	movs	r6, #10
 80082c8:	fb91 f5f6 	sdiv	r5, r1, r6
 80082cc:	fb06 1115 	mls	r1, r6, r5, r1
 80082d0:	3130      	adds	r1, #48	; 0x30
 80082d2:	2d09      	cmp	r5, #9
 80082d4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80082d8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80082dc:	4629      	mov	r1, r5
 80082de:	dc09      	bgt.n	80082f4 <__exponent+0x4c>
 80082e0:	3130      	adds	r1, #48	; 0x30
 80082e2:	3b02      	subs	r3, #2
 80082e4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80082e8:	42bb      	cmp	r3, r7
 80082ea:	4622      	mov	r2, r4
 80082ec:	d304      	bcc.n	80082f8 <__exponent+0x50>
 80082ee:	1a10      	subs	r0, r2, r0
 80082f0:	b003      	add	sp, #12
 80082f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082f4:	4613      	mov	r3, r2
 80082f6:	e7e7      	b.n	80082c8 <__exponent+0x20>
 80082f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082fc:	f804 2b01 	strb.w	r2, [r4], #1
 8008300:	e7f2      	b.n	80082e8 <__exponent+0x40>
 8008302:	2330      	movs	r3, #48	; 0x30
 8008304:	4419      	add	r1, r3
 8008306:	7083      	strb	r3, [r0, #2]
 8008308:	1d02      	adds	r2, r0, #4
 800830a:	70c1      	strb	r1, [r0, #3]
 800830c:	e7ef      	b.n	80082ee <__exponent+0x46>
	...

08008310 <_printf_float>:
 8008310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008314:	b08d      	sub	sp, #52	; 0x34
 8008316:	460c      	mov	r4, r1
 8008318:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800831c:	4616      	mov	r6, r2
 800831e:	461f      	mov	r7, r3
 8008320:	4605      	mov	r5, r0
 8008322:	f002 fde5 	bl	800aef0 <_localeconv_r>
 8008326:	6803      	ldr	r3, [r0, #0]
 8008328:	9304      	str	r3, [sp, #16]
 800832a:	4618      	mov	r0, r3
 800832c:	f7f7 ff58 	bl	80001e0 <strlen>
 8008330:	2300      	movs	r3, #0
 8008332:	930a      	str	r3, [sp, #40]	; 0x28
 8008334:	f8d8 3000 	ldr.w	r3, [r8]
 8008338:	9005      	str	r0, [sp, #20]
 800833a:	3307      	adds	r3, #7
 800833c:	f023 0307 	bic.w	r3, r3, #7
 8008340:	f103 0208 	add.w	r2, r3, #8
 8008344:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008348:	f8d4 b000 	ldr.w	fp, [r4]
 800834c:	f8c8 2000 	str.w	r2, [r8]
 8008350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008354:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008358:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800835c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008360:	9307      	str	r3, [sp, #28]
 8008362:	f8cd 8018 	str.w	r8, [sp, #24]
 8008366:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800836a:	4ba7      	ldr	r3, [pc, #668]	; (8008608 <_printf_float+0x2f8>)
 800836c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008370:	f7f8 fbe4 	bl	8000b3c <__aeabi_dcmpun>
 8008374:	bb70      	cbnz	r0, 80083d4 <_printf_float+0xc4>
 8008376:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800837a:	4ba3      	ldr	r3, [pc, #652]	; (8008608 <_printf_float+0x2f8>)
 800837c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008380:	f7f8 fbbe 	bl	8000b00 <__aeabi_dcmple>
 8008384:	bb30      	cbnz	r0, 80083d4 <_printf_float+0xc4>
 8008386:	2200      	movs	r2, #0
 8008388:	2300      	movs	r3, #0
 800838a:	4640      	mov	r0, r8
 800838c:	4649      	mov	r1, r9
 800838e:	f7f8 fbad 	bl	8000aec <__aeabi_dcmplt>
 8008392:	b110      	cbz	r0, 800839a <_printf_float+0x8a>
 8008394:	232d      	movs	r3, #45	; 0x2d
 8008396:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800839a:	4a9c      	ldr	r2, [pc, #624]	; (800860c <_printf_float+0x2fc>)
 800839c:	4b9c      	ldr	r3, [pc, #624]	; (8008610 <_printf_float+0x300>)
 800839e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80083a2:	bf8c      	ite	hi
 80083a4:	4690      	movhi	r8, r2
 80083a6:	4698      	movls	r8, r3
 80083a8:	2303      	movs	r3, #3
 80083aa:	f02b 0204 	bic.w	r2, fp, #4
 80083ae:	6123      	str	r3, [r4, #16]
 80083b0:	6022      	str	r2, [r4, #0]
 80083b2:	f04f 0900 	mov.w	r9, #0
 80083b6:	9700      	str	r7, [sp, #0]
 80083b8:	4633      	mov	r3, r6
 80083ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80083bc:	4621      	mov	r1, r4
 80083be:	4628      	mov	r0, r5
 80083c0:	f000 f9e6 	bl	8008790 <_printf_common>
 80083c4:	3001      	adds	r0, #1
 80083c6:	f040 808d 	bne.w	80084e4 <_printf_float+0x1d4>
 80083ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083ce:	b00d      	add	sp, #52	; 0x34
 80083d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d4:	4642      	mov	r2, r8
 80083d6:	464b      	mov	r3, r9
 80083d8:	4640      	mov	r0, r8
 80083da:	4649      	mov	r1, r9
 80083dc:	f7f8 fbae 	bl	8000b3c <__aeabi_dcmpun>
 80083e0:	b110      	cbz	r0, 80083e8 <_printf_float+0xd8>
 80083e2:	4a8c      	ldr	r2, [pc, #560]	; (8008614 <_printf_float+0x304>)
 80083e4:	4b8c      	ldr	r3, [pc, #560]	; (8008618 <_printf_float+0x308>)
 80083e6:	e7da      	b.n	800839e <_printf_float+0x8e>
 80083e8:	6861      	ldr	r1, [r4, #4]
 80083ea:	1c4b      	adds	r3, r1, #1
 80083ec:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80083f0:	a80a      	add	r0, sp, #40	; 0x28
 80083f2:	d13e      	bne.n	8008472 <_printf_float+0x162>
 80083f4:	2306      	movs	r3, #6
 80083f6:	6063      	str	r3, [r4, #4]
 80083f8:	2300      	movs	r3, #0
 80083fa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80083fe:	ab09      	add	r3, sp, #36	; 0x24
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	ec49 8b10 	vmov	d0, r8, r9
 8008406:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800840a:	6022      	str	r2, [r4, #0]
 800840c:	f8cd a004 	str.w	sl, [sp, #4]
 8008410:	6861      	ldr	r1, [r4, #4]
 8008412:	4628      	mov	r0, r5
 8008414:	f7ff fee7 	bl	80081e6 <__cvt>
 8008418:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800841c:	2b47      	cmp	r3, #71	; 0x47
 800841e:	4680      	mov	r8, r0
 8008420:	d109      	bne.n	8008436 <_printf_float+0x126>
 8008422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008424:	1cd8      	adds	r0, r3, #3
 8008426:	db02      	blt.n	800842e <_printf_float+0x11e>
 8008428:	6862      	ldr	r2, [r4, #4]
 800842a:	4293      	cmp	r3, r2
 800842c:	dd47      	ble.n	80084be <_printf_float+0x1ae>
 800842e:	f1aa 0a02 	sub.w	sl, sl, #2
 8008432:	fa5f fa8a 	uxtb.w	sl, sl
 8008436:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800843a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800843c:	d824      	bhi.n	8008488 <_printf_float+0x178>
 800843e:	3901      	subs	r1, #1
 8008440:	4652      	mov	r2, sl
 8008442:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008446:	9109      	str	r1, [sp, #36]	; 0x24
 8008448:	f7ff ff2e 	bl	80082a8 <__exponent>
 800844c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800844e:	1813      	adds	r3, r2, r0
 8008450:	2a01      	cmp	r2, #1
 8008452:	4681      	mov	r9, r0
 8008454:	6123      	str	r3, [r4, #16]
 8008456:	dc02      	bgt.n	800845e <_printf_float+0x14e>
 8008458:	6822      	ldr	r2, [r4, #0]
 800845a:	07d1      	lsls	r1, r2, #31
 800845c:	d501      	bpl.n	8008462 <_printf_float+0x152>
 800845e:	3301      	adds	r3, #1
 8008460:	6123      	str	r3, [r4, #16]
 8008462:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008466:	2b00      	cmp	r3, #0
 8008468:	d0a5      	beq.n	80083b6 <_printf_float+0xa6>
 800846a:	232d      	movs	r3, #45	; 0x2d
 800846c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008470:	e7a1      	b.n	80083b6 <_printf_float+0xa6>
 8008472:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008476:	f000 8177 	beq.w	8008768 <_printf_float+0x458>
 800847a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800847e:	d1bb      	bne.n	80083f8 <_printf_float+0xe8>
 8008480:	2900      	cmp	r1, #0
 8008482:	d1b9      	bne.n	80083f8 <_printf_float+0xe8>
 8008484:	2301      	movs	r3, #1
 8008486:	e7b6      	b.n	80083f6 <_printf_float+0xe6>
 8008488:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800848c:	d119      	bne.n	80084c2 <_printf_float+0x1b2>
 800848e:	2900      	cmp	r1, #0
 8008490:	6863      	ldr	r3, [r4, #4]
 8008492:	dd0c      	ble.n	80084ae <_printf_float+0x19e>
 8008494:	6121      	str	r1, [r4, #16]
 8008496:	b913      	cbnz	r3, 800849e <_printf_float+0x18e>
 8008498:	6822      	ldr	r2, [r4, #0]
 800849a:	07d2      	lsls	r2, r2, #31
 800849c:	d502      	bpl.n	80084a4 <_printf_float+0x194>
 800849e:	3301      	adds	r3, #1
 80084a0:	440b      	add	r3, r1
 80084a2:	6123      	str	r3, [r4, #16]
 80084a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a6:	65a3      	str	r3, [r4, #88]	; 0x58
 80084a8:	f04f 0900 	mov.w	r9, #0
 80084ac:	e7d9      	b.n	8008462 <_printf_float+0x152>
 80084ae:	b913      	cbnz	r3, 80084b6 <_printf_float+0x1a6>
 80084b0:	6822      	ldr	r2, [r4, #0]
 80084b2:	07d0      	lsls	r0, r2, #31
 80084b4:	d501      	bpl.n	80084ba <_printf_float+0x1aa>
 80084b6:	3302      	adds	r3, #2
 80084b8:	e7f3      	b.n	80084a2 <_printf_float+0x192>
 80084ba:	2301      	movs	r3, #1
 80084bc:	e7f1      	b.n	80084a2 <_printf_float+0x192>
 80084be:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80084c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80084c6:	4293      	cmp	r3, r2
 80084c8:	db05      	blt.n	80084d6 <_printf_float+0x1c6>
 80084ca:	6822      	ldr	r2, [r4, #0]
 80084cc:	6123      	str	r3, [r4, #16]
 80084ce:	07d1      	lsls	r1, r2, #31
 80084d0:	d5e8      	bpl.n	80084a4 <_printf_float+0x194>
 80084d2:	3301      	adds	r3, #1
 80084d4:	e7e5      	b.n	80084a2 <_printf_float+0x192>
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	bfd4      	ite	le
 80084da:	f1c3 0302 	rsble	r3, r3, #2
 80084de:	2301      	movgt	r3, #1
 80084e0:	4413      	add	r3, r2
 80084e2:	e7de      	b.n	80084a2 <_printf_float+0x192>
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	055a      	lsls	r2, r3, #21
 80084e8:	d407      	bmi.n	80084fa <_printf_float+0x1ea>
 80084ea:	6923      	ldr	r3, [r4, #16]
 80084ec:	4642      	mov	r2, r8
 80084ee:	4631      	mov	r1, r6
 80084f0:	4628      	mov	r0, r5
 80084f2:	47b8      	blx	r7
 80084f4:	3001      	adds	r0, #1
 80084f6:	d12b      	bne.n	8008550 <_printf_float+0x240>
 80084f8:	e767      	b.n	80083ca <_printf_float+0xba>
 80084fa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80084fe:	f240 80dc 	bls.w	80086ba <_printf_float+0x3aa>
 8008502:	2200      	movs	r2, #0
 8008504:	2300      	movs	r3, #0
 8008506:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800850a:	f7f8 fae5 	bl	8000ad8 <__aeabi_dcmpeq>
 800850e:	2800      	cmp	r0, #0
 8008510:	d033      	beq.n	800857a <_printf_float+0x26a>
 8008512:	2301      	movs	r3, #1
 8008514:	4a41      	ldr	r2, [pc, #260]	; (800861c <_printf_float+0x30c>)
 8008516:	4631      	mov	r1, r6
 8008518:	4628      	mov	r0, r5
 800851a:	47b8      	blx	r7
 800851c:	3001      	adds	r0, #1
 800851e:	f43f af54 	beq.w	80083ca <_printf_float+0xba>
 8008522:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008526:	429a      	cmp	r2, r3
 8008528:	db02      	blt.n	8008530 <_printf_float+0x220>
 800852a:	6823      	ldr	r3, [r4, #0]
 800852c:	07d8      	lsls	r0, r3, #31
 800852e:	d50f      	bpl.n	8008550 <_printf_float+0x240>
 8008530:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008534:	4631      	mov	r1, r6
 8008536:	4628      	mov	r0, r5
 8008538:	47b8      	blx	r7
 800853a:	3001      	adds	r0, #1
 800853c:	f43f af45 	beq.w	80083ca <_printf_float+0xba>
 8008540:	f04f 0800 	mov.w	r8, #0
 8008544:	f104 091a 	add.w	r9, r4, #26
 8008548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800854a:	3b01      	subs	r3, #1
 800854c:	4543      	cmp	r3, r8
 800854e:	dc09      	bgt.n	8008564 <_printf_float+0x254>
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	079b      	lsls	r3, r3, #30
 8008554:	f100 8103 	bmi.w	800875e <_printf_float+0x44e>
 8008558:	68e0      	ldr	r0, [r4, #12]
 800855a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800855c:	4298      	cmp	r0, r3
 800855e:	bfb8      	it	lt
 8008560:	4618      	movlt	r0, r3
 8008562:	e734      	b.n	80083ce <_printf_float+0xbe>
 8008564:	2301      	movs	r3, #1
 8008566:	464a      	mov	r2, r9
 8008568:	4631      	mov	r1, r6
 800856a:	4628      	mov	r0, r5
 800856c:	47b8      	blx	r7
 800856e:	3001      	adds	r0, #1
 8008570:	f43f af2b 	beq.w	80083ca <_printf_float+0xba>
 8008574:	f108 0801 	add.w	r8, r8, #1
 8008578:	e7e6      	b.n	8008548 <_printf_float+0x238>
 800857a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800857c:	2b00      	cmp	r3, #0
 800857e:	dc2b      	bgt.n	80085d8 <_printf_float+0x2c8>
 8008580:	2301      	movs	r3, #1
 8008582:	4a26      	ldr	r2, [pc, #152]	; (800861c <_printf_float+0x30c>)
 8008584:	4631      	mov	r1, r6
 8008586:	4628      	mov	r0, r5
 8008588:	47b8      	blx	r7
 800858a:	3001      	adds	r0, #1
 800858c:	f43f af1d 	beq.w	80083ca <_printf_float+0xba>
 8008590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008592:	b923      	cbnz	r3, 800859e <_printf_float+0x28e>
 8008594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008596:	b913      	cbnz	r3, 800859e <_printf_float+0x28e>
 8008598:	6823      	ldr	r3, [r4, #0]
 800859a:	07d9      	lsls	r1, r3, #31
 800859c:	d5d8      	bpl.n	8008550 <_printf_float+0x240>
 800859e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085a2:	4631      	mov	r1, r6
 80085a4:	4628      	mov	r0, r5
 80085a6:	47b8      	blx	r7
 80085a8:	3001      	adds	r0, #1
 80085aa:	f43f af0e 	beq.w	80083ca <_printf_float+0xba>
 80085ae:	f04f 0900 	mov.w	r9, #0
 80085b2:	f104 0a1a 	add.w	sl, r4, #26
 80085b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b8:	425b      	negs	r3, r3
 80085ba:	454b      	cmp	r3, r9
 80085bc:	dc01      	bgt.n	80085c2 <_printf_float+0x2b2>
 80085be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085c0:	e794      	b.n	80084ec <_printf_float+0x1dc>
 80085c2:	2301      	movs	r3, #1
 80085c4:	4652      	mov	r2, sl
 80085c6:	4631      	mov	r1, r6
 80085c8:	4628      	mov	r0, r5
 80085ca:	47b8      	blx	r7
 80085cc:	3001      	adds	r0, #1
 80085ce:	f43f aefc 	beq.w	80083ca <_printf_float+0xba>
 80085d2:	f109 0901 	add.w	r9, r9, #1
 80085d6:	e7ee      	b.n	80085b6 <_printf_float+0x2a6>
 80085d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085dc:	429a      	cmp	r2, r3
 80085de:	bfa8      	it	ge
 80085e0:	461a      	movge	r2, r3
 80085e2:	2a00      	cmp	r2, #0
 80085e4:	4691      	mov	r9, r2
 80085e6:	dd07      	ble.n	80085f8 <_printf_float+0x2e8>
 80085e8:	4613      	mov	r3, r2
 80085ea:	4631      	mov	r1, r6
 80085ec:	4642      	mov	r2, r8
 80085ee:	4628      	mov	r0, r5
 80085f0:	47b8      	blx	r7
 80085f2:	3001      	adds	r0, #1
 80085f4:	f43f aee9 	beq.w	80083ca <_printf_float+0xba>
 80085f8:	f104 031a 	add.w	r3, r4, #26
 80085fc:	f04f 0b00 	mov.w	fp, #0
 8008600:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008604:	9306      	str	r3, [sp, #24]
 8008606:	e015      	b.n	8008634 <_printf_float+0x324>
 8008608:	7fefffff 	.word	0x7fefffff
 800860c:	0800bdf8 	.word	0x0800bdf8
 8008610:	0800bdf4 	.word	0x0800bdf4
 8008614:	0800be00 	.word	0x0800be00
 8008618:	0800bdfc 	.word	0x0800bdfc
 800861c:	0800be04 	.word	0x0800be04
 8008620:	2301      	movs	r3, #1
 8008622:	9a06      	ldr	r2, [sp, #24]
 8008624:	4631      	mov	r1, r6
 8008626:	4628      	mov	r0, r5
 8008628:	47b8      	blx	r7
 800862a:	3001      	adds	r0, #1
 800862c:	f43f aecd 	beq.w	80083ca <_printf_float+0xba>
 8008630:	f10b 0b01 	add.w	fp, fp, #1
 8008634:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008638:	ebaa 0309 	sub.w	r3, sl, r9
 800863c:	455b      	cmp	r3, fp
 800863e:	dcef      	bgt.n	8008620 <_printf_float+0x310>
 8008640:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008644:	429a      	cmp	r2, r3
 8008646:	44d0      	add	r8, sl
 8008648:	db15      	blt.n	8008676 <_printf_float+0x366>
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	07da      	lsls	r2, r3, #31
 800864e:	d412      	bmi.n	8008676 <_printf_float+0x366>
 8008650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008652:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008654:	eba3 020a 	sub.w	r2, r3, sl
 8008658:	eba3 0a01 	sub.w	sl, r3, r1
 800865c:	4592      	cmp	sl, r2
 800865e:	bfa8      	it	ge
 8008660:	4692      	movge	sl, r2
 8008662:	f1ba 0f00 	cmp.w	sl, #0
 8008666:	dc0e      	bgt.n	8008686 <_printf_float+0x376>
 8008668:	f04f 0800 	mov.w	r8, #0
 800866c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008670:	f104 091a 	add.w	r9, r4, #26
 8008674:	e019      	b.n	80086aa <_printf_float+0x39a>
 8008676:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800867a:	4631      	mov	r1, r6
 800867c:	4628      	mov	r0, r5
 800867e:	47b8      	blx	r7
 8008680:	3001      	adds	r0, #1
 8008682:	d1e5      	bne.n	8008650 <_printf_float+0x340>
 8008684:	e6a1      	b.n	80083ca <_printf_float+0xba>
 8008686:	4653      	mov	r3, sl
 8008688:	4642      	mov	r2, r8
 800868a:	4631      	mov	r1, r6
 800868c:	4628      	mov	r0, r5
 800868e:	47b8      	blx	r7
 8008690:	3001      	adds	r0, #1
 8008692:	d1e9      	bne.n	8008668 <_printf_float+0x358>
 8008694:	e699      	b.n	80083ca <_printf_float+0xba>
 8008696:	2301      	movs	r3, #1
 8008698:	464a      	mov	r2, r9
 800869a:	4631      	mov	r1, r6
 800869c:	4628      	mov	r0, r5
 800869e:	47b8      	blx	r7
 80086a0:	3001      	adds	r0, #1
 80086a2:	f43f ae92 	beq.w	80083ca <_printf_float+0xba>
 80086a6:	f108 0801 	add.w	r8, r8, #1
 80086aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086ae:	1a9b      	subs	r3, r3, r2
 80086b0:	eba3 030a 	sub.w	r3, r3, sl
 80086b4:	4543      	cmp	r3, r8
 80086b6:	dcee      	bgt.n	8008696 <_printf_float+0x386>
 80086b8:	e74a      	b.n	8008550 <_printf_float+0x240>
 80086ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086bc:	2a01      	cmp	r2, #1
 80086be:	dc01      	bgt.n	80086c4 <_printf_float+0x3b4>
 80086c0:	07db      	lsls	r3, r3, #31
 80086c2:	d53a      	bpl.n	800873a <_printf_float+0x42a>
 80086c4:	2301      	movs	r3, #1
 80086c6:	4642      	mov	r2, r8
 80086c8:	4631      	mov	r1, r6
 80086ca:	4628      	mov	r0, r5
 80086cc:	47b8      	blx	r7
 80086ce:	3001      	adds	r0, #1
 80086d0:	f43f ae7b 	beq.w	80083ca <_printf_float+0xba>
 80086d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086d8:	4631      	mov	r1, r6
 80086da:	4628      	mov	r0, r5
 80086dc:	47b8      	blx	r7
 80086de:	3001      	adds	r0, #1
 80086e0:	f108 0801 	add.w	r8, r8, #1
 80086e4:	f43f ae71 	beq.w	80083ca <_printf_float+0xba>
 80086e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ea:	2200      	movs	r2, #0
 80086ec:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80086f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086f4:	2300      	movs	r3, #0
 80086f6:	f7f8 f9ef 	bl	8000ad8 <__aeabi_dcmpeq>
 80086fa:	b9c8      	cbnz	r0, 8008730 <_printf_float+0x420>
 80086fc:	4653      	mov	r3, sl
 80086fe:	4642      	mov	r2, r8
 8008700:	4631      	mov	r1, r6
 8008702:	4628      	mov	r0, r5
 8008704:	47b8      	blx	r7
 8008706:	3001      	adds	r0, #1
 8008708:	d10e      	bne.n	8008728 <_printf_float+0x418>
 800870a:	e65e      	b.n	80083ca <_printf_float+0xba>
 800870c:	2301      	movs	r3, #1
 800870e:	4652      	mov	r2, sl
 8008710:	4631      	mov	r1, r6
 8008712:	4628      	mov	r0, r5
 8008714:	47b8      	blx	r7
 8008716:	3001      	adds	r0, #1
 8008718:	f43f ae57 	beq.w	80083ca <_printf_float+0xba>
 800871c:	f108 0801 	add.w	r8, r8, #1
 8008720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008722:	3b01      	subs	r3, #1
 8008724:	4543      	cmp	r3, r8
 8008726:	dcf1      	bgt.n	800870c <_printf_float+0x3fc>
 8008728:	464b      	mov	r3, r9
 800872a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800872e:	e6de      	b.n	80084ee <_printf_float+0x1de>
 8008730:	f04f 0800 	mov.w	r8, #0
 8008734:	f104 0a1a 	add.w	sl, r4, #26
 8008738:	e7f2      	b.n	8008720 <_printf_float+0x410>
 800873a:	2301      	movs	r3, #1
 800873c:	e7df      	b.n	80086fe <_printf_float+0x3ee>
 800873e:	2301      	movs	r3, #1
 8008740:	464a      	mov	r2, r9
 8008742:	4631      	mov	r1, r6
 8008744:	4628      	mov	r0, r5
 8008746:	47b8      	blx	r7
 8008748:	3001      	adds	r0, #1
 800874a:	f43f ae3e 	beq.w	80083ca <_printf_float+0xba>
 800874e:	f108 0801 	add.w	r8, r8, #1
 8008752:	68e3      	ldr	r3, [r4, #12]
 8008754:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008756:	1a9b      	subs	r3, r3, r2
 8008758:	4543      	cmp	r3, r8
 800875a:	dcf0      	bgt.n	800873e <_printf_float+0x42e>
 800875c:	e6fc      	b.n	8008558 <_printf_float+0x248>
 800875e:	f04f 0800 	mov.w	r8, #0
 8008762:	f104 0919 	add.w	r9, r4, #25
 8008766:	e7f4      	b.n	8008752 <_printf_float+0x442>
 8008768:	2900      	cmp	r1, #0
 800876a:	f43f ae8b 	beq.w	8008484 <_printf_float+0x174>
 800876e:	2300      	movs	r3, #0
 8008770:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008774:	ab09      	add	r3, sp, #36	; 0x24
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	ec49 8b10 	vmov	d0, r8, r9
 800877c:	6022      	str	r2, [r4, #0]
 800877e:	f8cd a004 	str.w	sl, [sp, #4]
 8008782:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008786:	4628      	mov	r0, r5
 8008788:	f7ff fd2d 	bl	80081e6 <__cvt>
 800878c:	4680      	mov	r8, r0
 800878e:	e648      	b.n	8008422 <_printf_float+0x112>

08008790 <_printf_common>:
 8008790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008794:	4691      	mov	r9, r2
 8008796:	461f      	mov	r7, r3
 8008798:	688a      	ldr	r2, [r1, #8]
 800879a:	690b      	ldr	r3, [r1, #16]
 800879c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087a0:	4293      	cmp	r3, r2
 80087a2:	bfb8      	it	lt
 80087a4:	4613      	movlt	r3, r2
 80087a6:	f8c9 3000 	str.w	r3, [r9]
 80087aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087ae:	4606      	mov	r6, r0
 80087b0:	460c      	mov	r4, r1
 80087b2:	b112      	cbz	r2, 80087ba <_printf_common+0x2a>
 80087b4:	3301      	adds	r3, #1
 80087b6:	f8c9 3000 	str.w	r3, [r9]
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	0699      	lsls	r1, r3, #26
 80087be:	bf42      	ittt	mi
 80087c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80087c4:	3302      	addmi	r3, #2
 80087c6:	f8c9 3000 	strmi.w	r3, [r9]
 80087ca:	6825      	ldr	r5, [r4, #0]
 80087cc:	f015 0506 	ands.w	r5, r5, #6
 80087d0:	d107      	bne.n	80087e2 <_printf_common+0x52>
 80087d2:	f104 0a19 	add.w	sl, r4, #25
 80087d6:	68e3      	ldr	r3, [r4, #12]
 80087d8:	f8d9 2000 	ldr.w	r2, [r9]
 80087dc:	1a9b      	subs	r3, r3, r2
 80087de:	42ab      	cmp	r3, r5
 80087e0:	dc28      	bgt.n	8008834 <_printf_common+0xa4>
 80087e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80087e6:	6822      	ldr	r2, [r4, #0]
 80087e8:	3300      	adds	r3, #0
 80087ea:	bf18      	it	ne
 80087ec:	2301      	movne	r3, #1
 80087ee:	0692      	lsls	r2, r2, #26
 80087f0:	d42d      	bmi.n	800884e <_printf_common+0xbe>
 80087f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087f6:	4639      	mov	r1, r7
 80087f8:	4630      	mov	r0, r6
 80087fa:	47c0      	blx	r8
 80087fc:	3001      	adds	r0, #1
 80087fe:	d020      	beq.n	8008842 <_printf_common+0xb2>
 8008800:	6823      	ldr	r3, [r4, #0]
 8008802:	68e5      	ldr	r5, [r4, #12]
 8008804:	f8d9 2000 	ldr.w	r2, [r9]
 8008808:	f003 0306 	and.w	r3, r3, #6
 800880c:	2b04      	cmp	r3, #4
 800880e:	bf08      	it	eq
 8008810:	1aad      	subeq	r5, r5, r2
 8008812:	68a3      	ldr	r3, [r4, #8]
 8008814:	6922      	ldr	r2, [r4, #16]
 8008816:	bf0c      	ite	eq
 8008818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800881c:	2500      	movne	r5, #0
 800881e:	4293      	cmp	r3, r2
 8008820:	bfc4      	itt	gt
 8008822:	1a9b      	subgt	r3, r3, r2
 8008824:	18ed      	addgt	r5, r5, r3
 8008826:	f04f 0900 	mov.w	r9, #0
 800882a:	341a      	adds	r4, #26
 800882c:	454d      	cmp	r5, r9
 800882e:	d11a      	bne.n	8008866 <_printf_common+0xd6>
 8008830:	2000      	movs	r0, #0
 8008832:	e008      	b.n	8008846 <_printf_common+0xb6>
 8008834:	2301      	movs	r3, #1
 8008836:	4652      	mov	r2, sl
 8008838:	4639      	mov	r1, r7
 800883a:	4630      	mov	r0, r6
 800883c:	47c0      	blx	r8
 800883e:	3001      	adds	r0, #1
 8008840:	d103      	bne.n	800884a <_printf_common+0xba>
 8008842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800884a:	3501      	adds	r5, #1
 800884c:	e7c3      	b.n	80087d6 <_printf_common+0x46>
 800884e:	18e1      	adds	r1, r4, r3
 8008850:	1c5a      	adds	r2, r3, #1
 8008852:	2030      	movs	r0, #48	; 0x30
 8008854:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008858:	4422      	add	r2, r4
 800885a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800885e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008862:	3302      	adds	r3, #2
 8008864:	e7c5      	b.n	80087f2 <_printf_common+0x62>
 8008866:	2301      	movs	r3, #1
 8008868:	4622      	mov	r2, r4
 800886a:	4639      	mov	r1, r7
 800886c:	4630      	mov	r0, r6
 800886e:	47c0      	blx	r8
 8008870:	3001      	adds	r0, #1
 8008872:	d0e6      	beq.n	8008842 <_printf_common+0xb2>
 8008874:	f109 0901 	add.w	r9, r9, #1
 8008878:	e7d8      	b.n	800882c <_printf_common+0x9c>
	...

0800887c <_printf_i>:
 800887c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008880:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008884:	460c      	mov	r4, r1
 8008886:	7e09      	ldrb	r1, [r1, #24]
 8008888:	b085      	sub	sp, #20
 800888a:	296e      	cmp	r1, #110	; 0x6e
 800888c:	4617      	mov	r7, r2
 800888e:	4606      	mov	r6, r0
 8008890:	4698      	mov	r8, r3
 8008892:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008894:	f000 80b3 	beq.w	80089fe <_printf_i+0x182>
 8008898:	d822      	bhi.n	80088e0 <_printf_i+0x64>
 800889a:	2963      	cmp	r1, #99	; 0x63
 800889c:	d036      	beq.n	800890c <_printf_i+0x90>
 800889e:	d80a      	bhi.n	80088b6 <_printf_i+0x3a>
 80088a0:	2900      	cmp	r1, #0
 80088a2:	f000 80b9 	beq.w	8008a18 <_printf_i+0x19c>
 80088a6:	2958      	cmp	r1, #88	; 0x58
 80088a8:	f000 8083 	beq.w	80089b2 <_printf_i+0x136>
 80088ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80088b4:	e032      	b.n	800891c <_printf_i+0xa0>
 80088b6:	2964      	cmp	r1, #100	; 0x64
 80088b8:	d001      	beq.n	80088be <_printf_i+0x42>
 80088ba:	2969      	cmp	r1, #105	; 0x69
 80088bc:	d1f6      	bne.n	80088ac <_printf_i+0x30>
 80088be:	6820      	ldr	r0, [r4, #0]
 80088c0:	6813      	ldr	r3, [r2, #0]
 80088c2:	0605      	lsls	r5, r0, #24
 80088c4:	f103 0104 	add.w	r1, r3, #4
 80088c8:	d52a      	bpl.n	8008920 <_printf_i+0xa4>
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6011      	str	r1, [r2, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	da03      	bge.n	80088da <_printf_i+0x5e>
 80088d2:	222d      	movs	r2, #45	; 0x2d
 80088d4:	425b      	negs	r3, r3
 80088d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80088da:	486f      	ldr	r0, [pc, #444]	; (8008a98 <_printf_i+0x21c>)
 80088dc:	220a      	movs	r2, #10
 80088de:	e039      	b.n	8008954 <_printf_i+0xd8>
 80088e0:	2973      	cmp	r1, #115	; 0x73
 80088e2:	f000 809d 	beq.w	8008a20 <_printf_i+0x1a4>
 80088e6:	d808      	bhi.n	80088fa <_printf_i+0x7e>
 80088e8:	296f      	cmp	r1, #111	; 0x6f
 80088ea:	d020      	beq.n	800892e <_printf_i+0xb2>
 80088ec:	2970      	cmp	r1, #112	; 0x70
 80088ee:	d1dd      	bne.n	80088ac <_printf_i+0x30>
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	f043 0320 	orr.w	r3, r3, #32
 80088f6:	6023      	str	r3, [r4, #0]
 80088f8:	e003      	b.n	8008902 <_printf_i+0x86>
 80088fa:	2975      	cmp	r1, #117	; 0x75
 80088fc:	d017      	beq.n	800892e <_printf_i+0xb2>
 80088fe:	2978      	cmp	r1, #120	; 0x78
 8008900:	d1d4      	bne.n	80088ac <_printf_i+0x30>
 8008902:	2378      	movs	r3, #120	; 0x78
 8008904:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008908:	4864      	ldr	r0, [pc, #400]	; (8008a9c <_printf_i+0x220>)
 800890a:	e055      	b.n	80089b8 <_printf_i+0x13c>
 800890c:	6813      	ldr	r3, [r2, #0]
 800890e:	1d19      	adds	r1, r3, #4
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	6011      	str	r1, [r2, #0]
 8008914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800891c:	2301      	movs	r3, #1
 800891e:	e08c      	b.n	8008a3a <_printf_i+0x1be>
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	6011      	str	r1, [r2, #0]
 8008924:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008928:	bf18      	it	ne
 800892a:	b21b      	sxthne	r3, r3
 800892c:	e7cf      	b.n	80088ce <_printf_i+0x52>
 800892e:	6813      	ldr	r3, [r2, #0]
 8008930:	6825      	ldr	r5, [r4, #0]
 8008932:	1d18      	adds	r0, r3, #4
 8008934:	6010      	str	r0, [r2, #0]
 8008936:	0628      	lsls	r0, r5, #24
 8008938:	d501      	bpl.n	800893e <_printf_i+0xc2>
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	e002      	b.n	8008944 <_printf_i+0xc8>
 800893e:	0668      	lsls	r0, r5, #25
 8008940:	d5fb      	bpl.n	800893a <_printf_i+0xbe>
 8008942:	881b      	ldrh	r3, [r3, #0]
 8008944:	4854      	ldr	r0, [pc, #336]	; (8008a98 <_printf_i+0x21c>)
 8008946:	296f      	cmp	r1, #111	; 0x6f
 8008948:	bf14      	ite	ne
 800894a:	220a      	movne	r2, #10
 800894c:	2208      	moveq	r2, #8
 800894e:	2100      	movs	r1, #0
 8008950:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008954:	6865      	ldr	r5, [r4, #4]
 8008956:	60a5      	str	r5, [r4, #8]
 8008958:	2d00      	cmp	r5, #0
 800895a:	f2c0 8095 	blt.w	8008a88 <_printf_i+0x20c>
 800895e:	6821      	ldr	r1, [r4, #0]
 8008960:	f021 0104 	bic.w	r1, r1, #4
 8008964:	6021      	str	r1, [r4, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d13d      	bne.n	80089e6 <_printf_i+0x16a>
 800896a:	2d00      	cmp	r5, #0
 800896c:	f040 808e 	bne.w	8008a8c <_printf_i+0x210>
 8008970:	4665      	mov	r5, ip
 8008972:	2a08      	cmp	r2, #8
 8008974:	d10b      	bne.n	800898e <_printf_i+0x112>
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	07db      	lsls	r3, r3, #31
 800897a:	d508      	bpl.n	800898e <_printf_i+0x112>
 800897c:	6923      	ldr	r3, [r4, #16]
 800897e:	6862      	ldr	r2, [r4, #4]
 8008980:	429a      	cmp	r2, r3
 8008982:	bfde      	ittt	le
 8008984:	2330      	movle	r3, #48	; 0x30
 8008986:	f805 3c01 	strble.w	r3, [r5, #-1]
 800898a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800898e:	ebac 0305 	sub.w	r3, ip, r5
 8008992:	6123      	str	r3, [r4, #16]
 8008994:	f8cd 8000 	str.w	r8, [sp]
 8008998:	463b      	mov	r3, r7
 800899a:	aa03      	add	r2, sp, #12
 800899c:	4621      	mov	r1, r4
 800899e:	4630      	mov	r0, r6
 80089a0:	f7ff fef6 	bl	8008790 <_printf_common>
 80089a4:	3001      	adds	r0, #1
 80089a6:	d14d      	bne.n	8008a44 <_printf_i+0x1c8>
 80089a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089ac:	b005      	add	sp, #20
 80089ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089b2:	4839      	ldr	r0, [pc, #228]	; (8008a98 <_printf_i+0x21c>)
 80089b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80089b8:	6813      	ldr	r3, [r2, #0]
 80089ba:	6821      	ldr	r1, [r4, #0]
 80089bc:	1d1d      	adds	r5, r3, #4
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6015      	str	r5, [r2, #0]
 80089c2:	060a      	lsls	r2, r1, #24
 80089c4:	d50b      	bpl.n	80089de <_printf_i+0x162>
 80089c6:	07ca      	lsls	r2, r1, #31
 80089c8:	bf44      	itt	mi
 80089ca:	f041 0120 	orrmi.w	r1, r1, #32
 80089ce:	6021      	strmi	r1, [r4, #0]
 80089d0:	b91b      	cbnz	r3, 80089da <_printf_i+0x15e>
 80089d2:	6822      	ldr	r2, [r4, #0]
 80089d4:	f022 0220 	bic.w	r2, r2, #32
 80089d8:	6022      	str	r2, [r4, #0]
 80089da:	2210      	movs	r2, #16
 80089dc:	e7b7      	b.n	800894e <_printf_i+0xd2>
 80089de:	064d      	lsls	r5, r1, #25
 80089e0:	bf48      	it	mi
 80089e2:	b29b      	uxthmi	r3, r3
 80089e4:	e7ef      	b.n	80089c6 <_printf_i+0x14a>
 80089e6:	4665      	mov	r5, ip
 80089e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80089ec:	fb02 3311 	mls	r3, r2, r1, r3
 80089f0:	5cc3      	ldrb	r3, [r0, r3]
 80089f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80089f6:	460b      	mov	r3, r1
 80089f8:	2900      	cmp	r1, #0
 80089fa:	d1f5      	bne.n	80089e8 <_printf_i+0x16c>
 80089fc:	e7b9      	b.n	8008972 <_printf_i+0xf6>
 80089fe:	6813      	ldr	r3, [r2, #0]
 8008a00:	6825      	ldr	r5, [r4, #0]
 8008a02:	6961      	ldr	r1, [r4, #20]
 8008a04:	1d18      	adds	r0, r3, #4
 8008a06:	6010      	str	r0, [r2, #0]
 8008a08:	0628      	lsls	r0, r5, #24
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	d501      	bpl.n	8008a12 <_printf_i+0x196>
 8008a0e:	6019      	str	r1, [r3, #0]
 8008a10:	e002      	b.n	8008a18 <_printf_i+0x19c>
 8008a12:	066a      	lsls	r2, r5, #25
 8008a14:	d5fb      	bpl.n	8008a0e <_printf_i+0x192>
 8008a16:	8019      	strh	r1, [r3, #0]
 8008a18:	2300      	movs	r3, #0
 8008a1a:	6123      	str	r3, [r4, #16]
 8008a1c:	4665      	mov	r5, ip
 8008a1e:	e7b9      	b.n	8008994 <_printf_i+0x118>
 8008a20:	6813      	ldr	r3, [r2, #0]
 8008a22:	1d19      	adds	r1, r3, #4
 8008a24:	6011      	str	r1, [r2, #0]
 8008a26:	681d      	ldr	r5, [r3, #0]
 8008a28:	6862      	ldr	r2, [r4, #4]
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	f7f7 fbdf 	bl	80001f0 <memchr>
 8008a32:	b108      	cbz	r0, 8008a38 <_printf_i+0x1bc>
 8008a34:	1b40      	subs	r0, r0, r5
 8008a36:	6060      	str	r0, [r4, #4]
 8008a38:	6863      	ldr	r3, [r4, #4]
 8008a3a:	6123      	str	r3, [r4, #16]
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a42:	e7a7      	b.n	8008994 <_printf_i+0x118>
 8008a44:	6923      	ldr	r3, [r4, #16]
 8008a46:	462a      	mov	r2, r5
 8008a48:	4639      	mov	r1, r7
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	47c0      	blx	r8
 8008a4e:	3001      	adds	r0, #1
 8008a50:	d0aa      	beq.n	80089a8 <_printf_i+0x12c>
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	079b      	lsls	r3, r3, #30
 8008a56:	d413      	bmi.n	8008a80 <_printf_i+0x204>
 8008a58:	68e0      	ldr	r0, [r4, #12]
 8008a5a:	9b03      	ldr	r3, [sp, #12]
 8008a5c:	4298      	cmp	r0, r3
 8008a5e:	bfb8      	it	lt
 8008a60:	4618      	movlt	r0, r3
 8008a62:	e7a3      	b.n	80089ac <_printf_i+0x130>
 8008a64:	2301      	movs	r3, #1
 8008a66:	464a      	mov	r2, r9
 8008a68:	4639      	mov	r1, r7
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	47c0      	blx	r8
 8008a6e:	3001      	adds	r0, #1
 8008a70:	d09a      	beq.n	80089a8 <_printf_i+0x12c>
 8008a72:	3501      	adds	r5, #1
 8008a74:	68e3      	ldr	r3, [r4, #12]
 8008a76:	9a03      	ldr	r2, [sp, #12]
 8008a78:	1a9b      	subs	r3, r3, r2
 8008a7a:	42ab      	cmp	r3, r5
 8008a7c:	dcf2      	bgt.n	8008a64 <_printf_i+0x1e8>
 8008a7e:	e7eb      	b.n	8008a58 <_printf_i+0x1dc>
 8008a80:	2500      	movs	r5, #0
 8008a82:	f104 0919 	add.w	r9, r4, #25
 8008a86:	e7f5      	b.n	8008a74 <_printf_i+0x1f8>
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1ac      	bne.n	80089e6 <_printf_i+0x16a>
 8008a8c:	7803      	ldrb	r3, [r0, #0]
 8008a8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a96:	e76c      	b.n	8008972 <_printf_i+0xf6>
 8008a98:	0800be06 	.word	0x0800be06
 8008a9c:	0800be17 	.word	0x0800be17

08008aa0 <_scanf_float>:
 8008aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa4:	469a      	mov	sl, r3
 8008aa6:	688b      	ldr	r3, [r1, #8]
 8008aa8:	4616      	mov	r6, r2
 8008aaa:	1e5a      	subs	r2, r3, #1
 8008aac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008ab0:	b087      	sub	sp, #28
 8008ab2:	bf83      	ittte	hi
 8008ab4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8008ab8:	189b      	addhi	r3, r3, r2
 8008aba:	9301      	strhi	r3, [sp, #4]
 8008abc:	2300      	movls	r3, #0
 8008abe:	bf86      	itte	hi
 8008ac0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008ac4:	608b      	strhi	r3, [r1, #8]
 8008ac6:	9301      	strls	r3, [sp, #4]
 8008ac8:	680b      	ldr	r3, [r1, #0]
 8008aca:	4688      	mov	r8, r1
 8008acc:	f04f 0b00 	mov.w	fp, #0
 8008ad0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008ad4:	f848 3b1c 	str.w	r3, [r8], #28
 8008ad8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8008adc:	4607      	mov	r7, r0
 8008ade:	460c      	mov	r4, r1
 8008ae0:	4645      	mov	r5, r8
 8008ae2:	465a      	mov	r2, fp
 8008ae4:	46d9      	mov	r9, fp
 8008ae6:	f8cd b008 	str.w	fp, [sp, #8]
 8008aea:	68a1      	ldr	r1, [r4, #8]
 8008aec:	b181      	cbz	r1, 8008b10 <_scanf_float+0x70>
 8008aee:	6833      	ldr	r3, [r6, #0]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	2b49      	cmp	r3, #73	; 0x49
 8008af4:	d071      	beq.n	8008bda <_scanf_float+0x13a>
 8008af6:	d84d      	bhi.n	8008b94 <_scanf_float+0xf4>
 8008af8:	2b39      	cmp	r3, #57	; 0x39
 8008afa:	d840      	bhi.n	8008b7e <_scanf_float+0xde>
 8008afc:	2b31      	cmp	r3, #49	; 0x31
 8008afe:	f080 8088 	bcs.w	8008c12 <_scanf_float+0x172>
 8008b02:	2b2d      	cmp	r3, #45	; 0x2d
 8008b04:	f000 8090 	beq.w	8008c28 <_scanf_float+0x188>
 8008b08:	d815      	bhi.n	8008b36 <_scanf_float+0x96>
 8008b0a:	2b2b      	cmp	r3, #43	; 0x2b
 8008b0c:	f000 808c 	beq.w	8008c28 <_scanf_float+0x188>
 8008b10:	f1b9 0f00 	cmp.w	r9, #0
 8008b14:	d003      	beq.n	8008b1e <_scanf_float+0x7e>
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	3a01      	subs	r2, #1
 8008b20:	2a01      	cmp	r2, #1
 8008b22:	f200 80ea 	bhi.w	8008cfa <_scanf_float+0x25a>
 8008b26:	4545      	cmp	r5, r8
 8008b28:	f200 80dc 	bhi.w	8008ce4 <_scanf_float+0x244>
 8008b2c:	2601      	movs	r6, #1
 8008b2e:	4630      	mov	r0, r6
 8008b30:	b007      	add	sp, #28
 8008b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b36:	2b2e      	cmp	r3, #46	; 0x2e
 8008b38:	f000 809f 	beq.w	8008c7a <_scanf_float+0x1da>
 8008b3c:	2b30      	cmp	r3, #48	; 0x30
 8008b3e:	d1e7      	bne.n	8008b10 <_scanf_float+0x70>
 8008b40:	6820      	ldr	r0, [r4, #0]
 8008b42:	f410 7f80 	tst.w	r0, #256	; 0x100
 8008b46:	d064      	beq.n	8008c12 <_scanf_float+0x172>
 8008b48:	9b01      	ldr	r3, [sp, #4]
 8008b4a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8008b4e:	6020      	str	r0, [r4, #0]
 8008b50:	f109 0901 	add.w	r9, r9, #1
 8008b54:	b11b      	cbz	r3, 8008b5e <_scanf_float+0xbe>
 8008b56:	3b01      	subs	r3, #1
 8008b58:	3101      	adds	r1, #1
 8008b5a:	9301      	str	r3, [sp, #4]
 8008b5c:	60a1      	str	r1, [r4, #8]
 8008b5e:	68a3      	ldr	r3, [r4, #8]
 8008b60:	3b01      	subs	r3, #1
 8008b62:	60a3      	str	r3, [r4, #8]
 8008b64:	6923      	ldr	r3, [r4, #16]
 8008b66:	3301      	adds	r3, #1
 8008b68:	6123      	str	r3, [r4, #16]
 8008b6a:	6873      	ldr	r3, [r6, #4]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	6073      	str	r3, [r6, #4]
 8008b72:	f340 80ac 	ble.w	8008cce <_scanf_float+0x22e>
 8008b76:	6833      	ldr	r3, [r6, #0]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	6033      	str	r3, [r6, #0]
 8008b7c:	e7b5      	b.n	8008aea <_scanf_float+0x4a>
 8008b7e:	2b45      	cmp	r3, #69	; 0x45
 8008b80:	f000 8085 	beq.w	8008c8e <_scanf_float+0x1ee>
 8008b84:	2b46      	cmp	r3, #70	; 0x46
 8008b86:	d06a      	beq.n	8008c5e <_scanf_float+0x1be>
 8008b88:	2b41      	cmp	r3, #65	; 0x41
 8008b8a:	d1c1      	bne.n	8008b10 <_scanf_float+0x70>
 8008b8c:	2a01      	cmp	r2, #1
 8008b8e:	d1bf      	bne.n	8008b10 <_scanf_float+0x70>
 8008b90:	2202      	movs	r2, #2
 8008b92:	e046      	b.n	8008c22 <_scanf_float+0x182>
 8008b94:	2b65      	cmp	r3, #101	; 0x65
 8008b96:	d07a      	beq.n	8008c8e <_scanf_float+0x1ee>
 8008b98:	d818      	bhi.n	8008bcc <_scanf_float+0x12c>
 8008b9a:	2b54      	cmp	r3, #84	; 0x54
 8008b9c:	d066      	beq.n	8008c6c <_scanf_float+0x1cc>
 8008b9e:	d811      	bhi.n	8008bc4 <_scanf_float+0x124>
 8008ba0:	2b4e      	cmp	r3, #78	; 0x4e
 8008ba2:	d1b5      	bne.n	8008b10 <_scanf_float+0x70>
 8008ba4:	2a00      	cmp	r2, #0
 8008ba6:	d146      	bne.n	8008c36 <_scanf_float+0x196>
 8008ba8:	f1b9 0f00 	cmp.w	r9, #0
 8008bac:	d145      	bne.n	8008c3a <_scanf_float+0x19a>
 8008bae:	6821      	ldr	r1, [r4, #0]
 8008bb0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008bb4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008bb8:	d13f      	bne.n	8008c3a <_scanf_float+0x19a>
 8008bba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008bbe:	6021      	str	r1, [r4, #0]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	e02e      	b.n	8008c22 <_scanf_float+0x182>
 8008bc4:	2b59      	cmp	r3, #89	; 0x59
 8008bc6:	d01e      	beq.n	8008c06 <_scanf_float+0x166>
 8008bc8:	2b61      	cmp	r3, #97	; 0x61
 8008bca:	e7de      	b.n	8008b8a <_scanf_float+0xea>
 8008bcc:	2b6e      	cmp	r3, #110	; 0x6e
 8008bce:	d0e9      	beq.n	8008ba4 <_scanf_float+0x104>
 8008bd0:	d815      	bhi.n	8008bfe <_scanf_float+0x15e>
 8008bd2:	2b66      	cmp	r3, #102	; 0x66
 8008bd4:	d043      	beq.n	8008c5e <_scanf_float+0x1be>
 8008bd6:	2b69      	cmp	r3, #105	; 0x69
 8008bd8:	d19a      	bne.n	8008b10 <_scanf_float+0x70>
 8008bda:	f1bb 0f00 	cmp.w	fp, #0
 8008bde:	d138      	bne.n	8008c52 <_scanf_float+0x1b2>
 8008be0:	f1b9 0f00 	cmp.w	r9, #0
 8008be4:	d197      	bne.n	8008b16 <_scanf_float+0x76>
 8008be6:	6821      	ldr	r1, [r4, #0]
 8008be8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008bec:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008bf0:	d195      	bne.n	8008b1e <_scanf_float+0x7e>
 8008bf2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008bf6:	6021      	str	r1, [r4, #0]
 8008bf8:	f04f 0b01 	mov.w	fp, #1
 8008bfc:	e011      	b.n	8008c22 <_scanf_float+0x182>
 8008bfe:	2b74      	cmp	r3, #116	; 0x74
 8008c00:	d034      	beq.n	8008c6c <_scanf_float+0x1cc>
 8008c02:	2b79      	cmp	r3, #121	; 0x79
 8008c04:	d184      	bne.n	8008b10 <_scanf_float+0x70>
 8008c06:	f1bb 0f07 	cmp.w	fp, #7
 8008c0a:	d181      	bne.n	8008b10 <_scanf_float+0x70>
 8008c0c:	f04f 0b08 	mov.w	fp, #8
 8008c10:	e007      	b.n	8008c22 <_scanf_float+0x182>
 8008c12:	eb12 0f0b 	cmn.w	r2, fp
 8008c16:	f47f af7b 	bne.w	8008b10 <_scanf_float+0x70>
 8008c1a:	6821      	ldr	r1, [r4, #0]
 8008c1c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8008c20:	6021      	str	r1, [r4, #0]
 8008c22:	702b      	strb	r3, [r5, #0]
 8008c24:	3501      	adds	r5, #1
 8008c26:	e79a      	b.n	8008b5e <_scanf_float+0xbe>
 8008c28:	6821      	ldr	r1, [r4, #0]
 8008c2a:	0608      	lsls	r0, r1, #24
 8008c2c:	f57f af70 	bpl.w	8008b10 <_scanf_float+0x70>
 8008c30:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008c34:	e7f4      	b.n	8008c20 <_scanf_float+0x180>
 8008c36:	2a02      	cmp	r2, #2
 8008c38:	d047      	beq.n	8008cca <_scanf_float+0x22a>
 8008c3a:	f1bb 0f01 	cmp.w	fp, #1
 8008c3e:	d003      	beq.n	8008c48 <_scanf_float+0x1a8>
 8008c40:	f1bb 0f04 	cmp.w	fp, #4
 8008c44:	f47f af64 	bne.w	8008b10 <_scanf_float+0x70>
 8008c48:	f10b 0b01 	add.w	fp, fp, #1
 8008c4c:	fa5f fb8b 	uxtb.w	fp, fp
 8008c50:	e7e7      	b.n	8008c22 <_scanf_float+0x182>
 8008c52:	f1bb 0f03 	cmp.w	fp, #3
 8008c56:	d0f7      	beq.n	8008c48 <_scanf_float+0x1a8>
 8008c58:	f1bb 0f05 	cmp.w	fp, #5
 8008c5c:	e7f2      	b.n	8008c44 <_scanf_float+0x1a4>
 8008c5e:	f1bb 0f02 	cmp.w	fp, #2
 8008c62:	f47f af55 	bne.w	8008b10 <_scanf_float+0x70>
 8008c66:	f04f 0b03 	mov.w	fp, #3
 8008c6a:	e7da      	b.n	8008c22 <_scanf_float+0x182>
 8008c6c:	f1bb 0f06 	cmp.w	fp, #6
 8008c70:	f47f af4e 	bne.w	8008b10 <_scanf_float+0x70>
 8008c74:	f04f 0b07 	mov.w	fp, #7
 8008c78:	e7d3      	b.n	8008c22 <_scanf_float+0x182>
 8008c7a:	6821      	ldr	r1, [r4, #0]
 8008c7c:	0588      	lsls	r0, r1, #22
 8008c7e:	f57f af47 	bpl.w	8008b10 <_scanf_float+0x70>
 8008c82:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8008c86:	6021      	str	r1, [r4, #0]
 8008c88:	f8cd 9008 	str.w	r9, [sp, #8]
 8008c8c:	e7c9      	b.n	8008c22 <_scanf_float+0x182>
 8008c8e:	6821      	ldr	r1, [r4, #0]
 8008c90:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8008c94:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8008c98:	d006      	beq.n	8008ca8 <_scanf_float+0x208>
 8008c9a:	0548      	lsls	r0, r1, #21
 8008c9c:	f57f af38 	bpl.w	8008b10 <_scanf_float+0x70>
 8008ca0:	f1b9 0f00 	cmp.w	r9, #0
 8008ca4:	f43f af3b 	beq.w	8008b1e <_scanf_float+0x7e>
 8008ca8:	0588      	lsls	r0, r1, #22
 8008caa:	bf58      	it	pl
 8008cac:	9802      	ldrpl	r0, [sp, #8]
 8008cae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008cb2:	bf58      	it	pl
 8008cb4:	eba9 0000 	subpl.w	r0, r9, r0
 8008cb8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8008cbc:	bf58      	it	pl
 8008cbe:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8008cc2:	6021      	str	r1, [r4, #0]
 8008cc4:	f04f 0900 	mov.w	r9, #0
 8008cc8:	e7ab      	b.n	8008c22 <_scanf_float+0x182>
 8008cca:	2203      	movs	r2, #3
 8008ccc:	e7a9      	b.n	8008c22 <_scanf_float+0x182>
 8008cce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008cd2:	9205      	str	r2, [sp, #20]
 8008cd4:	4631      	mov	r1, r6
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	4798      	blx	r3
 8008cda:	9a05      	ldr	r2, [sp, #20]
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	f43f af04 	beq.w	8008aea <_scanf_float+0x4a>
 8008ce2:	e715      	b.n	8008b10 <_scanf_float+0x70>
 8008ce4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ce8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008cec:	4632      	mov	r2, r6
 8008cee:	4638      	mov	r0, r7
 8008cf0:	4798      	blx	r3
 8008cf2:	6923      	ldr	r3, [r4, #16]
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	6123      	str	r3, [r4, #16]
 8008cf8:	e715      	b.n	8008b26 <_scanf_float+0x86>
 8008cfa:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8008cfe:	2b06      	cmp	r3, #6
 8008d00:	d80a      	bhi.n	8008d18 <_scanf_float+0x278>
 8008d02:	f1bb 0f02 	cmp.w	fp, #2
 8008d06:	d968      	bls.n	8008dda <_scanf_float+0x33a>
 8008d08:	f1ab 0b03 	sub.w	fp, fp, #3
 8008d0c:	fa5f fb8b 	uxtb.w	fp, fp
 8008d10:	eba5 0b0b 	sub.w	fp, r5, fp
 8008d14:	455d      	cmp	r5, fp
 8008d16:	d14b      	bne.n	8008db0 <_scanf_float+0x310>
 8008d18:	6823      	ldr	r3, [r4, #0]
 8008d1a:	05da      	lsls	r2, r3, #23
 8008d1c:	d51f      	bpl.n	8008d5e <_scanf_float+0x2be>
 8008d1e:	055b      	lsls	r3, r3, #21
 8008d20:	d468      	bmi.n	8008df4 <_scanf_float+0x354>
 8008d22:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008d26:	6923      	ldr	r3, [r4, #16]
 8008d28:	2965      	cmp	r1, #101	; 0x65
 8008d2a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008d2e:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8008d32:	6123      	str	r3, [r4, #16]
 8008d34:	d00d      	beq.n	8008d52 <_scanf_float+0x2b2>
 8008d36:	2945      	cmp	r1, #69	; 0x45
 8008d38:	d00b      	beq.n	8008d52 <_scanf_float+0x2b2>
 8008d3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d3e:	4632      	mov	r2, r6
 8008d40:	4638      	mov	r0, r7
 8008d42:	4798      	blx	r3
 8008d44:	6923      	ldr	r3, [r4, #16]
 8008d46:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	f1a5 0b02 	sub.w	fp, r5, #2
 8008d50:	6123      	str	r3, [r4, #16]
 8008d52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d56:	4632      	mov	r2, r6
 8008d58:	4638      	mov	r0, r7
 8008d5a:	4798      	blx	r3
 8008d5c:	465d      	mov	r5, fp
 8008d5e:	6826      	ldr	r6, [r4, #0]
 8008d60:	f016 0610 	ands.w	r6, r6, #16
 8008d64:	d17a      	bne.n	8008e5c <_scanf_float+0x3bc>
 8008d66:	702e      	strb	r6, [r5, #0]
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d72:	d142      	bne.n	8008dfa <_scanf_float+0x35a>
 8008d74:	9b02      	ldr	r3, [sp, #8]
 8008d76:	eba9 0303 	sub.w	r3, r9, r3
 8008d7a:	425a      	negs	r2, r3
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d149      	bne.n	8008e14 <_scanf_float+0x374>
 8008d80:	2200      	movs	r2, #0
 8008d82:	4641      	mov	r1, r8
 8008d84:	4638      	mov	r0, r7
 8008d86:	f000 fea3 	bl	8009ad0 <_strtod_r>
 8008d8a:	6825      	ldr	r5, [r4, #0]
 8008d8c:	f8da 3000 	ldr.w	r3, [sl]
 8008d90:	f015 0f02 	tst.w	r5, #2
 8008d94:	f103 0204 	add.w	r2, r3, #4
 8008d98:	ec59 8b10 	vmov	r8, r9, d0
 8008d9c:	f8ca 2000 	str.w	r2, [sl]
 8008da0:	d043      	beq.n	8008e2a <_scanf_float+0x38a>
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	e9c3 8900 	strd	r8, r9, [r3]
 8008da8:	68e3      	ldr	r3, [r4, #12]
 8008daa:	3301      	adds	r3, #1
 8008dac:	60e3      	str	r3, [r4, #12]
 8008dae:	e6be      	b.n	8008b2e <_scanf_float+0x8e>
 8008db0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008db4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008db8:	4632      	mov	r2, r6
 8008dba:	4638      	mov	r0, r7
 8008dbc:	4798      	blx	r3
 8008dbe:	6923      	ldr	r3, [r4, #16]
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	6123      	str	r3, [r4, #16]
 8008dc4:	e7a6      	b.n	8008d14 <_scanf_float+0x274>
 8008dc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008dca:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008dce:	4632      	mov	r2, r6
 8008dd0:	4638      	mov	r0, r7
 8008dd2:	4798      	blx	r3
 8008dd4:	6923      	ldr	r3, [r4, #16]
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	6123      	str	r3, [r4, #16]
 8008dda:	4545      	cmp	r5, r8
 8008ddc:	d8f3      	bhi.n	8008dc6 <_scanf_float+0x326>
 8008dde:	e6a5      	b.n	8008b2c <_scanf_float+0x8c>
 8008de0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008de4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008de8:	4632      	mov	r2, r6
 8008dea:	4638      	mov	r0, r7
 8008dec:	4798      	blx	r3
 8008dee:	6923      	ldr	r3, [r4, #16]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	6123      	str	r3, [r4, #16]
 8008df4:	4545      	cmp	r5, r8
 8008df6:	d8f3      	bhi.n	8008de0 <_scanf_float+0x340>
 8008df8:	e698      	b.n	8008b2c <_scanf_float+0x8c>
 8008dfa:	9b03      	ldr	r3, [sp, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d0bf      	beq.n	8008d80 <_scanf_float+0x2e0>
 8008e00:	9904      	ldr	r1, [sp, #16]
 8008e02:	230a      	movs	r3, #10
 8008e04:	4632      	mov	r2, r6
 8008e06:	3101      	adds	r1, #1
 8008e08:	4638      	mov	r0, r7
 8008e0a:	f000 feed 	bl	8009be8 <_strtol_r>
 8008e0e:	9b03      	ldr	r3, [sp, #12]
 8008e10:	9d04      	ldr	r5, [sp, #16]
 8008e12:	1ac2      	subs	r2, r0, r3
 8008e14:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008e18:	429d      	cmp	r5, r3
 8008e1a:	bf28      	it	cs
 8008e1c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8008e20:	490f      	ldr	r1, [pc, #60]	; (8008e60 <_scanf_float+0x3c0>)
 8008e22:	4628      	mov	r0, r5
 8008e24:	f000 f824 	bl	8008e70 <siprintf>
 8008e28:	e7aa      	b.n	8008d80 <_scanf_float+0x2e0>
 8008e2a:	f015 0504 	ands.w	r5, r5, #4
 8008e2e:	d1b8      	bne.n	8008da2 <_scanf_float+0x302>
 8008e30:	681f      	ldr	r7, [r3, #0]
 8008e32:	ee10 2a10 	vmov	r2, s0
 8008e36:	464b      	mov	r3, r9
 8008e38:	ee10 0a10 	vmov	r0, s0
 8008e3c:	4649      	mov	r1, r9
 8008e3e:	f7f7 fe7d 	bl	8000b3c <__aeabi_dcmpun>
 8008e42:	b128      	cbz	r0, 8008e50 <_scanf_float+0x3b0>
 8008e44:	4628      	mov	r0, r5
 8008e46:	f000 f80d 	bl	8008e64 <nanf>
 8008e4a:	ed87 0a00 	vstr	s0, [r7]
 8008e4e:	e7ab      	b.n	8008da8 <_scanf_float+0x308>
 8008e50:	4640      	mov	r0, r8
 8008e52:	4649      	mov	r1, r9
 8008e54:	f7f7 fed0 	bl	8000bf8 <__aeabi_d2f>
 8008e58:	6038      	str	r0, [r7, #0]
 8008e5a:	e7a5      	b.n	8008da8 <_scanf_float+0x308>
 8008e5c:	2600      	movs	r6, #0
 8008e5e:	e666      	b.n	8008b2e <_scanf_float+0x8e>
 8008e60:	0800be28 	.word	0x0800be28

08008e64 <nanf>:
 8008e64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008e6c <nanf+0x8>
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	7fc00000 	.word	0x7fc00000

08008e70 <siprintf>:
 8008e70:	b40e      	push	{r1, r2, r3}
 8008e72:	b500      	push	{lr}
 8008e74:	b09c      	sub	sp, #112	; 0x70
 8008e76:	ab1d      	add	r3, sp, #116	; 0x74
 8008e78:	9002      	str	r0, [sp, #8]
 8008e7a:	9006      	str	r0, [sp, #24]
 8008e7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e80:	4809      	ldr	r0, [pc, #36]	; (8008ea8 <siprintf+0x38>)
 8008e82:	9107      	str	r1, [sp, #28]
 8008e84:	9104      	str	r1, [sp, #16]
 8008e86:	4909      	ldr	r1, [pc, #36]	; (8008eac <siprintf+0x3c>)
 8008e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e8c:	9105      	str	r1, [sp, #20]
 8008e8e:	6800      	ldr	r0, [r0, #0]
 8008e90:	9301      	str	r3, [sp, #4]
 8008e92:	a902      	add	r1, sp, #8
 8008e94:	f002 fd64 	bl	800b960 <_svfiprintf_r>
 8008e98:	9b02      	ldr	r3, [sp, #8]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	701a      	strb	r2, [r3, #0]
 8008e9e:	b01c      	add	sp, #112	; 0x70
 8008ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ea4:	b003      	add	sp, #12
 8008ea6:	4770      	bx	lr
 8008ea8:	20000018 	.word	0x20000018
 8008eac:	ffff0208 	.word	0xffff0208

08008eb0 <sulp>:
 8008eb0:	b570      	push	{r4, r5, r6, lr}
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	460d      	mov	r5, r1
 8008eb6:	ec45 4b10 	vmov	d0, r4, r5
 8008eba:	4616      	mov	r6, r2
 8008ebc:	f002 fb0c 	bl	800b4d8 <__ulp>
 8008ec0:	ec51 0b10 	vmov	r0, r1, d0
 8008ec4:	b17e      	cbz	r6, 8008ee6 <sulp+0x36>
 8008ec6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008eca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	dd09      	ble.n	8008ee6 <sulp+0x36>
 8008ed2:	051b      	lsls	r3, r3, #20
 8008ed4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008ed8:	2400      	movs	r4, #0
 8008eda:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008ede:	4622      	mov	r2, r4
 8008ee0:	462b      	mov	r3, r5
 8008ee2:	f7f7 fb91 	bl	8000608 <__aeabi_dmul>
 8008ee6:	bd70      	pop	{r4, r5, r6, pc}

08008ee8 <_strtod_l>:
 8008ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eec:	461f      	mov	r7, r3
 8008eee:	b0a1      	sub	sp, #132	; 0x84
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	4681      	mov	r9, r0
 8008ef4:	4638      	mov	r0, r7
 8008ef6:	460e      	mov	r6, r1
 8008ef8:	9217      	str	r2, [sp, #92]	; 0x5c
 8008efa:	931c      	str	r3, [sp, #112]	; 0x70
 8008efc:	f001 fff5 	bl	800aeea <__localeconv_l>
 8008f00:	4680      	mov	r8, r0
 8008f02:	6800      	ldr	r0, [r0, #0]
 8008f04:	f7f7 f96c 	bl	80001e0 <strlen>
 8008f08:	f04f 0a00 	mov.w	sl, #0
 8008f0c:	4604      	mov	r4, r0
 8008f0e:	f04f 0b00 	mov.w	fp, #0
 8008f12:	961b      	str	r6, [sp, #108]	; 0x6c
 8008f14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f16:	781a      	ldrb	r2, [r3, #0]
 8008f18:	2a0d      	cmp	r2, #13
 8008f1a:	d832      	bhi.n	8008f82 <_strtod_l+0x9a>
 8008f1c:	2a09      	cmp	r2, #9
 8008f1e:	d236      	bcs.n	8008f8e <_strtod_l+0xa6>
 8008f20:	2a00      	cmp	r2, #0
 8008f22:	d03e      	beq.n	8008fa2 <_strtod_l+0xba>
 8008f24:	2300      	movs	r3, #0
 8008f26:	930d      	str	r3, [sp, #52]	; 0x34
 8008f28:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008f2a:	782b      	ldrb	r3, [r5, #0]
 8008f2c:	2b30      	cmp	r3, #48	; 0x30
 8008f2e:	f040 80ac 	bne.w	800908a <_strtod_l+0x1a2>
 8008f32:	786b      	ldrb	r3, [r5, #1]
 8008f34:	2b58      	cmp	r3, #88	; 0x58
 8008f36:	d001      	beq.n	8008f3c <_strtod_l+0x54>
 8008f38:	2b78      	cmp	r3, #120	; 0x78
 8008f3a:	d167      	bne.n	800900c <_strtod_l+0x124>
 8008f3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f3e:	9301      	str	r3, [sp, #4]
 8008f40:	ab1c      	add	r3, sp, #112	; 0x70
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	9702      	str	r7, [sp, #8]
 8008f46:	ab1d      	add	r3, sp, #116	; 0x74
 8008f48:	4a88      	ldr	r2, [pc, #544]	; (800916c <_strtod_l+0x284>)
 8008f4a:	a91b      	add	r1, sp, #108	; 0x6c
 8008f4c:	4648      	mov	r0, r9
 8008f4e:	f001 fcf2 	bl	800a936 <__gethex>
 8008f52:	f010 0407 	ands.w	r4, r0, #7
 8008f56:	4606      	mov	r6, r0
 8008f58:	d005      	beq.n	8008f66 <_strtod_l+0x7e>
 8008f5a:	2c06      	cmp	r4, #6
 8008f5c:	d12b      	bne.n	8008fb6 <_strtod_l+0xce>
 8008f5e:	3501      	adds	r5, #1
 8008f60:	2300      	movs	r3, #0
 8008f62:	951b      	str	r5, [sp, #108]	; 0x6c
 8008f64:	930d      	str	r3, [sp, #52]	; 0x34
 8008f66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f040 859a 	bne.w	8009aa2 <_strtod_l+0xbba>
 8008f6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f70:	b1e3      	cbz	r3, 8008fac <_strtod_l+0xc4>
 8008f72:	4652      	mov	r2, sl
 8008f74:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008f78:	ec43 2b10 	vmov	d0, r2, r3
 8008f7c:	b021      	add	sp, #132	; 0x84
 8008f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f82:	2a2b      	cmp	r2, #43	; 0x2b
 8008f84:	d015      	beq.n	8008fb2 <_strtod_l+0xca>
 8008f86:	2a2d      	cmp	r2, #45	; 0x2d
 8008f88:	d004      	beq.n	8008f94 <_strtod_l+0xac>
 8008f8a:	2a20      	cmp	r2, #32
 8008f8c:	d1ca      	bne.n	8008f24 <_strtod_l+0x3c>
 8008f8e:	3301      	adds	r3, #1
 8008f90:	931b      	str	r3, [sp, #108]	; 0x6c
 8008f92:	e7bf      	b.n	8008f14 <_strtod_l+0x2c>
 8008f94:	2201      	movs	r2, #1
 8008f96:	920d      	str	r2, [sp, #52]	; 0x34
 8008f98:	1c5a      	adds	r2, r3, #1
 8008f9a:	921b      	str	r2, [sp, #108]	; 0x6c
 8008f9c:	785b      	ldrb	r3, [r3, #1]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1c2      	bne.n	8008f28 <_strtod_l+0x40>
 8008fa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008fa4:	961b      	str	r6, [sp, #108]	; 0x6c
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f040 8579 	bne.w	8009a9e <_strtod_l+0xbb6>
 8008fac:	4652      	mov	r2, sl
 8008fae:	465b      	mov	r3, fp
 8008fb0:	e7e2      	b.n	8008f78 <_strtod_l+0x90>
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	e7ef      	b.n	8008f96 <_strtod_l+0xae>
 8008fb6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008fb8:	b13a      	cbz	r2, 8008fca <_strtod_l+0xe2>
 8008fba:	2135      	movs	r1, #53	; 0x35
 8008fbc:	a81e      	add	r0, sp, #120	; 0x78
 8008fbe:	f002 fb83 	bl	800b6c8 <__copybits>
 8008fc2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008fc4:	4648      	mov	r0, r9
 8008fc6:	f001 ffef 	bl	800afa8 <_Bfree>
 8008fca:	3c01      	subs	r4, #1
 8008fcc:	2c04      	cmp	r4, #4
 8008fce:	d806      	bhi.n	8008fde <_strtod_l+0xf6>
 8008fd0:	e8df f004 	tbb	[pc, r4]
 8008fd4:	1714030a 	.word	0x1714030a
 8008fd8:	0a          	.byte	0x0a
 8008fd9:	00          	.byte	0x00
 8008fda:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8008fde:	0730      	lsls	r0, r6, #28
 8008fe0:	d5c1      	bpl.n	8008f66 <_strtod_l+0x7e>
 8008fe2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008fe6:	e7be      	b.n	8008f66 <_strtod_l+0x7e>
 8008fe8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8008fec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008fee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008ff2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008ff6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008ffa:	e7f0      	b.n	8008fde <_strtod_l+0xf6>
 8008ffc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8009170 <_strtod_l+0x288>
 8009000:	e7ed      	b.n	8008fde <_strtod_l+0xf6>
 8009002:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009006:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800900a:	e7e8      	b.n	8008fde <_strtod_l+0xf6>
 800900c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800900e:	1c5a      	adds	r2, r3, #1
 8009010:	921b      	str	r2, [sp, #108]	; 0x6c
 8009012:	785b      	ldrb	r3, [r3, #1]
 8009014:	2b30      	cmp	r3, #48	; 0x30
 8009016:	d0f9      	beq.n	800900c <_strtod_l+0x124>
 8009018:	2b00      	cmp	r3, #0
 800901a:	d0a4      	beq.n	8008f66 <_strtod_l+0x7e>
 800901c:	2301      	movs	r3, #1
 800901e:	2500      	movs	r5, #0
 8009020:	9306      	str	r3, [sp, #24]
 8009022:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009024:	9308      	str	r3, [sp, #32]
 8009026:	9507      	str	r5, [sp, #28]
 8009028:	9505      	str	r5, [sp, #20]
 800902a:	220a      	movs	r2, #10
 800902c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800902e:	7807      	ldrb	r7, [r0, #0]
 8009030:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009034:	b2d9      	uxtb	r1, r3
 8009036:	2909      	cmp	r1, #9
 8009038:	d929      	bls.n	800908e <_strtod_l+0x1a6>
 800903a:	4622      	mov	r2, r4
 800903c:	f8d8 1000 	ldr.w	r1, [r8]
 8009040:	f002 fd96 	bl	800bb70 <strncmp>
 8009044:	2800      	cmp	r0, #0
 8009046:	d031      	beq.n	80090ac <_strtod_l+0x1c4>
 8009048:	2000      	movs	r0, #0
 800904a:	9c05      	ldr	r4, [sp, #20]
 800904c:	9004      	str	r0, [sp, #16]
 800904e:	463b      	mov	r3, r7
 8009050:	4602      	mov	r2, r0
 8009052:	2b65      	cmp	r3, #101	; 0x65
 8009054:	d001      	beq.n	800905a <_strtod_l+0x172>
 8009056:	2b45      	cmp	r3, #69	; 0x45
 8009058:	d114      	bne.n	8009084 <_strtod_l+0x19c>
 800905a:	b924      	cbnz	r4, 8009066 <_strtod_l+0x17e>
 800905c:	b910      	cbnz	r0, 8009064 <_strtod_l+0x17c>
 800905e:	9b06      	ldr	r3, [sp, #24]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d09e      	beq.n	8008fa2 <_strtod_l+0xba>
 8009064:	2400      	movs	r4, #0
 8009066:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009068:	1c73      	adds	r3, r6, #1
 800906a:	931b      	str	r3, [sp, #108]	; 0x6c
 800906c:	7873      	ldrb	r3, [r6, #1]
 800906e:	2b2b      	cmp	r3, #43	; 0x2b
 8009070:	d078      	beq.n	8009164 <_strtod_l+0x27c>
 8009072:	2b2d      	cmp	r3, #45	; 0x2d
 8009074:	d070      	beq.n	8009158 <_strtod_l+0x270>
 8009076:	f04f 0c00 	mov.w	ip, #0
 800907a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800907e:	2f09      	cmp	r7, #9
 8009080:	d97c      	bls.n	800917c <_strtod_l+0x294>
 8009082:	961b      	str	r6, [sp, #108]	; 0x6c
 8009084:	f04f 0e00 	mov.w	lr, #0
 8009088:	e09a      	b.n	80091c0 <_strtod_l+0x2d8>
 800908a:	2300      	movs	r3, #0
 800908c:	e7c7      	b.n	800901e <_strtod_l+0x136>
 800908e:	9905      	ldr	r1, [sp, #20]
 8009090:	2908      	cmp	r1, #8
 8009092:	bfdd      	ittte	le
 8009094:	9907      	ldrle	r1, [sp, #28]
 8009096:	fb02 3301 	mlale	r3, r2, r1, r3
 800909a:	9307      	strle	r3, [sp, #28]
 800909c:	fb02 3505 	mlagt	r5, r2, r5, r3
 80090a0:	9b05      	ldr	r3, [sp, #20]
 80090a2:	3001      	adds	r0, #1
 80090a4:	3301      	adds	r3, #1
 80090a6:	9305      	str	r3, [sp, #20]
 80090a8:	901b      	str	r0, [sp, #108]	; 0x6c
 80090aa:	e7bf      	b.n	800902c <_strtod_l+0x144>
 80090ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80090ae:	191a      	adds	r2, r3, r4
 80090b0:	921b      	str	r2, [sp, #108]	; 0x6c
 80090b2:	9a05      	ldr	r2, [sp, #20]
 80090b4:	5d1b      	ldrb	r3, [r3, r4]
 80090b6:	2a00      	cmp	r2, #0
 80090b8:	d037      	beq.n	800912a <_strtod_l+0x242>
 80090ba:	9c05      	ldr	r4, [sp, #20]
 80090bc:	4602      	mov	r2, r0
 80090be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80090c2:	2909      	cmp	r1, #9
 80090c4:	d913      	bls.n	80090ee <_strtod_l+0x206>
 80090c6:	2101      	movs	r1, #1
 80090c8:	9104      	str	r1, [sp, #16]
 80090ca:	e7c2      	b.n	8009052 <_strtod_l+0x16a>
 80090cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80090ce:	1c5a      	adds	r2, r3, #1
 80090d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80090d2:	785b      	ldrb	r3, [r3, #1]
 80090d4:	3001      	adds	r0, #1
 80090d6:	2b30      	cmp	r3, #48	; 0x30
 80090d8:	d0f8      	beq.n	80090cc <_strtod_l+0x1e4>
 80090da:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80090de:	2a08      	cmp	r2, #8
 80090e0:	f200 84e4 	bhi.w	8009aac <_strtod_l+0xbc4>
 80090e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80090e6:	9208      	str	r2, [sp, #32]
 80090e8:	4602      	mov	r2, r0
 80090ea:	2000      	movs	r0, #0
 80090ec:	4604      	mov	r4, r0
 80090ee:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80090f2:	f100 0101 	add.w	r1, r0, #1
 80090f6:	d012      	beq.n	800911e <_strtod_l+0x236>
 80090f8:	440a      	add	r2, r1
 80090fa:	eb00 0c04 	add.w	ip, r0, r4
 80090fe:	4621      	mov	r1, r4
 8009100:	270a      	movs	r7, #10
 8009102:	458c      	cmp	ip, r1
 8009104:	d113      	bne.n	800912e <_strtod_l+0x246>
 8009106:	1821      	adds	r1, r4, r0
 8009108:	2908      	cmp	r1, #8
 800910a:	f104 0401 	add.w	r4, r4, #1
 800910e:	4404      	add	r4, r0
 8009110:	dc19      	bgt.n	8009146 <_strtod_l+0x25e>
 8009112:	9b07      	ldr	r3, [sp, #28]
 8009114:	210a      	movs	r1, #10
 8009116:	fb01 e303 	mla	r3, r1, r3, lr
 800911a:	9307      	str	r3, [sp, #28]
 800911c:	2100      	movs	r1, #0
 800911e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009120:	1c58      	adds	r0, r3, #1
 8009122:	901b      	str	r0, [sp, #108]	; 0x6c
 8009124:	785b      	ldrb	r3, [r3, #1]
 8009126:	4608      	mov	r0, r1
 8009128:	e7c9      	b.n	80090be <_strtod_l+0x1d6>
 800912a:	9805      	ldr	r0, [sp, #20]
 800912c:	e7d3      	b.n	80090d6 <_strtod_l+0x1ee>
 800912e:	2908      	cmp	r1, #8
 8009130:	f101 0101 	add.w	r1, r1, #1
 8009134:	dc03      	bgt.n	800913e <_strtod_l+0x256>
 8009136:	9b07      	ldr	r3, [sp, #28]
 8009138:	437b      	muls	r3, r7
 800913a:	9307      	str	r3, [sp, #28]
 800913c:	e7e1      	b.n	8009102 <_strtod_l+0x21a>
 800913e:	2910      	cmp	r1, #16
 8009140:	bfd8      	it	le
 8009142:	437d      	mulle	r5, r7
 8009144:	e7dd      	b.n	8009102 <_strtod_l+0x21a>
 8009146:	2c10      	cmp	r4, #16
 8009148:	bfdc      	itt	le
 800914a:	210a      	movle	r1, #10
 800914c:	fb01 e505 	mlale	r5, r1, r5, lr
 8009150:	e7e4      	b.n	800911c <_strtod_l+0x234>
 8009152:	2301      	movs	r3, #1
 8009154:	9304      	str	r3, [sp, #16]
 8009156:	e781      	b.n	800905c <_strtod_l+0x174>
 8009158:	f04f 0c01 	mov.w	ip, #1
 800915c:	1cb3      	adds	r3, r6, #2
 800915e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009160:	78b3      	ldrb	r3, [r6, #2]
 8009162:	e78a      	b.n	800907a <_strtod_l+0x192>
 8009164:	f04f 0c00 	mov.w	ip, #0
 8009168:	e7f8      	b.n	800915c <_strtod_l+0x274>
 800916a:	bf00      	nop
 800916c:	0800be30 	.word	0x0800be30
 8009170:	7ff00000 	.word	0x7ff00000
 8009174:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009176:	1c5f      	adds	r7, r3, #1
 8009178:	971b      	str	r7, [sp, #108]	; 0x6c
 800917a:	785b      	ldrb	r3, [r3, #1]
 800917c:	2b30      	cmp	r3, #48	; 0x30
 800917e:	d0f9      	beq.n	8009174 <_strtod_l+0x28c>
 8009180:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8009184:	2f08      	cmp	r7, #8
 8009186:	f63f af7d 	bhi.w	8009084 <_strtod_l+0x19c>
 800918a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800918e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009190:	930a      	str	r3, [sp, #40]	; 0x28
 8009192:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009194:	1c5f      	adds	r7, r3, #1
 8009196:	971b      	str	r7, [sp, #108]	; 0x6c
 8009198:	785b      	ldrb	r3, [r3, #1]
 800919a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800919e:	f1b8 0f09 	cmp.w	r8, #9
 80091a2:	d937      	bls.n	8009214 <_strtod_l+0x32c>
 80091a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80091a6:	1a7f      	subs	r7, r7, r1
 80091a8:	2f08      	cmp	r7, #8
 80091aa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80091ae:	dc37      	bgt.n	8009220 <_strtod_l+0x338>
 80091b0:	45be      	cmp	lr, r7
 80091b2:	bfa8      	it	ge
 80091b4:	46be      	movge	lr, r7
 80091b6:	f1bc 0f00 	cmp.w	ip, #0
 80091ba:	d001      	beq.n	80091c0 <_strtod_l+0x2d8>
 80091bc:	f1ce 0e00 	rsb	lr, lr, #0
 80091c0:	2c00      	cmp	r4, #0
 80091c2:	d151      	bne.n	8009268 <_strtod_l+0x380>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	f47f aece 	bne.w	8008f66 <_strtod_l+0x7e>
 80091ca:	9a06      	ldr	r2, [sp, #24]
 80091cc:	2a00      	cmp	r2, #0
 80091ce:	f47f aeca 	bne.w	8008f66 <_strtod_l+0x7e>
 80091d2:	9a04      	ldr	r2, [sp, #16]
 80091d4:	2a00      	cmp	r2, #0
 80091d6:	f47f aee4 	bne.w	8008fa2 <_strtod_l+0xba>
 80091da:	2b4e      	cmp	r3, #78	; 0x4e
 80091dc:	d027      	beq.n	800922e <_strtod_l+0x346>
 80091de:	dc21      	bgt.n	8009224 <_strtod_l+0x33c>
 80091e0:	2b49      	cmp	r3, #73	; 0x49
 80091e2:	f47f aede 	bne.w	8008fa2 <_strtod_l+0xba>
 80091e6:	49a0      	ldr	r1, [pc, #640]	; (8009468 <_strtod_l+0x580>)
 80091e8:	a81b      	add	r0, sp, #108	; 0x6c
 80091ea:	f001 fdd7 	bl	800ad9c <__match>
 80091ee:	2800      	cmp	r0, #0
 80091f0:	f43f aed7 	beq.w	8008fa2 <_strtod_l+0xba>
 80091f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80091f6:	499d      	ldr	r1, [pc, #628]	; (800946c <_strtod_l+0x584>)
 80091f8:	3b01      	subs	r3, #1
 80091fa:	a81b      	add	r0, sp, #108	; 0x6c
 80091fc:	931b      	str	r3, [sp, #108]	; 0x6c
 80091fe:	f001 fdcd 	bl	800ad9c <__match>
 8009202:	b910      	cbnz	r0, 800920a <_strtod_l+0x322>
 8009204:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009206:	3301      	adds	r3, #1
 8009208:	931b      	str	r3, [sp, #108]	; 0x6c
 800920a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8009480 <_strtod_l+0x598>
 800920e:	f04f 0a00 	mov.w	sl, #0
 8009212:	e6a8      	b.n	8008f66 <_strtod_l+0x7e>
 8009214:	210a      	movs	r1, #10
 8009216:	fb01 3e0e 	mla	lr, r1, lr, r3
 800921a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800921e:	e7b8      	b.n	8009192 <_strtod_l+0x2aa>
 8009220:	46be      	mov	lr, r7
 8009222:	e7c8      	b.n	80091b6 <_strtod_l+0x2ce>
 8009224:	2b69      	cmp	r3, #105	; 0x69
 8009226:	d0de      	beq.n	80091e6 <_strtod_l+0x2fe>
 8009228:	2b6e      	cmp	r3, #110	; 0x6e
 800922a:	f47f aeba 	bne.w	8008fa2 <_strtod_l+0xba>
 800922e:	4990      	ldr	r1, [pc, #576]	; (8009470 <_strtod_l+0x588>)
 8009230:	a81b      	add	r0, sp, #108	; 0x6c
 8009232:	f001 fdb3 	bl	800ad9c <__match>
 8009236:	2800      	cmp	r0, #0
 8009238:	f43f aeb3 	beq.w	8008fa2 <_strtod_l+0xba>
 800923c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	2b28      	cmp	r3, #40	; 0x28
 8009242:	d10e      	bne.n	8009262 <_strtod_l+0x37a>
 8009244:	aa1e      	add	r2, sp, #120	; 0x78
 8009246:	498b      	ldr	r1, [pc, #556]	; (8009474 <_strtod_l+0x58c>)
 8009248:	a81b      	add	r0, sp, #108	; 0x6c
 800924a:	f001 fdbb 	bl	800adc4 <__hexnan>
 800924e:	2805      	cmp	r0, #5
 8009250:	d107      	bne.n	8009262 <_strtod_l+0x37a>
 8009252:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009254:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009258:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800925c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009260:	e681      	b.n	8008f66 <_strtod_l+0x7e>
 8009262:	f8df b224 	ldr.w	fp, [pc, #548]	; 8009488 <_strtod_l+0x5a0>
 8009266:	e7d2      	b.n	800920e <_strtod_l+0x326>
 8009268:	ebae 0302 	sub.w	r3, lr, r2
 800926c:	9306      	str	r3, [sp, #24]
 800926e:	9b05      	ldr	r3, [sp, #20]
 8009270:	9807      	ldr	r0, [sp, #28]
 8009272:	2b00      	cmp	r3, #0
 8009274:	bf08      	it	eq
 8009276:	4623      	moveq	r3, r4
 8009278:	2c10      	cmp	r4, #16
 800927a:	9305      	str	r3, [sp, #20]
 800927c:	46a0      	mov	r8, r4
 800927e:	bfa8      	it	ge
 8009280:	f04f 0810 	movge.w	r8, #16
 8009284:	f7f7 f946 	bl	8000514 <__aeabi_ui2d>
 8009288:	2c09      	cmp	r4, #9
 800928a:	4682      	mov	sl, r0
 800928c:	468b      	mov	fp, r1
 800928e:	dc13      	bgt.n	80092b8 <_strtod_l+0x3d0>
 8009290:	9b06      	ldr	r3, [sp, #24]
 8009292:	2b00      	cmp	r3, #0
 8009294:	f43f ae67 	beq.w	8008f66 <_strtod_l+0x7e>
 8009298:	9b06      	ldr	r3, [sp, #24]
 800929a:	dd7a      	ble.n	8009392 <_strtod_l+0x4aa>
 800929c:	2b16      	cmp	r3, #22
 800929e:	dc61      	bgt.n	8009364 <_strtod_l+0x47c>
 80092a0:	4a75      	ldr	r2, [pc, #468]	; (8009478 <_strtod_l+0x590>)
 80092a2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80092a6:	e9de 0100 	ldrd	r0, r1, [lr]
 80092aa:	4652      	mov	r2, sl
 80092ac:	465b      	mov	r3, fp
 80092ae:	f7f7 f9ab 	bl	8000608 <__aeabi_dmul>
 80092b2:	4682      	mov	sl, r0
 80092b4:	468b      	mov	fp, r1
 80092b6:	e656      	b.n	8008f66 <_strtod_l+0x7e>
 80092b8:	4b6f      	ldr	r3, [pc, #444]	; (8009478 <_strtod_l+0x590>)
 80092ba:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80092be:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80092c2:	f7f7 f9a1 	bl	8000608 <__aeabi_dmul>
 80092c6:	4606      	mov	r6, r0
 80092c8:	4628      	mov	r0, r5
 80092ca:	460f      	mov	r7, r1
 80092cc:	f7f7 f922 	bl	8000514 <__aeabi_ui2d>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4630      	mov	r0, r6
 80092d6:	4639      	mov	r1, r7
 80092d8:	f7f6 ffe0 	bl	800029c <__adddf3>
 80092dc:	2c0f      	cmp	r4, #15
 80092de:	4682      	mov	sl, r0
 80092e0:	468b      	mov	fp, r1
 80092e2:	ddd5      	ble.n	8009290 <_strtod_l+0x3a8>
 80092e4:	9b06      	ldr	r3, [sp, #24]
 80092e6:	eba4 0808 	sub.w	r8, r4, r8
 80092ea:	4498      	add	r8, r3
 80092ec:	f1b8 0f00 	cmp.w	r8, #0
 80092f0:	f340 8096 	ble.w	8009420 <_strtod_l+0x538>
 80092f4:	f018 030f 	ands.w	r3, r8, #15
 80092f8:	d00a      	beq.n	8009310 <_strtod_l+0x428>
 80092fa:	495f      	ldr	r1, [pc, #380]	; (8009478 <_strtod_l+0x590>)
 80092fc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009300:	4652      	mov	r2, sl
 8009302:	465b      	mov	r3, fp
 8009304:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009308:	f7f7 f97e 	bl	8000608 <__aeabi_dmul>
 800930c:	4682      	mov	sl, r0
 800930e:	468b      	mov	fp, r1
 8009310:	f038 080f 	bics.w	r8, r8, #15
 8009314:	d073      	beq.n	80093fe <_strtod_l+0x516>
 8009316:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800931a:	dd47      	ble.n	80093ac <_strtod_l+0x4c4>
 800931c:	2400      	movs	r4, #0
 800931e:	46a0      	mov	r8, r4
 8009320:	9407      	str	r4, [sp, #28]
 8009322:	9405      	str	r4, [sp, #20]
 8009324:	2322      	movs	r3, #34	; 0x22
 8009326:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009480 <_strtod_l+0x598>
 800932a:	f8c9 3000 	str.w	r3, [r9]
 800932e:	f04f 0a00 	mov.w	sl, #0
 8009332:	9b07      	ldr	r3, [sp, #28]
 8009334:	2b00      	cmp	r3, #0
 8009336:	f43f ae16 	beq.w	8008f66 <_strtod_l+0x7e>
 800933a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800933c:	4648      	mov	r0, r9
 800933e:	f001 fe33 	bl	800afa8 <_Bfree>
 8009342:	9905      	ldr	r1, [sp, #20]
 8009344:	4648      	mov	r0, r9
 8009346:	f001 fe2f 	bl	800afa8 <_Bfree>
 800934a:	4641      	mov	r1, r8
 800934c:	4648      	mov	r0, r9
 800934e:	f001 fe2b 	bl	800afa8 <_Bfree>
 8009352:	9907      	ldr	r1, [sp, #28]
 8009354:	4648      	mov	r0, r9
 8009356:	f001 fe27 	bl	800afa8 <_Bfree>
 800935a:	4621      	mov	r1, r4
 800935c:	4648      	mov	r0, r9
 800935e:	f001 fe23 	bl	800afa8 <_Bfree>
 8009362:	e600      	b.n	8008f66 <_strtod_l+0x7e>
 8009364:	9a06      	ldr	r2, [sp, #24]
 8009366:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800936a:	4293      	cmp	r3, r2
 800936c:	dbba      	blt.n	80092e4 <_strtod_l+0x3fc>
 800936e:	4d42      	ldr	r5, [pc, #264]	; (8009478 <_strtod_l+0x590>)
 8009370:	f1c4 040f 	rsb	r4, r4, #15
 8009374:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009378:	4652      	mov	r2, sl
 800937a:	465b      	mov	r3, fp
 800937c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009380:	f7f7 f942 	bl	8000608 <__aeabi_dmul>
 8009384:	9b06      	ldr	r3, [sp, #24]
 8009386:	1b1c      	subs	r4, r3, r4
 8009388:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800938c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009390:	e78d      	b.n	80092ae <_strtod_l+0x3c6>
 8009392:	f113 0f16 	cmn.w	r3, #22
 8009396:	dba5      	blt.n	80092e4 <_strtod_l+0x3fc>
 8009398:	4a37      	ldr	r2, [pc, #220]	; (8009478 <_strtod_l+0x590>)
 800939a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800939e:	e9d2 2300 	ldrd	r2, r3, [r2]
 80093a2:	4650      	mov	r0, sl
 80093a4:	4659      	mov	r1, fp
 80093a6:	f7f7 fa59 	bl	800085c <__aeabi_ddiv>
 80093aa:	e782      	b.n	80092b2 <_strtod_l+0x3ca>
 80093ac:	2300      	movs	r3, #0
 80093ae:	4e33      	ldr	r6, [pc, #204]	; (800947c <_strtod_l+0x594>)
 80093b0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80093b4:	4650      	mov	r0, sl
 80093b6:	4659      	mov	r1, fp
 80093b8:	461d      	mov	r5, r3
 80093ba:	f1b8 0f01 	cmp.w	r8, #1
 80093be:	dc21      	bgt.n	8009404 <_strtod_l+0x51c>
 80093c0:	b10b      	cbz	r3, 80093c6 <_strtod_l+0x4de>
 80093c2:	4682      	mov	sl, r0
 80093c4:	468b      	mov	fp, r1
 80093c6:	4b2d      	ldr	r3, [pc, #180]	; (800947c <_strtod_l+0x594>)
 80093c8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80093cc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80093d0:	4652      	mov	r2, sl
 80093d2:	465b      	mov	r3, fp
 80093d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80093d8:	f7f7 f916 	bl	8000608 <__aeabi_dmul>
 80093dc:	4b28      	ldr	r3, [pc, #160]	; (8009480 <_strtod_l+0x598>)
 80093de:	460a      	mov	r2, r1
 80093e0:	400b      	ands	r3, r1
 80093e2:	4928      	ldr	r1, [pc, #160]	; (8009484 <_strtod_l+0x59c>)
 80093e4:	428b      	cmp	r3, r1
 80093e6:	4682      	mov	sl, r0
 80093e8:	d898      	bhi.n	800931c <_strtod_l+0x434>
 80093ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80093ee:	428b      	cmp	r3, r1
 80093f0:	bf86      	itte	hi
 80093f2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800948c <_strtod_l+0x5a4>
 80093f6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80093fa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80093fe:	2300      	movs	r3, #0
 8009400:	9304      	str	r3, [sp, #16]
 8009402:	e077      	b.n	80094f4 <_strtod_l+0x60c>
 8009404:	f018 0f01 	tst.w	r8, #1
 8009408:	d006      	beq.n	8009418 <_strtod_l+0x530>
 800940a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800940e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009412:	f7f7 f8f9 	bl	8000608 <__aeabi_dmul>
 8009416:	2301      	movs	r3, #1
 8009418:	3501      	adds	r5, #1
 800941a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800941e:	e7cc      	b.n	80093ba <_strtod_l+0x4d2>
 8009420:	d0ed      	beq.n	80093fe <_strtod_l+0x516>
 8009422:	f1c8 0800 	rsb	r8, r8, #0
 8009426:	f018 020f 	ands.w	r2, r8, #15
 800942a:	d00a      	beq.n	8009442 <_strtod_l+0x55a>
 800942c:	4b12      	ldr	r3, [pc, #72]	; (8009478 <_strtod_l+0x590>)
 800942e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009432:	4650      	mov	r0, sl
 8009434:	4659      	mov	r1, fp
 8009436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943a:	f7f7 fa0f 	bl	800085c <__aeabi_ddiv>
 800943e:	4682      	mov	sl, r0
 8009440:	468b      	mov	fp, r1
 8009442:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009446:	d0da      	beq.n	80093fe <_strtod_l+0x516>
 8009448:	f1b8 0f1f 	cmp.w	r8, #31
 800944c:	dd20      	ble.n	8009490 <_strtod_l+0x5a8>
 800944e:	2400      	movs	r4, #0
 8009450:	46a0      	mov	r8, r4
 8009452:	9407      	str	r4, [sp, #28]
 8009454:	9405      	str	r4, [sp, #20]
 8009456:	2322      	movs	r3, #34	; 0x22
 8009458:	f04f 0a00 	mov.w	sl, #0
 800945c:	f04f 0b00 	mov.w	fp, #0
 8009460:	f8c9 3000 	str.w	r3, [r9]
 8009464:	e765      	b.n	8009332 <_strtod_l+0x44a>
 8009466:	bf00      	nop
 8009468:	0800bdf9 	.word	0x0800bdf9
 800946c:	0800be83 	.word	0x0800be83
 8009470:	0800be01 	.word	0x0800be01
 8009474:	0800be44 	.word	0x0800be44
 8009478:	0800bec0 	.word	0x0800bec0
 800947c:	0800be98 	.word	0x0800be98
 8009480:	7ff00000 	.word	0x7ff00000
 8009484:	7ca00000 	.word	0x7ca00000
 8009488:	fff80000 	.word	0xfff80000
 800948c:	7fefffff 	.word	0x7fefffff
 8009490:	f018 0310 	ands.w	r3, r8, #16
 8009494:	bf18      	it	ne
 8009496:	236a      	movne	r3, #106	; 0x6a
 8009498:	4da0      	ldr	r5, [pc, #640]	; (800971c <_strtod_l+0x834>)
 800949a:	9304      	str	r3, [sp, #16]
 800949c:	4650      	mov	r0, sl
 800949e:	4659      	mov	r1, fp
 80094a0:	2300      	movs	r3, #0
 80094a2:	f1b8 0f00 	cmp.w	r8, #0
 80094a6:	f300 810a 	bgt.w	80096be <_strtod_l+0x7d6>
 80094aa:	b10b      	cbz	r3, 80094b0 <_strtod_l+0x5c8>
 80094ac:	4682      	mov	sl, r0
 80094ae:	468b      	mov	fp, r1
 80094b0:	9b04      	ldr	r3, [sp, #16]
 80094b2:	b1bb      	cbz	r3, 80094e4 <_strtod_l+0x5fc>
 80094b4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80094b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80094bc:	2b00      	cmp	r3, #0
 80094be:	4659      	mov	r1, fp
 80094c0:	dd10      	ble.n	80094e4 <_strtod_l+0x5fc>
 80094c2:	2b1f      	cmp	r3, #31
 80094c4:	f340 8107 	ble.w	80096d6 <_strtod_l+0x7ee>
 80094c8:	2b34      	cmp	r3, #52	; 0x34
 80094ca:	bfde      	ittt	le
 80094cc:	3b20      	suble	r3, #32
 80094ce:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80094d2:	fa02 f303 	lslle.w	r3, r2, r3
 80094d6:	f04f 0a00 	mov.w	sl, #0
 80094da:	bfcc      	ite	gt
 80094dc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80094e0:	ea03 0b01 	andle.w	fp, r3, r1
 80094e4:	2200      	movs	r2, #0
 80094e6:	2300      	movs	r3, #0
 80094e8:	4650      	mov	r0, sl
 80094ea:	4659      	mov	r1, fp
 80094ec:	f7f7 faf4 	bl	8000ad8 <__aeabi_dcmpeq>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	d1ac      	bne.n	800944e <_strtod_l+0x566>
 80094f4:	9b07      	ldr	r3, [sp, #28]
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	9a05      	ldr	r2, [sp, #20]
 80094fa:	9908      	ldr	r1, [sp, #32]
 80094fc:	4623      	mov	r3, r4
 80094fe:	4648      	mov	r0, r9
 8009500:	f001 fda4 	bl	800b04c <__s2b>
 8009504:	9007      	str	r0, [sp, #28]
 8009506:	2800      	cmp	r0, #0
 8009508:	f43f af08 	beq.w	800931c <_strtod_l+0x434>
 800950c:	9a06      	ldr	r2, [sp, #24]
 800950e:	9b06      	ldr	r3, [sp, #24]
 8009510:	2a00      	cmp	r2, #0
 8009512:	f1c3 0300 	rsb	r3, r3, #0
 8009516:	bfa8      	it	ge
 8009518:	2300      	movge	r3, #0
 800951a:	930e      	str	r3, [sp, #56]	; 0x38
 800951c:	2400      	movs	r4, #0
 800951e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009522:	9316      	str	r3, [sp, #88]	; 0x58
 8009524:	46a0      	mov	r8, r4
 8009526:	9b07      	ldr	r3, [sp, #28]
 8009528:	4648      	mov	r0, r9
 800952a:	6859      	ldr	r1, [r3, #4]
 800952c:	f001 fd08 	bl	800af40 <_Balloc>
 8009530:	9005      	str	r0, [sp, #20]
 8009532:	2800      	cmp	r0, #0
 8009534:	f43f aef6 	beq.w	8009324 <_strtod_l+0x43c>
 8009538:	9b07      	ldr	r3, [sp, #28]
 800953a:	691a      	ldr	r2, [r3, #16]
 800953c:	3202      	adds	r2, #2
 800953e:	f103 010c 	add.w	r1, r3, #12
 8009542:	0092      	lsls	r2, r2, #2
 8009544:	300c      	adds	r0, #12
 8009546:	f7fe fe3b 	bl	80081c0 <memcpy>
 800954a:	aa1e      	add	r2, sp, #120	; 0x78
 800954c:	a91d      	add	r1, sp, #116	; 0x74
 800954e:	ec4b ab10 	vmov	d0, sl, fp
 8009552:	4648      	mov	r0, r9
 8009554:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009558:	f002 f834 	bl	800b5c4 <__d2b>
 800955c:	901c      	str	r0, [sp, #112]	; 0x70
 800955e:	2800      	cmp	r0, #0
 8009560:	f43f aee0 	beq.w	8009324 <_strtod_l+0x43c>
 8009564:	2101      	movs	r1, #1
 8009566:	4648      	mov	r0, r9
 8009568:	f001 fdfc 	bl	800b164 <__i2b>
 800956c:	4680      	mov	r8, r0
 800956e:	2800      	cmp	r0, #0
 8009570:	f43f aed8 	beq.w	8009324 <_strtod_l+0x43c>
 8009574:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009576:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009578:	2e00      	cmp	r6, #0
 800957a:	bfab      	itete	ge
 800957c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800957e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009580:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009582:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8009584:	bfac      	ite	ge
 8009586:	18f7      	addge	r7, r6, r3
 8009588:	1b9d      	sublt	r5, r3, r6
 800958a:	9b04      	ldr	r3, [sp, #16]
 800958c:	1af6      	subs	r6, r6, r3
 800958e:	4416      	add	r6, r2
 8009590:	4b63      	ldr	r3, [pc, #396]	; (8009720 <_strtod_l+0x838>)
 8009592:	3e01      	subs	r6, #1
 8009594:	429e      	cmp	r6, r3
 8009596:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800959a:	f280 80af 	bge.w	80096fc <_strtod_l+0x814>
 800959e:	1b9b      	subs	r3, r3, r6
 80095a0:	2b1f      	cmp	r3, #31
 80095a2:	eba2 0203 	sub.w	r2, r2, r3
 80095a6:	f04f 0101 	mov.w	r1, #1
 80095aa:	f300 809b 	bgt.w	80096e4 <_strtod_l+0x7fc>
 80095ae:	fa01 f303 	lsl.w	r3, r1, r3
 80095b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80095b4:	2300      	movs	r3, #0
 80095b6:	930a      	str	r3, [sp, #40]	; 0x28
 80095b8:	18be      	adds	r6, r7, r2
 80095ba:	9b04      	ldr	r3, [sp, #16]
 80095bc:	42b7      	cmp	r7, r6
 80095be:	4415      	add	r5, r2
 80095c0:	441d      	add	r5, r3
 80095c2:	463b      	mov	r3, r7
 80095c4:	bfa8      	it	ge
 80095c6:	4633      	movge	r3, r6
 80095c8:	42ab      	cmp	r3, r5
 80095ca:	bfa8      	it	ge
 80095cc:	462b      	movge	r3, r5
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	bfc2      	ittt	gt
 80095d2:	1af6      	subgt	r6, r6, r3
 80095d4:	1aed      	subgt	r5, r5, r3
 80095d6:	1aff      	subgt	r7, r7, r3
 80095d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095da:	b1bb      	cbz	r3, 800960c <_strtod_l+0x724>
 80095dc:	4641      	mov	r1, r8
 80095de:	461a      	mov	r2, r3
 80095e0:	4648      	mov	r0, r9
 80095e2:	f001 fe5f 	bl	800b2a4 <__pow5mult>
 80095e6:	4680      	mov	r8, r0
 80095e8:	2800      	cmp	r0, #0
 80095ea:	f43f ae9b 	beq.w	8009324 <_strtod_l+0x43c>
 80095ee:	4601      	mov	r1, r0
 80095f0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80095f2:	4648      	mov	r0, r9
 80095f4:	f001 fdbf 	bl	800b176 <__multiply>
 80095f8:	900c      	str	r0, [sp, #48]	; 0x30
 80095fa:	2800      	cmp	r0, #0
 80095fc:	f43f ae92 	beq.w	8009324 <_strtod_l+0x43c>
 8009600:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009602:	4648      	mov	r0, r9
 8009604:	f001 fcd0 	bl	800afa8 <_Bfree>
 8009608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800960a:	931c      	str	r3, [sp, #112]	; 0x70
 800960c:	2e00      	cmp	r6, #0
 800960e:	dc7a      	bgt.n	8009706 <_strtod_l+0x81e>
 8009610:	9b06      	ldr	r3, [sp, #24]
 8009612:	2b00      	cmp	r3, #0
 8009614:	dd08      	ble.n	8009628 <_strtod_l+0x740>
 8009616:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009618:	9905      	ldr	r1, [sp, #20]
 800961a:	4648      	mov	r0, r9
 800961c:	f001 fe42 	bl	800b2a4 <__pow5mult>
 8009620:	9005      	str	r0, [sp, #20]
 8009622:	2800      	cmp	r0, #0
 8009624:	f43f ae7e 	beq.w	8009324 <_strtod_l+0x43c>
 8009628:	2d00      	cmp	r5, #0
 800962a:	dd08      	ble.n	800963e <_strtod_l+0x756>
 800962c:	462a      	mov	r2, r5
 800962e:	9905      	ldr	r1, [sp, #20]
 8009630:	4648      	mov	r0, r9
 8009632:	f001 fe85 	bl	800b340 <__lshift>
 8009636:	9005      	str	r0, [sp, #20]
 8009638:	2800      	cmp	r0, #0
 800963a:	f43f ae73 	beq.w	8009324 <_strtod_l+0x43c>
 800963e:	2f00      	cmp	r7, #0
 8009640:	dd08      	ble.n	8009654 <_strtod_l+0x76c>
 8009642:	4641      	mov	r1, r8
 8009644:	463a      	mov	r2, r7
 8009646:	4648      	mov	r0, r9
 8009648:	f001 fe7a 	bl	800b340 <__lshift>
 800964c:	4680      	mov	r8, r0
 800964e:	2800      	cmp	r0, #0
 8009650:	f43f ae68 	beq.w	8009324 <_strtod_l+0x43c>
 8009654:	9a05      	ldr	r2, [sp, #20]
 8009656:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009658:	4648      	mov	r0, r9
 800965a:	f001 fedf 	bl	800b41c <__mdiff>
 800965e:	4604      	mov	r4, r0
 8009660:	2800      	cmp	r0, #0
 8009662:	f43f ae5f 	beq.w	8009324 <_strtod_l+0x43c>
 8009666:	68c3      	ldr	r3, [r0, #12]
 8009668:	930c      	str	r3, [sp, #48]	; 0x30
 800966a:	2300      	movs	r3, #0
 800966c:	60c3      	str	r3, [r0, #12]
 800966e:	4641      	mov	r1, r8
 8009670:	f001 feba 	bl	800b3e8 <__mcmp>
 8009674:	2800      	cmp	r0, #0
 8009676:	da55      	bge.n	8009724 <_strtod_l+0x83c>
 8009678:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800967a:	b9e3      	cbnz	r3, 80096b6 <_strtod_l+0x7ce>
 800967c:	f1ba 0f00 	cmp.w	sl, #0
 8009680:	d119      	bne.n	80096b6 <_strtod_l+0x7ce>
 8009682:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009686:	b9b3      	cbnz	r3, 80096b6 <_strtod_l+0x7ce>
 8009688:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800968c:	0d1b      	lsrs	r3, r3, #20
 800968e:	051b      	lsls	r3, r3, #20
 8009690:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009694:	d90f      	bls.n	80096b6 <_strtod_l+0x7ce>
 8009696:	6963      	ldr	r3, [r4, #20]
 8009698:	b913      	cbnz	r3, 80096a0 <_strtod_l+0x7b8>
 800969a:	6923      	ldr	r3, [r4, #16]
 800969c:	2b01      	cmp	r3, #1
 800969e:	dd0a      	ble.n	80096b6 <_strtod_l+0x7ce>
 80096a0:	4621      	mov	r1, r4
 80096a2:	2201      	movs	r2, #1
 80096a4:	4648      	mov	r0, r9
 80096a6:	f001 fe4b 	bl	800b340 <__lshift>
 80096aa:	4641      	mov	r1, r8
 80096ac:	4604      	mov	r4, r0
 80096ae:	f001 fe9b 	bl	800b3e8 <__mcmp>
 80096b2:	2800      	cmp	r0, #0
 80096b4:	dc67      	bgt.n	8009786 <_strtod_l+0x89e>
 80096b6:	9b04      	ldr	r3, [sp, #16]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d171      	bne.n	80097a0 <_strtod_l+0x8b8>
 80096bc:	e63d      	b.n	800933a <_strtod_l+0x452>
 80096be:	f018 0f01 	tst.w	r8, #1
 80096c2:	d004      	beq.n	80096ce <_strtod_l+0x7e6>
 80096c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096c8:	f7f6 ff9e 	bl	8000608 <__aeabi_dmul>
 80096cc:	2301      	movs	r3, #1
 80096ce:	ea4f 0868 	mov.w	r8, r8, asr #1
 80096d2:	3508      	adds	r5, #8
 80096d4:	e6e5      	b.n	80094a2 <_strtod_l+0x5ba>
 80096d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096da:	fa02 f303 	lsl.w	r3, r2, r3
 80096de:	ea03 0a0a 	and.w	sl, r3, sl
 80096e2:	e6ff      	b.n	80094e4 <_strtod_l+0x5fc>
 80096e4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80096e8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80096ec:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80096f0:	36e2      	adds	r6, #226	; 0xe2
 80096f2:	fa01 f306 	lsl.w	r3, r1, r6
 80096f6:	930a      	str	r3, [sp, #40]	; 0x28
 80096f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80096fa:	e75d      	b.n	80095b8 <_strtod_l+0x6d0>
 80096fc:	2300      	movs	r3, #0
 80096fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009700:	2301      	movs	r3, #1
 8009702:	930f      	str	r3, [sp, #60]	; 0x3c
 8009704:	e758      	b.n	80095b8 <_strtod_l+0x6d0>
 8009706:	4632      	mov	r2, r6
 8009708:	991c      	ldr	r1, [sp, #112]	; 0x70
 800970a:	4648      	mov	r0, r9
 800970c:	f001 fe18 	bl	800b340 <__lshift>
 8009710:	901c      	str	r0, [sp, #112]	; 0x70
 8009712:	2800      	cmp	r0, #0
 8009714:	f47f af7c 	bne.w	8009610 <_strtod_l+0x728>
 8009718:	e604      	b.n	8009324 <_strtod_l+0x43c>
 800971a:	bf00      	nop
 800971c:	0800be58 	.word	0x0800be58
 8009720:	fffffc02 	.word	0xfffffc02
 8009724:	465d      	mov	r5, fp
 8009726:	f040 8086 	bne.w	8009836 <_strtod_l+0x94e>
 800972a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800972c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009730:	b32a      	cbz	r2, 800977e <_strtod_l+0x896>
 8009732:	4aaf      	ldr	r2, [pc, #700]	; (80099f0 <_strtod_l+0xb08>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d153      	bne.n	80097e0 <_strtod_l+0x8f8>
 8009738:	9b04      	ldr	r3, [sp, #16]
 800973a:	4650      	mov	r0, sl
 800973c:	b1d3      	cbz	r3, 8009774 <_strtod_l+0x88c>
 800973e:	4aad      	ldr	r2, [pc, #692]	; (80099f4 <_strtod_l+0xb0c>)
 8009740:	402a      	ands	r2, r5
 8009742:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009746:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800974a:	d816      	bhi.n	800977a <_strtod_l+0x892>
 800974c:	0d12      	lsrs	r2, r2, #20
 800974e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009752:	fa01 f303 	lsl.w	r3, r1, r3
 8009756:	4298      	cmp	r0, r3
 8009758:	d142      	bne.n	80097e0 <_strtod_l+0x8f8>
 800975a:	4ba7      	ldr	r3, [pc, #668]	; (80099f8 <_strtod_l+0xb10>)
 800975c:	429d      	cmp	r5, r3
 800975e:	d102      	bne.n	8009766 <_strtod_l+0x87e>
 8009760:	3001      	adds	r0, #1
 8009762:	f43f addf 	beq.w	8009324 <_strtod_l+0x43c>
 8009766:	4ba3      	ldr	r3, [pc, #652]	; (80099f4 <_strtod_l+0xb0c>)
 8009768:	402b      	ands	r3, r5
 800976a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800976e:	f04f 0a00 	mov.w	sl, #0
 8009772:	e7a0      	b.n	80096b6 <_strtod_l+0x7ce>
 8009774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009778:	e7ed      	b.n	8009756 <_strtod_l+0x86e>
 800977a:	460b      	mov	r3, r1
 800977c:	e7eb      	b.n	8009756 <_strtod_l+0x86e>
 800977e:	bb7b      	cbnz	r3, 80097e0 <_strtod_l+0x8f8>
 8009780:	f1ba 0f00 	cmp.w	sl, #0
 8009784:	d12c      	bne.n	80097e0 <_strtod_l+0x8f8>
 8009786:	9904      	ldr	r1, [sp, #16]
 8009788:	4a9a      	ldr	r2, [pc, #616]	; (80099f4 <_strtod_l+0xb0c>)
 800978a:	465b      	mov	r3, fp
 800978c:	b1f1      	cbz	r1, 80097cc <_strtod_l+0x8e4>
 800978e:	ea02 010b 	and.w	r1, r2, fp
 8009792:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009796:	dc19      	bgt.n	80097cc <_strtod_l+0x8e4>
 8009798:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800979c:	f77f ae5b 	ble.w	8009456 <_strtod_l+0x56e>
 80097a0:	4a96      	ldr	r2, [pc, #600]	; (80099fc <_strtod_l+0xb14>)
 80097a2:	2300      	movs	r3, #0
 80097a4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80097a8:	4650      	mov	r0, sl
 80097aa:	4659      	mov	r1, fp
 80097ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80097b0:	f7f6 ff2a 	bl	8000608 <__aeabi_dmul>
 80097b4:	4682      	mov	sl, r0
 80097b6:	468b      	mov	fp, r1
 80097b8:	2900      	cmp	r1, #0
 80097ba:	f47f adbe 	bne.w	800933a <_strtod_l+0x452>
 80097be:	2800      	cmp	r0, #0
 80097c0:	f47f adbb 	bne.w	800933a <_strtod_l+0x452>
 80097c4:	2322      	movs	r3, #34	; 0x22
 80097c6:	f8c9 3000 	str.w	r3, [r9]
 80097ca:	e5b6      	b.n	800933a <_strtod_l+0x452>
 80097cc:	4013      	ands	r3, r2
 80097ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80097d2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80097d6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80097da:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80097de:	e76a      	b.n	80096b6 <_strtod_l+0x7ce>
 80097e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097e2:	b193      	cbz	r3, 800980a <_strtod_l+0x922>
 80097e4:	422b      	tst	r3, r5
 80097e6:	f43f af66 	beq.w	80096b6 <_strtod_l+0x7ce>
 80097ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097ec:	9a04      	ldr	r2, [sp, #16]
 80097ee:	4650      	mov	r0, sl
 80097f0:	4659      	mov	r1, fp
 80097f2:	b173      	cbz	r3, 8009812 <_strtod_l+0x92a>
 80097f4:	f7ff fb5c 	bl	8008eb0 <sulp>
 80097f8:	4602      	mov	r2, r0
 80097fa:	460b      	mov	r3, r1
 80097fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009800:	f7f6 fd4c 	bl	800029c <__adddf3>
 8009804:	4682      	mov	sl, r0
 8009806:	468b      	mov	fp, r1
 8009808:	e755      	b.n	80096b6 <_strtod_l+0x7ce>
 800980a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800980c:	ea13 0f0a 	tst.w	r3, sl
 8009810:	e7e9      	b.n	80097e6 <_strtod_l+0x8fe>
 8009812:	f7ff fb4d 	bl	8008eb0 <sulp>
 8009816:	4602      	mov	r2, r0
 8009818:	460b      	mov	r3, r1
 800981a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800981e:	f7f6 fd3b 	bl	8000298 <__aeabi_dsub>
 8009822:	2200      	movs	r2, #0
 8009824:	2300      	movs	r3, #0
 8009826:	4682      	mov	sl, r0
 8009828:	468b      	mov	fp, r1
 800982a:	f7f7 f955 	bl	8000ad8 <__aeabi_dcmpeq>
 800982e:	2800      	cmp	r0, #0
 8009830:	f47f ae11 	bne.w	8009456 <_strtod_l+0x56e>
 8009834:	e73f      	b.n	80096b6 <_strtod_l+0x7ce>
 8009836:	4641      	mov	r1, r8
 8009838:	4620      	mov	r0, r4
 800983a:	f001 ff12 	bl	800b662 <__ratio>
 800983e:	ec57 6b10 	vmov	r6, r7, d0
 8009842:	2200      	movs	r2, #0
 8009844:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009848:	ee10 0a10 	vmov	r0, s0
 800984c:	4639      	mov	r1, r7
 800984e:	f7f7 f957 	bl	8000b00 <__aeabi_dcmple>
 8009852:	2800      	cmp	r0, #0
 8009854:	d077      	beq.n	8009946 <_strtod_l+0xa5e>
 8009856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009858:	2b00      	cmp	r3, #0
 800985a:	d04a      	beq.n	80098f2 <_strtod_l+0xa0a>
 800985c:	4b68      	ldr	r3, [pc, #416]	; (8009a00 <_strtod_l+0xb18>)
 800985e:	2200      	movs	r2, #0
 8009860:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009864:	4f66      	ldr	r7, [pc, #408]	; (8009a00 <_strtod_l+0xb18>)
 8009866:	2600      	movs	r6, #0
 8009868:	4b62      	ldr	r3, [pc, #392]	; (80099f4 <_strtod_l+0xb0c>)
 800986a:	402b      	ands	r3, r5
 800986c:	930f      	str	r3, [sp, #60]	; 0x3c
 800986e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009870:	4b64      	ldr	r3, [pc, #400]	; (8009a04 <_strtod_l+0xb1c>)
 8009872:	429a      	cmp	r2, r3
 8009874:	f040 80ce 	bne.w	8009a14 <_strtod_l+0xb2c>
 8009878:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800987c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009880:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8009884:	ec4b ab10 	vmov	d0, sl, fp
 8009888:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800988c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009890:	f001 fe22 	bl	800b4d8 <__ulp>
 8009894:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009898:	ec53 2b10 	vmov	r2, r3, d0
 800989c:	f7f6 feb4 	bl	8000608 <__aeabi_dmul>
 80098a0:	4652      	mov	r2, sl
 80098a2:	465b      	mov	r3, fp
 80098a4:	f7f6 fcfa 	bl	800029c <__adddf3>
 80098a8:	460b      	mov	r3, r1
 80098aa:	4952      	ldr	r1, [pc, #328]	; (80099f4 <_strtod_l+0xb0c>)
 80098ac:	4a56      	ldr	r2, [pc, #344]	; (8009a08 <_strtod_l+0xb20>)
 80098ae:	4019      	ands	r1, r3
 80098b0:	4291      	cmp	r1, r2
 80098b2:	4682      	mov	sl, r0
 80098b4:	d95b      	bls.n	800996e <_strtod_l+0xa86>
 80098b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098b8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80098bc:	4293      	cmp	r3, r2
 80098be:	d103      	bne.n	80098c8 <_strtod_l+0x9e0>
 80098c0:	9b08      	ldr	r3, [sp, #32]
 80098c2:	3301      	adds	r3, #1
 80098c4:	f43f ad2e 	beq.w	8009324 <_strtod_l+0x43c>
 80098c8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80099f8 <_strtod_l+0xb10>
 80098cc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80098d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80098d2:	4648      	mov	r0, r9
 80098d4:	f001 fb68 	bl	800afa8 <_Bfree>
 80098d8:	9905      	ldr	r1, [sp, #20]
 80098da:	4648      	mov	r0, r9
 80098dc:	f001 fb64 	bl	800afa8 <_Bfree>
 80098e0:	4641      	mov	r1, r8
 80098e2:	4648      	mov	r0, r9
 80098e4:	f001 fb60 	bl	800afa8 <_Bfree>
 80098e8:	4621      	mov	r1, r4
 80098ea:	4648      	mov	r0, r9
 80098ec:	f001 fb5c 	bl	800afa8 <_Bfree>
 80098f0:	e619      	b.n	8009526 <_strtod_l+0x63e>
 80098f2:	f1ba 0f00 	cmp.w	sl, #0
 80098f6:	d11a      	bne.n	800992e <_strtod_l+0xa46>
 80098f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098fc:	b9eb      	cbnz	r3, 800993a <_strtod_l+0xa52>
 80098fe:	2200      	movs	r2, #0
 8009900:	4b3f      	ldr	r3, [pc, #252]	; (8009a00 <_strtod_l+0xb18>)
 8009902:	4630      	mov	r0, r6
 8009904:	4639      	mov	r1, r7
 8009906:	f7f7 f8f1 	bl	8000aec <__aeabi_dcmplt>
 800990a:	b9c8      	cbnz	r0, 8009940 <_strtod_l+0xa58>
 800990c:	4630      	mov	r0, r6
 800990e:	4639      	mov	r1, r7
 8009910:	2200      	movs	r2, #0
 8009912:	4b3e      	ldr	r3, [pc, #248]	; (8009a0c <_strtod_l+0xb24>)
 8009914:	f7f6 fe78 	bl	8000608 <__aeabi_dmul>
 8009918:	4606      	mov	r6, r0
 800991a:	460f      	mov	r7, r1
 800991c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009920:	9618      	str	r6, [sp, #96]	; 0x60
 8009922:	9319      	str	r3, [sp, #100]	; 0x64
 8009924:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009928:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800992c:	e79c      	b.n	8009868 <_strtod_l+0x980>
 800992e:	f1ba 0f01 	cmp.w	sl, #1
 8009932:	d102      	bne.n	800993a <_strtod_l+0xa52>
 8009934:	2d00      	cmp	r5, #0
 8009936:	f43f ad8e 	beq.w	8009456 <_strtod_l+0x56e>
 800993a:	2200      	movs	r2, #0
 800993c:	4b34      	ldr	r3, [pc, #208]	; (8009a10 <_strtod_l+0xb28>)
 800993e:	e78f      	b.n	8009860 <_strtod_l+0x978>
 8009940:	2600      	movs	r6, #0
 8009942:	4f32      	ldr	r7, [pc, #200]	; (8009a0c <_strtod_l+0xb24>)
 8009944:	e7ea      	b.n	800991c <_strtod_l+0xa34>
 8009946:	4b31      	ldr	r3, [pc, #196]	; (8009a0c <_strtod_l+0xb24>)
 8009948:	4630      	mov	r0, r6
 800994a:	4639      	mov	r1, r7
 800994c:	2200      	movs	r2, #0
 800994e:	f7f6 fe5b 	bl	8000608 <__aeabi_dmul>
 8009952:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009954:	4606      	mov	r6, r0
 8009956:	460f      	mov	r7, r1
 8009958:	b933      	cbnz	r3, 8009968 <_strtod_l+0xa80>
 800995a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800995e:	9010      	str	r0, [sp, #64]	; 0x40
 8009960:	9311      	str	r3, [sp, #68]	; 0x44
 8009962:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009966:	e7df      	b.n	8009928 <_strtod_l+0xa40>
 8009968:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800996c:	e7f9      	b.n	8009962 <_strtod_l+0xa7a>
 800996e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009972:	9b04      	ldr	r3, [sp, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1ab      	bne.n	80098d0 <_strtod_l+0x9e8>
 8009978:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800997c:	0d1b      	lsrs	r3, r3, #20
 800997e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009980:	051b      	lsls	r3, r3, #20
 8009982:	429a      	cmp	r2, r3
 8009984:	465d      	mov	r5, fp
 8009986:	d1a3      	bne.n	80098d0 <_strtod_l+0x9e8>
 8009988:	4639      	mov	r1, r7
 800998a:	4630      	mov	r0, r6
 800998c:	f7f7 f8ec 	bl	8000b68 <__aeabi_d2iz>
 8009990:	f7f6 fdd0 	bl	8000534 <__aeabi_i2d>
 8009994:	460b      	mov	r3, r1
 8009996:	4602      	mov	r2, r0
 8009998:	4639      	mov	r1, r7
 800999a:	4630      	mov	r0, r6
 800999c:	f7f6 fc7c 	bl	8000298 <__aeabi_dsub>
 80099a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099a2:	4606      	mov	r6, r0
 80099a4:	460f      	mov	r7, r1
 80099a6:	b933      	cbnz	r3, 80099b6 <_strtod_l+0xace>
 80099a8:	f1ba 0f00 	cmp.w	sl, #0
 80099ac:	d103      	bne.n	80099b6 <_strtod_l+0xace>
 80099ae:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80099b2:	2d00      	cmp	r5, #0
 80099b4:	d06d      	beq.n	8009a92 <_strtod_l+0xbaa>
 80099b6:	a30a      	add	r3, pc, #40	; (adr r3, 80099e0 <_strtod_l+0xaf8>)
 80099b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099bc:	4630      	mov	r0, r6
 80099be:	4639      	mov	r1, r7
 80099c0:	f7f7 f894 	bl	8000aec <__aeabi_dcmplt>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	f47f acb8 	bne.w	800933a <_strtod_l+0x452>
 80099ca:	a307      	add	r3, pc, #28	; (adr r3, 80099e8 <_strtod_l+0xb00>)
 80099cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d0:	4630      	mov	r0, r6
 80099d2:	4639      	mov	r1, r7
 80099d4:	f7f7 f8a8 	bl	8000b28 <__aeabi_dcmpgt>
 80099d8:	2800      	cmp	r0, #0
 80099da:	f43f af79 	beq.w	80098d0 <_strtod_l+0x9e8>
 80099de:	e4ac      	b.n	800933a <_strtod_l+0x452>
 80099e0:	94a03595 	.word	0x94a03595
 80099e4:	3fdfffff 	.word	0x3fdfffff
 80099e8:	35afe535 	.word	0x35afe535
 80099ec:	3fe00000 	.word	0x3fe00000
 80099f0:	000fffff 	.word	0x000fffff
 80099f4:	7ff00000 	.word	0x7ff00000
 80099f8:	7fefffff 	.word	0x7fefffff
 80099fc:	39500000 	.word	0x39500000
 8009a00:	3ff00000 	.word	0x3ff00000
 8009a04:	7fe00000 	.word	0x7fe00000
 8009a08:	7c9fffff 	.word	0x7c9fffff
 8009a0c:	3fe00000 	.word	0x3fe00000
 8009a10:	bff00000 	.word	0xbff00000
 8009a14:	9b04      	ldr	r3, [sp, #16]
 8009a16:	b333      	cbz	r3, 8009a66 <_strtod_l+0xb7e>
 8009a18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a1a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009a1e:	d822      	bhi.n	8009a66 <_strtod_l+0xb7e>
 8009a20:	a327      	add	r3, pc, #156	; (adr r3, 8009ac0 <_strtod_l+0xbd8>)
 8009a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a26:	4630      	mov	r0, r6
 8009a28:	4639      	mov	r1, r7
 8009a2a:	f7f7 f869 	bl	8000b00 <__aeabi_dcmple>
 8009a2e:	b1a0      	cbz	r0, 8009a5a <_strtod_l+0xb72>
 8009a30:	4639      	mov	r1, r7
 8009a32:	4630      	mov	r0, r6
 8009a34:	f7f7 f8c0 	bl	8000bb8 <__aeabi_d2uiz>
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	bf08      	it	eq
 8009a3c:	2001      	moveq	r0, #1
 8009a3e:	f7f6 fd69 	bl	8000514 <__aeabi_ui2d>
 8009a42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a44:	4606      	mov	r6, r0
 8009a46:	460f      	mov	r7, r1
 8009a48:	bb03      	cbnz	r3, 8009a8c <_strtod_l+0xba4>
 8009a4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a4e:	9012      	str	r0, [sp, #72]	; 0x48
 8009a50:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a52:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009a56:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009a5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a5e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009a62:	1a9b      	subs	r3, r3, r2
 8009a64:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a66:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009a6a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8009a6e:	f001 fd33 	bl	800b4d8 <__ulp>
 8009a72:	4650      	mov	r0, sl
 8009a74:	ec53 2b10 	vmov	r2, r3, d0
 8009a78:	4659      	mov	r1, fp
 8009a7a:	f7f6 fdc5 	bl	8000608 <__aeabi_dmul>
 8009a7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009a82:	f7f6 fc0b 	bl	800029c <__adddf3>
 8009a86:	4682      	mov	sl, r0
 8009a88:	468b      	mov	fp, r1
 8009a8a:	e772      	b.n	8009972 <_strtod_l+0xa8a>
 8009a8c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8009a90:	e7df      	b.n	8009a52 <_strtod_l+0xb6a>
 8009a92:	a30d      	add	r3, pc, #52	; (adr r3, 8009ac8 <_strtod_l+0xbe0>)
 8009a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a98:	f7f7 f828 	bl	8000aec <__aeabi_dcmplt>
 8009a9c:	e79c      	b.n	80099d8 <_strtod_l+0xaf0>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	930d      	str	r3, [sp, #52]	; 0x34
 8009aa2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009aa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009aa6:	6013      	str	r3, [r2, #0]
 8009aa8:	f7ff ba61 	b.w	8008f6e <_strtod_l+0x86>
 8009aac:	2b65      	cmp	r3, #101	; 0x65
 8009aae:	f04f 0200 	mov.w	r2, #0
 8009ab2:	f43f ab4e 	beq.w	8009152 <_strtod_l+0x26a>
 8009ab6:	2101      	movs	r1, #1
 8009ab8:	4614      	mov	r4, r2
 8009aba:	9104      	str	r1, [sp, #16]
 8009abc:	f7ff bacb 	b.w	8009056 <_strtod_l+0x16e>
 8009ac0:	ffc00000 	.word	0xffc00000
 8009ac4:	41dfffff 	.word	0x41dfffff
 8009ac8:	94a03595 	.word	0x94a03595
 8009acc:	3fcfffff 	.word	0x3fcfffff

08009ad0 <_strtod_r>:
 8009ad0:	4b05      	ldr	r3, [pc, #20]	; (8009ae8 <_strtod_r+0x18>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	b410      	push	{r4}
 8009ad6:	6a1b      	ldr	r3, [r3, #32]
 8009ad8:	4c04      	ldr	r4, [pc, #16]	; (8009aec <_strtod_r+0x1c>)
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	bf08      	it	eq
 8009ade:	4623      	moveq	r3, r4
 8009ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ae4:	f7ff ba00 	b.w	8008ee8 <_strtod_l>
 8009ae8:	20000018 	.word	0x20000018
 8009aec:	2000007c 	.word	0x2000007c

08009af0 <_strtol_l.isra.0>:
 8009af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009af4:	4680      	mov	r8, r0
 8009af6:	4689      	mov	r9, r1
 8009af8:	4692      	mov	sl, r2
 8009afa:	461e      	mov	r6, r3
 8009afc:	460f      	mov	r7, r1
 8009afe:	463d      	mov	r5, r7
 8009b00:	9808      	ldr	r0, [sp, #32]
 8009b02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b06:	f001 f9ed 	bl	800aee4 <__locale_ctype_ptr_l>
 8009b0a:	4420      	add	r0, r4
 8009b0c:	7843      	ldrb	r3, [r0, #1]
 8009b0e:	f013 0308 	ands.w	r3, r3, #8
 8009b12:	d132      	bne.n	8009b7a <_strtol_l.isra.0+0x8a>
 8009b14:	2c2d      	cmp	r4, #45	; 0x2d
 8009b16:	d132      	bne.n	8009b7e <_strtol_l.isra.0+0x8e>
 8009b18:	787c      	ldrb	r4, [r7, #1]
 8009b1a:	1cbd      	adds	r5, r7, #2
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	2e00      	cmp	r6, #0
 8009b20:	d05d      	beq.n	8009bde <_strtol_l.isra.0+0xee>
 8009b22:	2e10      	cmp	r6, #16
 8009b24:	d109      	bne.n	8009b3a <_strtol_l.isra.0+0x4a>
 8009b26:	2c30      	cmp	r4, #48	; 0x30
 8009b28:	d107      	bne.n	8009b3a <_strtol_l.isra.0+0x4a>
 8009b2a:	782b      	ldrb	r3, [r5, #0]
 8009b2c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009b30:	2b58      	cmp	r3, #88	; 0x58
 8009b32:	d14f      	bne.n	8009bd4 <_strtol_l.isra.0+0xe4>
 8009b34:	786c      	ldrb	r4, [r5, #1]
 8009b36:	2610      	movs	r6, #16
 8009b38:	3502      	adds	r5, #2
 8009b3a:	2a00      	cmp	r2, #0
 8009b3c:	bf14      	ite	ne
 8009b3e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009b42:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009b46:	2700      	movs	r7, #0
 8009b48:	fbb1 fcf6 	udiv	ip, r1, r6
 8009b4c:	4638      	mov	r0, r7
 8009b4e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009b52:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009b56:	2b09      	cmp	r3, #9
 8009b58:	d817      	bhi.n	8009b8a <_strtol_l.isra.0+0x9a>
 8009b5a:	461c      	mov	r4, r3
 8009b5c:	42a6      	cmp	r6, r4
 8009b5e:	dd23      	ble.n	8009ba8 <_strtol_l.isra.0+0xb8>
 8009b60:	1c7b      	adds	r3, r7, #1
 8009b62:	d007      	beq.n	8009b74 <_strtol_l.isra.0+0x84>
 8009b64:	4584      	cmp	ip, r0
 8009b66:	d31c      	bcc.n	8009ba2 <_strtol_l.isra.0+0xb2>
 8009b68:	d101      	bne.n	8009b6e <_strtol_l.isra.0+0x7e>
 8009b6a:	45a6      	cmp	lr, r4
 8009b6c:	db19      	blt.n	8009ba2 <_strtol_l.isra.0+0xb2>
 8009b6e:	fb00 4006 	mla	r0, r0, r6, r4
 8009b72:	2701      	movs	r7, #1
 8009b74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b78:	e7eb      	b.n	8009b52 <_strtol_l.isra.0+0x62>
 8009b7a:	462f      	mov	r7, r5
 8009b7c:	e7bf      	b.n	8009afe <_strtol_l.isra.0+0xe>
 8009b7e:	2c2b      	cmp	r4, #43	; 0x2b
 8009b80:	bf04      	itt	eq
 8009b82:	1cbd      	addeq	r5, r7, #2
 8009b84:	787c      	ldrbeq	r4, [r7, #1]
 8009b86:	461a      	mov	r2, r3
 8009b88:	e7c9      	b.n	8009b1e <_strtol_l.isra.0+0x2e>
 8009b8a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009b8e:	2b19      	cmp	r3, #25
 8009b90:	d801      	bhi.n	8009b96 <_strtol_l.isra.0+0xa6>
 8009b92:	3c37      	subs	r4, #55	; 0x37
 8009b94:	e7e2      	b.n	8009b5c <_strtol_l.isra.0+0x6c>
 8009b96:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009b9a:	2b19      	cmp	r3, #25
 8009b9c:	d804      	bhi.n	8009ba8 <_strtol_l.isra.0+0xb8>
 8009b9e:	3c57      	subs	r4, #87	; 0x57
 8009ba0:	e7dc      	b.n	8009b5c <_strtol_l.isra.0+0x6c>
 8009ba2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009ba6:	e7e5      	b.n	8009b74 <_strtol_l.isra.0+0x84>
 8009ba8:	1c7b      	adds	r3, r7, #1
 8009baa:	d108      	bne.n	8009bbe <_strtol_l.isra.0+0xce>
 8009bac:	2322      	movs	r3, #34	; 0x22
 8009bae:	f8c8 3000 	str.w	r3, [r8]
 8009bb2:	4608      	mov	r0, r1
 8009bb4:	f1ba 0f00 	cmp.w	sl, #0
 8009bb8:	d107      	bne.n	8009bca <_strtol_l.isra.0+0xda>
 8009bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bbe:	b102      	cbz	r2, 8009bc2 <_strtol_l.isra.0+0xd2>
 8009bc0:	4240      	negs	r0, r0
 8009bc2:	f1ba 0f00 	cmp.w	sl, #0
 8009bc6:	d0f8      	beq.n	8009bba <_strtol_l.isra.0+0xca>
 8009bc8:	b10f      	cbz	r7, 8009bce <_strtol_l.isra.0+0xde>
 8009bca:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009bce:	f8ca 9000 	str.w	r9, [sl]
 8009bd2:	e7f2      	b.n	8009bba <_strtol_l.isra.0+0xca>
 8009bd4:	2430      	movs	r4, #48	; 0x30
 8009bd6:	2e00      	cmp	r6, #0
 8009bd8:	d1af      	bne.n	8009b3a <_strtol_l.isra.0+0x4a>
 8009bda:	2608      	movs	r6, #8
 8009bdc:	e7ad      	b.n	8009b3a <_strtol_l.isra.0+0x4a>
 8009bde:	2c30      	cmp	r4, #48	; 0x30
 8009be0:	d0a3      	beq.n	8009b2a <_strtol_l.isra.0+0x3a>
 8009be2:	260a      	movs	r6, #10
 8009be4:	e7a9      	b.n	8009b3a <_strtol_l.isra.0+0x4a>
	...

08009be8 <_strtol_r>:
 8009be8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bea:	4c06      	ldr	r4, [pc, #24]	; (8009c04 <_strtol_r+0x1c>)
 8009bec:	4d06      	ldr	r5, [pc, #24]	; (8009c08 <_strtol_r+0x20>)
 8009bee:	6824      	ldr	r4, [r4, #0]
 8009bf0:	6a24      	ldr	r4, [r4, #32]
 8009bf2:	2c00      	cmp	r4, #0
 8009bf4:	bf08      	it	eq
 8009bf6:	462c      	moveq	r4, r5
 8009bf8:	9400      	str	r4, [sp, #0]
 8009bfa:	f7ff ff79 	bl	8009af0 <_strtol_l.isra.0>
 8009bfe:	b003      	add	sp, #12
 8009c00:	bd30      	pop	{r4, r5, pc}
 8009c02:	bf00      	nop
 8009c04:	20000018 	.word	0x20000018
 8009c08:	2000007c 	.word	0x2000007c

08009c0c <quorem>:
 8009c0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c10:	6903      	ldr	r3, [r0, #16]
 8009c12:	690c      	ldr	r4, [r1, #16]
 8009c14:	42a3      	cmp	r3, r4
 8009c16:	4680      	mov	r8, r0
 8009c18:	f2c0 8082 	blt.w	8009d20 <quorem+0x114>
 8009c1c:	3c01      	subs	r4, #1
 8009c1e:	f101 0714 	add.w	r7, r1, #20
 8009c22:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009c26:	f100 0614 	add.w	r6, r0, #20
 8009c2a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009c2e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009c32:	eb06 030c 	add.w	r3, r6, ip
 8009c36:	3501      	adds	r5, #1
 8009c38:	eb07 090c 	add.w	r9, r7, ip
 8009c3c:	9301      	str	r3, [sp, #4]
 8009c3e:	fbb0 f5f5 	udiv	r5, r0, r5
 8009c42:	b395      	cbz	r5, 8009caa <quorem+0x9e>
 8009c44:	f04f 0a00 	mov.w	sl, #0
 8009c48:	4638      	mov	r0, r7
 8009c4a:	46b6      	mov	lr, r6
 8009c4c:	46d3      	mov	fp, sl
 8009c4e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c52:	b293      	uxth	r3, r2
 8009c54:	fb05 a303 	mla	r3, r5, r3, sl
 8009c58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	ebab 0303 	sub.w	r3, fp, r3
 8009c62:	0c12      	lsrs	r2, r2, #16
 8009c64:	f8de b000 	ldr.w	fp, [lr]
 8009c68:	fb05 a202 	mla	r2, r5, r2, sl
 8009c6c:	fa13 f38b 	uxtah	r3, r3, fp
 8009c70:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009c74:	fa1f fb82 	uxth.w	fp, r2
 8009c78:	f8de 2000 	ldr.w	r2, [lr]
 8009c7c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009c80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c8a:	4581      	cmp	r9, r0
 8009c8c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009c90:	f84e 3b04 	str.w	r3, [lr], #4
 8009c94:	d2db      	bcs.n	8009c4e <quorem+0x42>
 8009c96:	f856 300c 	ldr.w	r3, [r6, ip]
 8009c9a:	b933      	cbnz	r3, 8009caa <quorem+0x9e>
 8009c9c:	9b01      	ldr	r3, [sp, #4]
 8009c9e:	3b04      	subs	r3, #4
 8009ca0:	429e      	cmp	r6, r3
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	d330      	bcc.n	8009d08 <quorem+0xfc>
 8009ca6:	f8c8 4010 	str.w	r4, [r8, #16]
 8009caa:	4640      	mov	r0, r8
 8009cac:	f001 fb9c 	bl	800b3e8 <__mcmp>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	db25      	blt.n	8009d00 <quorem+0xf4>
 8009cb4:	3501      	adds	r5, #1
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	f04f 0c00 	mov.w	ip, #0
 8009cbc:	f857 2b04 	ldr.w	r2, [r7], #4
 8009cc0:	f8d0 e000 	ldr.w	lr, [r0]
 8009cc4:	b293      	uxth	r3, r2
 8009cc6:	ebac 0303 	sub.w	r3, ip, r3
 8009cca:	0c12      	lsrs	r2, r2, #16
 8009ccc:	fa13 f38e 	uxtah	r3, r3, lr
 8009cd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009cd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cde:	45b9      	cmp	r9, r7
 8009ce0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009ce4:	f840 3b04 	str.w	r3, [r0], #4
 8009ce8:	d2e8      	bcs.n	8009cbc <quorem+0xb0>
 8009cea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009cee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009cf2:	b92a      	cbnz	r2, 8009d00 <quorem+0xf4>
 8009cf4:	3b04      	subs	r3, #4
 8009cf6:	429e      	cmp	r6, r3
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	d30b      	bcc.n	8009d14 <quorem+0x108>
 8009cfc:	f8c8 4010 	str.w	r4, [r8, #16]
 8009d00:	4628      	mov	r0, r5
 8009d02:	b003      	add	sp, #12
 8009d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d08:	6812      	ldr	r2, [r2, #0]
 8009d0a:	3b04      	subs	r3, #4
 8009d0c:	2a00      	cmp	r2, #0
 8009d0e:	d1ca      	bne.n	8009ca6 <quorem+0x9a>
 8009d10:	3c01      	subs	r4, #1
 8009d12:	e7c5      	b.n	8009ca0 <quorem+0x94>
 8009d14:	6812      	ldr	r2, [r2, #0]
 8009d16:	3b04      	subs	r3, #4
 8009d18:	2a00      	cmp	r2, #0
 8009d1a:	d1ef      	bne.n	8009cfc <quorem+0xf0>
 8009d1c:	3c01      	subs	r4, #1
 8009d1e:	e7ea      	b.n	8009cf6 <quorem+0xea>
 8009d20:	2000      	movs	r0, #0
 8009d22:	e7ee      	b.n	8009d02 <quorem+0xf6>
 8009d24:	0000      	movs	r0, r0
	...

08009d28 <_dtoa_r>:
 8009d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2c:	ec57 6b10 	vmov	r6, r7, d0
 8009d30:	b097      	sub	sp, #92	; 0x5c
 8009d32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009d34:	9106      	str	r1, [sp, #24]
 8009d36:	4604      	mov	r4, r0
 8009d38:	920b      	str	r2, [sp, #44]	; 0x2c
 8009d3a:	9312      	str	r3, [sp, #72]	; 0x48
 8009d3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009d40:	e9cd 6700 	strd	r6, r7, [sp]
 8009d44:	b93d      	cbnz	r5, 8009d56 <_dtoa_r+0x2e>
 8009d46:	2010      	movs	r0, #16
 8009d48:	f001 f8e0 	bl	800af0c <malloc>
 8009d4c:	6260      	str	r0, [r4, #36]	; 0x24
 8009d4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009d52:	6005      	str	r5, [r0, #0]
 8009d54:	60c5      	str	r5, [r0, #12]
 8009d56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d58:	6819      	ldr	r1, [r3, #0]
 8009d5a:	b151      	cbz	r1, 8009d72 <_dtoa_r+0x4a>
 8009d5c:	685a      	ldr	r2, [r3, #4]
 8009d5e:	604a      	str	r2, [r1, #4]
 8009d60:	2301      	movs	r3, #1
 8009d62:	4093      	lsls	r3, r2
 8009d64:	608b      	str	r3, [r1, #8]
 8009d66:	4620      	mov	r0, r4
 8009d68:	f001 f91e 	bl	800afa8 <_Bfree>
 8009d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d6e:	2200      	movs	r2, #0
 8009d70:	601a      	str	r2, [r3, #0]
 8009d72:	1e3b      	subs	r3, r7, #0
 8009d74:	bfbb      	ittet	lt
 8009d76:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009d7a:	9301      	strlt	r3, [sp, #4]
 8009d7c:	2300      	movge	r3, #0
 8009d7e:	2201      	movlt	r2, #1
 8009d80:	bfac      	ite	ge
 8009d82:	f8c8 3000 	strge.w	r3, [r8]
 8009d86:	f8c8 2000 	strlt.w	r2, [r8]
 8009d8a:	4baf      	ldr	r3, [pc, #700]	; (800a048 <_dtoa_r+0x320>)
 8009d8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009d90:	ea33 0308 	bics.w	r3, r3, r8
 8009d94:	d114      	bne.n	8009dc0 <_dtoa_r+0x98>
 8009d96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d98:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d9c:	6013      	str	r3, [r2, #0]
 8009d9e:	9b00      	ldr	r3, [sp, #0]
 8009da0:	b923      	cbnz	r3, 8009dac <_dtoa_r+0x84>
 8009da2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009da6:	2800      	cmp	r0, #0
 8009da8:	f000 8542 	beq.w	800a830 <_dtoa_r+0xb08>
 8009dac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009dae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a05c <_dtoa_r+0x334>
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f000 8544 	beq.w	800a840 <_dtoa_r+0xb18>
 8009db8:	f10b 0303 	add.w	r3, fp, #3
 8009dbc:	f000 bd3e 	b.w	800a83c <_dtoa_r+0xb14>
 8009dc0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	4630      	mov	r0, r6
 8009dca:	4639      	mov	r1, r7
 8009dcc:	f7f6 fe84 	bl	8000ad8 <__aeabi_dcmpeq>
 8009dd0:	4681      	mov	r9, r0
 8009dd2:	b168      	cbz	r0, 8009df0 <_dtoa_r+0xc8>
 8009dd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	6013      	str	r3, [r2, #0]
 8009dda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f000 8524 	beq.w	800a82a <_dtoa_r+0xb02>
 8009de2:	4b9a      	ldr	r3, [pc, #616]	; (800a04c <_dtoa_r+0x324>)
 8009de4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009de6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8009dea:	6013      	str	r3, [r2, #0]
 8009dec:	f000 bd28 	b.w	800a840 <_dtoa_r+0xb18>
 8009df0:	aa14      	add	r2, sp, #80	; 0x50
 8009df2:	a915      	add	r1, sp, #84	; 0x54
 8009df4:	ec47 6b10 	vmov	d0, r6, r7
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f001 fbe3 	bl	800b5c4 <__d2b>
 8009dfe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009e02:	9004      	str	r0, [sp, #16]
 8009e04:	2d00      	cmp	r5, #0
 8009e06:	d07c      	beq.n	8009f02 <_dtoa_r+0x1da>
 8009e08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e0c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009e10:	46b2      	mov	sl, r6
 8009e12:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009e16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009e1a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009e1e:	2200      	movs	r2, #0
 8009e20:	4b8b      	ldr	r3, [pc, #556]	; (800a050 <_dtoa_r+0x328>)
 8009e22:	4650      	mov	r0, sl
 8009e24:	4659      	mov	r1, fp
 8009e26:	f7f6 fa37 	bl	8000298 <__aeabi_dsub>
 8009e2a:	a381      	add	r3, pc, #516	; (adr r3, 800a030 <_dtoa_r+0x308>)
 8009e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e30:	f7f6 fbea 	bl	8000608 <__aeabi_dmul>
 8009e34:	a380      	add	r3, pc, #512	; (adr r3, 800a038 <_dtoa_r+0x310>)
 8009e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3a:	f7f6 fa2f 	bl	800029c <__adddf3>
 8009e3e:	4606      	mov	r6, r0
 8009e40:	4628      	mov	r0, r5
 8009e42:	460f      	mov	r7, r1
 8009e44:	f7f6 fb76 	bl	8000534 <__aeabi_i2d>
 8009e48:	a37d      	add	r3, pc, #500	; (adr r3, 800a040 <_dtoa_r+0x318>)
 8009e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4e:	f7f6 fbdb 	bl	8000608 <__aeabi_dmul>
 8009e52:	4602      	mov	r2, r0
 8009e54:	460b      	mov	r3, r1
 8009e56:	4630      	mov	r0, r6
 8009e58:	4639      	mov	r1, r7
 8009e5a:	f7f6 fa1f 	bl	800029c <__adddf3>
 8009e5e:	4606      	mov	r6, r0
 8009e60:	460f      	mov	r7, r1
 8009e62:	f7f6 fe81 	bl	8000b68 <__aeabi_d2iz>
 8009e66:	2200      	movs	r2, #0
 8009e68:	4682      	mov	sl, r0
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	4630      	mov	r0, r6
 8009e6e:	4639      	mov	r1, r7
 8009e70:	f7f6 fe3c 	bl	8000aec <__aeabi_dcmplt>
 8009e74:	b148      	cbz	r0, 8009e8a <_dtoa_r+0x162>
 8009e76:	4650      	mov	r0, sl
 8009e78:	f7f6 fb5c 	bl	8000534 <__aeabi_i2d>
 8009e7c:	4632      	mov	r2, r6
 8009e7e:	463b      	mov	r3, r7
 8009e80:	f7f6 fe2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e84:	b908      	cbnz	r0, 8009e8a <_dtoa_r+0x162>
 8009e86:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009e8a:	f1ba 0f16 	cmp.w	sl, #22
 8009e8e:	d859      	bhi.n	8009f44 <_dtoa_r+0x21c>
 8009e90:	4970      	ldr	r1, [pc, #448]	; (800a054 <_dtoa_r+0x32c>)
 8009e92:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009e96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e9e:	f7f6 fe43 	bl	8000b28 <__aeabi_dcmpgt>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	d050      	beq.n	8009f48 <_dtoa_r+0x220>
 8009ea6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009eaa:	2300      	movs	r3, #0
 8009eac:	930f      	str	r3, [sp, #60]	; 0x3c
 8009eae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009eb0:	1b5d      	subs	r5, r3, r5
 8009eb2:	f1b5 0801 	subs.w	r8, r5, #1
 8009eb6:	bf49      	itett	mi
 8009eb8:	f1c5 0301 	rsbmi	r3, r5, #1
 8009ebc:	2300      	movpl	r3, #0
 8009ebe:	9305      	strmi	r3, [sp, #20]
 8009ec0:	f04f 0800 	movmi.w	r8, #0
 8009ec4:	bf58      	it	pl
 8009ec6:	9305      	strpl	r3, [sp, #20]
 8009ec8:	f1ba 0f00 	cmp.w	sl, #0
 8009ecc:	db3e      	blt.n	8009f4c <_dtoa_r+0x224>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	44d0      	add	r8, sl
 8009ed2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009ed6:	9307      	str	r3, [sp, #28]
 8009ed8:	9b06      	ldr	r3, [sp, #24]
 8009eda:	2b09      	cmp	r3, #9
 8009edc:	f200 8090 	bhi.w	800a000 <_dtoa_r+0x2d8>
 8009ee0:	2b05      	cmp	r3, #5
 8009ee2:	bfc4      	itt	gt
 8009ee4:	3b04      	subgt	r3, #4
 8009ee6:	9306      	strgt	r3, [sp, #24]
 8009ee8:	9b06      	ldr	r3, [sp, #24]
 8009eea:	f1a3 0302 	sub.w	r3, r3, #2
 8009eee:	bfcc      	ite	gt
 8009ef0:	2500      	movgt	r5, #0
 8009ef2:	2501      	movle	r5, #1
 8009ef4:	2b03      	cmp	r3, #3
 8009ef6:	f200 808f 	bhi.w	800a018 <_dtoa_r+0x2f0>
 8009efa:	e8df f003 	tbb	[pc, r3]
 8009efe:	7f7d      	.short	0x7f7d
 8009f00:	7131      	.short	0x7131
 8009f02:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009f06:	441d      	add	r5, r3
 8009f08:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009f0c:	2820      	cmp	r0, #32
 8009f0e:	dd13      	ble.n	8009f38 <_dtoa_r+0x210>
 8009f10:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009f14:	9b00      	ldr	r3, [sp, #0]
 8009f16:	fa08 f800 	lsl.w	r8, r8, r0
 8009f1a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009f1e:	fa23 f000 	lsr.w	r0, r3, r0
 8009f22:	ea48 0000 	orr.w	r0, r8, r0
 8009f26:	f7f6 faf5 	bl	8000514 <__aeabi_ui2d>
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	4682      	mov	sl, r0
 8009f2e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009f32:	3d01      	subs	r5, #1
 8009f34:	9313      	str	r3, [sp, #76]	; 0x4c
 8009f36:	e772      	b.n	8009e1e <_dtoa_r+0xf6>
 8009f38:	9b00      	ldr	r3, [sp, #0]
 8009f3a:	f1c0 0020 	rsb	r0, r0, #32
 8009f3e:	fa03 f000 	lsl.w	r0, r3, r0
 8009f42:	e7f0      	b.n	8009f26 <_dtoa_r+0x1fe>
 8009f44:	2301      	movs	r3, #1
 8009f46:	e7b1      	b.n	8009eac <_dtoa_r+0x184>
 8009f48:	900f      	str	r0, [sp, #60]	; 0x3c
 8009f4a:	e7b0      	b.n	8009eae <_dtoa_r+0x186>
 8009f4c:	9b05      	ldr	r3, [sp, #20]
 8009f4e:	eba3 030a 	sub.w	r3, r3, sl
 8009f52:	9305      	str	r3, [sp, #20]
 8009f54:	f1ca 0300 	rsb	r3, sl, #0
 8009f58:	9307      	str	r3, [sp, #28]
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	930e      	str	r3, [sp, #56]	; 0x38
 8009f5e:	e7bb      	b.n	8009ed8 <_dtoa_r+0x1b0>
 8009f60:	2301      	movs	r3, #1
 8009f62:	930a      	str	r3, [sp, #40]	; 0x28
 8009f64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	dd59      	ble.n	800a01e <_dtoa_r+0x2f6>
 8009f6a:	9302      	str	r3, [sp, #8]
 8009f6c:	4699      	mov	r9, r3
 8009f6e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009f70:	2200      	movs	r2, #0
 8009f72:	6072      	str	r2, [r6, #4]
 8009f74:	2204      	movs	r2, #4
 8009f76:	f102 0014 	add.w	r0, r2, #20
 8009f7a:	4298      	cmp	r0, r3
 8009f7c:	6871      	ldr	r1, [r6, #4]
 8009f7e:	d953      	bls.n	800a028 <_dtoa_r+0x300>
 8009f80:	4620      	mov	r0, r4
 8009f82:	f000 ffdd 	bl	800af40 <_Balloc>
 8009f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f88:	6030      	str	r0, [r6, #0]
 8009f8a:	f1b9 0f0e 	cmp.w	r9, #14
 8009f8e:	f8d3 b000 	ldr.w	fp, [r3]
 8009f92:	f200 80e6 	bhi.w	800a162 <_dtoa_r+0x43a>
 8009f96:	2d00      	cmp	r5, #0
 8009f98:	f000 80e3 	beq.w	800a162 <_dtoa_r+0x43a>
 8009f9c:	ed9d 7b00 	vldr	d7, [sp]
 8009fa0:	f1ba 0f00 	cmp.w	sl, #0
 8009fa4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009fa8:	dd74      	ble.n	800a094 <_dtoa_r+0x36c>
 8009faa:	4a2a      	ldr	r2, [pc, #168]	; (800a054 <_dtoa_r+0x32c>)
 8009fac:	f00a 030f 	and.w	r3, sl, #15
 8009fb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009fb4:	ed93 7b00 	vldr	d7, [r3]
 8009fb8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009fbc:	06f0      	lsls	r0, r6, #27
 8009fbe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009fc2:	d565      	bpl.n	800a090 <_dtoa_r+0x368>
 8009fc4:	4b24      	ldr	r3, [pc, #144]	; (800a058 <_dtoa_r+0x330>)
 8009fc6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009fca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009fce:	f7f6 fc45 	bl	800085c <__aeabi_ddiv>
 8009fd2:	e9cd 0100 	strd	r0, r1, [sp]
 8009fd6:	f006 060f 	and.w	r6, r6, #15
 8009fda:	2503      	movs	r5, #3
 8009fdc:	4f1e      	ldr	r7, [pc, #120]	; (800a058 <_dtoa_r+0x330>)
 8009fde:	e04c      	b.n	800a07a <_dtoa_r+0x352>
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	930a      	str	r3, [sp, #40]	; 0x28
 8009fe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fe6:	4453      	add	r3, sl
 8009fe8:	f103 0901 	add.w	r9, r3, #1
 8009fec:	9302      	str	r3, [sp, #8]
 8009fee:	464b      	mov	r3, r9
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	bfb8      	it	lt
 8009ff4:	2301      	movlt	r3, #1
 8009ff6:	e7ba      	b.n	8009f6e <_dtoa_r+0x246>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	e7b2      	b.n	8009f62 <_dtoa_r+0x23a>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	e7f0      	b.n	8009fe2 <_dtoa_r+0x2ba>
 800a000:	2501      	movs	r5, #1
 800a002:	2300      	movs	r3, #0
 800a004:	9306      	str	r3, [sp, #24]
 800a006:	950a      	str	r5, [sp, #40]	; 0x28
 800a008:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a00c:	9302      	str	r3, [sp, #8]
 800a00e:	4699      	mov	r9, r3
 800a010:	2200      	movs	r2, #0
 800a012:	2312      	movs	r3, #18
 800a014:	920b      	str	r2, [sp, #44]	; 0x2c
 800a016:	e7aa      	b.n	8009f6e <_dtoa_r+0x246>
 800a018:	2301      	movs	r3, #1
 800a01a:	930a      	str	r3, [sp, #40]	; 0x28
 800a01c:	e7f4      	b.n	800a008 <_dtoa_r+0x2e0>
 800a01e:	2301      	movs	r3, #1
 800a020:	9302      	str	r3, [sp, #8]
 800a022:	4699      	mov	r9, r3
 800a024:	461a      	mov	r2, r3
 800a026:	e7f5      	b.n	800a014 <_dtoa_r+0x2ec>
 800a028:	3101      	adds	r1, #1
 800a02a:	6071      	str	r1, [r6, #4]
 800a02c:	0052      	lsls	r2, r2, #1
 800a02e:	e7a2      	b.n	8009f76 <_dtoa_r+0x24e>
 800a030:	636f4361 	.word	0x636f4361
 800a034:	3fd287a7 	.word	0x3fd287a7
 800a038:	8b60c8b3 	.word	0x8b60c8b3
 800a03c:	3fc68a28 	.word	0x3fc68a28
 800a040:	509f79fb 	.word	0x509f79fb
 800a044:	3fd34413 	.word	0x3fd34413
 800a048:	7ff00000 	.word	0x7ff00000
 800a04c:	0800be05 	.word	0x0800be05
 800a050:	3ff80000 	.word	0x3ff80000
 800a054:	0800bec0 	.word	0x0800bec0
 800a058:	0800be98 	.word	0x0800be98
 800a05c:	0800be89 	.word	0x0800be89
 800a060:	07f1      	lsls	r1, r6, #31
 800a062:	d508      	bpl.n	800a076 <_dtoa_r+0x34e>
 800a064:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a06c:	f7f6 facc 	bl	8000608 <__aeabi_dmul>
 800a070:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a074:	3501      	adds	r5, #1
 800a076:	1076      	asrs	r6, r6, #1
 800a078:	3708      	adds	r7, #8
 800a07a:	2e00      	cmp	r6, #0
 800a07c:	d1f0      	bne.n	800a060 <_dtoa_r+0x338>
 800a07e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a082:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a086:	f7f6 fbe9 	bl	800085c <__aeabi_ddiv>
 800a08a:	e9cd 0100 	strd	r0, r1, [sp]
 800a08e:	e01a      	b.n	800a0c6 <_dtoa_r+0x39e>
 800a090:	2502      	movs	r5, #2
 800a092:	e7a3      	b.n	8009fdc <_dtoa_r+0x2b4>
 800a094:	f000 80a0 	beq.w	800a1d8 <_dtoa_r+0x4b0>
 800a098:	f1ca 0600 	rsb	r6, sl, #0
 800a09c:	4b9f      	ldr	r3, [pc, #636]	; (800a31c <_dtoa_r+0x5f4>)
 800a09e:	4fa0      	ldr	r7, [pc, #640]	; (800a320 <_dtoa_r+0x5f8>)
 800a0a0:	f006 020f 	and.w	r2, r6, #15
 800a0a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a0b0:	f7f6 faaa 	bl	8000608 <__aeabi_dmul>
 800a0b4:	e9cd 0100 	strd	r0, r1, [sp]
 800a0b8:	1136      	asrs	r6, r6, #4
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	2502      	movs	r5, #2
 800a0be:	2e00      	cmp	r6, #0
 800a0c0:	d17f      	bne.n	800a1c2 <_dtoa_r+0x49a>
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d1e1      	bne.n	800a08a <_dtoa_r+0x362>
 800a0c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f000 8087 	beq.w	800a1dc <_dtoa_r+0x4b4>
 800a0ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	4b93      	ldr	r3, [pc, #588]	; (800a324 <_dtoa_r+0x5fc>)
 800a0d6:	4630      	mov	r0, r6
 800a0d8:	4639      	mov	r1, r7
 800a0da:	f7f6 fd07 	bl	8000aec <__aeabi_dcmplt>
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	d07c      	beq.n	800a1dc <_dtoa_r+0x4b4>
 800a0e2:	f1b9 0f00 	cmp.w	r9, #0
 800a0e6:	d079      	beq.n	800a1dc <_dtoa_r+0x4b4>
 800a0e8:	9b02      	ldr	r3, [sp, #8]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	dd35      	ble.n	800a15a <_dtoa_r+0x432>
 800a0ee:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a0f2:	9308      	str	r3, [sp, #32]
 800a0f4:	4639      	mov	r1, r7
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	4b8b      	ldr	r3, [pc, #556]	; (800a328 <_dtoa_r+0x600>)
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	f7f6 fa84 	bl	8000608 <__aeabi_dmul>
 800a100:	e9cd 0100 	strd	r0, r1, [sp]
 800a104:	9f02      	ldr	r7, [sp, #8]
 800a106:	3501      	adds	r5, #1
 800a108:	4628      	mov	r0, r5
 800a10a:	f7f6 fa13 	bl	8000534 <__aeabi_i2d>
 800a10e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a112:	f7f6 fa79 	bl	8000608 <__aeabi_dmul>
 800a116:	2200      	movs	r2, #0
 800a118:	4b84      	ldr	r3, [pc, #528]	; (800a32c <_dtoa_r+0x604>)
 800a11a:	f7f6 f8bf 	bl	800029c <__adddf3>
 800a11e:	4605      	mov	r5, r0
 800a120:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a124:	2f00      	cmp	r7, #0
 800a126:	d15d      	bne.n	800a1e4 <_dtoa_r+0x4bc>
 800a128:	2200      	movs	r2, #0
 800a12a:	4b81      	ldr	r3, [pc, #516]	; (800a330 <_dtoa_r+0x608>)
 800a12c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a130:	f7f6 f8b2 	bl	8000298 <__aeabi_dsub>
 800a134:	462a      	mov	r2, r5
 800a136:	4633      	mov	r3, r6
 800a138:	e9cd 0100 	strd	r0, r1, [sp]
 800a13c:	f7f6 fcf4 	bl	8000b28 <__aeabi_dcmpgt>
 800a140:	2800      	cmp	r0, #0
 800a142:	f040 8288 	bne.w	800a656 <_dtoa_r+0x92e>
 800a146:	462a      	mov	r2, r5
 800a148:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a14c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a150:	f7f6 fccc 	bl	8000aec <__aeabi_dcmplt>
 800a154:	2800      	cmp	r0, #0
 800a156:	f040 827c 	bne.w	800a652 <_dtoa_r+0x92a>
 800a15a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a15e:	e9cd 2300 	strd	r2, r3, [sp]
 800a162:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a164:	2b00      	cmp	r3, #0
 800a166:	f2c0 8150 	blt.w	800a40a <_dtoa_r+0x6e2>
 800a16a:	f1ba 0f0e 	cmp.w	sl, #14
 800a16e:	f300 814c 	bgt.w	800a40a <_dtoa_r+0x6e2>
 800a172:	4b6a      	ldr	r3, [pc, #424]	; (800a31c <_dtoa_r+0x5f4>)
 800a174:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a178:	ed93 7b00 	vldr	d7, [r3]
 800a17c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a17e:	2b00      	cmp	r3, #0
 800a180:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a184:	f280 80d8 	bge.w	800a338 <_dtoa_r+0x610>
 800a188:	f1b9 0f00 	cmp.w	r9, #0
 800a18c:	f300 80d4 	bgt.w	800a338 <_dtoa_r+0x610>
 800a190:	f040 825e 	bne.w	800a650 <_dtoa_r+0x928>
 800a194:	2200      	movs	r2, #0
 800a196:	4b66      	ldr	r3, [pc, #408]	; (800a330 <_dtoa_r+0x608>)
 800a198:	ec51 0b17 	vmov	r0, r1, d7
 800a19c:	f7f6 fa34 	bl	8000608 <__aeabi_dmul>
 800a1a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1a4:	f7f6 fcb6 	bl	8000b14 <__aeabi_dcmpge>
 800a1a8:	464f      	mov	r7, r9
 800a1aa:	464e      	mov	r6, r9
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	f040 8234 	bne.w	800a61a <_dtoa_r+0x8f2>
 800a1b2:	2331      	movs	r3, #49	; 0x31
 800a1b4:	f10b 0501 	add.w	r5, fp, #1
 800a1b8:	f88b 3000 	strb.w	r3, [fp]
 800a1bc:	f10a 0a01 	add.w	sl, sl, #1
 800a1c0:	e22f      	b.n	800a622 <_dtoa_r+0x8fa>
 800a1c2:	07f2      	lsls	r2, r6, #31
 800a1c4:	d505      	bpl.n	800a1d2 <_dtoa_r+0x4aa>
 800a1c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1ca:	f7f6 fa1d 	bl	8000608 <__aeabi_dmul>
 800a1ce:	3501      	adds	r5, #1
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	1076      	asrs	r6, r6, #1
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	e772      	b.n	800a0be <_dtoa_r+0x396>
 800a1d8:	2502      	movs	r5, #2
 800a1da:	e774      	b.n	800a0c6 <_dtoa_r+0x39e>
 800a1dc:	f8cd a020 	str.w	sl, [sp, #32]
 800a1e0:	464f      	mov	r7, r9
 800a1e2:	e791      	b.n	800a108 <_dtoa_r+0x3e0>
 800a1e4:	4b4d      	ldr	r3, [pc, #308]	; (800a31c <_dtoa_r+0x5f4>)
 800a1e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a1ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a1ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d047      	beq.n	800a284 <_dtoa_r+0x55c>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	494e      	ldr	r1, [pc, #312]	; (800a334 <_dtoa_r+0x60c>)
 800a1fc:	f7f6 fb2e 	bl	800085c <__aeabi_ddiv>
 800a200:	462a      	mov	r2, r5
 800a202:	4633      	mov	r3, r6
 800a204:	f7f6 f848 	bl	8000298 <__aeabi_dsub>
 800a208:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a20c:	465d      	mov	r5, fp
 800a20e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a212:	f7f6 fca9 	bl	8000b68 <__aeabi_d2iz>
 800a216:	4606      	mov	r6, r0
 800a218:	f7f6 f98c 	bl	8000534 <__aeabi_i2d>
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a224:	f7f6 f838 	bl	8000298 <__aeabi_dsub>
 800a228:	3630      	adds	r6, #48	; 0x30
 800a22a:	f805 6b01 	strb.w	r6, [r5], #1
 800a22e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a232:	e9cd 0100 	strd	r0, r1, [sp]
 800a236:	f7f6 fc59 	bl	8000aec <__aeabi_dcmplt>
 800a23a:	2800      	cmp	r0, #0
 800a23c:	d163      	bne.n	800a306 <_dtoa_r+0x5de>
 800a23e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a242:	2000      	movs	r0, #0
 800a244:	4937      	ldr	r1, [pc, #220]	; (800a324 <_dtoa_r+0x5fc>)
 800a246:	f7f6 f827 	bl	8000298 <__aeabi_dsub>
 800a24a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a24e:	f7f6 fc4d 	bl	8000aec <__aeabi_dcmplt>
 800a252:	2800      	cmp	r0, #0
 800a254:	f040 80b7 	bne.w	800a3c6 <_dtoa_r+0x69e>
 800a258:	eba5 030b 	sub.w	r3, r5, fp
 800a25c:	429f      	cmp	r7, r3
 800a25e:	f77f af7c 	ble.w	800a15a <_dtoa_r+0x432>
 800a262:	2200      	movs	r2, #0
 800a264:	4b30      	ldr	r3, [pc, #192]	; (800a328 <_dtoa_r+0x600>)
 800a266:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a26a:	f7f6 f9cd 	bl	8000608 <__aeabi_dmul>
 800a26e:	2200      	movs	r2, #0
 800a270:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a274:	4b2c      	ldr	r3, [pc, #176]	; (800a328 <_dtoa_r+0x600>)
 800a276:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a27a:	f7f6 f9c5 	bl	8000608 <__aeabi_dmul>
 800a27e:	e9cd 0100 	strd	r0, r1, [sp]
 800a282:	e7c4      	b.n	800a20e <_dtoa_r+0x4e6>
 800a284:	462a      	mov	r2, r5
 800a286:	4633      	mov	r3, r6
 800a288:	f7f6 f9be 	bl	8000608 <__aeabi_dmul>
 800a28c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a290:	eb0b 0507 	add.w	r5, fp, r7
 800a294:	465e      	mov	r6, fp
 800a296:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a29a:	f7f6 fc65 	bl	8000b68 <__aeabi_d2iz>
 800a29e:	4607      	mov	r7, r0
 800a2a0:	f7f6 f948 	bl	8000534 <__aeabi_i2d>
 800a2a4:	3730      	adds	r7, #48	; 0x30
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2ae:	f7f5 fff3 	bl	8000298 <__aeabi_dsub>
 800a2b2:	f806 7b01 	strb.w	r7, [r6], #1
 800a2b6:	42ae      	cmp	r6, r5
 800a2b8:	e9cd 0100 	strd	r0, r1, [sp]
 800a2bc:	f04f 0200 	mov.w	r2, #0
 800a2c0:	d126      	bne.n	800a310 <_dtoa_r+0x5e8>
 800a2c2:	4b1c      	ldr	r3, [pc, #112]	; (800a334 <_dtoa_r+0x60c>)
 800a2c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2c8:	f7f5 ffe8 	bl	800029c <__adddf3>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2d4:	f7f6 fc28 	bl	8000b28 <__aeabi_dcmpgt>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d174      	bne.n	800a3c6 <_dtoa_r+0x69e>
 800a2dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	4914      	ldr	r1, [pc, #80]	; (800a334 <_dtoa_r+0x60c>)
 800a2e4:	f7f5 ffd8 	bl	8000298 <__aeabi_dsub>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2f0:	f7f6 fbfc 	bl	8000aec <__aeabi_dcmplt>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	f43f af30 	beq.w	800a15a <_dtoa_r+0x432>
 800a2fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a2fe:	2b30      	cmp	r3, #48	; 0x30
 800a300:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800a304:	d002      	beq.n	800a30c <_dtoa_r+0x5e4>
 800a306:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a30a:	e04a      	b.n	800a3a2 <_dtoa_r+0x67a>
 800a30c:	4615      	mov	r5, r2
 800a30e:	e7f4      	b.n	800a2fa <_dtoa_r+0x5d2>
 800a310:	4b05      	ldr	r3, [pc, #20]	; (800a328 <_dtoa_r+0x600>)
 800a312:	f7f6 f979 	bl	8000608 <__aeabi_dmul>
 800a316:	e9cd 0100 	strd	r0, r1, [sp]
 800a31a:	e7bc      	b.n	800a296 <_dtoa_r+0x56e>
 800a31c:	0800bec0 	.word	0x0800bec0
 800a320:	0800be98 	.word	0x0800be98
 800a324:	3ff00000 	.word	0x3ff00000
 800a328:	40240000 	.word	0x40240000
 800a32c:	401c0000 	.word	0x401c0000
 800a330:	40140000 	.word	0x40140000
 800a334:	3fe00000 	.word	0x3fe00000
 800a338:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a33c:	465d      	mov	r5, fp
 800a33e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a342:	4630      	mov	r0, r6
 800a344:	4639      	mov	r1, r7
 800a346:	f7f6 fa89 	bl	800085c <__aeabi_ddiv>
 800a34a:	f7f6 fc0d 	bl	8000b68 <__aeabi_d2iz>
 800a34e:	4680      	mov	r8, r0
 800a350:	f7f6 f8f0 	bl	8000534 <__aeabi_i2d>
 800a354:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a358:	f7f6 f956 	bl	8000608 <__aeabi_dmul>
 800a35c:	4602      	mov	r2, r0
 800a35e:	460b      	mov	r3, r1
 800a360:	4630      	mov	r0, r6
 800a362:	4639      	mov	r1, r7
 800a364:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a368:	f7f5 ff96 	bl	8000298 <__aeabi_dsub>
 800a36c:	f805 6b01 	strb.w	r6, [r5], #1
 800a370:	eba5 060b 	sub.w	r6, r5, fp
 800a374:	45b1      	cmp	r9, r6
 800a376:	4602      	mov	r2, r0
 800a378:	460b      	mov	r3, r1
 800a37a:	d139      	bne.n	800a3f0 <_dtoa_r+0x6c8>
 800a37c:	f7f5 ff8e 	bl	800029c <__adddf3>
 800a380:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a384:	4606      	mov	r6, r0
 800a386:	460f      	mov	r7, r1
 800a388:	f7f6 fbce 	bl	8000b28 <__aeabi_dcmpgt>
 800a38c:	b9c8      	cbnz	r0, 800a3c2 <_dtoa_r+0x69a>
 800a38e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a392:	4630      	mov	r0, r6
 800a394:	4639      	mov	r1, r7
 800a396:	f7f6 fb9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a39a:	b110      	cbz	r0, 800a3a2 <_dtoa_r+0x67a>
 800a39c:	f018 0f01 	tst.w	r8, #1
 800a3a0:	d10f      	bne.n	800a3c2 <_dtoa_r+0x69a>
 800a3a2:	9904      	ldr	r1, [sp, #16]
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	f000 fdff 	bl	800afa8 <_Bfree>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a3ae:	702b      	strb	r3, [r5, #0]
 800a3b0:	f10a 0301 	add.w	r3, sl, #1
 800a3b4:	6013      	str	r3, [r2, #0]
 800a3b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f000 8241 	beq.w	800a840 <_dtoa_r+0xb18>
 800a3be:	601d      	str	r5, [r3, #0]
 800a3c0:	e23e      	b.n	800a840 <_dtoa_r+0xb18>
 800a3c2:	f8cd a020 	str.w	sl, [sp, #32]
 800a3c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a3ca:	2a39      	cmp	r2, #57	; 0x39
 800a3cc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800a3d0:	d108      	bne.n	800a3e4 <_dtoa_r+0x6bc>
 800a3d2:	459b      	cmp	fp, r3
 800a3d4:	d10a      	bne.n	800a3ec <_dtoa_r+0x6c4>
 800a3d6:	9b08      	ldr	r3, [sp, #32]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	9308      	str	r3, [sp, #32]
 800a3dc:	2330      	movs	r3, #48	; 0x30
 800a3de:	f88b 3000 	strb.w	r3, [fp]
 800a3e2:	465b      	mov	r3, fp
 800a3e4:	781a      	ldrb	r2, [r3, #0]
 800a3e6:	3201      	adds	r2, #1
 800a3e8:	701a      	strb	r2, [r3, #0]
 800a3ea:	e78c      	b.n	800a306 <_dtoa_r+0x5de>
 800a3ec:	461d      	mov	r5, r3
 800a3ee:	e7ea      	b.n	800a3c6 <_dtoa_r+0x69e>
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	4b9b      	ldr	r3, [pc, #620]	; (800a660 <_dtoa_r+0x938>)
 800a3f4:	f7f6 f908 	bl	8000608 <__aeabi_dmul>
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	4606      	mov	r6, r0
 800a3fe:	460f      	mov	r7, r1
 800a400:	f7f6 fb6a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a404:	2800      	cmp	r0, #0
 800a406:	d09a      	beq.n	800a33e <_dtoa_r+0x616>
 800a408:	e7cb      	b.n	800a3a2 <_dtoa_r+0x67a>
 800a40a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a40c:	2a00      	cmp	r2, #0
 800a40e:	f000 808b 	beq.w	800a528 <_dtoa_r+0x800>
 800a412:	9a06      	ldr	r2, [sp, #24]
 800a414:	2a01      	cmp	r2, #1
 800a416:	dc6e      	bgt.n	800a4f6 <_dtoa_r+0x7ce>
 800a418:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a41a:	2a00      	cmp	r2, #0
 800a41c:	d067      	beq.n	800a4ee <_dtoa_r+0x7c6>
 800a41e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a422:	9f07      	ldr	r7, [sp, #28]
 800a424:	9d05      	ldr	r5, [sp, #20]
 800a426:	9a05      	ldr	r2, [sp, #20]
 800a428:	2101      	movs	r1, #1
 800a42a:	441a      	add	r2, r3
 800a42c:	4620      	mov	r0, r4
 800a42e:	9205      	str	r2, [sp, #20]
 800a430:	4498      	add	r8, r3
 800a432:	f000 fe97 	bl	800b164 <__i2b>
 800a436:	4606      	mov	r6, r0
 800a438:	2d00      	cmp	r5, #0
 800a43a:	dd0c      	ble.n	800a456 <_dtoa_r+0x72e>
 800a43c:	f1b8 0f00 	cmp.w	r8, #0
 800a440:	dd09      	ble.n	800a456 <_dtoa_r+0x72e>
 800a442:	4545      	cmp	r5, r8
 800a444:	9a05      	ldr	r2, [sp, #20]
 800a446:	462b      	mov	r3, r5
 800a448:	bfa8      	it	ge
 800a44a:	4643      	movge	r3, r8
 800a44c:	1ad2      	subs	r2, r2, r3
 800a44e:	9205      	str	r2, [sp, #20]
 800a450:	1aed      	subs	r5, r5, r3
 800a452:	eba8 0803 	sub.w	r8, r8, r3
 800a456:	9b07      	ldr	r3, [sp, #28]
 800a458:	b1eb      	cbz	r3, 800a496 <_dtoa_r+0x76e>
 800a45a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d067      	beq.n	800a530 <_dtoa_r+0x808>
 800a460:	b18f      	cbz	r7, 800a486 <_dtoa_r+0x75e>
 800a462:	4631      	mov	r1, r6
 800a464:	463a      	mov	r2, r7
 800a466:	4620      	mov	r0, r4
 800a468:	f000 ff1c 	bl	800b2a4 <__pow5mult>
 800a46c:	9a04      	ldr	r2, [sp, #16]
 800a46e:	4601      	mov	r1, r0
 800a470:	4606      	mov	r6, r0
 800a472:	4620      	mov	r0, r4
 800a474:	f000 fe7f 	bl	800b176 <__multiply>
 800a478:	9904      	ldr	r1, [sp, #16]
 800a47a:	9008      	str	r0, [sp, #32]
 800a47c:	4620      	mov	r0, r4
 800a47e:	f000 fd93 	bl	800afa8 <_Bfree>
 800a482:	9b08      	ldr	r3, [sp, #32]
 800a484:	9304      	str	r3, [sp, #16]
 800a486:	9b07      	ldr	r3, [sp, #28]
 800a488:	1bda      	subs	r2, r3, r7
 800a48a:	d004      	beq.n	800a496 <_dtoa_r+0x76e>
 800a48c:	9904      	ldr	r1, [sp, #16]
 800a48e:	4620      	mov	r0, r4
 800a490:	f000 ff08 	bl	800b2a4 <__pow5mult>
 800a494:	9004      	str	r0, [sp, #16]
 800a496:	2101      	movs	r1, #1
 800a498:	4620      	mov	r0, r4
 800a49a:	f000 fe63 	bl	800b164 <__i2b>
 800a49e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4a0:	4607      	mov	r7, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f000 81d0 	beq.w	800a848 <_dtoa_r+0xb20>
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	4601      	mov	r1, r0
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	f000 fef9 	bl	800b2a4 <__pow5mult>
 800a4b2:	9b06      	ldr	r3, [sp, #24]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	4607      	mov	r7, r0
 800a4b8:	dc40      	bgt.n	800a53c <_dtoa_r+0x814>
 800a4ba:	9b00      	ldr	r3, [sp, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d139      	bne.n	800a534 <_dtoa_r+0x80c>
 800a4c0:	9b01      	ldr	r3, [sp, #4]
 800a4c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d136      	bne.n	800a538 <_dtoa_r+0x810>
 800a4ca:	9b01      	ldr	r3, [sp, #4]
 800a4cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4d0:	0d1b      	lsrs	r3, r3, #20
 800a4d2:	051b      	lsls	r3, r3, #20
 800a4d4:	b12b      	cbz	r3, 800a4e2 <_dtoa_r+0x7ba>
 800a4d6:	9b05      	ldr	r3, [sp, #20]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	9305      	str	r3, [sp, #20]
 800a4dc:	f108 0801 	add.w	r8, r8, #1
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	9307      	str	r3, [sp, #28]
 800a4e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d12a      	bne.n	800a540 <_dtoa_r+0x818>
 800a4ea:	2001      	movs	r0, #1
 800a4ec:	e030      	b.n	800a550 <_dtoa_r+0x828>
 800a4ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a4f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a4f4:	e795      	b.n	800a422 <_dtoa_r+0x6fa>
 800a4f6:	9b07      	ldr	r3, [sp, #28]
 800a4f8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800a4fc:	42bb      	cmp	r3, r7
 800a4fe:	bfbf      	itttt	lt
 800a500:	9b07      	ldrlt	r3, [sp, #28]
 800a502:	9707      	strlt	r7, [sp, #28]
 800a504:	1afa      	sublt	r2, r7, r3
 800a506:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a508:	bfbb      	ittet	lt
 800a50a:	189b      	addlt	r3, r3, r2
 800a50c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a50e:	1bdf      	subge	r7, r3, r7
 800a510:	2700      	movlt	r7, #0
 800a512:	f1b9 0f00 	cmp.w	r9, #0
 800a516:	bfb5      	itete	lt
 800a518:	9b05      	ldrlt	r3, [sp, #20]
 800a51a:	9d05      	ldrge	r5, [sp, #20]
 800a51c:	eba3 0509 	sublt.w	r5, r3, r9
 800a520:	464b      	movge	r3, r9
 800a522:	bfb8      	it	lt
 800a524:	2300      	movlt	r3, #0
 800a526:	e77e      	b.n	800a426 <_dtoa_r+0x6fe>
 800a528:	9f07      	ldr	r7, [sp, #28]
 800a52a:	9d05      	ldr	r5, [sp, #20]
 800a52c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a52e:	e783      	b.n	800a438 <_dtoa_r+0x710>
 800a530:	9a07      	ldr	r2, [sp, #28]
 800a532:	e7ab      	b.n	800a48c <_dtoa_r+0x764>
 800a534:	2300      	movs	r3, #0
 800a536:	e7d4      	b.n	800a4e2 <_dtoa_r+0x7ba>
 800a538:	9b00      	ldr	r3, [sp, #0]
 800a53a:	e7d2      	b.n	800a4e2 <_dtoa_r+0x7ba>
 800a53c:	2300      	movs	r3, #0
 800a53e:	9307      	str	r3, [sp, #28]
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a546:	6918      	ldr	r0, [r3, #16]
 800a548:	f000 fdbe 	bl	800b0c8 <__hi0bits>
 800a54c:	f1c0 0020 	rsb	r0, r0, #32
 800a550:	4440      	add	r0, r8
 800a552:	f010 001f 	ands.w	r0, r0, #31
 800a556:	d047      	beq.n	800a5e8 <_dtoa_r+0x8c0>
 800a558:	f1c0 0320 	rsb	r3, r0, #32
 800a55c:	2b04      	cmp	r3, #4
 800a55e:	dd3b      	ble.n	800a5d8 <_dtoa_r+0x8b0>
 800a560:	9b05      	ldr	r3, [sp, #20]
 800a562:	f1c0 001c 	rsb	r0, r0, #28
 800a566:	4403      	add	r3, r0
 800a568:	9305      	str	r3, [sp, #20]
 800a56a:	4405      	add	r5, r0
 800a56c:	4480      	add	r8, r0
 800a56e:	9b05      	ldr	r3, [sp, #20]
 800a570:	2b00      	cmp	r3, #0
 800a572:	dd05      	ble.n	800a580 <_dtoa_r+0x858>
 800a574:	461a      	mov	r2, r3
 800a576:	9904      	ldr	r1, [sp, #16]
 800a578:	4620      	mov	r0, r4
 800a57a:	f000 fee1 	bl	800b340 <__lshift>
 800a57e:	9004      	str	r0, [sp, #16]
 800a580:	f1b8 0f00 	cmp.w	r8, #0
 800a584:	dd05      	ble.n	800a592 <_dtoa_r+0x86a>
 800a586:	4639      	mov	r1, r7
 800a588:	4642      	mov	r2, r8
 800a58a:	4620      	mov	r0, r4
 800a58c:	f000 fed8 	bl	800b340 <__lshift>
 800a590:	4607      	mov	r7, r0
 800a592:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a594:	b353      	cbz	r3, 800a5ec <_dtoa_r+0x8c4>
 800a596:	4639      	mov	r1, r7
 800a598:	9804      	ldr	r0, [sp, #16]
 800a59a:	f000 ff25 	bl	800b3e8 <__mcmp>
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	da24      	bge.n	800a5ec <_dtoa_r+0x8c4>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	220a      	movs	r2, #10
 800a5a6:	9904      	ldr	r1, [sp, #16]
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f000 fd14 	bl	800afd6 <__multadd>
 800a5ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5b0:	9004      	str	r0, [sp, #16]
 800a5b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f000 814d 	beq.w	800a856 <_dtoa_r+0xb2e>
 800a5bc:	2300      	movs	r3, #0
 800a5be:	4631      	mov	r1, r6
 800a5c0:	220a      	movs	r2, #10
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	f000 fd07 	bl	800afd6 <__multadd>
 800a5c8:	9b02      	ldr	r3, [sp, #8]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	4606      	mov	r6, r0
 800a5ce:	dc4f      	bgt.n	800a670 <_dtoa_r+0x948>
 800a5d0:	9b06      	ldr	r3, [sp, #24]
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	dd4c      	ble.n	800a670 <_dtoa_r+0x948>
 800a5d6:	e011      	b.n	800a5fc <_dtoa_r+0x8d4>
 800a5d8:	d0c9      	beq.n	800a56e <_dtoa_r+0x846>
 800a5da:	9a05      	ldr	r2, [sp, #20]
 800a5dc:	331c      	adds	r3, #28
 800a5de:	441a      	add	r2, r3
 800a5e0:	9205      	str	r2, [sp, #20]
 800a5e2:	441d      	add	r5, r3
 800a5e4:	4498      	add	r8, r3
 800a5e6:	e7c2      	b.n	800a56e <_dtoa_r+0x846>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	e7f6      	b.n	800a5da <_dtoa_r+0x8b2>
 800a5ec:	f1b9 0f00 	cmp.w	r9, #0
 800a5f0:	dc38      	bgt.n	800a664 <_dtoa_r+0x93c>
 800a5f2:	9b06      	ldr	r3, [sp, #24]
 800a5f4:	2b02      	cmp	r3, #2
 800a5f6:	dd35      	ble.n	800a664 <_dtoa_r+0x93c>
 800a5f8:	f8cd 9008 	str.w	r9, [sp, #8]
 800a5fc:	9b02      	ldr	r3, [sp, #8]
 800a5fe:	b963      	cbnz	r3, 800a61a <_dtoa_r+0x8f2>
 800a600:	4639      	mov	r1, r7
 800a602:	2205      	movs	r2, #5
 800a604:	4620      	mov	r0, r4
 800a606:	f000 fce6 	bl	800afd6 <__multadd>
 800a60a:	4601      	mov	r1, r0
 800a60c:	4607      	mov	r7, r0
 800a60e:	9804      	ldr	r0, [sp, #16]
 800a610:	f000 feea 	bl	800b3e8 <__mcmp>
 800a614:	2800      	cmp	r0, #0
 800a616:	f73f adcc 	bgt.w	800a1b2 <_dtoa_r+0x48a>
 800a61a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a61c:	465d      	mov	r5, fp
 800a61e:	ea6f 0a03 	mvn.w	sl, r3
 800a622:	f04f 0900 	mov.w	r9, #0
 800a626:	4639      	mov	r1, r7
 800a628:	4620      	mov	r0, r4
 800a62a:	f000 fcbd 	bl	800afa8 <_Bfree>
 800a62e:	2e00      	cmp	r6, #0
 800a630:	f43f aeb7 	beq.w	800a3a2 <_dtoa_r+0x67a>
 800a634:	f1b9 0f00 	cmp.w	r9, #0
 800a638:	d005      	beq.n	800a646 <_dtoa_r+0x91e>
 800a63a:	45b1      	cmp	r9, r6
 800a63c:	d003      	beq.n	800a646 <_dtoa_r+0x91e>
 800a63e:	4649      	mov	r1, r9
 800a640:	4620      	mov	r0, r4
 800a642:	f000 fcb1 	bl	800afa8 <_Bfree>
 800a646:	4631      	mov	r1, r6
 800a648:	4620      	mov	r0, r4
 800a64a:	f000 fcad 	bl	800afa8 <_Bfree>
 800a64e:	e6a8      	b.n	800a3a2 <_dtoa_r+0x67a>
 800a650:	2700      	movs	r7, #0
 800a652:	463e      	mov	r6, r7
 800a654:	e7e1      	b.n	800a61a <_dtoa_r+0x8f2>
 800a656:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a65a:	463e      	mov	r6, r7
 800a65c:	e5a9      	b.n	800a1b2 <_dtoa_r+0x48a>
 800a65e:	bf00      	nop
 800a660:	40240000 	.word	0x40240000
 800a664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a666:	f8cd 9008 	str.w	r9, [sp, #8]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f000 80fa 	beq.w	800a864 <_dtoa_r+0xb3c>
 800a670:	2d00      	cmp	r5, #0
 800a672:	dd05      	ble.n	800a680 <_dtoa_r+0x958>
 800a674:	4631      	mov	r1, r6
 800a676:	462a      	mov	r2, r5
 800a678:	4620      	mov	r0, r4
 800a67a:	f000 fe61 	bl	800b340 <__lshift>
 800a67e:	4606      	mov	r6, r0
 800a680:	9b07      	ldr	r3, [sp, #28]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d04c      	beq.n	800a720 <_dtoa_r+0x9f8>
 800a686:	6871      	ldr	r1, [r6, #4]
 800a688:	4620      	mov	r0, r4
 800a68a:	f000 fc59 	bl	800af40 <_Balloc>
 800a68e:	6932      	ldr	r2, [r6, #16]
 800a690:	3202      	adds	r2, #2
 800a692:	4605      	mov	r5, r0
 800a694:	0092      	lsls	r2, r2, #2
 800a696:	f106 010c 	add.w	r1, r6, #12
 800a69a:	300c      	adds	r0, #12
 800a69c:	f7fd fd90 	bl	80081c0 <memcpy>
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	f000 fe4b 	bl	800b340 <__lshift>
 800a6aa:	9b00      	ldr	r3, [sp, #0]
 800a6ac:	f8cd b014 	str.w	fp, [sp, #20]
 800a6b0:	f003 0301 	and.w	r3, r3, #1
 800a6b4:	46b1      	mov	r9, r6
 800a6b6:	9307      	str	r3, [sp, #28]
 800a6b8:	4606      	mov	r6, r0
 800a6ba:	4639      	mov	r1, r7
 800a6bc:	9804      	ldr	r0, [sp, #16]
 800a6be:	f7ff faa5 	bl	8009c0c <quorem>
 800a6c2:	4649      	mov	r1, r9
 800a6c4:	4605      	mov	r5, r0
 800a6c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a6ca:	9804      	ldr	r0, [sp, #16]
 800a6cc:	f000 fe8c 	bl	800b3e8 <__mcmp>
 800a6d0:	4632      	mov	r2, r6
 800a6d2:	9000      	str	r0, [sp, #0]
 800a6d4:	4639      	mov	r1, r7
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	f000 fea0 	bl	800b41c <__mdiff>
 800a6dc:	68c3      	ldr	r3, [r0, #12]
 800a6de:	4602      	mov	r2, r0
 800a6e0:	bb03      	cbnz	r3, 800a724 <_dtoa_r+0x9fc>
 800a6e2:	4601      	mov	r1, r0
 800a6e4:	9008      	str	r0, [sp, #32]
 800a6e6:	9804      	ldr	r0, [sp, #16]
 800a6e8:	f000 fe7e 	bl	800b3e8 <__mcmp>
 800a6ec:	9a08      	ldr	r2, [sp, #32]
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	4611      	mov	r1, r2
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	9308      	str	r3, [sp, #32]
 800a6f6:	f000 fc57 	bl	800afa8 <_Bfree>
 800a6fa:	9b08      	ldr	r3, [sp, #32]
 800a6fc:	b9a3      	cbnz	r3, 800a728 <_dtoa_r+0xa00>
 800a6fe:	9a06      	ldr	r2, [sp, #24]
 800a700:	b992      	cbnz	r2, 800a728 <_dtoa_r+0xa00>
 800a702:	9a07      	ldr	r2, [sp, #28]
 800a704:	b982      	cbnz	r2, 800a728 <_dtoa_r+0xa00>
 800a706:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a70a:	d029      	beq.n	800a760 <_dtoa_r+0xa38>
 800a70c:	9b00      	ldr	r3, [sp, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	dd01      	ble.n	800a716 <_dtoa_r+0x9ee>
 800a712:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a716:	9b05      	ldr	r3, [sp, #20]
 800a718:	1c5d      	adds	r5, r3, #1
 800a71a:	f883 8000 	strb.w	r8, [r3]
 800a71e:	e782      	b.n	800a626 <_dtoa_r+0x8fe>
 800a720:	4630      	mov	r0, r6
 800a722:	e7c2      	b.n	800a6aa <_dtoa_r+0x982>
 800a724:	2301      	movs	r3, #1
 800a726:	e7e3      	b.n	800a6f0 <_dtoa_r+0x9c8>
 800a728:	9a00      	ldr	r2, [sp, #0]
 800a72a:	2a00      	cmp	r2, #0
 800a72c:	db04      	blt.n	800a738 <_dtoa_r+0xa10>
 800a72e:	d125      	bne.n	800a77c <_dtoa_r+0xa54>
 800a730:	9a06      	ldr	r2, [sp, #24]
 800a732:	bb1a      	cbnz	r2, 800a77c <_dtoa_r+0xa54>
 800a734:	9a07      	ldr	r2, [sp, #28]
 800a736:	bb0a      	cbnz	r2, 800a77c <_dtoa_r+0xa54>
 800a738:	2b00      	cmp	r3, #0
 800a73a:	ddec      	ble.n	800a716 <_dtoa_r+0x9ee>
 800a73c:	2201      	movs	r2, #1
 800a73e:	9904      	ldr	r1, [sp, #16]
 800a740:	4620      	mov	r0, r4
 800a742:	f000 fdfd 	bl	800b340 <__lshift>
 800a746:	4639      	mov	r1, r7
 800a748:	9004      	str	r0, [sp, #16]
 800a74a:	f000 fe4d 	bl	800b3e8 <__mcmp>
 800a74e:	2800      	cmp	r0, #0
 800a750:	dc03      	bgt.n	800a75a <_dtoa_r+0xa32>
 800a752:	d1e0      	bne.n	800a716 <_dtoa_r+0x9ee>
 800a754:	f018 0f01 	tst.w	r8, #1
 800a758:	d0dd      	beq.n	800a716 <_dtoa_r+0x9ee>
 800a75a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a75e:	d1d8      	bne.n	800a712 <_dtoa_r+0x9ea>
 800a760:	9b05      	ldr	r3, [sp, #20]
 800a762:	9a05      	ldr	r2, [sp, #20]
 800a764:	1c5d      	adds	r5, r3, #1
 800a766:	2339      	movs	r3, #57	; 0x39
 800a768:	7013      	strb	r3, [r2, #0]
 800a76a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a76e:	2b39      	cmp	r3, #57	; 0x39
 800a770:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800a774:	d04f      	beq.n	800a816 <_dtoa_r+0xaee>
 800a776:	3301      	adds	r3, #1
 800a778:	7013      	strb	r3, [r2, #0]
 800a77a:	e754      	b.n	800a626 <_dtoa_r+0x8fe>
 800a77c:	9a05      	ldr	r2, [sp, #20]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f102 0501 	add.w	r5, r2, #1
 800a784:	dd06      	ble.n	800a794 <_dtoa_r+0xa6c>
 800a786:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a78a:	d0e9      	beq.n	800a760 <_dtoa_r+0xa38>
 800a78c:	f108 0801 	add.w	r8, r8, #1
 800a790:	9b05      	ldr	r3, [sp, #20]
 800a792:	e7c2      	b.n	800a71a <_dtoa_r+0x9f2>
 800a794:	9a02      	ldr	r2, [sp, #8]
 800a796:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a79a:	eba5 030b 	sub.w	r3, r5, fp
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d021      	beq.n	800a7e6 <_dtoa_r+0xabe>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	220a      	movs	r2, #10
 800a7a6:	9904      	ldr	r1, [sp, #16]
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f000 fc14 	bl	800afd6 <__multadd>
 800a7ae:	45b1      	cmp	r9, r6
 800a7b0:	9004      	str	r0, [sp, #16]
 800a7b2:	f04f 0300 	mov.w	r3, #0
 800a7b6:	f04f 020a 	mov.w	r2, #10
 800a7ba:	4649      	mov	r1, r9
 800a7bc:	4620      	mov	r0, r4
 800a7be:	d105      	bne.n	800a7cc <_dtoa_r+0xaa4>
 800a7c0:	f000 fc09 	bl	800afd6 <__multadd>
 800a7c4:	4681      	mov	r9, r0
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	9505      	str	r5, [sp, #20]
 800a7ca:	e776      	b.n	800a6ba <_dtoa_r+0x992>
 800a7cc:	f000 fc03 	bl	800afd6 <__multadd>
 800a7d0:	4631      	mov	r1, r6
 800a7d2:	4681      	mov	r9, r0
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	220a      	movs	r2, #10
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f000 fbfc 	bl	800afd6 <__multadd>
 800a7de:	4606      	mov	r6, r0
 800a7e0:	e7f2      	b.n	800a7c8 <_dtoa_r+0xaa0>
 800a7e2:	f04f 0900 	mov.w	r9, #0
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	9904      	ldr	r1, [sp, #16]
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	f000 fda8 	bl	800b340 <__lshift>
 800a7f0:	4639      	mov	r1, r7
 800a7f2:	9004      	str	r0, [sp, #16]
 800a7f4:	f000 fdf8 	bl	800b3e8 <__mcmp>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	dcb6      	bgt.n	800a76a <_dtoa_r+0xa42>
 800a7fc:	d102      	bne.n	800a804 <_dtoa_r+0xadc>
 800a7fe:	f018 0f01 	tst.w	r8, #1
 800a802:	d1b2      	bne.n	800a76a <_dtoa_r+0xa42>
 800a804:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a808:	2b30      	cmp	r3, #48	; 0x30
 800a80a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800a80e:	f47f af0a 	bne.w	800a626 <_dtoa_r+0x8fe>
 800a812:	4615      	mov	r5, r2
 800a814:	e7f6      	b.n	800a804 <_dtoa_r+0xadc>
 800a816:	4593      	cmp	fp, r2
 800a818:	d105      	bne.n	800a826 <_dtoa_r+0xafe>
 800a81a:	2331      	movs	r3, #49	; 0x31
 800a81c:	f10a 0a01 	add.w	sl, sl, #1
 800a820:	f88b 3000 	strb.w	r3, [fp]
 800a824:	e6ff      	b.n	800a626 <_dtoa_r+0x8fe>
 800a826:	4615      	mov	r5, r2
 800a828:	e79f      	b.n	800a76a <_dtoa_r+0xa42>
 800a82a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a890 <_dtoa_r+0xb68>
 800a82e:	e007      	b.n	800a840 <_dtoa_r+0xb18>
 800a830:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a832:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a894 <_dtoa_r+0xb6c>
 800a836:	b11b      	cbz	r3, 800a840 <_dtoa_r+0xb18>
 800a838:	f10b 0308 	add.w	r3, fp, #8
 800a83c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a83e:	6013      	str	r3, [r2, #0]
 800a840:	4658      	mov	r0, fp
 800a842:	b017      	add	sp, #92	; 0x5c
 800a844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a848:	9b06      	ldr	r3, [sp, #24]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	f77f ae35 	ble.w	800a4ba <_dtoa_r+0x792>
 800a850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a852:	9307      	str	r3, [sp, #28]
 800a854:	e649      	b.n	800a4ea <_dtoa_r+0x7c2>
 800a856:	9b02      	ldr	r3, [sp, #8]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	dc03      	bgt.n	800a864 <_dtoa_r+0xb3c>
 800a85c:	9b06      	ldr	r3, [sp, #24]
 800a85e:	2b02      	cmp	r3, #2
 800a860:	f73f aecc 	bgt.w	800a5fc <_dtoa_r+0x8d4>
 800a864:	465d      	mov	r5, fp
 800a866:	4639      	mov	r1, r7
 800a868:	9804      	ldr	r0, [sp, #16]
 800a86a:	f7ff f9cf 	bl	8009c0c <quorem>
 800a86e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a872:	f805 8b01 	strb.w	r8, [r5], #1
 800a876:	9a02      	ldr	r2, [sp, #8]
 800a878:	eba5 030b 	sub.w	r3, r5, fp
 800a87c:	429a      	cmp	r2, r3
 800a87e:	ddb0      	ble.n	800a7e2 <_dtoa_r+0xaba>
 800a880:	2300      	movs	r3, #0
 800a882:	220a      	movs	r2, #10
 800a884:	9904      	ldr	r1, [sp, #16]
 800a886:	4620      	mov	r0, r4
 800a888:	f000 fba5 	bl	800afd6 <__multadd>
 800a88c:	9004      	str	r0, [sp, #16]
 800a88e:	e7ea      	b.n	800a866 <_dtoa_r+0xb3e>
 800a890:	0800be04 	.word	0x0800be04
 800a894:	0800be80 	.word	0x0800be80

0800a898 <rshift>:
 800a898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a89a:	6906      	ldr	r6, [r0, #16]
 800a89c:	114b      	asrs	r3, r1, #5
 800a89e:	429e      	cmp	r6, r3
 800a8a0:	f100 0414 	add.w	r4, r0, #20
 800a8a4:	dd30      	ble.n	800a908 <rshift+0x70>
 800a8a6:	f011 011f 	ands.w	r1, r1, #31
 800a8aa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a8ae:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a8b2:	d108      	bne.n	800a8c6 <rshift+0x2e>
 800a8b4:	4621      	mov	r1, r4
 800a8b6:	42b2      	cmp	r2, r6
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	d211      	bcs.n	800a8e0 <rshift+0x48>
 800a8bc:	f852 3b04 	ldr.w	r3, [r2], #4
 800a8c0:	f841 3b04 	str.w	r3, [r1], #4
 800a8c4:	e7f7      	b.n	800a8b6 <rshift+0x1e>
 800a8c6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a8ca:	f1c1 0c20 	rsb	ip, r1, #32
 800a8ce:	40cd      	lsrs	r5, r1
 800a8d0:	3204      	adds	r2, #4
 800a8d2:	4623      	mov	r3, r4
 800a8d4:	42b2      	cmp	r2, r6
 800a8d6:	4617      	mov	r7, r2
 800a8d8:	d30c      	bcc.n	800a8f4 <rshift+0x5c>
 800a8da:	601d      	str	r5, [r3, #0]
 800a8dc:	b105      	cbz	r5, 800a8e0 <rshift+0x48>
 800a8de:	3304      	adds	r3, #4
 800a8e0:	1b1a      	subs	r2, r3, r4
 800a8e2:	42a3      	cmp	r3, r4
 800a8e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a8e8:	bf08      	it	eq
 800a8ea:	2300      	moveq	r3, #0
 800a8ec:	6102      	str	r2, [r0, #16]
 800a8ee:	bf08      	it	eq
 800a8f0:	6143      	streq	r3, [r0, #20]
 800a8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8f4:	683f      	ldr	r7, [r7, #0]
 800a8f6:	fa07 f70c 	lsl.w	r7, r7, ip
 800a8fa:	433d      	orrs	r5, r7
 800a8fc:	f843 5b04 	str.w	r5, [r3], #4
 800a900:	f852 5b04 	ldr.w	r5, [r2], #4
 800a904:	40cd      	lsrs	r5, r1
 800a906:	e7e5      	b.n	800a8d4 <rshift+0x3c>
 800a908:	4623      	mov	r3, r4
 800a90a:	e7e9      	b.n	800a8e0 <rshift+0x48>

0800a90c <__hexdig_fun>:
 800a90c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a910:	2b09      	cmp	r3, #9
 800a912:	d802      	bhi.n	800a91a <__hexdig_fun+0xe>
 800a914:	3820      	subs	r0, #32
 800a916:	b2c0      	uxtb	r0, r0
 800a918:	4770      	bx	lr
 800a91a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a91e:	2b05      	cmp	r3, #5
 800a920:	d801      	bhi.n	800a926 <__hexdig_fun+0x1a>
 800a922:	3847      	subs	r0, #71	; 0x47
 800a924:	e7f7      	b.n	800a916 <__hexdig_fun+0xa>
 800a926:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a92a:	2b05      	cmp	r3, #5
 800a92c:	d801      	bhi.n	800a932 <__hexdig_fun+0x26>
 800a92e:	3827      	subs	r0, #39	; 0x27
 800a930:	e7f1      	b.n	800a916 <__hexdig_fun+0xa>
 800a932:	2000      	movs	r0, #0
 800a934:	4770      	bx	lr

0800a936 <__gethex>:
 800a936:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a93a:	b08b      	sub	sp, #44	; 0x2c
 800a93c:	468a      	mov	sl, r1
 800a93e:	9002      	str	r0, [sp, #8]
 800a940:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a942:	9306      	str	r3, [sp, #24]
 800a944:	4690      	mov	r8, r2
 800a946:	f000 fad0 	bl	800aeea <__localeconv_l>
 800a94a:	6803      	ldr	r3, [r0, #0]
 800a94c:	9303      	str	r3, [sp, #12]
 800a94e:	4618      	mov	r0, r3
 800a950:	f7f5 fc46 	bl	80001e0 <strlen>
 800a954:	9b03      	ldr	r3, [sp, #12]
 800a956:	9001      	str	r0, [sp, #4]
 800a958:	4403      	add	r3, r0
 800a95a:	f04f 0b00 	mov.w	fp, #0
 800a95e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a962:	9307      	str	r3, [sp, #28]
 800a964:	f8da 3000 	ldr.w	r3, [sl]
 800a968:	3302      	adds	r3, #2
 800a96a:	461f      	mov	r7, r3
 800a96c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a970:	2830      	cmp	r0, #48	; 0x30
 800a972:	d06c      	beq.n	800aa4e <__gethex+0x118>
 800a974:	f7ff ffca 	bl	800a90c <__hexdig_fun>
 800a978:	4604      	mov	r4, r0
 800a97a:	2800      	cmp	r0, #0
 800a97c:	d16a      	bne.n	800aa54 <__gethex+0x11e>
 800a97e:	9a01      	ldr	r2, [sp, #4]
 800a980:	9903      	ldr	r1, [sp, #12]
 800a982:	4638      	mov	r0, r7
 800a984:	f001 f8f4 	bl	800bb70 <strncmp>
 800a988:	2800      	cmp	r0, #0
 800a98a:	d166      	bne.n	800aa5a <__gethex+0x124>
 800a98c:	9b01      	ldr	r3, [sp, #4]
 800a98e:	5cf8      	ldrb	r0, [r7, r3]
 800a990:	18fe      	adds	r6, r7, r3
 800a992:	f7ff ffbb 	bl	800a90c <__hexdig_fun>
 800a996:	2800      	cmp	r0, #0
 800a998:	d062      	beq.n	800aa60 <__gethex+0x12a>
 800a99a:	4633      	mov	r3, r6
 800a99c:	7818      	ldrb	r0, [r3, #0]
 800a99e:	2830      	cmp	r0, #48	; 0x30
 800a9a0:	461f      	mov	r7, r3
 800a9a2:	f103 0301 	add.w	r3, r3, #1
 800a9a6:	d0f9      	beq.n	800a99c <__gethex+0x66>
 800a9a8:	f7ff ffb0 	bl	800a90c <__hexdig_fun>
 800a9ac:	fab0 f580 	clz	r5, r0
 800a9b0:	096d      	lsrs	r5, r5, #5
 800a9b2:	4634      	mov	r4, r6
 800a9b4:	f04f 0b01 	mov.w	fp, #1
 800a9b8:	463a      	mov	r2, r7
 800a9ba:	4616      	mov	r6, r2
 800a9bc:	3201      	adds	r2, #1
 800a9be:	7830      	ldrb	r0, [r6, #0]
 800a9c0:	f7ff ffa4 	bl	800a90c <__hexdig_fun>
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d1f8      	bne.n	800a9ba <__gethex+0x84>
 800a9c8:	9a01      	ldr	r2, [sp, #4]
 800a9ca:	9903      	ldr	r1, [sp, #12]
 800a9cc:	4630      	mov	r0, r6
 800a9ce:	f001 f8cf 	bl	800bb70 <strncmp>
 800a9d2:	b950      	cbnz	r0, 800a9ea <__gethex+0xb4>
 800a9d4:	b954      	cbnz	r4, 800a9ec <__gethex+0xb6>
 800a9d6:	9b01      	ldr	r3, [sp, #4]
 800a9d8:	18f4      	adds	r4, r6, r3
 800a9da:	4622      	mov	r2, r4
 800a9dc:	4616      	mov	r6, r2
 800a9de:	3201      	adds	r2, #1
 800a9e0:	7830      	ldrb	r0, [r6, #0]
 800a9e2:	f7ff ff93 	bl	800a90c <__hexdig_fun>
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	d1f8      	bne.n	800a9dc <__gethex+0xa6>
 800a9ea:	b10c      	cbz	r4, 800a9f0 <__gethex+0xba>
 800a9ec:	1ba4      	subs	r4, r4, r6
 800a9ee:	00a4      	lsls	r4, r4, #2
 800a9f0:	7833      	ldrb	r3, [r6, #0]
 800a9f2:	2b50      	cmp	r3, #80	; 0x50
 800a9f4:	d001      	beq.n	800a9fa <__gethex+0xc4>
 800a9f6:	2b70      	cmp	r3, #112	; 0x70
 800a9f8:	d140      	bne.n	800aa7c <__gethex+0x146>
 800a9fa:	7873      	ldrb	r3, [r6, #1]
 800a9fc:	2b2b      	cmp	r3, #43	; 0x2b
 800a9fe:	d031      	beq.n	800aa64 <__gethex+0x12e>
 800aa00:	2b2d      	cmp	r3, #45	; 0x2d
 800aa02:	d033      	beq.n	800aa6c <__gethex+0x136>
 800aa04:	1c71      	adds	r1, r6, #1
 800aa06:	f04f 0900 	mov.w	r9, #0
 800aa0a:	7808      	ldrb	r0, [r1, #0]
 800aa0c:	f7ff ff7e 	bl	800a90c <__hexdig_fun>
 800aa10:	1e43      	subs	r3, r0, #1
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	2b18      	cmp	r3, #24
 800aa16:	d831      	bhi.n	800aa7c <__gethex+0x146>
 800aa18:	f1a0 0210 	sub.w	r2, r0, #16
 800aa1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aa20:	f7ff ff74 	bl	800a90c <__hexdig_fun>
 800aa24:	1e43      	subs	r3, r0, #1
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	2b18      	cmp	r3, #24
 800aa2a:	d922      	bls.n	800aa72 <__gethex+0x13c>
 800aa2c:	f1b9 0f00 	cmp.w	r9, #0
 800aa30:	d000      	beq.n	800aa34 <__gethex+0xfe>
 800aa32:	4252      	negs	r2, r2
 800aa34:	4414      	add	r4, r2
 800aa36:	f8ca 1000 	str.w	r1, [sl]
 800aa3a:	b30d      	cbz	r5, 800aa80 <__gethex+0x14a>
 800aa3c:	f1bb 0f00 	cmp.w	fp, #0
 800aa40:	bf0c      	ite	eq
 800aa42:	2706      	moveq	r7, #6
 800aa44:	2700      	movne	r7, #0
 800aa46:	4638      	mov	r0, r7
 800aa48:	b00b      	add	sp, #44	; 0x2c
 800aa4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa4e:	f10b 0b01 	add.w	fp, fp, #1
 800aa52:	e78a      	b.n	800a96a <__gethex+0x34>
 800aa54:	2500      	movs	r5, #0
 800aa56:	462c      	mov	r4, r5
 800aa58:	e7ae      	b.n	800a9b8 <__gethex+0x82>
 800aa5a:	463e      	mov	r6, r7
 800aa5c:	2501      	movs	r5, #1
 800aa5e:	e7c7      	b.n	800a9f0 <__gethex+0xba>
 800aa60:	4604      	mov	r4, r0
 800aa62:	e7fb      	b.n	800aa5c <__gethex+0x126>
 800aa64:	f04f 0900 	mov.w	r9, #0
 800aa68:	1cb1      	adds	r1, r6, #2
 800aa6a:	e7ce      	b.n	800aa0a <__gethex+0xd4>
 800aa6c:	f04f 0901 	mov.w	r9, #1
 800aa70:	e7fa      	b.n	800aa68 <__gethex+0x132>
 800aa72:	230a      	movs	r3, #10
 800aa74:	fb03 0202 	mla	r2, r3, r2, r0
 800aa78:	3a10      	subs	r2, #16
 800aa7a:	e7cf      	b.n	800aa1c <__gethex+0xe6>
 800aa7c:	4631      	mov	r1, r6
 800aa7e:	e7da      	b.n	800aa36 <__gethex+0x100>
 800aa80:	1bf3      	subs	r3, r6, r7
 800aa82:	3b01      	subs	r3, #1
 800aa84:	4629      	mov	r1, r5
 800aa86:	2b07      	cmp	r3, #7
 800aa88:	dc49      	bgt.n	800ab1e <__gethex+0x1e8>
 800aa8a:	9802      	ldr	r0, [sp, #8]
 800aa8c:	f000 fa58 	bl	800af40 <_Balloc>
 800aa90:	9b01      	ldr	r3, [sp, #4]
 800aa92:	f100 0914 	add.w	r9, r0, #20
 800aa96:	f04f 0b00 	mov.w	fp, #0
 800aa9a:	f1c3 0301 	rsb	r3, r3, #1
 800aa9e:	4605      	mov	r5, r0
 800aaa0:	f8cd 9010 	str.w	r9, [sp, #16]
 800aaa4:	46da      	mov	sl, fp
 800aaa6:	9308      	str	r3, [sp, #32]
 800aaa8:	42b7      	cmp	r7, r6
 800aaaa:	d33b      	bcc.n	800ab24 <__gethex+0x1ee>
 800aaac:	9804      	ldr	r0, [sp, #16]
 800aaae:	f840 ab04 	str.w	sl, [r0], #4
 800aab2:	eba0 0009 	sub.w	r0, r0, r9
 800aab6:	1080      	asrs	r0, r0, #2
 800aab8:	6128      	str	r0, [r5, #16]
 800aaba:	0147      	lsls	r7, r0, #5
 800aabc:	4650      	mov	r0, sl
 800aabe:	f000 fb03 	bl	800b0c8 <__hi0bits>
 800aac2:	f8d8 6000 	ldr.w	r6, [r8]
 800aac6:	1a3f      	subs	r7, r7, r0
 800aac8:	42b7      	cmp	r7, r6
 800aaca:	dd64      	ble.n	800ab96 <__gethex+0x260>
 800aacc:	1bbf      	subs	r7, r7, r6
 800aace:	4639      	mov	r1, r7
 800aad0:	4628      	mov	r0, r5
 800aad2:	f000 fe13 	bl	800b6fc <__any_on>
 800aad6:	4682      	mov	sl, r0
 800aad8:	b178      	cbz	r0, 800aafa <__gethex+0x1c4>
 800aada:	1e7b      	subs	r3, r7, #1
 800aadc:	1159      	asrs	r1, r3, #5
 800aade:	f003 021f 	and.w	r2, r3, #31
 800aae2:	f04f 0a01 	mov.w	sl, #1
 800aae6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800aaea:	fa0a f202 	lsl.w	r2, sl, r2
 800aaee:	420a      	tst	r2, r1
 800aaf0:	d003      	beq.n	800aafa <__gethex+0x1c4>
 800aaf2:	4553      	cmp	r3, sl
 800aaf4:	dc46      	bgt.n	800ab84 <__gethex+0x24e>
 800aaf6:	f04f 0a02 	mov.w	sl, #2
 800aafa:	4639      	mov	r1, r7
 800aafc:	4628      	mov	r0, r5
 800aafe:	f7ff fecb 	bl	800a898 <rshift>
 800ab02:	443c      	add	r4, r7
 800ab04:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab08:	42a3      	cmp	r3, r4
 800ab0a:	da52      	bge.n	800abb2 <__gethex+0x27c>
 800ab0c:	4629      	mov	r1, r5
 800ab0e:	9802      	ldr	r0, [sp, #8]
 800ab10:	f000 fa4a 	bl	800afa8 <_Bfree>
 800ab14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab16:	2300      	movs	r3, #0
 800ab18:	6013      	str	r3, [r2, #0]
 800ab1a:	27a3      	movs	r7, #163	; 0xa3
 800ab1c:	e793      	b.n	800aa46 <__gethex+0x110>
 800ab1e:	3101      	adds	r1, #1
 800ab20:	105b      	asrs	r3, r3, #1
 800ab22:	e7b0      	b.n	800aa86 <__gethex+0x150>
 800ab24:	1e73      	subs	r3, r6, #1
 800ab26:	9305      	str	r3, [sp, #20]
 800ab28:	9a07      	ldr	r2, [sp, #28]
 800ab2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d018      	beq.n	800ab64 <__gethex+0x22e>
 800ab32:	f1bb 0f20 	cmp.w	fp, #32
 800ab36:	d107      	bne.n	800ab48 <__gethex+0x212>
 800ab38:	9b04      	ldr	r3, [sp, #16]
 800ab3a:	f8c3 a000 	str.w	sl, [r3]
 800ab3e:	3304      	adds	r3, #4
 800ab40:	f04f 0a00 	mov.w	sl, #0
 800ab44:	9304      	str	r3, [sp, #16]
 800ab46:	46d3      	mov	fp, sl
 800ab48:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ab4c:	f7ff fede 	bl	800a90c <__hexdig_fun>
 800ab50:	f000 000f 	and.w	r0, r0, #15
 800ab54:	fa00 f00b 	lsl.w	r0, r0, fp
 800ab58:	ea4a 0a00 	orr.w	sl, sl, r0
 800ab5c:	f10b 0b04 	add.w	fp, fp, #4
 800ab60:	9b05      	ldr	r3, [sp, #20]
 800ab62:	e00d      	b.n	800ab80 <__gethex+0x24a>
 800ab64:	9b05      	ldr	r3, [sp, #20]
 800ab66:	9a08      	ldr	r2, [sp, #32]
 800ab68:	4413      	add	r3, r2
 800ab6a:	42bb      	cmp	r3, r7
 800ab6c:	d3e1      	bcc.n	800ab32 <__gethex+0x1fc>
 800ab6e:	4618      	mov	r0, r3
 800ab70:	9a01      	ldr	r2, [sp, #4]
 800ab72:	9903      	ldr	r1, [sp, #12]
 800ab74:	9309      	str	r3, [sp, #36]	; 0x24
 800ab76:	f000 fffb 	bl	800bb70 <strncmp>
 800ab7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	d1d8      	bne.n	800ab32 <__gethex+0x1fc>
 800ab80:	461e      	mov	r6, r3
 800ab82:	e791      	b.n	800aaa8 <__gethex+0x172>
 800ab84:	1eb9      	subs	r1, r7, #2
 800ab86:	4628      	mov	r0, r5
 800ab88:	f000 fdb8 	bl	800b6fc <__any_on>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	d0b2      	beq.n	800aaf6 <__gethex+0x1c0>
 800ab90:	f04f 0a03 	mov.w	sl, #3
 800ab94:	e7b1      	b.n	800aafa <__gethex+0x1c4>
 800ab96:	da09      	bge.n	800abac <__gethex+0x276>
 800ab98:	1bf7      	subs	r7, r6, r7
 800ab9a:	4629      	mov	r1, r5
 800ab9c:	463a      	mov	r2, r7
 800ab9e:	9802      	ldr	r0, [sp, #8]
 800aba0:	f000 fbce 	bl	800b340 <__lshift>
 800aba4:	1be4      	subs	r4, r4, r7
 800aba6:	4605      	mov	r5, r0
 800aba8:	f100 0914 	add.w	r9, r0, #20
 800abac:	f04f 0a00 	mov.w	sl, #0
 800abb0:	e7a8      	b.n	800ab04 <__gethex+0x1ce>
 800abb2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800abb6:	42a0      	cmp	r0, r4
 800abb8:	dd6a      	ble.n	800ac90 <__gethex+0x35a>
 800abba:	1b04      	subs	r4, r0, r4
 800abbc:	42a6      	cmp	r6, r4
 800abbe:	dc2e      	bgt.n	800ac1e <__gethex+0x2e8>
 800abc0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	d022      	beq.n	800ac0e <__gethex+0x2d8>
 800abc8:	2b03      	cmp	r3, #3
 800abca:	d024      	beq.n	800ac16 <__gethex+0x2e0>
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d115      	bne.n	800abfc <__gethex+0x2c6>
 800abd0:	42a6      	cmp	r6, r4
 800abd2:	d113      	bne.n	800abfc <__gethex+0x2c6>
 800abd4:	2e01      	cmp	r6, #1
 800abd6:	dc0b      	bgt.n	800abf0 <__gethex+0x2ba>
 800abd8:	9a06      	ldr	r2, [sp, #24]
 800abda:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800abde:	6013      	str	r3, [r2, #0]
 800abe0:	2301      	movs	r3, #1
 800abe2:	612b      	str	r3, [r5, #16]
 800abe4:	f8c9 3000 	str.w	r3, [r9]
 800abe8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800abea:	2762      	movs	r7, #98	; 0x62
 800abec:	601d      	str	r5, [r3, #0]
 800abee:	e72a      	b.n	800aa46 <__gethex+0x110>
 800abf0:	1e71      	subs	r1, r6, #1
 800abf2:	4628      	mov	r0, r5
 800abf4:	f000 fd82 	bl	800b6fc <__any_on>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	d1ed      	bne.n	800abd8 <__gethex+0x2a2>
 800abfc:	4629      	mov	r1, r5
 800abfe:	9802      	ldr	r0, [sp, #8]
 800ac00:	f000 f9d2 	bl	800afa8 <_Bfree>
 800ac04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac06:	2300      	movs	r3, #0
 800ac08:	6013      	str	r3, [r2, #0]
 800ac0a:	2750      	movs	r7, #80	; 0x50
 800ac0c:	e71b      	b.n	800aa46 <__gethex+0x110>
 800ac0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d0e1      	beq.n	800abd8 <__gethex+0x2a2>
 800ac14:	e7f2      	b.n	800abfc <__gethex+0x2c6>
 800ac16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d1dd      	bne.n	800abd8 <__gethex+0x2a2>
 800ac1c:	e7ee      	b.n	800abfc <__gethex+0x2c6>
 800ac1e:	1e67      	subs	r7, r4, #1
 800ac20:	f1ba 0f00 	cmp.w	sl, #0
 800ac24:	d131      	bne.n	800ac8a <__gethex+0x354>
 800ac26:	b127      	cbz	r7, 800ac32 <__gethex+0x2fc>
 800ac28:	4639      	mov	r1, r7
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	f000 fd66 	bl	800b6fc <__any_on>
 800ac30:	4682      	mov	sl, r0
 800ac32:	117a      	asrs	r2, r7, #5
 800ac34:	2301      	movs	r3, #1
 800ac36:	f007 071f 	and.w	r7, r7, #31
 800ac3a:	fa03 f707 	lsl.w	r7, r3, r7
 800ac3e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800ac42:	4621      	mov	r1, r4
 800ac44:	421f      	tst	r7, r3
 800ac46:	4628      	mov	r0, r5
 800ac48:	bf18      	it	ne
 800ac4a:	f04a 0a02 	orrne.w	sl, sl, #2
 800ac4e:	1b36      	subs	r6, r6, r4
 800ac50:	f7ff fe22 	bl	800a898 <rshift>
 800ac54:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800ac58:	2702      	movs	r7, #2
 800ac5a:	f1ba 0f00 	cmp.w	sl, #0
 800ac5e:	d048      	beq.n	800acf2 <__gethex+0x3bc>
 800ac60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac64:	2b02      	cmp	r3, #2
 800ac66:	d015      	beq.n	800ac94 <__gethex+0x35e>
 800ac68:	2b03      	cmp	r3, #3
 800ac6a:	d017      	beq.n	800ac9c <__gethex+0x366>
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d109      	bne.n	800ac84 <__gethex+0x34e>
 800ac70:	f01a 0f02 	tst.w	sl, #2
 800ac74:	d006      	beq.n	800ac84 <__gethex+0x34e>
 800ac76:	f8d9 3000 	ldr.w	r3, [r9]
 800ac7a:	ea4a 0a03 	orr.w	sl, sl, r3
 800ac7e:	f01a 0f01 	tst.w	sl, #1
 800ac82:	d10e      	bne.n	800aca2 <__gethex+0x36c>
 800ac84:	f047 0710 	orr.w	r7, r7, #16
 800ac88:	e033      	b.n	800acf2 <__gethex+0x3bc>
 800ac8a:	f04f 0a01 	mov.w	sl, #1
 800ac8e:	e7d0      	b.n	800ac32 <__gethex+0x2fc>
 800ac90:	2701      	movs	r7, #1
 800ac92:	e7e2      	b.n	800ac5a <__gethex+0x324>
 800ac94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac96:	f1c3 0301 	rsb	r3, r3, #1
 800ac9a:	9315      	str	r3, [sp, #84]	; 0x54
 800ac9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d0f0      	beq.n	800ac84 <__gethex+0x34e>
 800aca2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800aca6:	f105 0314 	add.w	r3, r5, #20
 800acaa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800acae:	eb03 010a 	add.w	r1, r3, sl
 800acb2:	f04f 0c00 	mov.w	ip, #0
 800acb6:	4618      	mov	r0, r3
 800acb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800acbc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800acc0:	d01c      	beq.n	800acfc <__gethex+0x3c6>
 800acc2:	3201      	adds	r2, #1
 800acc4:	6002      	str	r2, [r0, #0]
 800acc6:	2f02      	cmp	r7, #2
 800acc8:	f105 0314 	add.w	r3, r5, #20
 800accc:	d138      	bne.n	800ad40 <__gethex+0x40a>
 800acce:	f8d8 2000 	ldr.w	r2, [r8]
 800acd2:	3a01      	subs	r2, #1
 800acd4:	42b2      	cmp	r2, r6
 800acd6:	d10a      	bne.n	800acee <__gethex+0x3b8>
 800acd8:	1171      	asrs	r1, r6, #5
 800acda:	2201      	movs	r2, #1
 800acdc:	f006 061f 	and.w	r6, r6, #31
 800ace0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ace4:	fa02 f606 	lsl.w	r6, r2, r6
 800ace8:	421e      	tst	r6, r3
 800acea:	bf18      	it	ne
 800acec:	4617      	movne	r7, r2
 800acee:	f047 0720 	orr.w	r7, r7, #32
 800acf2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800acf4:	601d      	str	r5, [r3, #0]
 800acf6:	9b06      	ldr	r3, [sp, #24]
 800acf8:	601c      	str	r4, [r3, #0]
 800acfa:	e6a4      	b.n	800aa46 <__gethex+0x110>
 800acfc:	4299      	cmp	r1, r3
 800acfe:	f843 cc04 	str.w	ip, [r3, #-4]
 800ad02:	d8d8      	bhi.n	800acb6 <__gethex+0x380>
 800ad04:	68ab      	ldr	r3, [r5, #8]
 800ad06:	4599      	cmp	r9, r3
 800ad08:	db12      	blt.n	800ad30 <__gethex+0x3fa>
 800ad0a:	6869      	ldr	r1, [r5, #4]
 800ad0c:	9802      	ldr	r0, [sp, #8]
 800ad0e:	3101      	adds	r1, #1
 800ad10:	f000 f916 	bl	800af40 <_Balloc>
 800ad14:	692a      	ldr	r2, [r5, #16]
 800ad16:	3202      	adds	r2, #2
 800ad18:	f105 010c 	add.w	r1, r5, #12
 800ad1c:	4683      	mov	fp, r0
 800ad1e:	0092      	lsls	r2, r2, #2
 800ad20:	300c      	adds	r0, #12
 800ad22:	f7fd fa4d 	bl	80081c0 <memcpy>
 800ad26:	4629      	mov	r1, r5
 800ad28:	9802      	ldr	r0, [sp, #8]
 800ad2a:	f000 f93d 	bl	800afa8 <_Bfree>
 800ad2e:	465d      	mov	r5, fp
 800ad30:	692b      	ldr	r3, [r5, #16]
 800ad32:	1c5a      	adds	r2, r3, #1
 800ad34:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ad38:	612a      	str	r2, [r5, #16]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	615a      	str	r2, [r3, #20]
 800ad3e:	e7c2      	b.n	800acc6 <__gethex+0x390>
 800ad40:	692a      	ldr	r2, [r5, #16]
 800ad42:	454a      	cmp	r2, r9
 800ad44:	dd0b      	ble.n	800ad5e <__gethex+0x428>
 800ad46:	2101      	movs	r1, #1
 800ad48:	4628      	mov	r0, r5
 800ad4a:	f7ff fda5 	bl	800a898 <rshift>
 800ad4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad52:	3401      	adds	r4, #1
 800ad54:	42a3      	cmp	r3, r4
 800ad56:	f6ff aed9 	blt.w	800ab0c <__gethex+0x1d6>
 800ad5a:	2701      	movs	r7, #1
 800ad5c:	e7c7      	b.n	800acee <__gethex+0x3b8>
 800ad5e:	f016 061f 	ands.w	r6, r6, #31
 800ad62:	d0fa      	beq.n	800ad5a <__gethex+0x424>
 800ad64:	449a      	add	sl, r3
 800ad66:	f1c6 0620 	rsb	r6, r6, #32
 800ad6a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ad6e:	f000 f9ab 	bl	800b0c8 <__hi0bits>
 800ad72:	42b0      	cmp	r0, r6
 800ad74:	dbe7      	blt.n	800ad46 <__gethex+0x410>
 800ad76:	e7f0      	b.n	800ad5a <__gethex+0x424>

0800ad78 <L_shift>:
 800ad78:	f1c2 0208 	rsb	r2, r2, #8
 800ad7c:	0092      	lsls	r2, r2, #2
 800ad7e:	b570      	push	{r4, r5, r6, lr}
 800ad80:	f1c2 0620 	rsb	r6, r2, #32
 800ad84:	6843      	ldr	r3, [r0, #4]
 800ad86:	6804      	ldr	r4, [r0, #0]
 800ad88:	fa03 f506 	lsl.w	r5, r3, r6
 800ad8c:	432c      	orrs	r4, r5
 800ad8e:	40d3      	lsrs	r3, r2
 800ad90:	6004      	str	r4, [r0, #0]
 800ad92:	f840 3f04 	str.w	r3, [r0, #4]!
 800ad96:	4288      	cmp	r0, r1
 800ad98:	d3f4      	bcc.n	800ad84 <L_shift+0xc>
 800ad9a:	bd70      	pop	{r4, r5, r6, pc}

0800ad9c <__match>:
 800ad9c:	b530      	push	{r4, r5, lr}
 800ad9e:	6803      	ldr	r3, [r0, #0]
 800ada0:	3301      	adds	r3, #1
 800ada2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ada6:	b914      	cbnz	r4, 800adae <__match+0x12>
 800ada8:	6003      	str	r3, [r0, #0]
 800adaa:	2001      	movs	r0, #1
 800adac:	bd30      	pop	{r4, r5, pc}
 800adae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adb2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800adb6:	2d19      	cmp	r5, #25
 800adb8:	bf98      	it	ls
 800adba:	3220      	addls	r2, #32
 800adbc:	42a2      	cmp	r2, r4
 800adbe:	d0f0      	beq.n	800ada2 <__match+0x6>
 800adc0:	2000      	movs	r0, #0
 800adc2:	e7f3      	b.n	800adac <__match+0x10>

0800adc4 <__hexnan>:
 800adc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc8:	680b      	ldr	r3, [r1, #0]
 800adca:	6801      	ldr	r1, [r0, #0]
 800adcc:	115f      	asrs	r7, r3, #5
 800adce:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800add2:	f013 031f 	ands.w	r3, r3, #31
 800add6:	b087      	sub	sp, #28
 800add8:	bf18      	it	ne
 800adda:	3704      	addne	r7, #4
 800addc:	2500      	movs	r5, #0
 800adde:	1f3e      	subs	r6, r7, #4
 800ade0:	4682      	mov	sl, r0
 800ade2:	4690      	mov	r8, r2
 800ade4:	9301      	str	r3, [sp, #4]
 800ade6:	f847 5c04 	str.w	r5, [r7, #-4]
 800adea:	46b1      	mov	r9, r6
 800adec:	4634      	mov	r4, r6
 800adee:	9502      	str	r5, [sp, #8]
 800adf0:	46ab      	mov	fp, r5
 800adf2:	784a      	ldrb	r2, [r1, #1]
 800adf4:	1c4b      	adds	r3, r1, #1
 800adf6:	9303      	str	r3, [sp, #12]
 800adf8:	b342      	cbz	r2, 800ae4c <__hexnan+0x88>
 800adfa:	4610      	mov	r0, r2
 800adfc:	9105      	str	r1, [sp, #20]
 800adfe:	9204      	str	r2, [sp, #16]
 800ae00:	f7ff fd84 	bl	800a90c <__hexdig_fun>
 800ae04:	2800      	cmp	r0, #0
 800ae06:	d143      	bne.n	800ae90 <__hexnan+0xcc>
 800ae08:	9a04      	ldr	r2, [sp, #16]
 800ae0a:	9905      	ldr	r1, [sp, #20]
 800ae0c:	2a20      	cmp	r2, #32
 800ae0e:	d818      	bhi.n	800ae42 <__hexnan+0x7e>
 800ae10:	9b02      	ldr	r3, [sp, #8]
 800ae12:	459b      	cmp	fp, r3
 800ae14:	dd13      	ble.n	800ae3e <__hexnan+0x7a>
 800ae16:	454c      	cmp	r4, r9
 800ae18:	d206      	bcs.n	800ae28 <__hexnan+0x64>
 800ae1a:	2d07      	cmp	r5, #7
 800ae1c:	dc04      	bgt.n	800ae28 <__hexnan+0x64>
 800ae1e:	462a      	mov	r2, r5
 800ae20:	4649      	mov	r1, r9
 800ae22:	4620      	mov	r0, r4
 800ae24:	f7ff ffa8 	bl	800ad78 <L_shift>
 800ae28:	4544      	cmp	r4, r8
 800ae2a:	d944      	bls.n	800aeb6 <__hexnan+0xf2>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	f1a4 0904 	sub.w	r9, r4, #4
 800ae32:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae36:	f8cd b008 	str.w	fp, [sp, #8]
 800ae3a:	464c      	mov	r4, r9
 800ae3c:	461d      	mov	r5, r3
 800ae3e:	9903      	ldr	r1, [sp, #12]
 800ae40:	e7d7      	b.n	800adf2 <__hexnan+0x2e>
 800ae42:	2a29      	cmp	r2, #41	; 0x29
 800ae44:	d14a      	bne.n	800aedc <__hexnan+0x118>
 800ae46:	3102      	adds	r1, #2
 800ae48:	f8ca 1000 	str.w	r1, [sl]
 800ae4c:	f1bb 0f00 	cmp.w	fp, #0
 800ae50:	d044      	beq.n	800aedc <__hexnan+0x118>
 800ae52:	454c      	cmp	r4, r9
 800ae54:	d206      	bcs.n	800ae64 <__hexnan+0xa0>
 800ae56:	2d07      	cmp	r5, #7
 800ae58:	dc04      	bgt.n	800ae64 <__hexnan+0xa0>
 800ae5a:	462a      	mov	r2, r5
 800ae5c:	4649      	mov	r1, r9
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f7ff ff8a 	bl	800ad78 <L_shift>
 800ae64:	4544      	cmp	r4, r8
 800ae66:	d928      	bls.n	800aeba <__hexnan+0xf6>
 800ae68:	4643      	mov	r3, r8
 800ae6a:	f854 2b04 	ldr.w	r2, [r4], #4
 800ae6e:	f843 2b04 	str.w	r2, [r3], #4
 800ae72:	42a6      	cmp	r6, r4
 800ae74:	d2f9      	bcs.n	800ae6a <__hexnan+0xa6>
 800ae76:	2200      	movs	r2, #0
 800ae78:	f843 2b04 	str.w	r2, [r3], #4
 800ae7c:	429e      	cmp	r6, r3
 800ae7e:	d2fb      	bcs.n	800ae78 <__hexnan+0xb4>
 800ae80:	6833      	ldr	r3, [r6, #0]
 800ae82:	b91b      	cbnz	r3, 800ae8c <__hexnan+0xc8>
 800ae84:	4546      	cmp	r6, r8
 800ae86:	d127      	bne.n	800aed8 <__hexnan+0x114>
 800ae88:	2301      	movs	r3, #1
 800ae8a:	6033      	str	r3, [r6, #0]
 800ae8c:	2005      	movs	r0, #5
 800ae8e:	e026      	b.n	800aede <__hexnan+0x11a>
 800ae90:	3501      	adds	r5, #1
 800ae92:	2d08      	cmp	r5, #8
 800ae94:	f10b 0b01 	add.w	fp, fp, #1
 800ae98:	dd06      	ble.n	800aea8 <__hexnan+0xe4>
 800ae9a:	4544      	cmp	r4, r8
 800ae9c:	d9cf      	bls.n	800ae3e <__hexnan+0x7a>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	f844 3c04 	str.w	r3, [r4, #-4]
 800aea4:	2501      	movs	r5, #1
 800aea6:	3c04      	subs	r4, #4
 800aea8:	6822      	ldr	r2, [r4, #0]
 800aeaa:	f000 000f 	and.w	r0, r0, #15
 800aeae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aeb2:	6020      	str	r0, [r4, #0]
 800aeb4:	e7c3      	b.n	800ae3e <__hexnan+0x7a>
 800aeb6:	2508      	movs	r5, #8
 800aeb8:	e7c1      	b.n	800ae3e <__hexnan+0x7a>
 800aeba:	9b01      	ldr	r3, [sp, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d0df      	beq.n	800ae80 <__hexnan+0xbc>
 800aec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aec4:	f1c3 0320 	rsb	r3, r3, #32
 800aec8:	fa22 f303 	lsr.w	r3, r2, r3
 800aecc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800aed0:	401a      	ands	r2, r3
 800aed2:	f847 2c04 	str.w	r2, [r7, #-4]
 800aed6:	e7d3      	b.n	800ae80 <__hexnan+0xbc>
 800aed8:	3e04      	subs	r6, #4
 800aeda:	e7d1      	b.n	800ae80 <__hexnan+0xbc>
 800aedc:	2004      	movs	r0, #4
 800aede:	b007      	add	sp, #28
 800aee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aee4 <__locale_ctype_ptr_l>:
 800aee4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800aee8:	4770      	bx	lr

0800aeea <__localeconv_l>:
 800aeea:	30f0      	adds	r0, #240	; 0xf0
 800aeec:	4770      	bx	lr
	...

0800aef0 <_localeconv_r>:
 800aef0:	4b04      	ldr	r3, [pc, #16]	; (800af04 <_localeconv_r+0x14>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	6a18      	ldr	r0, [r3, #32]
 800aef6:	4b04      	ldr	r3, [pc, #16]	; (800af08 <_localeconv_r+0x18>)
 800aef8:	2800      	cmp	r0, #0
 800aefa:	bf08      	it	eq
 800aefc:	4618      	moveq	r0, r3
 800aefe:	30f0      	adds	r0, #240	; 0xf0
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	20000018 	.word	0x20000018
 800af08:	2000007c 	.word	0x2000007c

0800af0c <malloc>:
 800af0c:	4b02      	ldr	r3, [pc, #8]	; (800af18 <malloc+0xc>)
 800af0e:	4601      	mov	r1, r0
 800af10:	6818      	ldr	r0, [r3, #0]
 800af12:	f000 bc71 	b.w	800b7f8 <_malloc_r>
 800af16:	bf00      	nop
 800af18:	20000018 	.word	0x20000018

0800af1c <__ascii_mbtowc>:
 800af1c:	b082      	sub	sp, #8
 800af1e:	b901      	cbnz	r1, 800af22 <__ascii_mbtowc+0x6>
 800af20:	a901      	add	r1, sp, #4
 800af22:	b142      	cbz	r2, 800af36 <__ascii_mbtowc+0x1a>
 800af24:	b14b      	cbz	r3, 800af3a <__ascii_mbtowc+0x1e>
 800af26:	7813      	ldrb	r3, [r2, #0]
 800af28:	600b      	str	r3, [r1, #0]
 800af2a:	7812      	ldrb	r2, [r2, #0]
 800af2c:	1c10      	adds	r0, r2, #0
 800af2e:	bf18      	it	ne
 800af30:	2001      	movne	r0, #1
 800af32:	b002      	add	sp, #8
 800af34:	4770      	bx	lr
 800af36:	4610      	mov	r0, r2
 800af38:	e7fb      	b.n	800af32 <__ascii_mbtowc+0x16>
 800af3a:	f06f 0001 	mvn.w	r0, #1
 800af3e:	e7f8      	b.n	800af32 <__ascii_mbtowc+0x16>

0800af40 <_Balloc>:
 800af40:	b570      	push	{r4, r5, r6, lr}
 800af42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800af44:	4604      	mov	r4, r0
 800af46:	460e      	mov	r6, r1
 800af48:	b93d      	cbnz	r5, 800af5a <_Balloc+0x1a>
 800af4a:	2010      	movs	r0, #16
 800af4c:	f7ff ffde 	bl	800af0c <malloc>
 800af50:	6260      	str	r0, [r4, #36]	; 0x24
 800af52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af56:	6005      	str	r5, [r0, #0]
 800af58:	60c5      	str	r5, [r0, #12]
 800af5a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800af5c:	68eb      	ldr	r3, [r5, #12]
 800af5e:	b183      	cbz	r3, 800af82 <_Balloc+0x42>
 800af60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800af68:	b9b8      	cbnz	r0, 800af9a <_Balloc+0x5a>
 800af6a:	2101      	movs	r1, #1
 800af6c:	fa01 f506 	lsl.w	r5, r1, r6
 800af70:	1d6a      	adds	r2, r5, #5
 800af72:	0092      	lsls	r2, r2, #2
 800af74:	4620      	mov	r0, r4
 800af76:	f000 fbe2 	bl	800b73e <_calloc_r>
 800af7a:	b160      	cbz	r0, 800af96 <_Balloc+0x56>
 800af7c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800af80:	e00e      	b.n	800afa0 <_Balloc+0x60>
 800af82:	2221      	movs	r2, #33	; 0x21
 800af84:	2104      	movs	r1, #4
 800af86:	4620      	mov	r0, r4
 800af88:	f000 fbd9 	bl	800b73e <_calloc_r>
 800af8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af8e:	60e8      	str	r0, [r5, #12]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d1e4      	bne.n	800af60 <_Balloc+0x20>
 800af96:	2000      	movs	r0, #0
 800af98:	bd70      	pop	{r4, r5, r6, pc}
 800af9a:	6802      	ldr	r2, [r0, #0]
 800af9c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800afa0:	2300      	movs	r3, #0
 800afa2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afa6:	e7f7      	b.n	800af98 <_Balloc+0x58>

0800afa8 <_Bfree>:
 800afa8:	b570      	push	{r4, r5, r6, lr}
 800afaa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800afac:	4606      	mov	r6, r0
 800afae:	460d      	mov	r5, r1
 800afb0:	b93c      	cbnz	r4, 800afc2 <_Bfree+0x1a>
 800afb2:	2010      	movs	r0, #16
 800afb4:	f7ff ffaa 	bl	800af0c <malloc>
 800afb8:	6270      	str	r0, [r6, #36]	; 0x24
 800afba:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800afbe:	6004      	str	r4, [r0, #0]
 800afc0:	60c4      	str	r4, [r0, #12]
 800afc2:	b13d      	cbz	r5, 800afd4 <_Bfree+0x2c>
 800afc4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800afc6:	686a      	ldr	r2, [r5, #4]
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800afce:	6029      	str	r1, [r5, #0]
 800afd0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800afd4:	bd70      	pop	{r4, r5, r6, pc}

0800afd6 <__multadd>:
 800afd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afda:	690d      	ldr	r5, [r1, #16]
 800afdc:	461f      	mov	r7, r3
 800afde:	4606      	mov	r6, r0
 800afe0:	460c      	mov	r4, r1
 800afe2:	f101 0c14 	add.w	ip, r1, #20
 800afe6:	2300      	movs	r3, #0
 800afe8:	f8dc 0000 	ldr.w	r0, [ip]
 800afec:	b281      	uxth	r1, r0
 800afee:	fb02 7101 	mla	r1, r2, r1, r7
 800aff2:	0c0f      	lsrs	r7, r1, #16
 800aff4:	0c00      	lsrs	r0, r0, #16
 800aff6:	fb02 7000 	mla	r0, r2, r0, r7
 800affa:	b289      	uxth	r1, r1
 800affc:	3301      	adds	r3, #1
 800affe:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b002:	429d      	cmp	r5, r3
 800b004:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b008:	f84c 1b04 	str.w	r1, [ip], #4
 800b00c:	dcec      	bgt.n	800afe8 <__multadd+0x12>
 800b00e:	b1d7      	cbz	r7, 800b046 <__multadd+0x70>
 800b010:	68a3      	ldr	r3, [r4, #8]
 800b012:	42ab      	cmp	r3, r5
 800b014:	dc12      	bgt.n	800b03c <__multadd+0x66>
 800b016:	6861      	ldr	r1, [r4, #4]
 800b018:	4630      	mov	r0, r6
 800b01a:	3101      	adds	r1, #1
 800b01c:	f7ff ff90 	bl	800af40 <_Balloc>
 800b020:	6922      	ldr	r2, [r4, #16]
 800b022:	3202      	adds	r2, #2
 800b024:	f104 010c 	add.w	r1, r4, #12
 800b028:	4680      	mov	r8, r0
 800b02a:	0092      	lsls	r2, r2, #2
 800b02c:	300c      	adds	r0, #12
 800b02e:	f7fd f8c7 	bl	80081c0 <memcpy>
 800b032:	4621      	mov	r1, r4
 800b034:	4630      	mov	r0, r6
 800b036:	f7ff ffb7 	bl	800afa8 <_Bfree>
 800b03a:	4644      	mov	r4, r8
 800b03c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b040:	3501      	adds	r5, #1
 800b042:	615f      	str	r7, [r3, #20]
 800b044:	6125      	str	r5, [r4, #16]
 800b046:	4620      	mov	r0, r4
 800b048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b04c <__s2b>:
 800b04c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b050:	460c      	mov	r4, r1
 800b052:	4615      	mov	r5, r2
 800b054:	461f      	mov	r7, r3
 800b056:	2209      	movs	r2, #9
 800b058:	3308      	adds	r3, #8
 800b05a:	4606      	mov	r6, r0
 800b05c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b060:	2100      	movs	r1, #0
 800b062:	2201      	movs	r2, #1
 800b064:	429a      	cmp	r2, r3
 800b066:	db20      	blt.n	800b0aa <__s2b+0x5e>
 800b068:	4630      	mov	r0, r6
 800b06a:	f7ff ff69 	bl	800af40 <_Balloc>
 800b06e:	9b08      	ldr	r3, [sp, #32]
 800b070:	6143      	str	r3, [r0, #20]
 800b072:	2d09      	cmp	r5, #9
 800b074:	f04f 0301 	mov.w	r3, #1
 800b078:	6103      	str	r3, [r0, #16]
 800b07a:	dd19      	ble.n	800b0b0 <__s2b+0x64>
 800b07c:	f104 0809 	add.w	r8, r4, #9
 800b080:	46c1      	mov	r9, r8
 800b082:	442c      	add	r4, r5
 800b084:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b088:	4601      	mov	r1, r0
 800b08a:	3b30      	subs	r3, #48	; 0x30
 800b08c:	220a      	movs	r2, #10
 800b08e:	4630      	mov	r0, r6
 800b090:	f7ff ffa1 	bl	800afd6 <__multadd>
 800b094:	45a1      	cmp	r9, r4
 800b096:	d1f5      	bne.n	800b084 <__s2b+0x38>
 800b098:	eb08 0405 	add.w	r4, r8, r5
 800b09c:	3c08      	subs	r4, #8
 800b09e:	1b2d      	subs	r5, r5, r4
 800b0a0:	1963      	adds	r3, r4, r5
 800b0a2:	42bb      	cmp	r3, r7
 800b0a4:	db07      	blt.n	800b0b6 <__s2b+0x6a>
 800b0a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0aa:	0052      	lsls	r2, r2, #1
 800b0ac:	3101      	adds	r1, #1
 800b0ae:	e7d9      	b.n	800b064 <__s2b+0x18>
 800b0b0:	340a      	adds	r4, #10
 800b0b2:	2509      	movs	r5, #9
 800b0b4:	e7f3      	b.n	800b09e <__s2b+0x52>
 800b0b6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b0ba:	4601      	mov	r1, r0
 800b0bc:	3b30      	subs	r3, #48	; 0x30
 800b0be:	220a      	movs	r2, #10
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	f7ff ff88 	bl	800afd6 <__multadd>
 800b0c6:	e7eb      	b.n	800b0a0 <__s2b+0x54>

0800b0c8 <__hi0bits>:
 800b0c8:	0c02      	lsrs	r2, r0, #16
 800b0ca:	0412      	lsls	r2, r2, #16
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	b9b2      	cbnz	r2, 800b0fe <__hi0bits+0x36>
 800b0d0:	0403      	lsls	r3, r0, #16
 800b0d2:	2010      	movs	r0, #16
 800b0d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b0d8:	bf04      	itt	eq
 800b0da:	021b      	lsleq	r3, r3, #8
 800b0dc:	3008      	addeq	r0, #8
 800b0de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b0e2:	bf04      	itt	eq
 800b0e4:	011b      	lsleq	r3, r3, #4
 800b0e6:	3004      	addeq	r0, #4
 800b0e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b0ec:	bf04      	itt	eq
 800b0ee:	009b      	lsleq	r3, r3, #2
 800b0f0:	3002      	addeq	r0, #2
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	db06      	blt.n	800b104 <__hi0bits+0x3c>
 800b0f6:	005b      	lsls	r3, r3, #1
 800b0f8:	d503      	bpl.n	800b102 <__hi0bits+0x3a>
 800b0fa:	3001      	adds	r0, #1
 800b0fc:	4770      	bx	lr
 800b0fe:	2000      	movs	r0, #0
 800b100:	e7e8      	b.n	800b0d4 <__hi0bits+0xc>
 800b102:	2020      	movs	r0, #32
 800b104:	4770      	bx	lr

0800b106 <__lo0bits>:
 800b106:	6803      	ldr	r3, [r0, #0]
 800b108:	f013 0207 	ands.w	r2, r3, #7
 800b10c:	4601      	mov	r1, r0
 800b10e:	d00b      	beq.n	800b128 <__lo0bits+0x22>
 800b110:	07da      	lsls	r2, r3, #31
 800b112:	d423      	bmi.n	800b15c <__lo0bits+0x56>
 800b114:	0798      	lsls	r0, r3, #30
 800b116:	bf49      	itett	mi
 800b118:	085b      	lsrmi	r3, r3, #1
 800b11a:	089b      	lsrpl	r3, r3, #2
 800b11c:	2001      	movmi	r0, #1
 800b11e:	600b      	strmi	r3, [r1, #0]
 800b120:	bf5c      	itt	pl
 800b122:	600b      	strpl	r3, [r1, #0]
 800b124:	2002      	movpl	r0, #2
 800b126:	4770      	bx	lr
 800b128:	b298      	uxth	r0, r3
 800b12a:	b9a8      	cbnz	r0, 800b158 <__lo0bits+0x52>
 800b12c:	0c1b      	lsrs	r3, r3, #16
 800b12e:	2010      	movs	r0, #16
 800b130:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b134:	bf04      	itt	eq
 800b136:	0a1b      	lsreq	r3, r3, #8
 800b138:	3008      	addeq	r0, #8
 800b13a:	071a      	lsls	r2, r3, #28
 800b13c:	bf04      	itt	eq
 800b13e:	091b      	lsreq	r3, r3, #4
 800b140:	3004      	addeq	r0, #4
 800b142:	079a      	lsls	r2, r3, #30
 800b144:	bf04      	itt	eq
 800b146:	089b      	lsreq	r3, r3, #2
 800b148:	3002      	addeq	r0, #2
 800b14a:	07da      	lsls	r2, r3, #31
 800b14c:	d402      	bmi.n	800b154 <__lo0bits+0x4e>
 800b14e:	085b      	lsrs	r3, r3, #1
 800b150:	d006      	beq.n	800b160 <__lo0bits+0x5a>
 800b152:	3001      	adds	r0, #1
 800b154:	600b      	str	r3, [r1, #0]
 800b156:	4770      	bx	lr
 800b158:	4610      	mov	r0, r2
 800b15a:	e7e9      	b.n	800b130 <__lo0bits+0x2a>
 800b15c:	2000      	movs	r0, #0
 800b15e:	4770      	bx	lr
 800b160:	2020      	movs	r0, #32
 800b162:	4770      	bx	lr

0800b164 <__i2b>:
 800b164:	b510      	push	{r4, lr}
 800b166:	460c      	mov	r4, r1
 800b168:	2101      	movs	r1, #1
 800b16a:	f7ff fee9 	bl	800af40 <_Balloc>
 800b16e:	2201      	movs	r2, #1
 800b170:	6144      	str	r4, [r0, #20]
 800b172:	6102      	str	r2, [r0, #16]
 800b174:	bd10      	pop	{r4, pc}

0800b176 <__multiply>:
 800b176:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b17a:	4614      	mov	r4, r2
 800b17c:	690a      	ldr	r2, [r1, #16]
 800b17e:	6923      	ldr	r3, [r4, #16]
 800b180:	429a      	cmp	r2, r3
 800b182:	bfb8      	it	lt
 800b184:	460b      	movlt	r3, r1
 800b186:	4688      	mov	r8, r1
 800b188:	bfbc      	itt	lt
 800b18a:	46a0      	movlt	r8, r4
 800b18c:	461c      	movlt	r4, r3
 800b18e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b192:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b196:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b19a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b19e:	eb07 0609 	add.w	r6, r7, r9
 800b1a2:	42b3      	cmp	r3, r6
 800b1a4:	bfb8      	it	lt
 800b1a6:	3101      	addlt	r1, #1
 800b1a8:	f7ff feca 	bl	800af40 <_Balloc>
 800b1ac:	f100 0514 	add.w	r5, r0, #20
 800b1b0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b1b4:	462b      	mov	r3, r5
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	4573      	cmp	r3, lr
 800b1ba:	d316      	bcc.n	800b1ea <__multiply+0x74>
 800b1bc:	f104 0214 	add.w	r2, r4, #20
 800b1c0:	f108 0114 	add.w	r1, r8, #20
 800b1c4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b1c8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b1cc:	9300      	str	r3, [sp, #0]
 800b1ce:	9b00      	ldr	r3, [sp, #0]
 800b1d0:	9201      	str	r2, [sp, #4]
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d80c      	bhi.n	800b1f0 <__multiply+0x7a>
 800b1d6:	2e00      	cmp	r6, #0
 800b1d8:	dd03      	ble.n	800b1e2 <__multiply+0x6c>
 800b1da:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d05d      	beq.n	800b29e <__multiply+0x128>
 800b1e2:	6106      	str	r6, [r0, #16]
 800b1e4:	b003      	add	sp, #12
 800b1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ea:	f843 2b04 	str.w	r2, [r3], #4
 800b1ee:	e7e3      	b.n	800b1b8 <__multiply+0x42>
 800b1f0:	f8b2 b000 	ldrh.w	fp, [r2]
 800b1f4:	f1bb 0f00 	cmp.w	fp, #0
 800b1f8:	d023      	beq.n	800b242 <__multiply+0xcc>
 800b1fa:	4689      	mov	r9, r1
 800b1fc:	46ac      	mov	ip, r5
 800b1fe:	f04f 0800 	mov.w	r8, #0
 800b202:	f859 4b04 	ldr.w	r4, [r9], #4
 800b206:	f8dc a000 	ldr.w	sl, [ip]
 800b20a:	b2a3      	uxth	r3, r4
 800b20c:	fa1f fa8a 	uxth.w	sl, sl
 800b210:	fb0b a303 	mla	r3, fp, r3, sl
 800b214:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b218:	f8dc 4000 	ldr.w	r4, [ip]
 800b21c:	4443      	add	r3, r8
 800b21e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b222:	fb0b 840a 	mla	r4, fp, sl, r8
 800b226:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b22a:	46e2      	mov	sl, ip
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b232:	454f      	cmp	r7, r9
 800b234:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b238:	f84a 3b04 	str.w	r3, [sl], #4
 800b23c:	d82b      	bhi.n	800b296 <__multiply+0x120>
 800b23e:	f8cc 8004 	str.w	r8, [ip, #4]
 800b242:	9b01      	ldr	r3, [sp, #4]
 800b244:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b248:	3204      	adds	r2, #4
 800b24a:	f1ba 0f00 	cmp.w	sl, #0
 800b24e:	d020      	beq.n	800b292 <__multiply+0x11c>
 800b250:	682b      	ldr	r3, [r5, #0]
 800b252:	4689      	mov	r9, r1
 800b254:	46a8      	mov	r8, r5
 800b256:	f04f 0b00 	mov.w	fp, #0
 800b25a:	f8b9 c000 	ldrh.w	ip, [r9]
 800b25e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b262:	fb0a 440c 	mla	r4, sl, ip, r4
 800b266:	445c      	add	r4, fp
 800b268:	46c4      	mov	ip, r8
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b270:	f84c 3b04 	str.w	r3, [ip], #4
 800b274:	f859 3b04 	ldr.w	r3, [r9], #4
 800b278:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b27c:	0c1b      	lsrs	r3, r3, #16
 800b27e:	fb0a b303 	mla	r3, sl, r3, fp
 800b282:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b286:	454f      	cmp	r7, r9
 800b288:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b28c:	d805      	bhi.n	800b29a <__multiply+0x124>
 800b28e:	f8c8 3004 	str.w	r3, [r8, #4]
 800b292:	3504      	adds	r5, #4
 800b294:	e79b      	b.n	800b1ce <__multiply+0x58>
 800b296:	46d4      	mov	ip, sl
 800b298:	e7b3      	b.n	800b202 <__multiply+0x8c>
 800b29a:	46e0      	mov	r8, ip
 800b29c:	e7dd      	b.n	800b25a <__multiply+0xe4>
 800b29e:	3e01      	subs	r6, #1
 800b2a0:	e799      	b.n	800b1d6 <__multiply+0x60>
	...

0800b2a4 <__pow5mult>:
 800b2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2a8:	4615      	mov	r5, r2
 800b2aa:	f012 0203 	ands.w	r2, r2, #3
 800b2ae:	4606      	mov	r6, r0
 800b2b0:	460f      	mov	r7, r1
 800b2b2:	d007      	beq.n	800b2c4 <__pow5mult+0x20>
 800b2b4:	3a01      	subs	r2, #1
 800b2b6:	4c21      	ldr	r4, [pc, #132]	; (800b33c <__pow5mult+0x98>)
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2be:	f7ff fe8a 	bl	800afd6 <__multadd>
 800b2c2:	4607      	mov	r7, r0
 800b2c4:	10ad      	asrs	r5, r5, #2
 800b2c6:	d035      	beq.n	800b334 <__pow5mult+0x90>
 800b2c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b2ca:	b93c      	cbnz	r4, 800b2dc <__pow5mult+0x38>
 800b2cc:	2010      	movs	r0, #16
 800b2ce:	f7ff fe1d 	bl	800af0c <malloc>
 800b2d2:	6270      	str	r0, [r6, #36]	; 0x24
 800b2d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2d8:	6004      	str	r4, [r0, #0]
 800b2da:	60c4      	str	r4, [r0, #12]
 800b2dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b2e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2e4:	b94c      	cbnz	r4, 800b2fa <__pow5mult+0x56>
 800b2e6:	f240 2171 	movw	r1, #625	; 0x271
 800b2ea:	4630      	mov	r0, r6
 800b2ec:	f7ff ff3a 	bl	800b164 <__i2b>
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	6003      	str	r3, [r0, #0]
 800b2fa:	f04f 0800 	mov.w	r8, #0
 800b2fe:	07eb      	lsls	r3, r5, #31
 800b300:	d50a      	bpl.n	800b318 <__pow5mult+0x74>
 800b302:	4639      	mov	r1, r7
 800b304:	4622      	mov	r2, r4
 800b306:	4630      	mov	r0, r6
 800b308:	f7ff ff35 	bl	800b176 <__multiply>
 800b30c:	4639      	mov	r1, r7
 800b30e:	4681      	mov	r9, r0
 800b310:	4630      	mov	r0, r6
 800b312:	f7ff fe49 	bl	800afa8 <_Bfree>
 800b316:	464f      	mov	r7, r9
 800b318:	106d      	asrs	r5, r5, #1
 800b31a:	d00b      	beq.n	800b334 <__pow5mult+0x90>
 800b31c:	6820      	ldr	r0, [r4, #0]
 800b31e:	b938      	cbnz	r0, 800b330 <__pow5mult+0x8c>
 800b320:	4622      	mov	r2, r4
 800b322:	4621      	mov	r1, r4
 800b324:	4630      	mov	r0, r6
 800b326:	f7ff ff26 	bl	800b176 <__multiply>
 800b32a:	6020      	str	r0, [r4, #0]
 800b32c:	f8c0 8000 	str.w	r8, [r0]
 800b330:	4604      	mov	r4, r0
 800b332:	e7e4      	b.n	800b2fe <__pow5mult+0x5a>
 800b334:	4638      	mov	r0, r7
 800b336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b33a:	bf00      	nop
 800b33c:	0800bf88 	.word	0x0800bf88

0800b340 <__lshift>:
 800b340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b344:	460c      	mov	r4, r1
 800b346:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b34a:	6923      	ldr	r3, [r4, #16]
 800b34c:	6849      	ldr	r1, [r1, #4]
 800b34e:	eb0a 0903 	add.w	r9, sl, r3
 800b352:	68a3      	ldr	r3, [r4, #8]
 800b354:	4607      	mov	r7, r0
 800b356:	4616      	mov	r6, r2
 800b358:	f109 0501 	add.w	r5, r9, #1
 800b35c:	42ab      	cmp	r3, r5
 800b35e:	db32      	blt.n	800b3c6 <__lshift+0x86>
 800b360:	4638      	mov	r0, r7
 800b362:	f7ff fded 	bl	800af40 <_Balloc>
 800b366:	2300      	movs	r3, #0
 800b368:	4680      	mov	r8, r0
 800b36a:	f100 0114 	add.w	r1, r0, #20
 800b36e:	461a      	mov	r2, r3
 800b370:	4553      	cmp	r3, sl
 800b372:	db2b      	blt.n	800b3cc <__lshift+0x8c>
 800b374:	6920      	ldr	r0, [r4, #16]
 800b376:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b37a:	f104 0314 	add.w	r3, r4, #20
 800b37e:	f016 021f 	ands.w	r2, r6, #31
 800b382:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b386:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b38a:	d025      	beq.n	800b3d8 <__lshift+0x98>
 800b38c:	f1c2 0e20 	rsb	lr, r2, #32
 800b390:	2000      	movs	r0, #0
 800b392:	681e      	ldr	r6, [r3, #0]
 800b394:	468a      	mov	sl, r1
 800b396:	4096      	lsls	r6, r2
 800b398:	4330      	orrs	r0, r6
 800b39a:	f84a 0b04 	str.w	r0, [sl], #4
 800b39e:	f853 0b04 	ldr.w	r0, [r3], #4
 800b3a2:	459c      	cmp	ip, r3
 800b3a4:	fa20 f00e 	lsr.w	r0, r0, lr
 800b3a8:	d814      	bhi.n	800b3d4 <__lshift+0x94>
 800b3aa:	6048      	str	r0, [r1, #4]
 800b3ac:	b108      	cbz	r0, 800b3b2 <__lshift+0x72>
 800b3ae:	f109 0502 	add.w	r5, r9, #2
 800b3b2:	3d01      	subs	r5, #1
 800b3b4:	4638      	mov	r0, r7
 800b3b6:	f8c8 5010 	str.w	r5, [r8, #16]
 800b3ba:	4621      	mov	r1, r4
 800b3bc:	f7ff fdf4 	bl	800afa8 <_Bfree>
 800b3c0:	4640      	mov	r0, r8
 800b3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3c6:	3101      	adds	r1, #1
 800b3c8:	005b      	lsls	r3, r3, #1
 800b3ca:	e7c7      	b.n	800b35c <__lshift+0x1c>
 800b3cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	e7cd      	b.n	800b370 <__lshift+0x30>
 800b3d4:	4651      	mov	r1, sl
 800b3d6:	e7dc      	b.n	800b392 <__lshift+0x52>
 800b3d8:	3904      	subs	r1, #4
 800b3da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3de:	f841 2f04 	str.w	r2, [r1, #4]!
 800b3e2:	459c      	cmp	ip, r3
 800b3e4:	d8f9      	bhi.n	800b3da <__lshift+0x9a>
 800b3e6:	e7e4      	b.n	800b3b2 <__lshift+0x72>

0800b3e8 <__mcmp>:
 800b3e8:	6903      	ldr	r3, [r0, #16]
 800b3ea:	690a      	ldr	r2, [r1, #16]
 800b3ec:	1a9b      	subs	r3, r3, r2
 800b3ee:	b530      	push	{r4, r5, lr}
 800b3f0:	d10c      	bne.n	800b40c <__mcmp+0x24>
 800b3f2:	0092      	lsls	r2, r2, #2
 800b3f4:	3014      	adds	r0, #20
 800b3f6:	3114      	adds	r1, #20
 800b3f8:	1884      	adds	r4, r0, r2
 800b3fa:	4411      	add	r1, r2
 800b3fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b400:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b404:	4295      	cmp	r5, r2
 800b406:	d003      	beq.n	800b410 <__mcmp+0x28>
 800b408:	d305      	bcc.n	800b416 <__mcmp+0x2e>
 800b40a:	2301      	movs	r3, #1
 800b40c:	4618      	mov	r0, r3
 800b40e:	bd30      	pop	{r4, r5, pc}
 800b410:	42a0      	cmp	r0, r4
 800b412:	d3f3      	bcc.n	800b3fc <__mcmp+0x14>
 800b414:	e7fa      	b.n	800b40c <__mcmp+0x24>
 800b416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b41a:	e7f7      	b.n	800b40c <__mcmp+0x24>

0800b41c <__mdiff>:
 800b41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b420:	460d      	mov	r5, r1
 800b422:	4607      	mov	r7, r0
 800b424:	4611      	mov	r1, r2
 800b426:	4628      	mov	r0, r5
 800b428:	4614      	mov	r4, r2
 800b42a:	f7ff ffdd 	bl	800b3e8 <__mcmp>
 800b42e:	1e06      	subs	r6, r0, #0
 800b430:	d108      	bne.n	800b444 <__mdiff+0x28>
 800b432:	4631      	mov	r1, r6
 800b434:	4638      	mov	r0, r7
 800b436:	f7ff fd83 	bl	800af40 <_Balloc>
 800b43a:	2301      	movs	r3, #1
 800b43c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b444:	bfa4      	itt	ge
 800b446:	4623      	movge	r3, r4
 800b448:	462c      	movge	r4, r5
 800b44a:	4638      	mov	r0, r7
 800b44c:	6861      	ldr	r1, [r4, #4]
 800b44e:	bfa6      	itte	ge
 800b450:	461d      	movge	r5, r3
 800b452:	2600      	movge	r6, #0
 800b454:	2601      	movlt	r6, #1
 800b456:	f7ff fd73 	bl	800af40 <_Balloc>
 800b45a:	692b      	ldr	r3, [r5, #16]
 800b45c:	60c6      	str	r6, [r0, #12]
 800b45e:	6926      	ldr	r6, [r4, #16]
 800b460:	f105 0914 	add.w	r9, r5, #20
 800b464:	f104 0214 	add.w	r2, r4, #20
 800b468:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b46c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b470:	f100 0514 	add.w	r5, r0, #20
 800b474:	f04f 0e00 	mov.w	lr, #0
 800b478:	f852 ab04 	ldr.w	sl, [r2], #4
 800b47c:	f859 4b04 	ldr.w	r4, [r9], #4
 800b480:	fa1e f18a 	uxtah	r1, lr, sl
 800b484:	b2a3      	uxth	r3, r4
 800b486:	1ac9      	subs	r1, r1, r3
 800b488:	0c23      	lsrs	r3, r4, #16
 800b48a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b48e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b492:	b289      	uxth	r1, r1
 800b494:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b498:	45c8      	cmp	r8, r9
 800b49a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b49e:	4694      	mov	ip, r2
 800b4a0:	f845 3b04 	str.w	r3, [r5], #4
 800b4a4:	d8e8      	bhi.n	800b478 <__mdiff+0x5c>
 800b4a6:	45bc      	cmp	ip, r7
 800b4a8:	d304      	bcc.n	800b4b4 <__mdiff+0x98>
 800b4aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b4ae:	b183      	cbz	r3, 800b4d2 <__mdiff+0xb6>
 800b4b0:	6106      	str	r6, [r0, #16]
 800b4b2:	e7c5      	b.n	800b440 <__mdiff+0x24>
 800b4b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b4b8:	fa1e f381 	uxtah	r3, lr, r1
 800b4bc:	141a      	asrs	r2, r3, #16
 800b4be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4c8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b4cc:	f845 3b04 	str.w	r3, [r5], #4
 800b4d0:	e7e9      	b.n	800b4a6 <__mdiff+0x8a>
 800b4d2:	3e01      	subs	r6, #1
 800b4d4:	e7e9      	b.n	800b4aa <__mdiff+0x8e>
	...

0800b4d8 <__ulp>:
 800b4d8:	4b12      	ldr	r3, [pc, #72]	; (800b524 <__ulp+0x4c>)
 800b4da:	ee10 2a90 	vmov	r2, s1
 800b4de:	401a      	ands	r2, r3
 800b4e0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	dd04      	ble.n	800b4f2 <__ulp+0x1a>
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	ec41 0b10 	vmov	d0, r0, r1
 800b4f0:	4770      	bx	lr
 800b4f2:	425b      	negs	r3, r3
 800b4f4:	151b      	asrs	r3, r3, #20
 800b4f6:	2b13      	cmp	r3, #19
 800b4f8:	f04f 0000 	mov.w	r0, #0
 800b4fc:	f04f 0100 	mov.w	r1, #0
 800b500:	dc04      	bgt.n	800b50c <__ulp+0x34>
 800b502:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b506:	fa42 f103 	asr.w	r1, r2, r3
 800b50a:	e7ef      	b.n	800b4ec <__ulp+0x14>
 800b50c:	3b14      	subs	r3, #20
 800b50e:	2b1e      	cmp	r3, #30
 800b510:	f04f 0201 	mov.w	r2, #1
 800b514:	bfda      	itte	le
 800b516:	f1c3 031f 	rsble	r3, r3, #31
 800b51a:	fa02 f303 	lslle.w	r3, r2, r3
 800b51e:	4613      	movgt	r3, r2
 800b520:	4618      	mov	r0, r3
 800b522:	e7e3      	b.n	800b4ec <__ulp+0x14>
 800b524:	7ff00000 	.word	0x7ff00000

0800b528 <__b2d>:
 800b528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52a:	6905      	ldr	r5, [r0, #16]
 800b52c:	f100 0714 	add.w	r7, r0, #20
 800b530:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b534:	1f2e      	subs	r6, r5, #4
 800b536:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b53a:	4620      	mov	r0, r4
 800b53c:	f7ff fdc4 	bl	800b0c8 <__hi0bits>
 800b540:	f1c0 0320 	rsb	r3, r0, #32
 800b544:	280a      	cmp	r0, #10
 800b546:	600b      	str	r3, [r1, #0]
 800b548:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b5c0 <__b2d+0x98>
 800b54c:	dc14      	bgt.n	800b578 <__b2d+0x50>
 800b54e:	f1c0 0e0b 	rsb	lr, r0, #11
 800b552:	fa24 f10e 	lsr.w	r1, r4, lr
 800b556:	42b7      	cmp	r7, r6
 800b558:	ea41 030c 	orr.w	r3, r1, ip
 800b55c:	bf34      	ite	cc
 800b55e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b562:	2100      	movcs	r1, #0
 800b564:	3015      	adds	r0, #21
 800b566:	fa04 f000 	lsl.w	r0, r4, r0
 800b56a:	fa21 f10e 	lsr.w	r1, r1, lr
 800b56e:	ea40 0201 	orr.w	r2, r0, r1
 800b572:	ec43 2b10 	vmov	d0, r2, r3
 800b576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b578:	42b7      	cmp	r7, r6
 800b57a:	bf3a      	itte	cc
 800b57c:	f1a5 0608 	subcc.w	r6, r5, #8
 800b580:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b584:	2100      	movcs	r1, #0
 800b586:	380b      	subs	r0, #11
 800b588:	d015      	beq.n	800b5b6 <__b2d+0x8e>
 800b58a:	4084      	lsls	r4, r0
 800b58c:	f1c0 0520 	rsb	r5, r0, #32
 800b590:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b594:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b598:	42be      	cmp	r6, r7
 800b59a:	fa21 fc05 	lsr.w	ip, r1, r5
 800b59e:	ea44 030c 	orr.w	r3, r4, ip
 800b5a2:	bf8c      	ite	hi
 800b5a4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b5a8:	2400      	movls	r4, #0
 800b5aa:	fa01 f000 	lsl.w	r0, r1, r0
 800b5ae:	40ec      	lsrs	r4, r5
 800b5b0:	ea40 0204 	orr.w	r2, r0, r4
 800b5b4:	e7dd      	b.n	800b572 <__b2d+0x4a>
 800b5b6:	ea44 030c 	orr.w	r3, r4, ip
 800b5ba:	460a      	mov	r2, r1
 800b5bc:	e7d9      	b.n	800b572 <__b2d+0x4a>
 800b5be:	bf00      	nop
 800b5c0:	3ff00000 	.word	0x3ff00000

0800b5c4 <__d2b>:
 800b5c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5c8:	460e      	mov	r6, r1
 800b5ca:	2101      	movs	r1, #1
 800b5cc:	ec59 8b10 	vmov	r8, r9, d0
 800b5d0:	4615      	mov	r5, r2
 800b5d2:	f7ff fcb5 	bl	800af40 <_Balloc>
 800b5d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b5da:	4607      	mov	r7, r0
 800b5dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5e0:	bb34      	cbnz	r4, 800b630 <__d2b+0x6c>
 800b5e2:	9301      	str	r3, [sp, #4]
 800b5e4:	f1b8 0300 	subs.w	r3, r8, #0
 800b5e8:	d027      	beq.n	800b63a <__d2b+0x76>
 800b5ea:	a802      	add	r0, sp, #8
 800b5ec:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b5f0:	f7ff fd89 	bl	800b106 <__lo0bits>
 800b5f4:	9900      	ldr	r1, [sp, #0]
 800b5f6:	b1f0      	cbz	r0, 800b636 <__d2b+0x72>
 800b5f8:	9a01      	ldr	r2, [sp, #4]
 800b5fa:	f1c0 0320 	rsb	r3, r0, #32
 800b5fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b602:	430b      	orrs	r3, r1
 800b604:	40c2      	lsrs	r2, r0
 800b606:	617b      	str	r3, [r7, #20]
 800b608:	9201      	str	r2, [sp, #4]
 800b60a:	9b01      	ldr	r3, [sp, #4]
 800b60c:	61bb      	str	r3, [r7, #24]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	bf14      	ite	ne
 800b612:	2102      	movne	r1, #2
 800b614:	2101      	moveq	r1, #1
 800b616:	6139      	str	r1, [r7, #16]
 800b618:	b1c4      	cbz	r4, 800b64c <__d2b+0x88>
 800b61a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b61e:	4404      	add	r4, r0
 800b620:	6034      	str	r4, [r6, #0]
 800b622:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b626:	6028      	str	r0, [r5, #0]
 800b628:	4638      	mov	r0, r7
 800b62a:	b003      	add	sp, #12
 800b62c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b630:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b634:	e7d5      	b.n	800b5e2 <__d2b+0x1e>
 800b636:	6179      	str	r1, [r7, #20]
 800b638:	e7e7      	b.n	800b60a <__d2b+0x46>
 800b63a:	a801      	add	r0, sp, #4
 800b63c:	f7ff fd63 	bl	800b106 <__lo0bits>
 800b640:	9b01      	ldr	r3, [sp, #4]
 800b642:	617b      	str	r3, [r7, #20]
 800b644:	2101      	movs	r1, #1
 800b646:	6139      	str	r1, [r7, #16]
 800b648:	3020      	adds	r0, #32
 800b64a:	e7e5      	b.n	800b618 <__d2b+0x54>
 800b64c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b650:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b654:	6030      	str	r0, [r6, #0]
 800b656:	6918      	ldr	r0, [r3, #16]
 800b658:	f7ff fd36 	bl	800b0c8 <__hi0bits>
 800b65c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b660:	e7e1      	b.n	800b626 <__d2b+0x62>

0800b662 <__ratio>:
 800b662:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b666:	4688      	mov	r8, r1
 800b668:	4669      	mov	r1, sp
 800b66a:	4681      	mov	r9, r0
 800b66c:	f7ff ff5c 	bl	800b528 <__b2d>
 800b670:	a901      	add	r1, sp, #4
 800b672:	4640      	mov	r0, r8
 800b674:	ec57 6b10 	vmov	r6, r7, d0
 800b678:	f7ff ff56 	bl	800b528 <__b2d>
 800b67c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b680:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b684:	eba3 0c02 	sub.w	ip, r3, r2
 800b688:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b68c:	1a9b      	subs	r3, r3, r2
 800b68e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b692:	ec5b ab10 	vmov	sl, fp, d0
 800b696:	2b00      	cmp	r3, #0
 800b698:	bfce      	itee	gt
 800b69a:	463a      	movgt	r2, r7
 800b69c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b6a0:	465a      	movle	r2, fp
 800b6a2:	4659      	mov	r1, fp
 800b6a4:	463d      	mov	r5, r7
 800b6a6:	bfd4      	ite	le
 800b6a8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b6ac:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800b6b0:	4630      	mov	r0, r6
 800b6b2:	ee10 2a10 	vmov	r2, s0
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	f7f5 f8cf 	bl	800085c <__aeabi_ddiv>
 800b6be:	ec41 0b10 	vmov	d0, r0, r1
 800b6c2:	b003      	add	sp, #12
 800b6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6c8 <__copybits>:
 800b6c8:	3901      	subs	r1, #1
 800b6ca:	b510      	push	{r4, lr}
 800b6cc:	1149      	asrs	r1, r1, #5
 800b6ce:	6914      	ldr	r4, [r2, #16]
 800b6d0:	3101      	adds	r1, #1
 800b6d2:	f102 0314 	add.w	r3, r2, #20
 800b6d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b6da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b6de:	42a3      	cmp	r3, r4
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	d303      	bcc.n	800b6ec <__copybits+0x24>
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	428a      	cmp	r2, r1
 800b6e8:	d305      	bcc.n	800b6f6 <__copybits+0x2e>
 800b6ea:	bd10      	pop	{r4, pc}
 800b6ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6f0:	f840 2b04 	str.w	r2, [r0], #4
 800b6f4:	e7f3      	b.n	800b6de <__copybits+0x16>
 800b6f6:	f842 3b04 	str.w	r3, [r2], #4
 800b6fa:	e7f4      	b.n	800b6e6 <__copybits+0x1e>

0800b6fc <__any_on>:
 800b6fc:	f100 0214 	add.w	r2, r0, #20
 800b700:	6900      	ldr	r0, [r0, #16]
 800b702:	114b      	asrs	r3, r1, #5
 800b704:	4298      	cmp	r0, r3
 800b706:	b510      	push	{r4, lr}
 800b708:	db11      	blt.n	800b72e <__any_on+0x32>
 800b70a:	dd0a      	ble.n	800b722 <__any_on+0x26>
 800b70c:	f011 011f 	ands.w	r1, r1, #31
 800b710:	d007      	beq.n	800b722 <__any_on+0x26>
 800b712:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b716:	fa24 f001 	lsr.w	r0, r4, r1
 800b71a:	fa00 f101 	lsl.w	r1, r0, r1
 800b71e:	428c      	cmp	r4, r1
 800b720:	d10b      	bne.n	800b73a <__any_on+0x3e>
 800b722:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b726:	4293      	cmp	r3, r2
 800b728:	d803      	bhi.n	800b732 <__any_on+0x36>
 800b72a:	2000      	movs	r0, #0
 800b72c:	bd10      	pop	{r4, pc}
 800b72e:	4603      	mov	r3, r0
 800b730:	e7f7      	b.n	800b722 <__any_on+0x26>
 800b732:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b736:	2900      	cmp	r1, #0
 800b738:	d0f5      	beq.n	800b726 <__any_on+0x2a>
 800b73a:	2001      	movs	r0, #1
 800b73c:	e7f6      	b.n	800b72c <__any_on+0x30>

0800b73e <_calloc_r>:
 800b73e:	b538      	push	{r3, r4, r5, lr}
 800b740:	fb02 f401 	mul.w	r4, r2, r1
 800b744:	4621      	mov	r1, r4
 800b746:	f000 f857 	bl	800b7f8 <_malloc_r>
 800b74a:	4605      	mov	r5, r0
 800b74c:	b118      	cbz	r0, 800b756 <_calloc_r+0x18>
 800b74e:	4622      	mov	r2, r4
 800b750:	2100      	movs	r1, #0
 800b752:	f7fc fd40 	bl	80081d6 <memset>
 800b756:	4628      	mov	r0, r5
 800b758:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b75c <_free_r>:
 800b75c:	b538      	push	{r3, r4, r5, lr}
 800b75e:	4605      	mov	r5, r0
 800b760:	2900      	cmp	r1, #0
 800b762:	d045      	beq.n	800b7f0 <_free_r+0x94>
 800b764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b768:	1f0c      	subs	r4, r1, #4
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	bfb8      	it	lt
 800b76e:	18e4      	addlt	r4, r4, r3
 800b770:	f000 fa36 	bl	800bbe0 <__malloc_lock>
 800b774:	4a1f      	ldr	r2, [pc, #124]	; (800b7f4 <_free_r+0x98>)
 800b776:	6813      	ldr	r3, [r2, #0]
 800b778:	4610      	mov	r0, r2
 800b77a:	b933      	cbnz	r3, 800b78a <_free_r+0x2e>
 800b77c:	6063      	str	r3, [r4, #4]
 800b77e:	6014      	str	r4, [r2, #0]
 800b780:	4628      	mov	r0, r5
 800b782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b786:	f000 ba2c 	b.w	800bbe2 <__malloc_unlock>
 800b78a:	42a3      	cmp	r3, r4
 800b78c:	d90c      	bls.n	800b7a8 <_free_r+0x4c>
 800b78e:	6821      	ldr	r1, [r4, #0]
 800b790:	1862      	adds	r2, r4, r1
 800b792:	4293      	cmp	r3, r2
 800b794:	bf04      	itt	eq
 800b796:	681a      	ldreq	r2, [r3, #0]
 800b798:	685b      	ldreq	r3, [r3, #4]
 800b79a:	6063      	str	r3, [r4, #4]
 800b79c:	bf04      	itt	eq
 800b79e:	1852      	addeq	r2, r2, r1
 800b7a0:	6022      	streq	r2, [r4, #0]
 800b7a2:	6004      	str	r4, [r0, #0]
 800b7a4:	e7ec      	b.n	800b780 <_free_r+0x24>
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	685a      	ldr	r2, [r3, #4]
 800b7aa:	b10a      	cbz	r2, 800b7b0 <_free_r+0x54>
 800b7ac:	42a2      	cmp	r2, r4
 800b7ae:	d9fa      	bls.n	800b7a6 <_free_r+0x4a>
 800b7b0:	6819      	ldr	r1, [r3, #0]
 800b7b2:	1858      	adds	r0, r3, r1
 800b7b4:	42a0      	cmp	r0, r4
 800b7b6:	d10b      	bne.n	800b7d0 <_free_r+0x74>
 800b7b8:	6820      	ldr	r0, [r4, #0]
 800b7ba:	4401      	add	r1, r0
 800b7bc:	1858      	adds	r0, r3, r1
 800b7be:	4282      	cmp	r2, r0
 800b7c0:	6019      	str	r1, [r3, #0]
 800b7c2:	d1dd      	bne.n	800b780 <_free_r+0x24>
 800b7c4:	6810      	ldr	r0, [r2, #0]
 800b7c6:	6852      	ldr	r2, [r2, #4]
 800b7c8:	605a      	str	r2, [r3, #4]
 800b7ca:	4401      	add	r1, r0
 800b7cc:	6019      	str	r1, [r3, #0]
 800b7ce:	e7d7      	b.n	800b780 <_free_r+0x24>
 800b7d0:	d902      	bls.n	800b7d8 <_free_r+0x7c>
 800b7d2:	230c      	movs	r3, #12
 800b7d4:	602b      	str	r3, [r5, #0]
 800b7d6:	e7d3      	b.n	800b780 <_free_r+0x24>
 800b7d8:	6820      	ldr	r0, [r4, #0]
 800b7da:	1821      	adds	r1, r4, r0
 800b7dc:	428a      	cmp	r2, r1
 800b7de:	bf04      	itt	eq
 800b7e0:	6811      	ldreq	r1, [r2, #0]
 800b7e2:	6852      	ldreq	r2, [r2, #4]
 800b7e4:	6062      	str	r2, [r4, #4]
 800b7e6:	bf04      	itt	eq
 800b7e8:	1809      	addeq	r1, r1, r0
 800b7ea:	6021      	streq	r1, [r4, #0]
 800b7ec:	605c      	str	r4, [r3, #4]
 800b7ee:	e7c7      	b.n	800b780 <_free_r+0x24>
 800b7f0:	bd38      	pop	{r3, r4, r5, pc}
 800b7f2:	bf00      	nop
 800b7f4:	20004b30 	.word	0x20004b30

0800b7f8 <_malloc_r>:
 800b7f8:	b570      	push	{r4, r5, r6, lr}
 800b7fa:	1ccd      	adds	r5, r1, #3
 800b7fc:	f025 0503 	bic.w	r5, r5, #3
 800b800:	3508      	adds	r5, #8
 800b802:	2d0c      	cmp	r5, #12
 800b804:	bf38      	it	cc
 800b806:	250c      	movcc	r5, #12
 800b808:	2d00      	cmp	r5, #0
 800b80a:	4606      	mov	r6, r0
 800b80c:	db01      	blt.n	800b812 <_malloc_r+0x1a>
 800b80e:	42a9      	cmp	r1, r5
 800b810:	d903      	bls.n	800b81a <_malloc_r+0x22>
 800b812:	230c      	movs	r3, #12
 800b814:	6033      	str	r3, [r6, #0]
 800b816:	2000      	movs	r0, #0
 800b818:	bd70      	pop	{r4, r5, r6, pc}
 800b81a:	f000 f9e1 	bl	800bbe0 <__malloc_lock>
 800b81e:	4a21      	ldr	r2, [pc, #132]	; (800b8a4 <_malloc_r+0xac>)
 800b820:	6814      	ldr	r4, [r2, #0]
 800b822:	4621      	mov	r1, r4
 800b824:	b991      	cbnz	r1, 800b84c <_malloc_r+0x54>
 800b826:	4c20      	ldr	r4, [pc, #128]	; (800b8a8 <_malloc_r+0xb0>)
 800b828:	6823      	ldr	r3, [r4, #0]
 800b82a:	b91b      	cbnz	r3, 800b834 <_malloc_r+0x3c>
 800b82c:	4630      	mov	r0, r6
 800b82e:	f000 f98f 	bl	800bb50 <_sbrk_r>
 800b832:	6020      	str	r0, [r4, #0]
 800b834:	4629      	mov	r1, r5
 800b836:	4630      	mov	r0, r6
 800b838:	f000 f98a 	bl	800bb50 <_sbrk_r>
 800b83c:	1c43      	adds	r3, r0, #1
 800b83e:	d124      	bne.n	800b88a <_malloc_r+0x92>
 800b840:	230c      	movs	r3, #12
 800b842:	6033      	str	r3, [r6, #0]
 800b844:	4630      	mov	r0, r6
 800b846:	f000 f9cc 	bl	800bbe2 <__malloc_unlock>
 800b84a:	e7e4      	b.n	800b816 <_malloc_r+0x1e>
 800b84c:	680b      	ldr	r3, [r1, #0]
 800b84e:	1b5b      	subs	r3, r3, r5
 800b850:	d418      	bmi.n	800b884 <_malloc_r+0x8c>
 800b852:	2b0b      	cmp	r3, #11
 800b854:	d90f      	bls.n	800b876 <_malloc_r+0x7e>
 800b856:	600b      	str	r3, [r1, #0]
 800b858:	50cd      	str	r5, [r1, r3]
 800b85a:	18cc      	adds	r4, r1, r3
 800b85c:	4630      	mov	r0, r6
 800b85e:	f000 f9c0 	bl	800bbe2 <__malloc_unlock>
 800b862:	f104 000b 	add.w	r0, r4, #11
 800b866:	1d23      	adds	r3, r4, #4
 800b868:	f020 0007 	bic.w	r0, r0, #7
 800b86c:	1ac3      	subs	r3, r0, r3
 800b86e:	d0d3      	beq.n	800b818 <_malloc_r+0x20>
 800b870:	425a      	negs	r2, r3
 800b872:	50e2      	str	r2, [r4, r3]
 800b874:	e7d0      	b.n	800b818 <_malloc_r+0x20>
 800b876:	428c      	cmp	r4, r1
 800b878:	684b      	ldr	r3, [r1, #4]
 800b87a:	bf16      	itet	ne
 800b87c:	6063      	strne	r3, [r4, #4]
 800b87e:	6013      	streq	r3, [r2, #0]
 800b880:	460c      	movne	r4, r1
 800b882:	e7eb      	b.n	800b85c <_malloc_r+0x64>
 800b884:	460c      	mov	r4, r1
 800b886:	6849      	ldr	r1, [r1, #4]
 800b888:	e7cc      	b.n	800b824 <_malloc_r+0x2c>
 800b88a:	1cc4      	adds	r4, r0, #3
 800b88c:	f024 0403 	bic.w	r4, r4, #3
 800b890:	42a0      	cmp	r0, r4
 800b892:	d005      	beq.n	800b8a0 <_malloc_r+0xa8>
 800b894:	1a21      	subs	r1, r4, r0
 800b896:	4630      	mov	r0, r6
 800b898:	f000 f95a 	bl	800bb50 <_sbrk_r>
 800b89c:	3001      	adds	r0, #1
 800b89e:	d0cf      	beq.n	800b840 <_malloc_r+0x48>
 800b8a0:	6025      	str	r5, [r4, #0]
 800b8a2:	e7db      	b.n	800b85c <_malloc_r+0x64>
 800b8a4:	20004b30 	.word	0x20004b30
 800b8a8:	20004b34 	.word	0x20004b34

0800b8ac <__ssputs_r>:
 800b8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8b0:	688e      	ldr	r6, [r1, #8]
 800b8b2:	429e      	cmp	r6, r3
 800b8b4:	4682      	mov	sl, r0
 800b8b6:	460c      	mov	r4, r1
 800b8b8:	4690      	mov	r8, r2
 800b8ba:	4699      	mov	r9, r3
 800b8bc:	d837      	bhi.n	800b92e <__ssputs_r+0x82>
 800b8be:	898a      	ldrh	r2, [r1, #12]
 800b8c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b8c4:	d031      	beq.n	800b92a <__ssputs_r+0x7e>
 800b8c6:	6825      	ldr	r5, [r4, #0]
 800b8c8:	6909      	ldr	r1, [r1, #16]
 800b8ca:	1a6f      	subs	r7, r5, r1
 800b8cc:	6965      	ldr	r5, [r4, #20]
 800b8ce:	2302      	movs	r3, #2
 800b8d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8d4:	fb95 f5f3 	sdiv	r5, r5, r3
 800b8d8:	f109 0301 	add.w	r3, r9, #1
 800b8dc:	443b      	add	r3, r7
 800b8de:	429d      	cmp	r5, r3
 800b8e0:	bf38      	it	cc
 800b8e2:	461d      	movcc	r5, r3
 800b8e4:	0553      	lsls	r3, r2, #21
 800b8e6:	d530      	bpl.n	800b94a <__ssputs_r+0x9e>
 800b8e8:	4629      	mov	r1, r5
 800b8ea:	f7ff ff85 	bl	800b7f8 <_malloc_r>
 800b8ee:	4606      	mov	r6, r0
 800b8f0:	b950      	cbnz	r0, 800b908 <__ssputs_r+0x5c>
 800b8f2:	230c      	movs	r3, #12
 800b8f4:	f8ca 3000 	str.w	r3, [sl]
 800b8f8:	89a3      	ldrh	r3, [r4, #12]
 800b8fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8fe:	81a3      	strh	r3, [r4, #12]
 800b900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b908:	463a      	mov	r2, r7
 800b90a:	6921      	ldr	r1, [r4, #16]
 800b90c:	f7fc fc58 	bl	80081c0 <memcpy>
 800b910:	89a3      	ldrh	r3, [r4, #12]
 800b912:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b91a:	81a3      	strh	r3, [r4, #12]
 800b91c:	6126      	str	r6, [r4, #16]
 800b91e:	6165      	str	r5, [r4, #20]
 800b920:	443e      	add	r6, r7
 800b922:	1bed      	subs	r5, r5, r7
 800b924:	6026      	str	r6, [r4, #0]
 800b926:	60a5      	str	r5, [r4, #8]
 800b928:	464e      	mov	r6, r9
 800b92a:	454e      	cmp	r6, r9
 800b92c:	d900      	bls.n	800b930 <__ssputs_r+0x84>
 800b92e:	464e      	mov	r6, r9
 800b930:	4632      	mov	r2, r6
 800b932:	4641      	mov	r1, r8
 800b934:	6820      	ldr	r0, [r4, #0]
 800b936:	f000 f93a 	bl	800bbae <memmove>
 800b93a:	68a3      	ldr	r3, [r4, #8]
 800b93c:	1b9b      	subs	r3, r3, r6
 800b93e:	60a3      	str	r3, [r4, #8]
 800b940:	6823      	ldr	r3, [r4, #0]
 800b942:	441e      	add	r6, r3
 800b944:	6026      	str	r6, [r4, #0]
 800b946:	2000      	movs	r0, #0
 800b948:	e7dc      	b.n	800b904 <__ssputs_r+0x58>
 800b94a:	462a      	mov	r2, r5
 800b94c:	f000 f94a 	bl	800bbe4 <_realloc_r>
 800b950:	4606      	mov	r6, r0
 800b952:	2800      	cmp	r0, #0
 800b954:	d1e2      	bne.n	800b91c <__ssputs_r+0x70>
 800b956:	6921      	ldr	r1, [r4, #16]
 800b958:	4650      	mov	r0, sl
 800b95a:	f7ff feff 	bl	800b75c <_free_r>
 800b95e:	e7c8      	b.n	800b8f2 <__ssputs_r+0x46>

0800b960 <_svfiprintf_r>:
 800b960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b964:	461d      	mov	r5, r3
 800b966:	898b      	ldrh	r3, [r1, #12]
 800b968:	061f      	lsls	r7, r3, #24
 800b96a:	b09d      	sub	sp, #116	; 0x74
 800b96c:	4680      	mov	r8, r0
 800b96e:	460c      	mov	r4, r1
 800b970:	4616      	mov	r6, r2
 800b972:	d50f      	bpl.n	800b994 <_svfiprintf_r+0x34>
 800b974:	690b      	ldr	r3, [r1, #16]
 800b976:	b96b      	cbnz	r3, 800b994 <_svfiprintf_r+0x34>
 800b978:	2140      	movs	r1, #64	; 0x40
 800b97a:	f7ff ff3d 	bl	800b7f8 <_malloc_r>
 800b97e:	6020      	str	r0, [r4, #0]
 800b980:	6120      	str	r0, [r4, #16]
 800b982:	b928      	cbnz	r0, 800b990 <_svfiprintf_r+0x30>
 800b984:	230c      	movs	r3, #12
 800b986:	f8c8 3000 	str.w	r3, [r8]
 800b98a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b98e:	e0c8      	b.n	800bb22 <_svfiprintf_r+0x1c2>
 800b990:	2340      	movs	r3, #64	; 0x40
 800b992:	6163      	str	r3, [r4, #20]
 800b994:	2300      	movs	r3, #0
 800b996:	9309      	str	r3, [sp, #36]	; 0x24
 800b998:	2320      	movs	r3, #32
 800b99a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b99e:	2330      	movs	r3, #48	; 0x30
 800b9a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9a4:	9503      	str	r5, [sp, #12]
 800b9a6:	f04f 0b01 	mov.w	fp, #1
 800b9aa:	4637      	mov	r7, r6
 800b9ac:	463d      	mov	r5, r7
 800b9ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b9b2:	b10b      	cbz	r3, 800b9b8 <_svfiprintf_r+0x58>
 800b9b4:	2b25      	cmp	r3, #37	; 0x25
 800b9b6:	d13e      	bne.n	800ba36 <_svfiprintf_r+0xd6>
 800b9b8:	ebb7 0a06 	subs.w	sl, r7, r6
 800b9bc:	d00b      	beq.n	800b9d6 <_svfiprintf_r+0x76>
 800b9be:	4653      	mov	r3, sl
 800b9c0:	4632      	mov	r2, r6
 800b9c2:	4621      	mov	r1, r4
 800b9c4:	4640      	mov	r0, r8
 800b9c6:	f7ff ff71 	bl	800b8ac <__ssputs_r>
 800b9ca:	3001      	adds	r0, #1
 800b9cc:	f000 80a4 	beq.w	800bb18 <_svfiprintf_r+0x1b8>
 800b9d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9d2:	4453      	add	r3, sl
 800b9d4:	9309      	str	r3, [sp, #36]	; 0x24
 800b9d6:	783b      	ldrb	r3, [r7, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	f000 809d 	beq.w	800bb18 <_svfiprintf_r+0x1b8>
 800b9de:	2300      	movs	r3, #0
 800b9e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b9e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9e8:	9304      	str	r3, [sp, #16]
 800b9ea:	9307      	str	r3, [sp, #28]
 800b9ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9f0:	931a      	str	r3, [sp, #104]	; 0x68
 800b9f2:	462f      	mov	r7, r5
 800b9f4:	2205      	movs	r2, #5
 800b9f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b9fa:	4850      	ldr	r0, [pc, #320]	; (800bb3c <_svfiprintf_r+0x1dc>)
 800b9fc:	f7f4 fbf8 	bl	80001f0 <memchr>
 800ba00:	9b04      	ldr	r3, [sp, #16]
 800ba02:	b9d0      	cbnz	r0, 800ba3a <_svfiprintf_r+0xda>
 800ba04:	06d9      	lsls	r1, r3, #27
 800ba06:	bf44      	itt	mi
 800ba08:	2220      	movmi	r2, #32
 800ba0a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ba0e:	071a      	lsls	r2, r3, #28
 800ba10:	bf44      	itt	mi
 800ba12:	222b      	movmi	r2, #43	; 0x2b
 800ba14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ba18:	782a      	ldrb	r2, [r5, #0]
 800ba1a:	2a2a      	cmp	r2, #42	; 0x2a
 800ba1c:	d015      	beq.n	800ba4a <_svfiprintf_r+0xea>
 800ba1e:	9a07      	ldr	r2, [sp, #28]
 800ba20:	462f      	mov	r7, r5
 800ba22:	2000      	movs	r0, #0
 800ba24:	250a      	movs	r5, #10
 800ba26:	4639      	mov	r1, r7
 800ba28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba2c:	3b30      	subs	r3, #48	; 0x30
 800ba2e:	2b09      	cmp	r3, #9
 800ba30:	d94d      	bls.n	800bace <_svfiprintf_r+0x16e>
 800ba32:	b1b8      	cbz	r0, 800ba64 <_svfiprintf_r+0x104>
 800ba34:	e00f      	b.n	800ba56 <_svfiprintf_r+0xf6>
 800ba36:	462f      	mov	r7, r5
 800ba38:	e7b8      	b.n	800b9ac <_svfiprintf_r+0x4c>
 800ba3a:	4a40      	ldr	r2, [pc, #256]	; (800bb3c <_svfiprintf_r+0x1dc>)
 800ba3c:	1a80      	subs	r0, r0, r2
 800ba3e:	fa0b f000 	lsl.w	r0, fp, r0
 800ba42:	4318      	orrs	r0, r3
 800ba44:	9004      	str	r0, [sp, #16]
 800ba46:	463d      	mov	r5, r7
 800ba48:	e7d3      	b.n	800b9f2 <_svfiprintf_r+0x92>
 800ba4a:	9a03      	ldr	r2, [sp, #12]
 800ba4c:	1d11      	adds	r1, r2, #4
 800ba4e:	6812      	ldr	r2, [r2, #0]
 800ba50:	9103      	str	r1, [sp, #12]
 800ba52:	2a00      	cmp	r2, #0
 800ba54:	db01      	blt.n	800ba5a <_svfiprintf_r+0xfa>
 800ba56:	9207      	str	r2, [sp, #28]
 800ba58:	e004      	b.n	800ba64 <_svfiprintf_r+0x104>
 800ba5a:	4252      	negs	r2, r2
 800ba5c:	f043 0302 	orr.w	r3, r3, #2
 800ba60:	9207      	str	r2, [sp, #28]
 800ba62:	9304      	str	r3, [sp, #16]
 800ba64:	783b      	ldrb	r3, [r7, #0]
 800ba66:	2b2e      	cmp	r3, #46	; 0x2e
 800ba68:	d10c      	bne.n	800ba84 <_svfiprintf_r+0x124>
 800ba6a:	787b      	ldrb	r3, [r7, #1]
 800ba6c:	2b2a      	cmp	r3, #42	; 0x2a
 800ba6e:	d133      	bne.n	800bad8 <_svfiprintf_r+0x178>
 800ba70:	9b03      	ldr	r3, [sp, #12]
 800ba72:	1d1a      	adds	r2, r3, #4
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	9203      	str	r2, [sp, #12]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	bfb8      	it	lt
 800ba7c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ba80:	3702      	adds	r7, #2
 800ba82:	9305      	str	r3, [sp, #20]
 800ba84:	4d2e      	ldr	r5, [pc, #184]	; (800bb40 <_svfiprintf_r+0x1e0>)
 800ba86:	7839      	ldrb	r1, [r7, #0]
 800ba88:	2203      	movs	r2, #3
 800ba8a:	4628      	mov	r0, r5
 800ba8c:	f7f4 fbb0 	bl	80001f0 <memchr>
 800ba90:	b138      	cbz	r0, 800baa2 <_svfiprintf_r+0x142>
 800ba92:	2340      	movs	r3, #64	; 0x40
 800ba94:	1b40      	subs	r0, r0, r5
 800ba96:	fa03 f000 	lsl.w	r0, r3, r0
 800ba9a:	9b04      	ldr	r3, [sp, #16]
 800ba9c:	4303      	orrs	r3, r0
 800ba9e:	3701      	adds	r7, #1
 800baa0:	9304      	str	r3, [sp, #16]
 800baa2:	7839      	ldrb	r1, [r7, #0]
 800baa4:	4827      	ldr	r0, [pc, #156]	; (800bb44 <_svfiprintf_r+0x1e4>)
 800baa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800baaa:	2206      	movs	r2, #6
 800baac:	1c7e      	adds	r6, r7, #1
 800baae:	f7f4 fb9f 	bl	80001f0 <memchr>
 800bab2:	2800      	cmp	r0, #0
 800bab4:	d038      	beq.n	800bb28 <_svfiprintf_r+0x1c8>
 800bab6:	4b24      	ldr	r3, [pc, #144]	; (800bb48 <_svfiprintf_r+0x1e8>)
 800bab8:	bb13      	cbnz	r3, 800bb00 <_svfiprintf_r+0x1a0>
 800baba:	9b03      	ldr	r3, [sp, #12]
 800babc:	3307      	adds	r3, #7
 800babe:	f023 0307 	bic.w	r3, r3, #7
 800bac2:	3308      	adds	r3, #8
 800bac4:	9303      	str	r3, [sp, #12]
 800bac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bac8:	444b      	add	r3, r9
 800baca:	9309      	str	r3, [sp, #36]	; 0x24
 800bacc:	e76d      	b.n	800b9aa <_svfiprintf_r+0x4a>
 800bace:	fb05 3202 	mla	r2, r5, r2, r3
 800bad2:	2001      	movs	r0, #1
 800bad4:	460f      	mov	r7, r1
 800bad6:	e7a6      	b.n	800ba26 <_svfiprintf_r+0xc6>
 800bad8:	2300      	movs	r3, #0
 800bada:	3701      	adds	r7, #1
 800badc:	9305      	str	r3, [sp, #20]
 800bade:	4619      	mov	r1, r3
 800bae0:	250a      	movs	r5, #10
 800bae2:	4638      	mov	r0, r7
 800bae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bae8:	3a30      	subs	r2, #48	; 0x30
 800baea:	2a09      	cmp	r2, #9
 800baec:	d903      	bls.n	800baf6 <_svfiprintf_r+0x196>
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d0c8      	beq.n	800ba84 <_svfiprintf_r+0x124>
 800baf2:	9105      	str	r1, [sp, #20]
 800baf4:	e7c6      	b.n	800ba84 <_svfiprintf_r+0x124>
 800baf6:	fb05 2101 	mla	r1, r5, r1, r2
 800bafa:	2301      	movs	r3, #1
 800bafc:	4607      	mov	r7, r0
 800bafe:	e7f0      	b.n	800bae2 <_svfiprintf_r+0x182>
 800bb00:	ab03      	add	r3, sp, #12
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	4622      	mov	r2, r4
 800bb06:	4b11      	ldr	r3, [pc, #68]	; (800bb4c <_svfiprintf_r+0x1ec>)
 800bb08:	a904      	add	r1, sp, #16
 800bb0a:	4640      	mov	r0, r8
 800bb0c:	f7fc fc00 	bl	8008310 <_printf_float>
 800bb10:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800bb14:	4681      	mov	r9, r0
 800bb16:	d1d6      	bne.n	800bac6 <_svfiprintf_r+0x166>
 800bb18:	89a3      	ldrh	r3, [r4, #12]
 800bb1a:	065b      	lsls	r3, r3, #25
 800bb1c:	f53f af35 	bmi.w	800b98a <_svfiprintf_r+0x2a>
 800bb20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb22:	b01d      	add	sp, #116	; 0x74
 800bb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb28:	ab03      	add	r3, sp, #12
 800bb2a:	9300      	str	r3, [sp, #0]
 800bb2c:	4622      	mov	r2, r4
 800bb2e:	4b07      	ldr	r3, [pc, #28]	; (800bb4c <_svfiprintf_r+0x1ec>)
 800bb30:	a904      	add	r1, sp, #16
 800bb32:	4640      	mov	r0, r8
 800bb34:	f7fc fea2 	bl	800887c <_printf_i>
 800bb38:	e7ea      	b.n	800bb10 <_svfiprintf_r+0x1b0>
 800bb3a:	bf00      	nop
 800bb3c:	0800bf94 	.word	0x0800bf94
 800bb40:	0800bf9a 	.word	0x0800bf9a
 800bb44:	0800bf9e 	.word	0x0800bf9e
 800bb48:	08008311 	.word	0x08008311
 800bb4c:	0800b8ad 	.word	0x0800b8ad

0800bb50 <_sbrk_r>:
 800bb50:	b538      	push	{r3, r4, r5, lr}
 800bb52:	4c06      	ldr	r4, [pc, #24]	; (800bb6c <_sbrk_r+0x1c>)
 800bb54:	2300      	movs	r3, #0
 800bb56:	4605      	mov	r5, r0
 800bb58:	4608      	mov	r0, r1
 800bb5a:	6023      	str	r3, [r4, #0]
 800bb5c:	f7f6 fa5e 	bl	800201c <_sbrk>
 800bb60:	1c43      	adds	r3, r0, #1
 800bb62:	d102      	bne.n	800bb6a <_sbrk_r+0x1a>
 800bb64:	6823      	ldr	r3, [r4, #0]
 800bb66:	b103      	cbz	r3, 800bb6a <_sbrk_r+0x1a>
 800bb68:	602b      	str	r3, [r5, #0]
 800bb6a:	bd38      	pop	{r3, r4, r5, pc}
 800bb6c:	20004dc0 	.word	0x20004dc0

0800bb70 <strncmp>:
 800bb70:	b510      	push	{r4, lr}
 800bb72:	b16a      	cbz	r2, 800bb90 <strncmp+0x20>
 800bb74:	3901      	subs	r1, #1
 800bb76:	1884      	adds	r4, r0, r2
 800bb78:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bb7c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d103      	bne.n	800bb8c <strncmp+0x1c>
 800bb84:	42a0      	cmp	r0, r4
 800bb86:	d001      	beq.n	800bb8c <strncmp+0x1c>
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d1f5      	bne.n	800bb78 <strncmp+0x8>
 800bb8c:	1a98      	subs	r0, r3, r2
 800bb8e:	bd10      	pop	{r4, pc}
 800bb90:	4610      	mov	r0, r2
 800bb92:	e7fc      	b.n	800bb8e <strncmp+0x1e>

0800bb94 <__ascii_wctomb>:
 800bb94:	b149      	cbz	r1, 800bbaa <__ascii_wctomb+0x16>
 800bb96:	2aff      	cmp	r2, #255	; 0xff
 800bb98:	bf85      	ittet	hi
 800bb9a:	238a      	movhi	r3, #138	; 0x8a
 800bb9c:	6003      	strhi	r3, [r0, #0]
 800bb9e:	700a      	strbls	r2, [r1, #0]
 800bba0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bba4:	bf98      	it	ls
 800bba6:	2001      	movls	r0, #1
 800bba8:	4770      	bx	lr
 800bbaa:	4608      	mov	r0, r1
 800bbac:	4770      	bx	lr

0800bbae <memmove>:
 800bbae:	4288      	cmp	r0, r1
 800bbb0:	b510      	push	{r4, lr}
 800bbb2:	eb01 0302 	add.w	r3, r1, r2
 800bbb6:	d807      	bhi.n	800bbc8 <memmove+0x1a>
 800bbb8:	1e42      	subs	r2, r0, #1
 800bbba:	4299      	cmp	r1, r3
 800bbbc:	d00a      	beq.n	800bbd4 <memmove+0x26>
 800bbbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbc2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bbc6:	e7f8      	b.n	800bbba <memmove+0xc>
 800bbc8:	4283      	cmp	r3, r0
 800bbca:	d9f5      	bls.n	800bbb8 <memmove+0xa>
 800bbcc:	1881      	adds	r1, r0, r2
 800bbce:	1ad2      	subs	r2, r2, r3
 800bbd0:	42d3      	cmn	r3, r2
 800bbd2:	d100      	bne.n	800bbd6 <memmove+0x28>
 800bbd4:	bd10      	pop	{r4, pc}
 800bbd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbda:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bbde:	e7f7      	b.n	800bbd0 <memmove+0x22>

0800bbe0 <__malloc_lock>:
 800bbe0:	4770      	bx	lr

0800bbe2 <__malloc_unlock>:
 800bbe2:	4770      	bx	lr

0800bbe4 <_realloc_r>:
 800bbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe6:	4607      	mov	r7, r0
 800bbe8:	4614      	mov	r4, r2
 800bbea:	460e      	mov	r6, r1
 800bbec:	b921      	cbnz	r1, 800bbf8 <_realloc_r+0x14>
 800bbee:	4611      	mov	r1, r2
 800bbf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bbf4:	f7ff be00 	b.w	800b7f8 <_malloc_r>
 800bbf8:	b922      	cbnz	r2, 800bc04 <_realloc_r+0x20>
 800bbfa:	f7ff fdaf 	bl	800b75c <_free_r>
 800bbfe:	4625      	mov	r5, r4
 800bc00:	4628      	mov	r0, r5
 800bc02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc04:	f000 f814 	bl	800bc30 <_malloc_usable_size_r>
 800bc08:	42a0      	cmp	r0, r4
 800bc0a:	d20f      	bcs.n	800bc2c <_realloc_r+0x48>
 800bc0c:	4621      	mov	r1, r4
 800bc0e:	4638      	mov	r0, r7
 800bc10:	f7ff fdf2 	bl	800b7f8 <_malloc_r>
 800bc14:	4605      	mov	r5, r0
 800bc16:	2800      	cmp	r0, #0
 800bc18:	d0f2      	beq.n	800bc00 <_realloc_r+0x1c>
 800bc1a:	4631      	mov	r1, r6
 800bc1c:	4622      	mov	r2, r4
 800bc1e:	f7fc facf 	bl	80081c0 <memcpy>
 800bc22:	4631      	mov	r1, r6
 800bc24:	4638      	mov	r0, r7
 800bc26:	f7ff fd99 	bl	800b75c <_free_r>
 800bc2a:	e7e9      	b.n	800bc00 <_realloc_r+0x1c>
 800bc2c:	4635      	mov	r5, r6
 800bc2e:	e7e7      	b.n	800bc00 <_realloc_r+0x1c>

0800bc30 <_malloc_usable_size_r>:
 800bc30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc34:	1f18      	subs	r0, r3, #4
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	bfbc      	itt	lt
 800bc3a:	580b      	ldrlt	r3, [r1, r0]
 800bc3c:	18c0      	addlt	r0, r0, r3
 800bc3e:	4770      	bx	lr

0800bc40 <_init>:
 800bc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc42:	bf00      	nop
 800bc44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc46:	bc08      	pop	{r3}
 800bc48:	469e      	mov	lr, r3
 800bc4a:	4770      	bx	lr

0800bc4c <_fini>:
 800bc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc4e:	bf00      	nop
 800bc50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc52:	bc08      	pop	{r3}
 800bc54:	469e      	mov	lr, r3
 800bc56:	4770      	bx	lr
