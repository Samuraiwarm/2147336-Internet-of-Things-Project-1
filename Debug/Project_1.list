
Project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac88  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  0800ae28  0800ae28  0001ae28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b248  0800b248  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b248  0800b248  0001b248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b250  0800b250  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b250  0800b250  0001b250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b254  0800b254  0001b254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b34  200001e4  0800b43c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d18  0800b43c  00024d18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191dd  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000316b  00000000  00000000  000393f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001440  00000000  00000000  0003c560  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d8  00000000  00000000  0003d9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000178e8  00000000  00000000  0003ec78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ffe1  00000000  00000000  00056560  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009acdd  00000000  00000000  00066541  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010121e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006208  00000000  00000000  0010129c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ae10 	.word	0x0800ae10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800ae10 	.word	0x0800ae10

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <DWT_Delay_Init+0x58>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	4a13      	ldr	r2, [pc, #76]	; (8000ff0 <DWT_Delay_Init+0x58>)
 8000fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fa6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <DWT_Delay_Init+0x58>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <DWT_Delay_Init+0x58>)
 8000fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fb2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fba:	f023 0301 	bic.w	r3, r3, #1
 8000fbe:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000fd2:	bf00      	nop
     __ASM volatile ("NOP");
 8000fd4:	bf00      	nop
  __ASM volatile ("NOP");
 8000fd6:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e000      	b.n	8000fe6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000fe4:	2301      	movs	r3, #1
  }
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000edf0 	.word	0xe000edf0
 8000ff4:	e0001000 	.word	0xe0001000

08000ff8 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <delay+0x3c>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001006:	f002 fa01 	bl	800340c <HAL_RCC_GetHCLKFreq>
 800100a:	4602      	mov	r2, r0
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <delay+0x40>)
 800100e:	fba3 2302 	umull	r2, r3, r3, r2
 8001012:	0c9b      	lsrs	r3, r3, #18
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	fb02 f303 	mul.w	r3, r2, r3
 800101a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800101c:	bf00      	nop
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <delay+0x3c>)
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	1ad2      	subs	r2, r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	d3f8      	bcc.n	800101e <delay+0x26>
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	e0001000 	.word	0xe0001000
 8001038:	431bde83 	.word	0x431bde83

0800103c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	4619      	mov	r1, r3
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f001 fbec 	bl	8002848 <HAL_GPIO_Init>
}
 8001070:	bf00      	nop
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4619      	mov	r1, r3
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f001 fbce 	bl	8002848 <HAL_GPIO_Init>
}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <DHT_Start>:


void DHT_Start (void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80010b8:	f7ff ff6e 	bl	8000f98 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 80010bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c0:	480e      	ldr	r0, [pc, #56]	; (80010fc <DHT_Start+0x48>)
 80010c2:	f7ff ffbb 	bl	800103c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010cc:	480b      	ldr	r0, [pc, #44]	; (80010fc <DHT_Start+0x48>)
 80010ce:	f001 fd55 	bl	8002b7c <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 80010d2:	f244 6050 	movw	r0, #18000	; 0x4650
 80010d6:	f7ff ff8f 	bl	8000ff8 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <DHT_Start+0x48>)
 80010e2:	f001 fd4b 	bl	8002b7c <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 80010e6:	2014      	movs	r0, #20
 80010e8:	f7ff ff86 	bl	8000ff8 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 80010ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <DHT_Start+0x48>)
 80010f2:	f7ff ffc1 	bl	8001078 <Set_Pin_Input>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40020000 	.word	0x40020000

08001100 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	71fb      	strb	r3, [r7, #7]
	delay (40);
 800110a:	2028      	movs	r0, #40	; 0x28
 800110c:	f7ff ff74 	bl	8000ff8 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001114:	4811      	ldr	r0, [pc, #68]	; (800115c <DHT_Check_Response+0x5c>)
 8001116:	f001 fd19 	bl	8002b4c <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10f      	bne.n	8001140 <DHT_Check_Response+0x40>
	{
		delay (80);
 8001120:	2050      	movs	r0, #80	; 0x50
 8001122:	f7ff ff69 	bl	8000ff8 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001126:	f44f 7180 	mov.w	r1, #256	; 0x100
 800112a:	480c      	ldr	r0, [pc, #48]	; (800115c <DHT_Check_Response+0x5c>)
 800112c:	f001 fd0e 	bl	8002b4c <HAL_GPIO_ReadPin>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <DHT_Check_Response+0x3c>
 8001136:	2301      	movs	r3, #1
 8001138:	71fb      	strb	r3, [r7, #7]
 800113a:	e001      	b.n	8001140 <DHT_Check_Response+0x40>
		else Response = -1;
 800113c:	23ff      	movs	r3, #255	; 0xff
 800113e:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8001140:	bf00      	nop
 8001142:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <DHT_Check_Response+0x5c>)
 8001148:	f001 fd00 	bl	8002b4c <HAL_GPIO_ReadPin>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f7      	bne.n	8001142 <DHT_Check_Response+0x42>

	return Response;
 8001152:	79fb      	ldrb	r3, [r7, #7]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40020000 	.word	0x40020000

08001160 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001166:	2300      	movs	r3, #0
 8001168:	71bb      	strb	r3, [r7, #6]
 800116a:	e03a      	b.n	80011e2 <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 800116c:	bf00      	nop
 800116e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001172:	4820      	ldr	r0, [pc, #128]	; (80011f4 <DHT_Read+0x94>)
 8001174:	f001 fcea 	bl	8002b4c <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f7      	beq.n	800116e <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 800117e:	2028      	movs	r0, #40	; 0x28
 8001180:	f7ff ff3a 	bl	8000ff8 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8001184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001188:	481a      	ldr	r0, [pc, #104]	; (80011f4 <DHT_Read+0x94>)
 800118a:	f001 fcdf 	bl	8002b4c <HAL_GPIO_ReadPin>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d10e      	bne.n	80011b2 <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8001194:	79bb      	ldrb	r3, [r7, #6]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2201      	movs	r2, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	b25a      	sxtb	r2, r3
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	4013      	ands	r3, r2
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	e00b      	b.n	80011ca <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	f1c3 0307 	rsb	r3, r3, #7
 80011b8:	2201      	movs	r2, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	b25a      	sxtb	r2, r3
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b25b      	sxtb	r3, r3
 80011c8:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80011ca:	bf00      	nop
 80011cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d0:	4808      	ldr	r0, [pc, #32]	; (80011f4 <DHT_Read+0x94>)
 80011d2:	f001 fcbb 	bl	8002b4c <HAL_GPIO_ReadPin>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f7      	bne.n	80011cc <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 80011dc:	79bb      	ldrb	r3, [r7, #6]
 80011de:	3301      	adds	r3, #1
 80011e0:	71bb      	strb	r3, [r7, #6]
 80011e2:	79bb      	ldrb	r3, [r7, #6]
 80011e4:	2b07      	cmp	r3, #7
 80011e6:	d9c1      	bls.n	800116c <DHT_Read+0xc>
	}
	return i;
 80011e8:	79fb      	ldrb	r3, [r7, #7]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40020000 	.word	0x40020000

080011f8 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001200:	f7ff ff58 	bl	80010b4 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001204:	f7ff ff7c 	bl	8001100 <DHT_Check_Response>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	4b23      	ldr	r3, [pc, #140]	; (800129c <DHT_GetData+0xa4>)
 800120e:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001210:	f7ff ffa6 	bl	8001160 <DHT_Read>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <DHT_GetData+0xa8>)
 800121a:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 800121c:	f7ff ffa0 	bl	8001160 <DHT_Read>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <DHT_GetData+0xac>)
 8001226:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001228:	f7ff ff9a 	bl	8001160 <DHT_Read>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <DHT_GetData+0xb0>)
 8001232:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001234:	f7ff ff94 	bl	8001160 <DHT_Read>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <DHT_GetData+0xb4>)
 800123e:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8001240:	f7ff ff8e 	bl	8001160 <DHT_Read>
 8001244:	4603      	mov	r3, r0
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <DHT_GetData+0xb8>)
 800124a:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <DHT_GetData+0xb8>)
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <DHT_GetData+0xa8>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <DHT_GetData+0xac>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4413      	add	r3, r2
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <DHT_GetData+0xb0>)
 8001260:	7812      	ldrb	r2, [r2, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a11      	ldr	r2, [pc, #68]	; (80012ac <DHT_GetData+0xb4>)
 8001266:	7812      	ldrb	r2, [r2, #0]
 8001268:	4413      	add	r3, r2
 800126a:	4299      	cmp	r1, r3
 800126c:	d111      	bne.n	8001292 <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <DHT_GetData+0xb0>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	ee07 3a90 	vmov	s15, r3
 8001276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <DHT_GetData+0xa8>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000200 	.word	0x20000200
 80012a0:	20004b34 	.word	0x20004b34
 80012a4:	20004b36 	.word	0x20004b36
 80012a8:	20004b35 	.word	0x20004b35
 80012ac:	20004b3a 	.word	0x20004b3a
 80012b0:	20004b38 	.word	0x20004b38

080012b4 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay (uint16_t time)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SetCounter(&htim2, 0);
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <delay+0x2c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GetCounter(&htim2) < time);
 80012c6:	bf00      	nop
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <delay+0x2c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d3f9      	bcc.n	80012c8 <delay+0x14>
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	20004c0c 	.word	0x20004c0c

080012e4 <HCSR04_Read>:
DHT_DataTypedef DHT11_Data;
float Temperature = 0;
float Humidity = 0;

void HCSR04_Read (void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80012e8:	2201      	movs	r2, #1
 80012ea:	2102      	movs	r1, #2
 80012ec:	480a      	ldr	r0, [pc, #40]	; (8001318 <HCSR04_Read+0x34>)
 80012ee:	f001 fc45 	bl	8002b7c <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 80012f2:	200a      	movs	r0, #10
 80012f4:	f7ff ffde 	bl	80012b4 <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);  // pull the TRIG pin low
 80012f8:	2200      	movs	r2, #0
 80012fa:	2102      	movs	r1, #2
 80012fc:	4806      	ldr	r0, [pc, #24]	; (8001318 <HCSR04_Read+0x34>)
 80012fe:	f001 fc3d 	bl	8002b7c <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HCSR04_Read+0x38>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <HCSR04_Read+0x38>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f042 0202 	orr.w	r2, r2, #2
 8001310:	60da      	str	r2, [r3, #12]
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40020000 	.word	0x40020000
 800131c:	20004c0c 	.word	0x20004c0c

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001324:	f000 fdc2 	bl	8001eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001328:	f000 f868 	bl	80013fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132c:	f000 f99c 	bl	8001668 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001330:	f000 f970 	bl	8001614 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001334:	f000 f91c 	bl	8001570 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001338:	f000 f8c8 	bl	80014cc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800133c:	2100      	movs	r1, #0
 800133e:	481c      	ldr	r0, [pc, #112]	; (80013b0 <main+0x90>)
 8001340:	f002 f94e 	bl	80035e0 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001344:	f003 fabe 	bl	80048c4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001348:	4a1a      	ldr	r2, [pc, #104]	; (80013b4 <main+0x94>)
 800134a:	2100      	movs	r1, #0
 800134c:	481a      	ldr	r0, [pc, #104]	; (80013b8 <main+0x98>)
 800134e:	f003 fb23 	bl	8004998 <osThreadNew>
 8001352:	4602      	mov	r2, r0
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <main+0x9c>)
 8001356:	601a      	str	r2, [r3, #0]

  /* creation of beep */
  beepHandle = osThreadNew(beep_task, NULL, &beep_attributes);
 8001358:	4a19      	ldr	r2, [pc, #100]	; (80013c0 <main+0xa0>)
 800135a:	2100      	movs	r1, #0
 800135c:	4819      	ldr	r0, [pc, #100]	; (80013c4 <main+0xa4>)
 800135e:	f003 fb1b 	bl	8004998 <osThreadNew>
 8001362:	4602      	mov	r2, r0
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <main+0xa8>)
 8001366:	601a      	str	r2, [r3, #0]

  /* creation of checkTmp */
  checkTmpHandle = osThreadNew(temp_thread, NULL, &checkTmp_attributes);
 8001368:	4a18      	ldr	r2, [pc, #96]	; (80013cc <main+0xac>)
 800136a:	2100      	movs	r1, #0
 800136c:	4818      	ldr	r0, [pc, #96]	; (80013d0 <main+0xb0>)
 800136e:	f003 fb13 	bl	8004998 <osThreadNew>
 8001372:	4602      	mov	r2, r0
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <main+0xb4>)
 8001376:	601a      	str	r2, [r3, #0]

  /* creation of threshold_adjus */
  threshold_adjusHandle = osThreadNew(threshold_adjust_thread, NULL, &threshold_adjus_attributes);
 8001378:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <main+0xb8>)
 800137a:	2100      	movs	r1, #0
 800137c:	4817      	ldr	r0, [pc, #92]	; (80013dc <main+0xbc>)
 800137e:	f003 fb0b 	bl	8004998 <osThreadNew>
 8001382:	4602      	mov	r2, r0
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <main+0xc0>)
 8001386:	601a      	str	r2, [r3, #0]

  /* creation of ultrasonic */
  ultrasonicHandle = osThreadNew(ultrasonic_thread, NULL, &ultrasonic_attributes);
 8001388:	4a16      	ldr	r2, [pc, #88]	; (80013e4 <main+0xc4>)
 800138a:	2100      	movs	r1, #0
 800138c:	4816      	ldr	r0, [pc, #88]	; (80013e8 <main+0xc8>)
 800138e:	f003 fb03 	bl	8004998 <osThreadNew>
 8001392:	4602      	mov	r2, r0
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <main+0xcc>)
 8001396:	601a      	str	r2, [r3, #0]

  /* creation of debug */
  debugHandle = osThreadNew(debug_task, NULL, &debug_attributes);
 8001398:	4a15      	ldr	r2, [pc, #84]	; (80013f0 <main+0xd0>)
 800139a:	2100      	movs	r1, #0
 800139c:	4815      	ldr	r0, [pc, #84]	; (80013f4 <main+0xd4>)
 800139e:	f003 fafb 	bl	8004998 <osThreadNew>
 80013a2:	4602      	mov	r2, r0
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <main+0xd8>)
 80013a6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013a8:	f003 fac0 	bl	800492c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <main+0x8c>
 80013ae:	bf00      	nop
 80013b0:	20004c0c 	.word	0x20004c0c
 80013b4:	0800aea4 	.word	0x0800aea4
 80013b8:	08001761 	.word	0x08001761
 80013bc:	20004b3c 	.word	0x20004b3c
 80013c0:	0800aec8 	.word	0x0800aec8
 80013c4:	080017c5 	.word	0x080017c5
 80013c8:	20004c8c 	.word	0x20004c8c
 80013cc:	0800aeec 	.word	0x0800aeec
 80013d0:	08001845 	.word	0x08001845
 80013d4:	20004c04 	.word	0x20004c04
 80013d8:	0800af10 	.word	0x0800af10
 80013dc:	08001879 	.word	0x08001879
 80013e0:	20004b40 	.word	0x20004b40
 80013e4:	0800af34 	.word	0x0800af34
 80013e8:	080018e9 	.word	0x080018e9
 80013ec:	20004c08 	.word	0x20004c08
 80013f0:	0800af58 	.word	0x0800af58
 80013f4:	080018fd 	.word	0x080018fd
 80013f8:	20004b48 	.word	0x20004b48

080013fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b094      	sub	sp, #80	; 0x50
 8001400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001402:	f107 0320 	add.w	r3, r7, #32
 8001406:	2230      	movs	r2, #48	; 0x30
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f005 ffcb 	bl	80073a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <SystemClock_Config+0xc8>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	4a26      	ldr	r2, [pc, #152]	; (80014c4 <SystemClock_Config+0xc8>)
 800142a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142e:	6413      	str	r3, [r2, #64]	; 0x40
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <SystemClock_Config+0xc8>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800143c:	2300      	movs	r3, #0
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <SystemClock_Config+0xcc>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a20      	ldr	r2, [pc, #128]	; (80014c8 <SystemClock_Config+0xcc>)
 8001446:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <SystemClock_Config+0xcc>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001458:	2302      	movs	r3, #2
 800145a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800145c:	2301      	movs	r3, #1
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001460:	2310      	movs	r3, #16
 8001462:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001464:	2302      	movs	r3, #2
 8001466:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001468:	2300      	movs	r3, #0
 800146a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800146c:	2308      	movs	r3, #8
 800146e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001470:	2354      	movs	r3, #84	; 0x54
 8001472:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001474:	2302      	movs	r3, #2
 8001476:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001478:	2304      	movs	r3, #4
 800147a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147c:	f107 0320 	add.w	r3, r7, #32
 8001480:	4618      	mov	r0, r3
 8001482:	f001 fb95 	bl	8002bb0 <HAL_RCC_OscConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800148c:	f000 fa72 	bl	8001974 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001490:	230f      	movs	r3, #15
 8001492:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001494:	2302      	movs	r3, #2
 8001496:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800149c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014a6:	f107 030c 	add.w	r3, r7, #12
 80014aa:	2102      	movs	r1, #2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f001 fdef 	bl	8003090 <HAL_RCC_ClockConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014b8:	f000 fa5c 	bl	8001974 <Error_Handler>
  }
}
 80014bc:	bf00      	nop
 80014be:	3750      	adds	r7, #80	; 0x50
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40007000 	.word	0x40007000

080014cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014d2:	463b      	mov	r3, r7
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <MX_ADC1_Init+0x98>)
 80014e0:	4a21      	ldr	r2, [pc, #132]	; (8001568 <MX_ADC1_Init+0x9c>)
 80014e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014e4:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <MX_ADC1_Init+0x98>)
 80014e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <MX_ADC1_Init+0x98>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <MX_ADC1_Init+0x98>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_ADC1_Init+0x98>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <MX_ADC1_Init+0x98>)
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <MX_ADC1_Init+0x98>)
 8001508:	2200      	movs	r2, #0
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <MX_ADC1_Init+0x98>)
 800150e:	4a17      	ldr	r2, [pc, #92]	; (800156c <MX_ADC1_Init+0xa0>)
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <MX_ADC1_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <MX_ADC1_Init+0x98>)
 800151a:	2201      	movs	r2, #1
 800151c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_ADC1_Init+0x98>)
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_ADC1_Init+0x98>)
 8001528:	2200      	movs	r2, #0
 800152a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800152c:	480d      	ldr	r0, [pc, #52]	; (8001564 <MX_ADC1_Init+0x98>)
 800152e:	f000 fcff 	bl	8001f30 <HAL_ADC_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001538:	f000 fa1c 	bl	8001974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800153c:	2304      	movs	r3, #4
 800153e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001540:	2301      	movs	r3, #1
 8001542:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_ADC1_Init+0x98>)
 800154e:	f000 fe6b 	bl	8002228 <HAL_ADC_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001558:	f000 fa0c 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20004b50 	.word	0x20004b50
 8001568:	40012000 	.word	0x40012000
 800156c:	0f000001 	.word	0x0f000001

08001570 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800158c:	4b20      	ldr	r3, [pc, #128]	; (8001610 <MX_TIM2_Init+0xa0>)
 800158e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001592:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001594:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <MX_TIM2_Init+0xa0>)
 8001596:	2247      	movs	r2, #71	; 0x47
 8001598:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159a:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <MX_TIM2_Init+0xa0>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80015a0:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <MX_TIM2_Init+0xa0>)
 80015a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a8:	4b19      	ldr	r3, [pc, #100]	; (8001610 <MX_TIM2_Init+0xa0>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ae:	4b18      	ldr	r3, [pc, #96]	; (8001610 <MX_TIM2_Init+0xa0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80015b4:	4816      	ldr	r0, [pc, #88]	; (8001610 <MX_TIM2_Init+0xa0>)
 80015b6:	f001 ffe8 	bl	800358a <HAL_TIM_IC_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015c0:	f000 f9d8 	bl	8001974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c4:	2300      	movs	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	4619      	mov	r1, r3
 80015d2:	480f      	ldr	r0, [pc, #60]	; (8001610 <MX_TIM2_Init+0xa0>)
 80015d4:	f002 fc40 	bl	8003e58 <HAL_TIMEx_MasterConfigSynchronization>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80015de:	f000 f9c9 	bl	8001974 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80015e2:	230a      	movs	r3, #10
 80015e4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015e6:	2301      	movs	r3, #1
 80015e8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015f2:	463b      	mov	r3, r7
 80015f4:	2200      	movs	r2, #0
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_TIM2_Init+0xa0>)
 80015fa:	f002 f961 	bl	80038c0 <HAL_TIM_IC_ConfigChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001604:	f000 f9b6 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20004c0c 	.word	0x20004c0c

08001614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <MX_USART2_UART_Init+0x50>)
 800161c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 8001620:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 800163a:	220c      	movs	r2, #12
 800163c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 800164c:	f002 fc86 	bl	8003f5c <HAL_UART_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001656:	f000 f98d 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20004c4c 	.word	0x20004c4c
 8001664:	40004400 	.word	0x40004400

08001668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b33      	ldr	r3, [pc, #204]	; (8001750 <MX_GPIO_Init+0xe8>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a32      	ldr	r2, [pc, #200]	; (8001750 <MX_GPIO_Init+0xe8>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b30      	ldr	r3, [pc, #192]	; (8001750 <MX_GPIO_Init+0xe8>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b2c      	ldr	r3, [pc, #176]	; (8001750 <MX_GPIO_Init+0xe8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a2b      	ldr	r2, [pc, #172]	; (8001750 <MX_GPIO_Init+0xe8>)
 80016a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b29      	ldr	r3, [pc, #164]	; (8001750 <MX_GPIO_Init+0xe8>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	4b25      	ldr	r3, [pc, #148]	; (8001750 <MX_GPIO_Init+0xe8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a24      	ldr	r2, [pc, #144]	; (8001750 <MX_GPIO_Init+0xe8>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b22      	ldr	r3, [pc, #136]	; (8001750 <MX_GPIO_Init+0xe8>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <MX_GPIO_Init+0xe8>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a1d      	ldr	r2, [pc, #116]	; (8001750 <MX_GPIO_Init+0xe8>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <MX_GPIO_Init+0xe8>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ULTRASONIC_TRIGGER_Pin|LD2_Pin|SPEAKER_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2162      	movs	r1, #98	; 0x62
 80016f2:	4818      	ldr	r0, [pc, #96]	; (8001754 <MX_GPIO_Init+0xec>)
 80016f4:	f001 fa42 	bl	8002b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <MX_GPIO_Init+0xf0>)
 8001700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4813      	ldr	r0, [pc, #76]	; (800175c <MX_GPIO_Init+0xf4>)
 800170e:	f001 f89b 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULTRASONIC_TRIGGER_Pin LD2_Pin SPEAKER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin|LD2_Pin|SPEAKER_Pin;
 8001712:	2362      	movs	r3, #98	; 0x62
 8001714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001716:	2301      	movs	r3, #1
 8001718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	480a      	ldr	r0, [pc, #40]	; (8001754 <MX_GPIO_Init+0xec>)
 800172a:	f001 f88d 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800172e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	4804      	ldr	r0, [pc, #16]	; (8001754 <MX_GPIO_Init+0xec>)
 8001744:	f001 f880 	bl	8002848 <HAL_GPIO_Init>

}
 8001748:	bf00      	nop
 800174a:	3728      	adds	r7, #40	; 0x28
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40023800 	.word	0x40023800
 8001754:	40020000 	.word	0x40020000
 8001758:	10210000 	.word	0x10210000
 800175c:	40020800 	.word	0x40020800

08001760 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {
	  if (state == 1) {
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <StartDefaultTask+0x5c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d11a      	bne.n	80017a6 <StartDefaultTask+0x46>
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET) {
 8001770:	2140      	movs	r1, #64	; 0x40
 8001772:	4813      	ldr	r0, [pc, #76]	; (80017c0 <StartDefaultTask+0x60>)
 8001774:	f001 f9ea 	bl	8002b4c <HAL_GPIO_ReadPin>
 8001778:	4603      	mov	r3, r0
 800177a:	2b01      	cmp	r3, #1
 800177c:	d01c      	beq.n	80017b8 <StartDefaultTask+0x58>
			  continue;
		  }
		  osDelay(3000);
 800177e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001782:	f003 f9af 	bl	8004ae4 <osDelay>
		  if (state == 0) {
 8001786:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <StartDefaultTask+0x5c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d105      	bne.n	800179a <StartDefaultTask+0x3a>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	2140      	movs	r1, #64	; 0x40
 8001792:	480b      	ldr	r0, [pc, #44]	; (80017c0 <StartDefaultTask+0x60>)
 8001794:	f001 f9f2 	bl	8002b7c <HAL_GPIO_WritePin>
			  continue;
 8001798:	e00f      	b.n	80017ba <StartDefaultTask+0x5a>
		  }
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800179a:	2201      	movs	r2, #1
 800179c:	2140      	movs	r1, #64	; 0x40
 800179e:	4808      	ldr	r0, [pc, #32]	; (80017c0 <StartDefaultTask+0x60>)
 80017a0:	f001 f9ec 	bl	8002b7c <HAL_GPIO_WritePin>
 80017a4:	e004      	b.n	80017b0 <StartDefaultTask+0x50>
	  } else {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2140      	movs	r1, #64	; 0x40
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <StartDefaultTask+0x60>)
 80017ac:	f001 f9e6 	bl	8002b7c <HAL_GPIO_WritePin>
	  }
	  osDelay(50);
 80017b0:	2032      	movs	r0, #50	; 0x32
 80017b2:	f003 f997 	bl	8004ae4 <osDelay>
 80017b6:	e7d7      	b.n	8001768 <StartDefaultTask+0x8>
			  continue;
 80017b8:	bf00      	nop
	  if (state == 1) {
 80017ba:	e7d5      	b.n	8001768 <StartDefaultTask+0x8>
 80017bc:	20000214 	.word	0x20000214
 80017c0:	40020000 	.word	0x40020000

080017c4 <beep_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_beep_task */
void beep_task(void *argument)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN beep_task */
  /* Infinite loop */
  for(;;)
  {
	if (Temperature > 28 || Distance == 0) {
 80017cc:	4b18      	ldr	r3, [pc, #96]	; (8001830 <beep_task+0x6c>)
 80017ce:	edd3 7a00 	vldr	s15, [r3]
 80017d2:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 80017d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017de:	dc03      	bgt.n	80017e8 <beep_task+0x24>
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <beep_task+0x70>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d108      	bne.n	80017fa <beep_task+0x36>
    	state = 0;
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <beep_task+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2140      	movs	r1, #64	; 0x40
 80017f2:	4812      	ldr	r0, [pc, #72]	; (800183c <beep_task+0x78>)
 80017f4:	f001 f9c2 	bl	8002b7c <HAL_GPIO_WritePin>
		continue;
 80017f8:	e019      	b.n	800182e <beep_task+0x6a>
	}
    if (Distance >= threshold - 50 && Distance <= threshold + 5) {
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <beep_task+0x70>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <beep_task+0x7c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3b32      	subs	r3, #50	; 0x32
 8001806:	429a      	cmp	r2, r3
 8001808:	db0b      	blt.n	8001822 <beep_task+0x5e>
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <beep_task+0x70>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <beep_task+0x7c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3305      	adds	r3, #5
 8001816:	429a      	cmp	r2, r3
 8001818:	dc03      	bgt.n	8001822 <beep_task+0x5e>
    	state = 1;
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <beep_task+0x74>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	e002      	b.n	8001828 <beep_task+0x64>
    } else {
    	state = 0;
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <beep_task+0x74>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
    }
    osDelay(50);
 8001828:	2032      	movs	r0, #50	; 0x32
 800182a:	f003 f95b 	bl	8004ae4 <osDelay>
	if (Temperature > 28 || Distance == 0) {
 800182e:	e7cd      	b.n	80017cc <beep_task+0x8>
 8001830:	20000218 	.word	0x20000218
 8001834:	20000211 	.word	0x20000211
 8001838:	20000214 	.word	0x20000214
 800183c:	40020000 	.word	0x40020000
 8001840:	20000000 	.word	0x20000000

08001844 <temp_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_temp_thread */
void temp_thread(void *argument)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b09c      	sub	sp, #112	; 0x70
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temp_thread */
  /* Infinite loop */
  char buffer[100];
  while(1)
  {
	  DHT_GetData(&DHT11_Data);
 800184c:	4807      	ldr	r0, [pc, #28]	; (800186c <temp_thread+0x28>)
 800184e:	f7ff fcd3 	bl	80011f8 <DHT_GetData>
	  Temperature = DHT11_Data.Temperature;
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <temp_thread+0x28>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a06      	ldr	r2, [pc, #24]	; (8001870 <temp_thread+0x2c>)
 8001858:	6013      	str	r3, [r2, #0]
	  Humidity = DHT11_Data.Humidity;
 800185a:	4b04      	ldr	r3, [pc, #16]	; (800186c <temp_thread+0x28>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4a05      	ldr	r2, [pc, #20]	; (8001874 <temp_thread+0x30>)
 8001860:	6013      	str	r3, [r2, #0]
// 	  sprintf(buffer, "Tmp: %.2f \r\n",  Temperature);
//  	  HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
	  osDelay(5000);
 8001862:	f241 3088 	movw	r0, #5000	; 0x1388
 8001866:	f003 f93d 	bl	8004ae4 <osDelay>
	  DHT_GetData(&DHT11_Data);
 800186a:	e7ef      	b.n	800184c <temp_thread+0x8>
 800186c:	20004b98 	.word	0x20004b98
 8001870:	20000218 	.word	0x20000218
 8001874:	2000021c 	.word	0x2000021c

08001878 <threshold_adjust_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_threshold_adjust_thread */
void threshold_adjust_thread(void *argument)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN threshold_adjust_thread */
  HAL_ADC_Start(&hadc1);
 8001880:	4815      	ldr	r0, [pc, #84]	; (80018d8 <threshold_adjust_thread+0x60>)
 8001882:	f000 fb99 	bl	8001fb8 <HAL_ADC_Start>
  /* Infinite loop */
  while(1)
  {
	 if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 8001886:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800188a:	4813      	ldr	r0, [pc, #76]	; (80018d8 <threshold_adjust_thread+0x60>)
 800188c:	f000 fc3a 	bl	8002104 <HAL_ADC_PollForConversion>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d11b      	bne.n	80018ce <threshold_adjust_thread+0x56>
		  int ret = HAL_ADC_GetValue(&hadc1);
 8001896:	4810      	ldr	r0, [pc, #64]	; (80018d8 <threshold_adjust_thread+0x60>)
 8001898:	f000 fcb8 	bl	800220c <HAL_ADC_GetValue>
 800189c:	4603      	mov	r3, r0
 800189e:	60fb      	str	r3, [r7, #12]
		 threshold = (((float) ret/4096) * 200 + 10);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	ee07 3a90 	vmov	s15, r3
 80018a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018aa:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80018dc <threshold_adjust_thread+0x64>
 80018ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80018e0 <threshold_adjust_thread+0x68>
 80018b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c6:	ee17 2a90 	vmov	r2, s15
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <threshold_adjust_thread+0x6c>)
 80018cc:	601a      	str	r2, [r3, #0]
	 }
	  osDelay(1000);
 80018ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018d2:	f003 f907 	bl	8004ae4 <osDelay>
	 if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 80018d6:	e7d6      	b.n	8001886 <threshold_adjust_thread+0xe>
 80018d8:	20004b50 	.word	0x20004b50
 80018dc:	45800000 	.word	0x45800000
 80018e0:	43480000 	.word	0x43480000
 80018e4:	20000000 	.word	0x20000000

080018e8 <ultrasonic_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ultrasonic_thread */
void ultrasonic_thread(void *argument)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ultrasonic_thread */
  /* Infinite loop */
  for(;;)
  {
	HCSR04_Read();
 80018f0:	f7ff fcf8 	bl	80012e4 <HCSR04_Read>
	osDelay(100);
 80018f4:	2064      	movs	r0, #100	; 0x64
 80018f6:	f003 f8f5 	bl	8004ae4 <osDelay>
	HCSR04_Read();
 80018fa:	e7f9      	b.n	80018f0 <ultrasonic_thread+0x8>

080018fc <debug_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_debug_task */
void debug_task(void *argument)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b09c      	sub	sp, #112	; 0x70
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 char buffer[100];
  for(;;)
  {
//	  sprintf(buffer, "State: %d, Dist %d, Threshold %d, Tmp %.2f, Hum %.2f \r\n", state, Distance, threshold, Temperature, Humidity);
//	  HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 500);
  	  sprintf(buffer, "Distance: %d, Threshold: %d \r\n", Distance, threshold);
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <debug_task+0x44>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <debug_task+0x48>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f107 000c 	add.w	r0, r7, #12
 8001912:	490d      	ldr	r1, [pc, #52]	; (8001948 <debug_task+0x4c>)
 8001914:	f006 fb94 	bl	8008040 <siprintf>
  	  HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fc5f 	bl	80001e0 <strlen>
 8001922:	4603      	mov	r3, r0
 8001924:	b29a      	uxth	r2, r3
 8001926:	f107 010c 	add.w	r1, r7, #12
 800192a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192e:	4807      	ldr	r0, [pc, #28]	; (800194c <debug_task+0x50>)
 8001930:	f002 fb61 	bl	8003ff6 <HAL_UART_Transmit>
	  osDelay(2000);
 8001934:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001938:	f003 f8d4 	bl	8004ae4 <osDelay>
  {
 800193c:	e7e2      	b.n	8001904 <debug_task+0x8>
 800193e:	bf00      	nop
 8001940:	20000211 	.word	0x20000211
 8001944:	20000000 	.word	0x20000000
 8001948:	0800ae6c 	.word	0x0800ae6c
 800194c:	20004c4c 	.word	0x20004c4c

08001950 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d101      	bne.n	8001966 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001962:	f000 fac5 	bl	8001ef0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40010000 	.word	0x40010000

08001974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <HAL_MspInit+0x4c>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	4a0f      	ldr	r2, [pc, #60]	; (80019d0 <HAL_MspInit+0x4c>)
 8001994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001998:	6453      	str	r3, [r2, #68]	; 0x44
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_MspInit+0x4c>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_MspInit+0x4c>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	4a08      	ldr	r2, [pc, #32]	; (80019d0 <HAL_MspInit+0x4c>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b4:	6413      	str	r3, [r2, #64]	; 0x40
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_MspInit+0x4c>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800

080019d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	; 0x28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a17      	ldr	r2, [pc, #92]	; (8001a50 <HAL_ADC_MspInit+0x7c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d127      	bne.n	8001a46 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <HAL_ADC_MspInit+0x80>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	4a15      	ldr	r2, [pc, #84]	; (8001a54 <HAL_ADC_MspInit+0x80>)
 8001a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a04:	6453      	str	r3, [r2, #68]	; 0x44
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <HAL_ADC_MspInit+0x80>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_ADC_MspInit+0x80>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a0e      	ldr	r2, [pc, #56]	; (8001a54 <HAL_ADC_MspInit+0x80>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <HAL_ADC_MspInit+0x80>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = THRESHOLD_POTENTIOMETER_Pin;
 8001a2e:	2310      	movs	r3, #16
 8001a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a32:	2303      	movs	r3, #3
 8001a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(THRESHOLD_POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4805      	ldr	r0, [pc, #20]	; (8001a58 <HAL_ADC_MspInit+0x84>)
 8001a42:	f000 ff01 	bl	8002848 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a46:	bf00      	nop
 8001a48:	3728      	adds	r7, #40	; 0x28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40012000 	.word	0x40012000
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020000 	.word	0x40020000

08001a5c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7c:	d133      	bne.n	8001ae6 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <HAL_TIM_IC_MspInit+0x94>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a1a      	ldr	r2, [pc, #104]	; (8001af0 <HAL_TIM_IC_MspInit+0x94>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <HAL_TIM_IC_MspInit+0x94>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <HAL_TIM_IC_MspInit+0x94>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <HAL_TIM_IC_MspInit+0x94>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_TIM_IC_MspInit+0x94>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4808      	ldr	r0, [pc, #32]	; (8001af4 <HAL_TIM_IC_MspInit+0x98>)
 8001ad2:	f000 feb9 	bl	8002848 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	201c      	movs	r0, #28
 8001adc:	f000 fe8a 	bl	80027f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ae0:	201c      	movs	r0, #28
 8001ae2:	f000 fea3 	bl	800282c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3728      	adds	r7, #40	; 0x28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020000 	.word	0x40020000

08001af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a19      	ldr	r2, [pc, #100]	; (8001b7c <HAL_UART_MspInit+0x84>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d12b      	bne.n	8001b72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <HAL_UART_MspInit+0x88>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <HAL_UART_MspInit+0x88>)
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b28:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <HAL_UART_MspInit+0x88>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_UART_MspInit+0x88>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <HAL_UART_MspInit+0x88>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_UART_MspInit+0x88>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b52:	230c      	movs	r3, #12
 8001b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b62:	2307      	movs	r3, #7
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	f107 0314 	add.w	r3, r7, #20
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4805      	ldr	r0, [pc, #20]	; (8001b84 <HAL_UART_MspInit+0x8c>)
 8001b6e:	f000 fe6b 	bl	8002848 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b72:	bf00      	nop
 8001b74:	3728      	adds	r7, #40	; 0x28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40004400 	.word	0x40004400
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020000 	.word	0x40020000

08001b88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08c      	sub	sp, #48	; 0x30
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	2019      	movs	r0, #25
 8001b9e:	f000 fe29 	bl	80027f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ba2:	2019      	movs	r0, #25
 8001ba4:	f000 fe42 	bl	800282c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <HAL_InitTick+0xa0>)
 8001bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb0:	4a1d      	ldr	r2, [pc, #116]	; (8001c28 <HAL_InitTick+0xa0>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <HAL_InitTick+0xa0>)
 8001bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bc4:	f107 0210 	add.w	r2, r7, #16
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f001 fc50 	bl	8003474 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001bd4:	f001 fc3a 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8001bd8:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bdc:	4a13      	ldr	r2, [pc, #76]	; (8001c2c <HAL_InitTick+0xa4>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	0c9b      	lsrs	r3, r3, #18
 8001be4:	3b01      	subs	r3, #1
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_InitTick+0xa8>)
 8001bea:	4a12      	ldr	r2, [pc, #72]	; (8001c34 <HAL_InitTick+0xac>)
 8001bec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <HAL_InitTick+0xa8>)
 8001bf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bf4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001bf6:	4a0e      	ldr	r2, [pc, #56]	; (8001c30 <HAL_InitTick+0xa8>)
 8001bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <HAL_InitTick+0xa8>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_InitTick+0xa8>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001c08:	4809      	ldr	r0, [pc, #36]	; (8001c30 <HAL_InitTick+0xa8>)
 8001c0a:	f001 fc65 	bl	80034d8 <HAL_TIM_Base_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d104      	bne.n	8001c1e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001c14:	4806      	ldr	r0, [pc, #24]	; (8001c30 <HAL_InitTick+0xa8>)
 8001c16:	f001 fc94 	bl	8003542 <HAL_TIM_Base_Start_IT>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	e000      	b.n	8001c20 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3730      	adds	r7, #48	; 0x30
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	431bde83 	.word	0x431bde83
 8001c30:	20004c90 	.word	0x20004c90
 8001c34:	40010000 	.word	0x40010000

08001c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4a:	e7fe      	b.n	8001c4a <HardFault_Handler+0x4>

08001c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <MemManage_Handler+0x4>

08001c52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <BusFault_Handler+0x4>

08001c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <UsageFault_Handler+0x4>

08001c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c72:	f001 fd1d 	bl	80036b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20004c90 	.word	0x20004c90

08001c80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b09b      	sub	sp, #108	; 0x6c
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//	if (&htim2.Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
//	{
		 char buffer[100];
		if (Is_First_Captured==0) // if the first value is not captured
 8001c86:	4b48      	ldr	r3, [pc, #288]	; (8001da8 <TIM2_IRQHandler+0x128>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d11a      	bne.n	8001cc4 <TIM2_IRQHandler+0x44>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1); // read the first value
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4846      	ldr	r0, [pc, #280]	; (8001dac <TIM2_IRQHandler+0x12c>)
 8001c92:	f001 feb1 	bl	80039f8 <HAL_TIM_ReadCapturedValue>
 8001c96:	4602      	mov	r2, r0
 8001c98:	4b45      	ldr	r3, [pc, #276]	; (8001db0 <TIM2_IRQHandler+0x130>)
 8001c9a:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001c9c:	4b42      	ldr	r3, [pc, #264]	; (8001da8 <TIM2_IRQHandler+0x128>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001ca2:	4b42      	ldr	r3, [pc, #264]	; (8001dac <TIM2_IRQHandler+0x12c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6a1a      	ldr	r2, [r3, #32]
 8001ca8:	4b40      	ldr	r3, [pc, #256]	; (8001dac <TIM2_IRQHandler+0x12c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 020a 	bic.w	r2, r2, #10
 8001cb0:	621a      	str	r2, [r3, #32]
 8001cb2:	4b3e      	ldr	r3, [pc, #248]	; (8001dac <TIM2_IRQHandler+0x12c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6a1a      	ldr	r2, [r3, #32]
 8001cb8:	4b3c      	ldr	r3, [pc, #240]	; (8001dac <TIM2_IRQHandler+0x12c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0202 	orr.w	r2, r2, #2
 8001cc0:	621a      	str	r2, [r3, #32]
 8001cc2:	e063      	b.n	8001d8c <TIM2_IRQHandler+0x10c>
		}

		else if (Is_First_Captured==1)   // if the first is already captured
 8001cc4:	4b38      	ldr	r3, [pc, #224]	; (8001da8 <TIM2_IRQHandler+0x128>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d15f      	bne.n	8001d8c <TIM2_IRQHandler+0x10c>
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);  // read second value
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4837      	ldr	r0, [pc, #220]	; (8001dac <TIM2_IRQHandler+0x12c>)
 8001cd0:	f001 fe92 	bl	80039f8 <HAL_TIM_ReadCapturedValue>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b37      	ldr	r3, [pc, #220]	; (8001db4 <TIM2_IRQHandler+0x134>)
 8001cd8:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim2, 0);  // reset the counter
 8001cda:	4b34      	ldr	r3, [pc, #208]	; (8001dac <TIM2_IRQHandler+0x12c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24

			if (IC_Val2 > IC_Val1)
 8001ce2:	4b34      	ldr	r3, [pc, #208]	; (8001db4 <TIM2_IRQHandler+0x134>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4b32      	ldr	r3, [pc, #200]	; (8001db0 <TIM2_IRQHandler+0x130>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d907      	bls.n	8001cfe <TIM2_IRQHandler+0x7e>
			{
				Difference = IC_Val2-IC_Val1;
 8001cee:	4b31      	ldr	r3, [pc, #196]	; (8001db4 <TIM2_IRQHandler+0x134>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <TIM2_IRQHandler+0x130>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	4a2f      	ldr	r2, [pc, #188]	; (8001db8 <TIM2_IRQHandler+0x138>)
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	e00f      	b.n	8001d1e <TIM2_IRQHandler+0x9e>
			}

			else if (IC_Val1 > IC_Val2)
 8001cfe:	4b2c      	ldr	r3, [pc, #176]	; (8001db0 <TIM2_IRQHandler+0x130>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	4b2c      	ldr	r3, [pc, #176]	; (8001db4 <TIM2_IRQHandler+0x134>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d909      	bls.n	8001d1e <TIM2_IRQHandler+0x9e>
			{
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001d0a:	4b2a      	ldr	r3, [pc, #168]	; (8001db4 <TIM2_IRQHandler+0x134>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <TIM2_IRQHandler+0x130>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001d18:	33ff      	adds	r3, #255	; 0xff
 8001d1a:	4a27      	ldr	r2, [pc, #156]	; (8001db8 <TIM2_IRQHandler+0x138>)
 8001d1c:	6013      	str	r3, [r2, #0]
			}

			Distance = Difference * .034/2;
 8001d1e:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <TIM2_IRQHandler+0x138>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fbf6 	bl	8000514 <__aeabi_ui2d>
 8001d28:	a31d      	add	r3, pc, #116	; (adr r3, 8001da0 <TIM2_IRQHandler+0x120>)
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	f7fe fc6b 	bl	8000608 <__aeabi_dmul>
 8001d32:	4603      	mov	r3, r0
 8001d34:	460c      	mov	r4, r1
 8001d36:	4618      	mov	r0, r3
 8001d38:	4621      	mov	r1, r4
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d42:	f7fe fd8b 	bl	800085c <__aeabi_ddiv>
 8001d46:	4603      	mov	r3, r0
 8001d48:	460c      	mov	r4, r1
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	f7fe ff33 	bl	8000bb8 <__aeabi_d2uiz>
 8001d52:	4603      	mov	r3, r0
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <TIM2_IRQHandler+0x13c>)
 8001d58:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <TIM2_IRQHandler+0x128>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <TIM2_IRQHandler+0x12c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6a1a      	ldr	r2, [r3, #32]
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <TIM2_IRQHandler+0x12c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 020a 	bic.w	r2, r2, #10
 8001d6e:	621a      	str	r2, [r3, #32]
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <TIM2_IRQHandler+0x12c>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <TIM2_IRQHandler+0x12c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6a12      	ldr	r2, [r2, #32]
 8001d7a:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <TIM2_IRQHandler+0x12c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <TIM2_IRQHandler+0x12c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0202 	bic.w	r2, r2, #2
 8001d8a:	60da      	str	r2, [r3, #12]
		}
//		 sprintf(buffer, "IFC %d Val1 %d Val2 %d \r\n", Is_First_Captured, IC_Val1, IC_Val2);
//		HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
//	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d8c:	4807      	ldr	r0, [pc, #28]	; (8001dac <TIM2_IRQHandler+0x12c>)
 8001d8e:	f001 fc8f 	bl	80036b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	376c      	adds	r7, #108	; 0x6c
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd90      	pop	{r4, r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	f3af 8000 	nop.w
 8001da0:	b020c49c 	.word	0xb020c49c
 8001da4:	3fa16872 	.word	0x3fa16872
 8001da8:	20000210 	.word	0x20000210
 8001dac:	20004c0c 	.word	0x20004c0c
 8001db0:	20000204 	.word	0x20000204
 8001db4:	20000208 	.word	0x20000208
 8001db8:	2000020c 	.word	0x2000020c
 8001dbc:	20000211 	.word	0x20000211

08001dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc8:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <_sbrk+0x5c>)
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <_sbrk+0x60>)
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd4:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <_sbrk+0x64>)
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <_sbrk+0x68>)
 8001de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <_sbrk+0x64>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d207      	bcs.n	8001e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df0:	f005 faa4 	bl	800733c <__errno>
 8001df4:	4602      	mov	r2, r0
 8001df6:	230c      	movs	r3, #12
 8001df8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dfe:	e009      	b.n	8001e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <_sbrk+0x64>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <_sbrk+0x64>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <_sbrk+0x64>)
 8001e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e12:	68fb      	ldr	r3, [r7, #12]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20020000 	.word	0x20020000
 8001e20:	00000400 	.word	0x00000400
 8001e24:	20000220 	.word	0x20000220
 8001e28:	20004d18 	.word	0x20004d18

08001e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <SystemInit+0x28>)
 8001e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e36:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <SystemInit+0x28>)
 8001e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <SystemInit+0x28>)
 8001e42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e46:	609a      	str	r2, [r3, #8]
#endif
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e5e:	e003      	b.n	8001e68 <LoopCopyDataInit>

08001e60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e66:	3104      	adds	r1, #4

08001e68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e68:	480b      	ldr	r0, [pc, #44]	; (8001e98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e70:	d3f6      	bcc.n	8001e60 <CopyDataInit>
  ldr  r2, =_sbss
 8001e72:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e74:	e002      	b.n	8001e7c <LoopFillZerobss>

08001e76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e78:	f842 3b04 	str.w	r3, [r2], #4

08001e7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e80:	d3f9      	bcc.n	8001e76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e82:	f7ff ffd3 	bl	8001e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e86:	f005 fa5f 	bl	8007348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e8a:	f7ff fa49 	bl	8001320 <main>
  bx  lr    
 8001e8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e90:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e94:	0800b258 	.word	0x0800b258
  ldr  r0, =_sdata
 8001e98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e9c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001ea0:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001ea4:	20004d18 	.word	0x20004d18

08001ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea8:	e7fe      	b.n	8001ea8 <ADC_IRQHandler>
	...

08001eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eb0:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_Init+0x40>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	; (8001eec <HAL_Init+0x40>)
 8001eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_Init+0x40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <HAL_Init+0x40>)
 8001ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <HAL_Init+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a07      	ldr	r2, [pc, #28]	; (8001eec <HAL_Init+0x40>)
 8001ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed4:	2003      	movs	r0, #3
 8001ed6:	f000 fc82 	bl	80027de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eda:	2000      	movs	r0, #0
 8001edc:	f7ff fe54 	bl	8001b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee0:	f7ff fd50 	bl	8001984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023c00 	.word	0x40023c00

08001ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_IncTick+0x20>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_IncTick+0x24>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_IncTick+0x24>)
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	2000000c 	.word	0x2000000c
 8001f14:	20004cd0 	.word	0x20004cd0

08001f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_GetTick+0x14>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20004cd0 	.word	0x20004cd0

08001f30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e033      	b.n	8001fae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff fd40 	bl	80019d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d118      	bne.n	8001fa0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f76:	f023 0302 	bic.w	r3, r3, #2
 8001f7a:	f043 0202 	orr.w	r2, r3, #2
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 fa82 	bl	800248c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f023 0303 	bic.w	r3, r3, #3
 8001f96:	f043 0201 	orr.w	r2, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f9e:	e001      	b.n	8001fa4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_Start+0x1a>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e08a      	b.n	80020e8 <HAL_ADC_Start+0x130>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d018      	beq.n	800201a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0201 	orr.w	r2, r2, #1
 8001ff6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ff8:	4b3e      	ldr	r3, [pc, #248]	; (80020f4 <HAL_ADC_Start+0x13c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a3e      	ldr	r2, [pc, #248]	; (80020f8 <HAL_ADC_Start+0x140>)
 8001ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8002002:	0c9a      	lsrs	r2, r3, #18
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800200c:	e002      	b.n	8002014 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	3b01      	subs	r3, #1
 8002012:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f9      	bne.n	800200e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b01      	cmp	r3, #1
 8002026:	d15e      	bne.n	80020e6 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002030:	f023 0301 	bic.w	r3, r3, #1
 8002034:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002046:	2b00      	cmp	r3, #0
 8002048:	d007      	beq.n	800205a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002052:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002066:	d106      	bne.n	8002076 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206c:	f023 0206 	bic.w	r2, r3, #6
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	645a      	str	r2, [r3, #68]	; 0x44
 8002074:	e002      	b.n	800207c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002084:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <HAL_ADC_Start+0x144>)
 8002086:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002090:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10f      	bne.n	80020be <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d11c      	bne.n	80020e6 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	e013      	b.n	80020e6 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a0f      	ldr	r2, [pc, #60]	; (8002100 <HAL_ADC_Start+0x148>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d10e      	bne.n	80020e6 <HAL_ADC_Start+0x12e>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d107      	bne.n	80020e6 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020e4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	20000004 	.word	0x20000004
 80020f8:	431bde83 	.word	0x431bde83
 80020fc:	40012300 	.word	0x40012300
 8002100:	40012000 	.word	0x40012000

08002104 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002120:	d113      	bne.n	800214a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800212c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002130:	d10b      	bne.n	800214a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f043 0220 	orr.w	r2, r3, #32
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e05c      	b.n	8002204 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800214a:	f7ff fee5 	bl	8001f18 <HAL_GetTick>
 800214e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002150:	e01a      	b.n	8002188 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002158:	d016      	beq.n	8002188 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <HAL_ADC_PollForConversion+0x6c>
 8002160:	f7ff feda 	bl	8001f18 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d20b      	bcs.n	8002188 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	f043 0204 	orr.w	r2, r3, #4
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e03d      	b.n	8002204 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b02      	cmp	r3, #2
 8002194:	d1dd      	bne.n	8002152 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f06f 0212 	mvn.w	r2, #18
 800219e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d123      	bne.n	8002202 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d11f      	bne.n	8002202 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d006      	beq.n	80021de <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d111      	bne.n	8002202 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d105      	bne.n	8002202 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f043 0201 	orr.w	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x1c>
 8002240:	2302      	movs	r3, #2
 8002242:	e113      	b.n	800246c <HAL_ADC_ConfigChannel+0x244>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b09      	cmp	r3, #9
 8002252:	d925      	bls.n	80022a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68d9      	ldr	r1, [r3, #12]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	3b1e      	subs	r3, #30
 800226a:	2207      	movs	r2, #7
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43da      	mvns	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	400a      	ands	r2, r1
 8002278:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68d9      	ldr	r1, [r3, #12]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	b29b      	uxth	r3, r3
 800228a:	4618      	mov	r0, r3
 800228c:	4603      	mov	r3, r0
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4403      	add	r3, r0
 8002292:	3b1e      	subs	r3, #30
 8002294:	409a      	lsls	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	e022      	b.n	80022e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6919      	ldr	r1, [r3, #16]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	2207      	movs	r2, #7
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	400a      	ands	r2, r1
 80022c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6919      	ldr	r1, [r3, #16]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4618      	mov	r0, r3
 80022d6:	4603      	mov	r3, r0
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4403      	add	r3, r0
 80022dc:	409a      	lsls	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d824      	bhi.n	8002338 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	3b05      	subs	r3, #5
 8002300:	221f      	movs	r2, #31
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43da      	mvns	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	400a      	ands	r2, r1
 800230e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	4618      	mov	r0, r3
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	3b05      	subs	r3, #5
 800232a:	fa00 f203 	lsl.w	r2, r0, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	635a      	str	r2, [r3, #52]	; 0x34
 8002336:	e04c      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b0c      	cmp	r3, #12
 800233e:	d824      	bhi.n	800238a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	3b23      	subs	r3, #35	; 0x23
 8002352:	221f      	movs	r2, #31
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43da      	mvns	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	400a      	ands	r2, r1
 8002360:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	b29b      	uxth	r3, r3
 800236e:	4618      	mov	r0, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	3b23      	subs	r3, #35	; 0x23
 800237c:	fa00 f203 	lsl.w	r2, r0, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	631a      	str	r2, [r3, #48]	; 0x30
 8002388:	e023      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	3b41      	subs	r3, #65	; 0x41
 800239c:	221f      	movs	r2, #31
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43da      	mvns	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	400a      	ands	r2, r1
 80023aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	4618      	mov	r0, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	3b41      	subs	r3, #65	; 0x41
 80023c6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023d2:	4b29      	ldr	r3, [pc, #164]	; (8002478 <HAL_ADC_ConfigChannel+0x250>)
 80023d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a28      	ldr	r2, [pc, #160]	; (800247c <HAL_ADC_ConfigChannel+0x254>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d10f      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x1d8>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b12      	cmp	r3, #18
 80023e6:	d10b      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a1d      	ldr	r2, [pc, #116]	; (800247c <HAL_ADC_ConfigChannel+0x254>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d12b      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x23a>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a1c      	ldr	r2, [pc, #112]	; (8002480 <HAL_ADC_ConfigChannel+0x258>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d003      	beq.n	800241c <HAL_ADC_ConfigChannel+0x1f4>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b11      	cmp	r3, #17
 800241a:	d122      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a11      	ldr	r2, [pc, #68]	; (8002480 <HAL_ADC_ConfigChannel+0x258>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d111      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800243e:	4b11      	ldr	r3, [pc, #68]	; (8002484 <HAL_ADC_ConfigChannel+0x25c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a11      	ldr	r2, [pc, #68]	; (8002488 <HAL_ADC_ConfigChannel+0x260>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	0c9a      	lsrs	r2, r3, #18
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002454:	e002      	b.n	800245c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	3b01      	subs	r3, #1
 800245a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f9      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40012300 	.word	0x40012300
 800247c:	40012000 	.word	0x40012000
 8002480:	10000012 	.word	0x10000012
 8002484:	20000004 	.word	0x20000004
 8002488:	431bde83 	.word	0x431bde83

0800248c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002494:	4b79      	ldr	r3, [pc, #484]	; (800267c <ADC_Init+0x1f0>)
 8002496:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6859      	ldr	r1, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	021a      	lsls	r2, r3, #8
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6859      	ldr	r1, [r3, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002506:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6899      	ldr	r1, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251e:	4a58      	ldr	r2, [pc, #352]	; (8002680 <ADC_Init+0x1f4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d022      	beq.n	800256a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002532:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6899      	ldr	r1, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002554:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6899      	ldr	r1, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	e00f      	b.n	800258a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002578:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002588:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0202 	bic.w	r2, r2, #2
 8002598:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6899      	ldr	r1, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	7e1b      	ldrb	r3, [r3, #24]
 80025a4:	005a      	lsls	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01b      	beq.n	80025f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6859      	ldr	r1, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	3b01      	subs	r3, #1
 80025e4:	035a      	lsls	r2, r3, #13
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	e007      	b.n	8002600 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800260e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	3b01      	subs	r3, #1
 800261c:	051a      	lsls	r2, r3, #20
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002634:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6899      	ldr	r1, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002642:	025a      	lsls	r2, r3, #9
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800265a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6899      	ldr	r1, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	029a      	lsls	r2, r3, #10
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	609a      	str	r2, [r3, #8]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	40012300 	.word	0x40012300
 8002680:	0f000001 	.word	0x0f000001

08002684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026a0:	4013      	ands	r3, r2
 80026a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026b6:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <__NVIC_SetPriorityGrouping+0x44>)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	60d3      	str	r3, [r2, #12]
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026d0:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <__NVIC_GetPriorityGrouping+0x18>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	f003 0307 	and.w	r3, r3, #7
}
 80026da:	4618      	mov	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	db0b      	blt.n	8002712 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	f003 021f 	and.w	r2, r3, #31
 8002700:	4907      	ldr	r1, [pc, #28]	; (8002720 <__NVIC_EnableIRQ+0x38>)
 8002702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	2001      	movs	r0, #1
 800270a:	fa00 f202 	lsl.w	r2, r0, r2
 800270e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	e000e100 	.word	0xe000e100

08002724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	6039      	str	r1, [r7, #0]
 800272e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002734:	2b00      	cmp	r3, #0
 8002736:	db0a      	blt.n	800274e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	b2da      	uxtb	r2, r3
 800273c:	490c      	ldr	r1, [pc, #48]	; (8002770 <__NVIC_SetPriority+0x4c>)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	0112      	lsls	r2, r2, #4
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	440b      	add	r3, r1
 8002748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800274c:	e00a      	b.n	8002764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	b2da      	uxtb	r2, r3
 8002752:	4908      	ldr	r1, [pc, #32]	; (8002774 <__NVIC_SetPriority+0x50>)
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	3b04      	subs	r3, #4
 800275c:	0112      	lsls	r2, r2, #4
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	440b      	add	r3, r1
 8002762:	761a      	strb	r2, [r3, #24]
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000e100 	.word	0xe000e100
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002778:	b480      	push	{r7}
 800277a:	b089      	sub	sp, #36	; 0x24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f1c3 0307 	rsb	r3, r3, #7
 8002792:	2b04      	cmp	r3, #4
 8002794:	bf28      	it	cs
 8002796:	2304      	movcs	r3, #4
 8002798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3304      	adds	r3, #4
 800279e:	2b06      	cmp	r3, #6
 80027a0:	d902      	bls.n	80027a8 <NVIC_EncodePriority+0x30>
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3b03      	subs	r3, #3
 80027a6:	e000      	b.n	80027aa <NVIC_EncodePriority+0x32>
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43da      	mvns	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	401a      	ands	r2, r3
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ca:	43d9      	mvns	r1, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d0:	4313      	orrs	r3, r2
         );
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3724      	adds	r7, #36	; 0x24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ff4c 	bl	8002684 <__NVIC_SetPriorityGrouping>
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002806:	f7ff ff61 	bl	80026cc <__NVIC_GetPriorityGrouping>
 800280a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	6978      	ldr	r0, [r7, #20]
 8002812:	f7ff ffb1 	bl	8002778 <NVIC_EncodePriority>
 8002816:	4602      	mov	r2, r0
 8002818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff ff80 	bl	8002724 <__NVIC_SetPriority>
}
 8002824:	bf00      	nop
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ff54 	bl	80026e8 <__NVIC_EnableIRQ>
}
 8002840:	bf00      	nop
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002848:	b480      	push	{r7}
 800284a:	b089      	sub	sp, #36	; 0x24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	e159      	b.n	8002b18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002864:	2201      	movs	r2, #1
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	429a      	cmp	r2, r3
 800287e:	f040 8148 	bne.w	8002b12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d00b      	beq.n	80028a2 <HAL_GPIO_Init+0x5a>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d007      	beq.n	80028a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002896:	2b11      	cmp	r3, #17
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b12      	cmp	r3, #18
 80028a0:	d130      	bne.n	8002904 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	2203      	movs	r2, #3
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028d8:	2201      	movs	r2, #1
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 0201 	and.w	r2, r3, #1
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	2203      	movs	r2, #3
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d003      	beq.n	8002944 <HAL_GPIO_Init+0xfc>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b12      	cmp	r3, #18
 8002942:	d123      	bne.n	800298c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	08da      	lsrs	r2, r3, #3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3208      	adds	r2, #8
 800294c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002950:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	220f      	movs	r2, #15
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	08da      	lsrs	r2, r3, #3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3208      	adds	r2, #8
 8002986:	69b9      	ldr	r1, [r7, #24]
 8002988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	2203      	movs	r2, #3
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 0203 	and.w	r2, r3, #3
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 80a2 	beq.w	8002b12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	4b56      	ldr	r3, [pc, #344]	; (8002b2c <HAL_GPIO_Init+0x2e4>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	4a55      	ldr	r2, [pc, #340]	; (8002b2c <HAL_GPIO_Init+0x2e4>)
 80029d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029dc:	6453      	str	r3, [r2, #68]	; 0x44
 80029de:	4b53      	ldr	r3, [pc, #332]	; (8002b2c <HAL_GPIO_Init+0x2e4>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ea:	4a51      	ldr	r2, [pc, #324]	; (8002b30 <HAL_GPIO_Init+0x2e8>)
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	089b      	lsrs	r3, r3, #2
 80029f0:	3302      	adds	r3, #2
 80029f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	220f      	movs	r2, #15
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a48      	ldr	r2, [pc, #288]	; (8002b34 <HAL_GPIO_Init+0x2ec>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d019      	beq.n	8002a4a <HAL_GPIO_Init+0x202>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a47      	ldr	r2, [pc, #284]	; (8002b38 <HAL_GPIO_Init+0x2f0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d013      	beq.n	8002a46 <HAL_GPIO_Init+0x1fe>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a46      	ldr	r2, [pc, #280]	; (8002b3c <HAL_GPIO_Init+0x2f4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00d      	beq.n	8002a42 <HAL_GPIO_Init+0x1fa>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a45      	ldr	r2, [pc, #276]	; (8002b40 <HAL_GPIO_Init+0x2f8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d007      	beq.n	8002a3e <HAL_GPIO_Init+0x1f6>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a44      	ldr	r2, [pc, #272]	; (8002b44 <HAL_GPIO_Init+0x2fc>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d101      	bne.n	8002a3a <HAL_GPIO_Init+0x1f2>
 8002a36:	2304      	movs	r3, #4
 8002a38:	e008      	b.n	8002a4c <HAL_GPIO_Init+0x204>
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	e006      	b.n	8002a4c <HAL_GPIO_Init+0x204>
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e004      	b.n	8002a4c <HAL_GPIO_Init+0x204>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e002      	b.n	8002a4c <HAL_GPIO_Init+0x204>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_GPIO_Init+0x204>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	f002 0203 	and.w	r2, r2, #3
 8002a52:	0092      	lsls	r2, r2, #2
 8002a54:	4093      	lsls	r3, r2
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a5c:	4934      	ldr	r1, [pc, #208]	; (8002b30 <HAL_GPIO_Init+0x2e8>)
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	089b      	lsrs	r3, r3, #2
 8002a62:	3302      	adds	r3, #2
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a6a:	4b37      	ldr	r3, [pc, #220]	; (8002b48 <HAL_GPIO_Init+0x300>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a8e:	4a2e      	ldr	r2, [pc, #184]	; (8002b48 <HAL_GPIO_Init+0x300>)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a94:	4b2c      	ldr	r3, [pc, #176]	; (8002b48 <HAL_GPIO_Init+0x300>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ab8:	4a23      	ldr	r2, [pc, #140]	; (8002b48 <HAL_GPIO_Init+0x300>)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002abe:	4b22      	ldr	r3, [pc, #136]	; (8002b48 <HAL_GPIO_Init+0x300>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ae2:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <HAL_GPIO_Init+0x300>)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae8:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <HAL_GPIO_Init+0x300>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b0c:	4a0e      	ldr	r2, [pc, #56]	; (8002b48 <HAL_GPIO_Init+0x300>)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	3301      	adds	r3, #1
 8002b16:	61fb      	str	r3, [r7, #28]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	2b0f      	cmp	r3, #15
 8002b1c:	f67f aea2 	bls.w	8002864 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b20:	bf00      	nop
 8002b22:	3724      	adds	r7, #36	; 0x24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40013800 	.word	0x40013800
 8002b34:	40020000 	.word	0x40020000
 8002b38:	40020400 	.word	0x40020400
 8002b3c:	40020800 	.word	0x40020800
 8002b40:	40020c00 	.word	0x40020c00
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40013c00 	.word	0x40013c00

08002b4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	887b      	ldrh	r3, [r7, #2]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b64:	2301      	movs	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
 8002b68:	e001      	b.n	8002b6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	807b      	strh	r3, [r7, #2]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b8c:	787b      	ldrb	r3, [r7, #1]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b92:	887a      	ldrh	r2, [r7, #2]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b98:	e003      	b.n	8002ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b9a:	887b      	ldrh	r3, [r7, #2]
 8002b9c:	041a      	lsls	r2, r3, #16
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	619a      	str	r2, [r3, #24]
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e25b      	b.n	800307a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d075      	beq.n	8002cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bce:	4ba3      	ldr	r3, [pc, #652]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d00c      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bda:	4ba0      	ldr	r3, [pc, #640]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d112      	bne.n	8002c0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be6:	4b9d      	ldr	r3, [pc, #628]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf2:	d10b      	bne.n	8002c0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf4:	4b99      	ldr	r3, [pc, #612]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d05b      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x108>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d157      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e236      	b.n	800307a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c14:	d106      	bne.n	8002c24 <HAL_RCC_OscConfig+0x74>
 8002c16:	4b91      	ldr	r3, [pc, #580]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a90      	ldr	r2, [pc, #576]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e01d      	b.n	8002c60 <HAL_RCC_OscConfig+0xb0>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCC_OscConfig+0x98>
 8002c2e:	4b8b      	ldr	r3, [pc, #556]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a8a      	ldr	r2, [pc, #552]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b88      	ldr	r3, [pc, #544]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a87      	ldr	r2, [pc, #540]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e00b      	b.n	8002c60 <HAL_RCC_OscConfig+0xb0>
 8002c48:	4b84      	ldr	r3, [pc, #528]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a83      	ldr	r2, [pc, #524]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b81      	ldr	r3, [pc, #516]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a80      	ldr	r2, [pc, #512]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d013      	beq.n	8002c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7ff f956 	bl	8001f18 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c70:	f7ff f952 	bl	8001f18 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e1fb      	b.n	800307a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	4b76      	ldr	r3, [pc, #472]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0xc0>
 8002c8e:	e014      	b.n	8002cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7ff f942 	bl	8001f18 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c98:	f7ff f93e 	bl	8001f18 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	; 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e1e7      	b.n	800307a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	4b6c      	ldr	r3, [pc, #432]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0xe8>
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d063      	beq.n	8002d8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cc6:	4b65      	ldr	r3, [pc, #404]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00b      	beq.n	8002cea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cd2:	4b62      	ldr	r3, [pc, #392]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d11c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cde:	4b5f      	ldr	r3, [pc, #380]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d116      	bne.n	8002d18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cea:	4b5c      	ldr	r3, [pc, #368]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_RCC_OscConfig+0x152>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e1bb      	b.n	800307a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d02:	4b56      	ldr	r3, [pc, #344]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	4952      	ldr	r1, [pc, #328]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d16:	e03a      	b.n	8002d8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d020      	beq.n	8002d62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d20:	4b4f      	ldr	r3, [pc, #316]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d26:	f7ff f8f7 	bl	8001f18 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7ff f8f3 	bl	8001f18 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e19c      	b.n	800307a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d40:	4b46      	ldr	r3, [pc, #280]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4c:	4b43      	ldr	r3, [pc, #268]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4940      	ldr	r1, [pc, #256]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]
 8002d60:	e015      	b.n	8002d8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d62:	4b3f      	ldr	r3, [pc, #252]	; (8002e60 <HAL_RCC_OscConfig+0x2b0>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7ff f8d6 	bl	8001f18 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d70:	f7ff f8d2 	bl	8001f18 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e17b      	b.n	800307a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d82:	4b36      	ldr	r3, [pc, #216]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d030      	beq.n	8002dfc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d016      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da2:	4b30      	ldr	r3, [pc, #192]	; (8002e64 <HAL_RCC_OscConfig+0x2b4>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da8:	f7ff f8b6 	bl	8001f18 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db0:	f7ff f8b2 	bl	8001f18 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e15b      	b.n	800307a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc2:	4b26      	ldr	r3, [pc, #152]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x200>
 8002dce:	e015      	b.n	8002dfc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd0:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <HAL_RCC_OscConfig+0x2b4>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd6:	f7ff f89f 	bl	8001f18 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dde:	f7ff f89b 	bl	8001f18 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e144      	b.n	800307a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df0:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f0      	bne.n	8002dde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80a0 	beq.w	8002f4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0e:	4b13      	ldr	r3, [pc, #76]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10f      	bne.n	8002e3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	4a0e      	ldr	r2, [pc, #56]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e28:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2a:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <HAL_RCC_OscConfig+0x2ac>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e36:	2301      	movs	r3, #1
 8002e38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_RCC_OscConfig+0x2b8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d121      	bne.n	8002e8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e46:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <HAL_RCC_OscConfig+0x2b8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a07      	ldr	r2, [pc, #28]	; (8002e68 <HAL_RCC_OscConfig+0x2b8>)
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e52:	f7ff f861 	bl	8001f18 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e58:	e011      	b.n	8002e7e <HAL_RCC_OscConfig+0x2ce>
 8002e5a:	bf00      	nop
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	42470000 	.word	0x42470000
 8002e64:	42470e80 	.word	0x42470e80
 8002e68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6c:	f7ff f854 	bl	8001f18 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e0fd      	b.n	800307a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7e:	4b81      	ldr	r3, [pc, #516]	; (8003084 <HAL_RCC_OscConfig+0x4d4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d106      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x2f0>
 8002e92:	4b7d      	ldr	r3, [pc, #500]	; (8003088 <HAL_RCC_OscConfig+0x4d8>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e96:	4a7c      	ldr	r2, [pc, #496]	; (8003088 <HAL_RCC_OscConfig+0x4d8>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9e:	e01c      	b.n	8002eda <HAL_RCC_OscConfig+0x32a>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b05      	cmp	r3, #5
 8002ea6:	d10c      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x312>
 8002ea8:	4b77      	ldr	r3, [pc, #476]	; (8003088 <HAL_RCC_OscConfig+0x4d8>)
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eac:	4a76      	ldr	r2, [pc, #472]	; (8003088 <HAL_RCC_OscConfig+0x4d8>)
 8002eae:	f043 0304 	orr.w	r3, r3, #4
 8002eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb4:	4b74      	ldr	r3, [pc, #464]	; (8003088 <HAL_RCC_OscConfig+0x4d8>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb8:	4a73      	ldr	r2, [pc, #460]	; (8003088 <HAL_RCC_OscConfig+0x4d8>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec0:	e00b      	b.n	8002eda <HAL_RCC_OscConfig+0x32a>
 8002ec2:	4b71      	ldr	r3, [pc, #452]	; (8003088 <HAL_RCC_OscConfig+0x4d8>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec6:	4a70      	ldr	r2, [pc, #448]	; (8003088 <HAL_RCC_OscConfig+0x4d8>)
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ece:	4b6e      	ldr	r3, [pc, #440]	; (8003088 <HAL_RCC_OscConfig+0x4d8>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	4a6d      	ldr	r2, [pc, #436]	; (8003088 <HAL_RCC_OscConfig+0x4d8>)
 8002ed4:	f023 0304 	bic.w	r3, r3, #4
 8002ed8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d015      	beq.n	8002f0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee2:	f7ff f819 	bl	8001f18 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee8:	e00a      	b.n	8002f00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eea:	f7ff f815 	bl	8001f18 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e0bc      	b.n	800307a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f00:	4b61      	ldr	r3, [pc, #388]	; (8003088 <HAL_RCC_OscConfig+0x4d8>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0ee      	beq.n	8002eea <HAL_RCC_OscConfig+0x33a>
 8002f0c:	e014      	b.n	8002f38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0e:	f7ff f803 	bl	8001f18 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f14:	e00a      	b.n	8002f2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f16:	f7fe ffff 	bl	8001f18 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e0a6      	b.n	800307a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2c:	4b56      	ldr	r3, [pc, #344]	; (8003088 <HAL_RCC_OscConfig+0x4d8>)
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1ee      	bne.n	8002f16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f38:	7dfb      	ldrb	r3, [r7, #23]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d105      	bne.n	8002f4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3e:	4b52      	ldr	r3, [pc, #328]	; (8003088 <HAL_RCC_OscConfig+0x4d8>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	4a51      	ldr	r2, [pc, #324]	; (8003088 <HAL_RCC_OscConfig+0x4d8>)
 8002f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 8092 	beq.w	8003078 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f54:	4b4c      	ldr	r3, [pc, #304]	; (8003088 <HAL_RCC_OscConfig+0x4d8>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 030c 	and.w	r3, r3, #12
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d05c      	beq.n	800301a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d141      	bne.n	8002fec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f68:	4b48      	ldr	r3, [pc, #288]	; (800308c <HAL_RCC_OscConfig+0x4dc>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6e:	f7fe ffd3 	bl	8001f18 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f76:	f7fe ffcf 	bl	8001f18 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e078      	b.n	800307a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f88:	4b3f      	ldr	r3, [pc, #252]	; (8003088 <HAL_RCC_OscConfig+0x4d8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f0      	bne.n	8002f76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69da      	ldr	r2, [r3, #28]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	019b      	lsls	r3, r3, #6
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	085b      	lsrs	r3, r3, #1
 8002fac:	3b01      	subs	r3, #1
 8002fae:	041b      	lsls	r3, r3, #16
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb6:	061b      	lsls	r3, r3, #24
 8002fb8:	4933      	ldr	r1, [pc, #204]	; (8003088 <HAL_RCC_OscConfig+0x4d8>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fbe:	4b33      	ldr	r3, [pc, #204]	; (800308c <HAL_RCC_OscConfig+0x4dc>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7fe ffa8 	bl	8001f18 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fcc:	f7fe ffa4 	bl	8001f18 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e04d      	b.n	800307a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fde:	4b2a      	ldr	r3, [pc, #168]	; (8003088 <HAL_RCC_OscConfig+0x4d8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x41c>
 8002fea:	e045      	b.n	8003078 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fec:	4b27      	ldr	r3, [pc, #156]	; (800308c <HAL_RCC_OscConfig+0x4dc>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff2:	f7fe ff91 	bl	8001f18 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ffa:	f7fe ff8d 	bl	8001f18 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e036      	b.n	800307a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300c:	4b1e      	ldr	r3, [pc, #120]	; (8003088 <HAL_RCC_OscConfig+0x4d8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f0      	bne.n	8002ffa <HAL_RCC_OscConfig+0x44a>
 8003018:	e02e      	b.n	8003078 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e029      	b.n	800307a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003026:	4b18      	ldr	r3, [pc, #96]	; (8003088 <HAL_RCC_OscConfig+0x4d8>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	429a      	cmp	r2, r3
 8003038:	d11c      	bne.n	8003074 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d115      	bne.n	8003074 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800304e:	4013      	ands	r3, r2
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003054:	4293      	cmp	r3, r2
 8003056:	d10d      	bne.n	8003074 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d106      	bne.n	8003074 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40007000 	.word	0x40007000
 8003088:	40023800 	.word	0x40023800
 800308c:	42470060 	.word	0x42470060

08003090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0cc      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030a4:	4b68      	ldr	r3, [pc, #416]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d90c      	bls.n	80030cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b2:	4b65      	ldr	r3, [pc, #404]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b63      	ldr	r3, [pc, #396]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0b8      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d020      	beq.n	800311a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e4:	4b59      	ldr	r3, [pc, #356]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	4a58      	ldr	r2, [pc, #352]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030fc:	4b53      	ldr	r3, [pc, #332]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	4a52      	ldr	r2, [pc, #328]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003108:	4b50      	ldr	r3, [pc, #320]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	494d      	ldr	r1, [pc, #308]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	4313      	orrs	r3, r2
 8003118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d044      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d107      	bne.n	800313e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	4b47      	ldr	r3, [pc, #284]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d119      	bne.n	800316e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e07f      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d003      	beq.n	800314e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800314a:	2b03      	cmp	r3, #3
 800314c:	d107      	bne.n	800315e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314e:	4b3f      	ldr	r3, [pc, #252]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d109      	bne.n	800316e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e06f      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315e:	4b3b      	ldr	r3, [pc, #236]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e067      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800316e:	4b37      	ldr	r3, [pc, #220]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f023 0203 	bic.w	r2, r3, #3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	4934      	ldr	r1, [pc, #208]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	4313      	orrs	r3, r2
 800317e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003180:	f7fe feca 	bl	8001f18 <HAL_GetTick>
 8003184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003186:	e00a      	b.n	800319e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003188:	f7fe fec6 	bl	8001f18 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	f241 3288 	movw	r2, #5000	; 0x1388
 8003196:	4293      	cmp	r3, r2
 8003198:	d901      	bls.n	800319e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e04f      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319e:	4b2b      	ldr	r3, [pc, #172]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 020c 	and.w	r2, r3, #12
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d1eb      	bne.n	8003188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031b0:	4b25      	ldr	r3, [pc, #148]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d20c      	bcs.n	80031d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031be:	4b22      	ldr	r3, [pc, #136]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c6:	4b20      	ldr	r3, [pc, #128]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d001      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e032      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e4:	4b19      	ldr	r3, [pc, #100]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4916      	ldr	r1, [pc, #88]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d009      	beq.n	8003216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003202:	4b12      	ldr	r3, [pc, #72]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	490e      	ldr	r1, [pc, #56]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003216:	f000 f821 	bl	800325c <HAL_RCC_GetSysClockFreq>
 800321a:	4601      	mov	r1, r0
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <HAL_RCC_ClockConfig+0x1c0>)
 8003228:	5cd3      	ldrb	r3, [r2, r3]
 800322a:	fa21 f303 	lsr.w	r3, r1, r3
 800322e:	4a09      	ldr	r2, [pc, #36]	; (8003254 <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <HAL_RCC_ClockConfig+0x1c8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe fca6 	bl	8001b88 <HAL_InitTick>

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40023c00 	.word	0x40023c00
 800324c:	40023800 	.word	0x40023800
 8003250:	0800af7c 	.word	0x0800af7c
 8003254:	20000004 	.word	0x20000004
 8003258:	20000008 	.word	0x20000008

0800325c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800325c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	607b      	str	r3, [r7, #4]
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	2300      	movs	r3, #0
 800326c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003272:	4b63      	ldr	r3, [pc, #396]	; (8003400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	2b04      	cmp	r3, #4
 800327c:	d007      	beq.n	800328e <HAL_RCC_GetSysClockFreq+0x32>
 800327e:	2b08      	cmp	r3, #8
 8003280:	d008      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0x38>
 8003282:	2b00      	cmp	r3, #0
 8003284:	f040 80b4 	bne.w	80033f0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003288:	4b5e      	ldr	r3, [pc, #376]	; (8003404 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800328a:	60bb      	str	r3, [r7, #8]
       break;
 800328c:	e0b3      	b.n	80033f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800328e:	4b5e      	ldr	r3, [pc, #376]	; (8003408 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003290:	60bb      	str	r3, [r7, #8]
      break;
 8003292:	e0b0      	b.n	80033f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003294:	4b5a      	ldr	r3, [pc, #360]	; (8003400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800329c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800329e:	4b58      	ldr	r3, [pc, #352]	; (8003400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d04a      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032aa:	4b55      	ldr	r3, [pc, #340]	; (8003400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	099b      	lsrs	r3, r3, #6
 80032b0:	f04f 0400 	mov.w	r4, #0
 80032b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	ea03 0501 	and.w	r5, r3, r1
 80032c0:	ea04 0602 	and.w	r6, r4, r2
 80032c4:	4629      	mov	r1, r5
 80032c6:	4632      	mov	r2, r6
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	f04f 0400 	mov.w	r4, #0
 80032d0:	0154      	lsls	r4, r2, #5
 80032d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032d6:	014b      	lsls	r3, r1, #5
 80032d8:	4619      	mov	r1, r3
 80032da:	4622      	mov	r2, r4
 80032dc:	1b49      	subs	r1, r1, r5
 80032de:	eb62 0206 	sbc.w	r2, r2, r6
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	f04f 0400 	mov.w	r4, #0
 80032ea:	0194      	lsls	r4, r2, #6
 80032ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032f0:	018b      	lsls	r3, r1, #6
 80032f2:	1a5b      	subs	r3, r3, r1
 80032f4:	eb64 0402 	sbc.w	r4, r4, r2
 80032f8:	f04f 0100 	mov.w	r1, #0
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	00e2      	lsls	r2, r4, #3
 8003302:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003306:	00d9      	lsls	r1, r3, #3
 8003308:	460b      	mov	r3, r1
 800330a:	4614      	mov	r4, r2
 800330c:	195b      	adds	r3, r3, r5
 800330e:	eb44 0406 	adc.w	r4, r4, r6
 8003312:	f04f 0100 	mov.w	r1, #0
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	0262      	lsls	r2, r4, #9
 800331c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003320:	0259      	lsls	r1, r3, #9
 8003322:	460b      	mov	r3, r1
 8003324:	4614      	mov	r4, r2
 8003326:	4618      	mov	r0, r3
 8003328:	4621      	mov	r1, r4
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f04f 0400 	mov.w	r4, #0
 8003330:	461a      	mov	r2, r3
 8003332:	4623      	mov	r3, r4
 8003334:	f7fd fcb0 	bl	8000c98 <__aeabi_uldivmod>
 8003338:	4603      	mov	r3, r0
 800333a:	460c      	mov	r4, r1
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	e049      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003340:	4b2f      	ldr	r3, [pc, #188]	; (8003400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	099b      	lsrs	r3, r3, #6
 8003346:	f04f 0400 	mov.w	r4, #0
 800334a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	ea03 0501 	and.w	r5, r3, r1
 8003356:	ea04 0602 	and.w	r6, r4, r2
 800335a:	4629      	mov	r1, r5
 800335c:	4632      	mov	r2, r6
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	f04f 0400 	mov.w	r4, #0
 8003366:	0154      	lsls	r4, r2, #5
 8003368:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800336c:	014b      	lsls	r3, r1, #5
 800336e:	4619      	mov	r1, r3
 8003370:	4622      	mov	r2, r4
 8003372:	1b49      	subs	r1, r1, r5
 8003374:	eb62 0206 	sbc.w	r2, r2, r6
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	f04f 0400 	mov.w	r4, #0
 8003380:	0194      	lsls	r4, r2, #6
 8003382:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003386:	018b      	lsls	r3, r1, #6
 8003388:	1a5b      	subs	r3, r3, r1
 800338a:	eb64 0402 	sbc.w	r4, r4, r2
 800338e:	f04f 0100 	mov.w	r1, #0
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	00e2      	lsls	r2, r4, #3
 8003398:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800339c:	00d9      	lsls	r1, r3, #3
 800339e:	460b      	mov	r3, r1
 80033a0:	4614      	mov	r4, r2
 80033a2:	195b      	adds	r3, r3, r5
 80033a4:	eb44 0406 	adc.w	r4, r4, r6
 80033a8:	f04f 0100 	mov.w	r1, #0
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	02a2      	lsls	r2, r4, #10
 80033b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80033b6:	0299      	lsls	r1, r3, #10
 80033b8:	460b      	mov	r3, r1
 80033ba:	4614      	mov	r4, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	4621      	mov	r1, r4
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f04f 0400 	mov.w	r4, #0
 80033c6:	461a      	mov	r2, r3
 80033c8:	4623      	mov	r3, r4
 80033ca:	f7fd fc65 	bl	8000c98 <__aeabi_uldivmod>
 80033ce:	4603      	mov	r3, r0
 80033d0:	460c      	mov	r4, r1
 80033d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033d4:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	0c1b      	lsrs	r3, r3, #16
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	3301      	adds	r3, #1
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ec:	60bb      	str	r3, [r7, #8]
      break;
 80033ee:	e002      	b.n	80033f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033f0:	4b04      	ldr	r3, [pc, #16]	; (8003404 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80033f2:	60bb      	str	r3, [r7, #8]
      break;
 80033f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033f6:	68bb      	ldr	r3, [r7, #8]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003400:	40023800 	.word	0x40023800
 8003404:	00f42400 	.word	0x00f42400
 8003408:	007a1200 	.word	0x007a1200

0800340c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003410:	4b03      	ldr	r3, [pc, #12]	; (8003420 <HAL_RCC_GetHCLKFreq+0x14>)
 8003412:	681b      	ldr	r3, [r3, #0]
}
 8003414:	4618      	mov	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	20000004 	.word	0x20000004

08003424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003428:	f7ff fff0 	bl	800340c <HAL_RCC_GetHCLKFreq>
 800342c:	4601      	mov	r1, r0
 800342e:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	0a9b      	lsrs	r3, r3, #10
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	4a03      	ldr	r2, [pc, #12]	; (8003448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800343a:	5cd3      	ldrb	r3, [r2, r3]
 800343c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40023800 	.word	0x40023800
 8003448:	0800af8c 	.word	0x0800af8c

0800344c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003450:	f7ff ffdc 	bl	800340c <HAL_RCC_GetHCLKFreq>
 8003454:	4601      	mov	r1, r0
 8003456:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	0b5b      	lsrs	r3, r3, #13
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	4a03      	ldr	r2, [pc, #12]	; (8003470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003462:	5cd3      	ldrb	r3, [r2, r3]
 8003464:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003468:	4618      	mov	r0, r3
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40023800 	.word	0x40023800
 8003470:	0800af8c 	.word	0x0800af8c

08003474 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	220f      	movs	r2, #15
 8003482:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003484:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 0203 	and.w	r2, r3, #3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003490:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800349c:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <HAL_RCC_GetClockConfig+0x5c>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <HAL_RCC_GetClockConfig+0x5c>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	08db      	lsrs	r3, r3, #3
 80034ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034b6:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <HAL_RCC_GetClockConfig+0x60>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 020f 	and.w	r2, r3, #15
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	601a      	str	r2, [r3, #0]
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40023c00 	.word	0x40023c00

080034d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e01d      	b.n	8003526 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d106      	bne.n	8003504 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f815 	bl	800352e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3304      	adds	r3, #4
 8003514:	4619      	mov	r1, r3
 8003516:	4610      	mov	r0, r2
 8003518:	f000 fada 	bl	8003ad0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003542:	b480      	push	{r7}
 8003544:	b085      	sub	sp, #20
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0201 	orr.w	r2, r2, #1
 8003558:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2b06      	cmp	r3, #6
 800356a:	d007      	beq.n	800357c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e01d      	b.n	80035d8 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d106      	bne.n	80035b6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7fe fa53 	bl	8001a5c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2202      	movs	r2, #2
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3304      	adds	r3, #4
 80035c6:	4619      	mov	r1, r3
 80035c8:	4610      	mov	r0, r2
 80035ca:	f000 fa81 	bl	8003ad0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b0c      	cmp	r3, #12
 80035ee:	d841      	bhi.n	8003674 <HAL_TIM_IC_Start_IT+0x94>
 80035f0:	a201      	add	r2, pc, #4	; (adr r2, 80035f8 <HAL_TIM_IC_Start_IT+0x18>)
 80035f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f6:	bf00      	nop
 80035f8:	0800362d 	.word	0x0800362d
 80035fc:	08003675 	.word	0x08003675
 8003600:	08003675 	.word	0x08003675
 8003604:	08003675 	.word	0x08003675
 8003608:	0800363f 	.word	0x0800363f
 800360c:	08003675 	.word	0x08003675
 8003610:	08003675 	.word	0x08003675
 8003614:	08003675 	.word	0x08003675
 8003618:	08003651 	.word	0x08003651
 800361c:	08003675 	.word	0x08003675
 8003620:	08003675 	.word	0x08003675
 8003624:	08003675 	.word	0x08003675
 8003628:	08003663 	.word	0x08003663
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0202 	orr.w	r2, r2, #2
 800363a:	60da      	str	r2, [r3, #12]
      break;
 800363c:	e01b      	b.n	8003676 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0204 	orr.w	r2, r2, #4
 800364c:	60da      	str	r2, [r3, #12]
      break;
 800364e:	e012      	b.n	8003676 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0208 	orr.w	r2, r2, #8
 800365e:	60da      	str	r2, [r3, #12]
      break;
 8003660:	e009      	b.n	8003676 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f042 0210 	orr.w	r2, r2, #16
 8003670:	60da      	str	r2, [r3, #12]
      break;
 8003672:	e000      	b.n	8003676 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8003674:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2201      	movs	r2, #1
 800367c:	6839      	ldr	r1, [r7, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fbc4 	bl	8003e0c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b06      	cmp	r3, #6
 8003694:	d007      	beq.n	80036a6 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0201 	orr.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d122      	bne.n	800370c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d11b      	bne.n	800370c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0202 	mvn.w	r2, #2
 80036dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f9ce 	bl	8003a94 <HAL_TIM_IC_CaptureCallback>
 80036f8:	e005      	b.n	8003706 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f9c0 	bl	8003a80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f9d1 	bl	8003aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b04      	cmp	r3, #4
 8003718:	d122      	bne.n	8003760 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b04      	cmp	r3, #4
 8003726:	d11b      	bne.n	8003760 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0204 	mvn.w	r2, #4
 8003730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2202      	movs	r2, #2
 8003736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f9a4 	bl	8003a94 <HAL_TIM_IC_CaptureCallback>
 800374c:	e005      	b.n	800375a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f996 	bl	8003a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f9a7 	bl	8003aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b08      	cmp	r3, #8
 800376c:	d122      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	2b08      	cmp	r3, #8
 800377a:	d11b      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0208 	mvn.w	r2, #8
 8003784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2204      	movs	r2, #4
 800378a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f97a 	bl	8003a94 <HAL_TIM_IC_CaptureCallback>
 80037a0:	e005      	b.n	80037ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f96c 	bl	8003a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f97d 	bl	8003aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0310 	and.w	r3, r3, #16
 80037be:	2b10      	cmp	r3, #16
 80037c0:	d122      	bne.n	8003808 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b10      	cmp	r3, #16
 80037ce:	d11b      	bne.n	8003808 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0210 	mvn.w	r2, #16
 80037d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2208      	movs	r2, #8
 80037de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f950 	bl	8003a94 <HAL_TIM_IC_CaptureCallback>
 80037f4:	e005      	b.n	8003802 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f942 	bl	8003a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f953 	bl	8003aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b01      	cmp	r3, #1
 8003814:	d10e      	bne.n	8003834 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b01      	cmp	r3, #1
 8003822:	d107      	bne.n	8003834 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0201 	mvn.w	r2, #1
 800382c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fe f88e 	bl	8001950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383e:	2b80      	cmp	r3, #128	; 0x80
 8003840:	d10e      	bne.n	8003860 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384c:	2b80      	cmp	r3, #128	; 0x80
 800384e:	d107      	bne.n	8003860 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fb74 	bl	8003f48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386a:	2b40      	cmp	r3, #64	; 0x40
 800386c:	d10e      	bne.n	800388c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003878:	2b40      	cmp	r3, #64	; 0x40
 800387a:	d107      	bne.n	800388c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f918 	bl	8003abc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	2b20      	cmp	r3, #32
 8003898:	d10e      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d107      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0220 	mvn.w	r2, #32
 80038b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fb3e 	bl	8003f34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038b8:	bf00      	nop
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_TIM_IC_ConfigChannel+0x1a>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e08a      	b.n	80039f0 <HAL_TIM_IC_ConfigChannel+0x130>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2202      	movs	r2, #2
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d11b      	bne.n	8003928 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	6819      	ldr	r1, [r3, #0]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f000 f966 	bl	8003bd0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699a      	ldr	r2, [r3, #24]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 020c 	bic.w	r2, r2, #12
 8003912:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6999      	ldr	r1, [r3, #24]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	619a      	str	r2, [r3, #24]
 8003926:	e05a      	b.n	80039de <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b04      	cmp	r3, #4
 800392c:	d11c      	bne.n	8003968 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	6819      	ldr	r1, [r3, #0]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f000 f9af 	bl	8003ca0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003950:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6999      	ldr	r1, [r3, #24]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	021a      	lsls	r2, r3, #8
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	619a      	str	r2, [r3, #24]
 8003966:	e03a      	b.n	80039de <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b08      	cmp	r3, #8
 800396c:	d11b      	bne.n	80039a6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	6819      	ldr	r1, [r3, #0]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f000 f9cc 	bl	8003d1a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69da      	ldr	r2, [r3, #28]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 020c 	bic.w	r2, r2, #12
 8003990:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69d9      	ldr	r1, [r3, #28]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	61da      	str	r2, [r3, #28]
 80039a4:	e01b      	b.n	80039de <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	6819      	ldr	r1, [r3, #0]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f000 f9ec 	bl	8003d92 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69da      	ldr	r2, [r3, #28]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039c8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69d9      	ldr	r1, [r3, #28]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	021a      	lsls	r2, r3, #8
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b0c      	cmp	r3, #12
 8003a0a:	d831      	bhi.n	8003a70 <HAL_TIM_ReadCapturedValue+0x78>
 8003a0c:	a201      	add	r2, pc, #4	; (adr r2, 8003a14 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003a49 	.word	0x08003a49
 8003a18:	08003a71 	.word	0x08003a71
 8003a1c:	08003a71 	.word	0x08003a71
 8003a20:	08003a71 	.word	0x08003a71
 8003a24:	08003a53 	.word	0x08003a53
 8003a28:	08003a71 	.word	0x08003a71
 8003a2c:	08003a71 	.word	0x08003a71
 8003a30:	08003a71 	.word	0x08003a71
 8003a34:	08003a5d 	.word	0x08003a5d
 8003a38:	08003a71 	.word	0x08003a71
 8003a3c:	08003a71 	.word	0x08003a71
 8003a40:	08003a71 	.word	0x08003a71
 8003a44:	08003a67 	.word	0x08003a67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4e:	60fb      	str	r3, [r7, #12]

      break;
 8003a50:	e00f      	b.n	8003a72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a58:	60fb      	str	r3, [r7, #12]

      break;
 8003a5a:	e00a      	b.n	8003a72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a62:	60fb      	str	r3, [r7, #12]

      break;
 8003a64:	e005      	b.n	8003a72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	60fb      	str	r3, [r7, #12]

      break;
 8003a6e:	e000      	b.n	8003a72 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003a70:	bf00      	nop
  }

  return tmpreg;
 8003a72:	68fb      	ldr	r3, [r7, #12]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a34      	ldr	r2, [pc, #208]	; (8003bb4 <TIM_Base_SetConfig+0xe4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d00f      	beq.n	8003b08 <TIM_Base_SetConfig+0x38>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aee:	d00b      	beq.n	8003b08 <TIM_Base_SetConfig+0x38>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a31      	ldr	r2, [pc, #196]	; (8003bb8 <TIM_Base_SetConfig+0xe8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d007      	beq.n	8003b08 <TIM_Base_SetConfig+0x38>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a30      	ldr	r2, [pc, #192]	; (8003bbc <TIM_Base_SetConfig+0xec>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d003      	beq.n	8003b08 <TIM_Base_SetConfig+0x38>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a2f      	ldr	r2, [pc, #188]	; (8003bc0 <TIM_Base_SetConfig+0xf0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d108      	bne.n	8003b1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a25      	ldr	r2, [pc, #148]	; (8003bb4 <TIM_Base_SetConfig+0xe4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01b      	beq.n	8003b5a <TIM_Base_SetConfig+0x8a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b28:	d017      	beq.n	8003b5a <TIM_Base_SetConfig+0x8a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a22      	ldr	r2, [pc, #136]	; (8003bb8 <TIM_Base_SetConfig+0xe8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <TIM_Base_SetConfig+0x8a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a21      	ldr	r2, [pc, #132]	; (8003bbc <TIM_Base_SetConfig+0xec>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00f      	beq.n	8003b5a <TIM_Base_SetConfig+0x8a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a20      	ldr	r2, [pc, #128]	; (8003bc0 <TIM_Base_SetConfig+0xf0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00b      	beq.n	8003b5a <TIM_Base_SetConfig+0x8a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a1f      	ldr	r2, [pc, #124]	; (8003bc4 <TIM_Base_SetConfig+0xf4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d007      	beq.n	8003b5a <TIM_Base_SetConfig+0x8a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a1e      	ldr	r2, [pc, #120]	; (8003bc8 <TIM_Base_SetConfig+0xf8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d003      	beq.n	8003b5a <TIM_Base_SetConfig+0x8a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a1d      	ldr	r2, [pc, #116]	; (8003bcc <TIM_Base_SetConfig+0xfc>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d108      	bne.n	8003b6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a08      	ldr	r2, [pc, #32]	; (8003bb4 <TIM_Base_SetConfig+0xe4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d103      	bne.n	8003ba0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	615a      	str	r2, [r3, #20]
}
 8003ba6:	bf00      	nop
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40010000 	.word	0x40010000
 8003bb8:	40000400 	.word	0x40000400
 8003bbc:	40000800 	.word	0x40000800
 8003bc0:	40000c00 	.word	0x40000c00
 8003bc4:	40014000 	.word	0x40014000
 8003bc8:	40014400 	.word	0x40014400
 8003bcc:	40014800 	.word	0x40014800

08003bd0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
 8003bdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f023 0201 	bic.w	r2, r3, #1
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4a24      	ldr	r2, [pc, #144]	; (8003c8c <TIM_TI1_SetConfig+0xbc>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d013      	beq.n	8003c26 <TIM_TI1_SetConfig+0x56>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c04:	d00f      	beq.n	8003c26 <TIM_TI1_SetConfig+0x56>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4a21      	ldr	r2, [pc, #132]	; (8003c90 <TIM_TI1_SetConfig+0xc0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00b      	beq.n	8003c26 <TIM_TI1_SetConfig+0x56>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4a20      	ldr	r2, [pc, #128]	; (8003c94 <TIM_TI1_SetConfig+0xc4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d007      	beq.n	8003c26 <TIM_TI1_SetConfig+0x56>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4a1f      	ldr	r2, [pc, #124]	; (8003c98 <TIM_TI1_SetConfig+0xc8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d003      	beq.n	8003c26 <TIM_TI1_SetConfig+0x56>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4a1e      	ldr	r2, [pc, #120]	; (8003c9c <TIM_TI1_SetConfig+0xcc>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d101      	bne.n	8003c2a <TIM_TI1_SetConfig+0x5a>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <TIM_TI1_SetConfig+0x5c>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f023 0303 	bic.w	r3, r3, #3
 8003c36:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	e003      	b.n	8003c4a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f023 030a 	bic.w	r3, r3, #10
 8003c64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f003 030a 	and.w	r3, r3, #10
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	621a      	str	r2, [r3, #32]
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40010000 	.word	0x40010000
 8003c90:	40000400 	.word	0x40000400
 8003c94:	40000800 	.word	0x40000800
 8003c98:	40000c00 	.word	0x40000c00
 8003c9c:	40014000 	.word	0x40014000

08003ca0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	f023 0210 	bic.w	r2, r3, #16
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ccc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	021b      	lsls	r3, r3, #8
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cde:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	031b      	lsls	r3, r3, #12
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cf2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	621a      	str	r2, [r3, #32]
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b087      	sub	sp, #28
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
 8003d26:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f023 0303 	bic.w	r3, r3, #3
 8003d46:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d56:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003d6a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	021b      	lsls	r3, r3, #8
 8003d70:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	621a      	str	r2, [r3, #32]
}
 8003d86:	bf00      	nop
 8003d88:	371c      	adds	r7, #28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b087      	sub	sp, #28
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dbe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	021b      	lsls	r3, r3, #8
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dd0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	031b      	lsls	r3, r3, #12
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003de4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	031b      	lsls	r3, r3, #12
 8003dea:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	621a      	str	r2, [r3, #32]
}
 8003e00:	bf00      	nop
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f003 031f 	and.w	r3, r3, #31
 8003e1e:	2201      	movs	r2, #1
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a1a      	ldr	r2, [r3, #32]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	401a      	ands	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a1a      	ldr	r2, [r3, #32]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	fa01 f303 	lsl.w	r3, r1, r3
 8003e44:	431a      	orrs	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	621a      	str	r2, [r3, #32]
}
 8003e4a:	bf00      	nop
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e050      	b.n	8003f12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1c      	ldr	r2, [pc, #112]	; (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d018      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ebc:	d013      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a18      	ldr	r2, [pc, #96]	; (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00e      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a16      	ldr	r2, [pc, #88]	; (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d009      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a15      	ldr	r2, [pc, #84]	; (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d004      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a13      	ldr	r2, [pc, #76]	; (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d10c      	bne.n	8003f00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40010000 	.word	0x40010000
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800
 8003f2c:	40000c00 	.word	0x40000c00
 8003f30:	40014000 	.word	0x40014000

08003f34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e03f      	b.n	8003fee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fd fdb8 	bl	8001af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2224      	movs	r2, #36	; 0x24
 8003f8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f90b 	bl	80041bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695a      	ldr	r2, [r3, #20]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b088      	sub	sp, #32
 8003ffa:	af02      	add	r7, sp, #8
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	603b      	str	r3, [r7, #0]
 8004002:	4613      	mov	r3, r2
 8004004:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b20      	cmp	r3, #32
 8004014:	f040 8083 	bne.w	800411e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <HAL_UART_Transmit+0x2e>
 800401e:	88fb      	ldrh	r3, [r7, #6]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e07b      	b.n	8004120 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800402e:	2b01      	cmp	r3, #1
 8004030:	d101      	bne.n	8004036 <HAL_UART_Transmit+0x40>
 8004032:	2302      	movs	r3, #2
 8004034:	e074      	b.n	8004120 <HAL_UART_Transmit+0x12a>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2221      	movs	r2, #33	; 0x21
 8004048:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800404c:	f7fd ff64 	bl	8001f18 <HAL_GetTick>
 8004050:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	88fa      	ldrh	r2, [r7, #6]
 8004056:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	88fa      	ldrh	r2, [r7, #6]
 800405c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004066:	e042      	b.n	80040ee <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800406c:	b29b      	uxth	r3, r3
 800406e:	3b01      	subs	r3, #1
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407e:	d122      	bne.n	80040c6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2200      	movs	r2, #0
 8004088:	2180      	movs	r1, #128	; 0x80
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 f84c 	bl	8004128 <UART_WaitOnFlagUntilTimeout>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e042      	b.n	8004120 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040ac:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d103      	bne.n	80040be <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	3302      	adds	r3, #2
 80040ba:	60bb      	str	r3, [r7, #8]
 80040bc:	e017      	b.n	80040ee <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	3301      	adds	r3, #1
 80040c2:	60bb      	str	r3, [r7, #8]
 80040c4:	e013      	b.n	80040ee <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2200      	movs	r2, #0
 80040ce:	2180      	movs	r1, #128	; 0x80
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f829 	bl	8004128 <UART_WaitOnFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e01f      	b.n	8004120 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	60ba      	str	r2, [r7, #8]
 80040e6:	781a      	ldrb	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1b7      	bne.n	8004068 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2200      	movs	r2, #0
 8004100:	2140      	movs	r1, #64	; 0x40
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 f810 	bl	8004128 <UART_WaitOnFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e006      	b.n	8004120 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	e000      	b.n	8004120 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800411e:	2302      	movs	r3, #2
  }
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	4613      	mov	r3, r2
 8004136:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004138:	e02c      	b.n	8004194 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004140:	d028      	beq.n	8004194 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d007      	beq.n	8004158 <UART_WaitOnFlagUntilTimeout+0x30>
 8004148:	f7fd fee6 	bl	8001f18 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	429a      	cmp	r2, r3
 8004156:	d21d      	bcs.n	8004194 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004166:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695a      	ldr	r2, [r3, #20]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0201 	bic.w	r2, r2, #1
 8004176:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e00f      	b.n	80041b4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	4013      	ands	r3, r2
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	bf0c      	ite	eq
 80041a4:	2301      	moveq	r3, #1
 80041a6:	2300      	movne	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	461a      	mov	r2, r3
 80041ac:	79fb      	ldrb	r3, [r7, #7]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d0c3      	beq.n	800413a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c0:	b085      	sub	sp, #20
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80041fe:	f023 030c 	bic.w	r3, r3, #12
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	68f9      	ldr	r1, [r7, #12]
 8004208:	430b      	orrs	r3, r1
 800420a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699a      	ldr	r2, [r3, #24]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800422a:	f040 818b 	bne.w	8004544 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4ac1      	ldr	r2, [pc, #772]	; (8004538 <UART_SetConfig+0x37c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d005      	beq.n	8004244 <UART_SetConfig+0x88>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4abf      	ldr	r2, [pc, #764]	; (800453c <UART_SetConfig+0x380>)
 800423e:	4293      	cmp	r3, r2
 8004240:	f040 80bd 	bne.w	80043be <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004244:	f7ff f902 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8004248:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	461d      	mov	r5, r3
 800424e:	f04f 0600 	mov.w	r6, #0
 8004252:	46a8      	mov	r8, r5
 8004254:	46b1      	mov	r9, r6
 8004256:	eb18 0308 	adds.w	r3, r8, r8
 800425a:	eb49 0409 	adc.w	r4, r9, r9
 800425e:	4698      	mov	r8, r3
 8004260:	46a1      	mov	r9, r4
 8004262:	eb18 0805 	adds.w	r8, r8, r5
 8004266:	eb49 0906 	adc.w	r9, r9, r6
 800426a:	f04f 0100 	mov.w	r1, #0
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004276:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800427a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800427e:	4688      	mov	r8, r1
 8004280:	4691      	mov	r9, r2
 8004282:	eb18 0005 	adds.w	r0, r8, r5
 8004286:	eb49 0106 	adc.w	r1, r9, r6
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	461d      	mov	r5, r3
 8004290:	f04f 0600 	mov.w	r6, #0
 8004294:	196b      	adds	r3, r5, r5
 8004296:	eb46 0406 	adc.w	r4, r6, r6
 800429a:	461a      	mov	r2, r3
 800429c:	4623      	mov	r3, r4
 800429e:	f7fc fcfb 	bl	8000c98 <__aeabi_uldivmod>
 80042a2:	4603      	mov	r3, r0
 80042a4:	460c      	mov	r4, r1
 80042a6:	461a      	mov	r2, r3
 80042a8:	4ba5      	ldr	r3, [pc, #660]	; (8004540 <UART_SetConfig+0x384>)
 80042aa:	fba3 2302 	umull	r2, r3, r3, r2
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	461d      	mov	r5, r3
 80042b8:	f04f 0600 	mov.w	r6, #0
 80042bc:	46a9      	mov	r9, r5
 80042be:	46b2      	mov	sl, r6
 80042c0:	eb19 0309 	adds.w	r3, r9, r9
 80042c4:	eb4a 040a 	adc.w	r4, sl, sl
 80042c8:	4699      	mov	r9, r3
 80042ca:	46a2      	mov	sl, r4
 80042cc:	eb19 0905 	adds.w	r9, r9, r5
 80042d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80042d4:	f04f 0100 	mov.w	r1, #0
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042e8:	4689      	mov	r9, r1
 80042ea:	4692      	mov	sl, r2
 80042ec:	eb19 0005 	adds.w	r0, r9, r5
 80042f0:	eb4a 0106 	adc.w	r1, sl, r6
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	461d      	mov	r5, r3
 80042fa:	f04f 0600 	mov.w	r6, #0
 80042fe:	196b      	adds	r3, r5, r5
 8004300:	eb46 0406 	adc.w	r4, r6, r6
 8004304:	461a      	mov	r2, r3
 8004306:	4623      	mov	r3, r4
 8004308:	f7fc fcc6 	bl	8000c98 <__aeabi_uldivmod>
 800430c:	4603      	mov	r3, r0
 800430e:	460c      	mov	r4, r1
 8004310:	461a      	mov	r2, r3
 8004312:	4b8b      	ldr	r3, [pc, #556]	; (8004540 <UART_SetConfig+0x384>)
 8004314:	fba3 1302 	umull	r1, r3, r3, r2
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	2164      	movs	r1, #100	; 0x64
 800431c:	fb01 f303 	mul.w	r3, r1, r3
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	3332      	adds	r3, #50	; 0x32
 8004326:	4a86      	ldr	r2, [pc, #536]	; (8004540 <UART_SetConfig+0x384>)
 8004328:	fba2 2303 	umull	r2, r3, r2, r3
 800432c:	095b      	lsrs	r3, r3, #5
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004334:	4498      	add	r8, r3
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	461d      	mov	r5, r3
 800433a:	f04f 0600 	mov.w	r6, #0
 800433e:	46a9      	mov	r9, r5
 8004340:	46b2      	mov	sl, r6
 8004342:	eb19 0309 	adds.w	r3, r9, r9
 8004346:	eb4a 040a 	adc.w	r4, sl, sl
 800434a:	4699      	mov	r9, r3
 800434c:	46a2      	mov	sl, r4
 800434e:	eb19 0905 	adds.w	r9, r9, r5
 8004352:	eb4a 0a06 	adc.w	sl, sl, r6
 8004356:	f04f 0100 	mov.w	r1, #0
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004362:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004366:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800436a:	4689      	mov	r9, r1
 800436c:	4692      	mov	sl, r2
 800436e:	eb19 0005 	adds.w	r0, r9, r5
 8004372:	eb4a 0106 	adc.w	r1, sl, r6
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	461d      	mov	r5, r3
 800437c:	f04f 0600 	mov.w	r6, #0
 8004380:	196b      	adds	r3, r5, r5
 8004382:	eb46 0406 	adc.w	r4, r6, r6
 8004386:	461a      	mov	r2, r3
 8004388:	4623      	mov	r3, r4
 800438a:	f7fc fc85 	bl	8000c98 <__aeabi_uldivmod>
 800438e:	4603      	mov	r3, r0
 8004390:	460c      	mov	r4, r1
 8004392:	461a      	mov	r2, r3
 8004394:	4b6a      	ldr	r3, [pc, #424]	; (8004540 <UART_SetConfig+0x384>)
 8004396:	fba3 1302 	umull	r1, r3, r3, r2
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	2164      	movs	r1, #100	; 0x64
 800439e:	fb01 f303 	mul.w	r3, r1, r3
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	3332      	adds	r3, #50	; 0x32
 80043a8:	4a65      	ldr	r2, [pc, #404]	; (8004540 <UART_SetConfig+0x384>)
 80043aa:	fba2 2303 	umull	r2, r3, r2, r3
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	f003 0207 	and.w	r2, r3, #7
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4442      	add	r2, r8
 80043ba:	609a      	str	r2, [r3, #8]
 80043bc:	e26f      	b.n	800489e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043be:	f7ff f831 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 80043c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	461d      	mov	r5, r3
 80043c8:	f04f 0600 	mov.w	r6, #0
 80043cc:	46a8      	mov	r8, r5
 80043ce:	46b1      	mov	r9, r6
 80043d0:	eb18 0308 	adds.w	r3, r8, r8
 80043d4:	eb49 0409 	adc.w	r4, r9, r9
 80043d8:	4698      	mov	r8, r3
 80043da:	46a1      	mov	r9, r4
 80043dc:	eb18 0805 	adds.w	r8, r8, r5
 80043e0:	eb49 0906 	adc.w	r9, r9, r6
 80043e4:	f04f 0100 	mov.w	r1, #0
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043f8:	4688      	mov	r8, r1
 80043fa:	4691      	mov	r9, r2
 80043fc:	eb18 0005 	adds.w	r0, r8, r5
 8004400:	eb49 0106 	adc.w	r1, r9, r6
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	461d      	mov	r5, r3
 800440a:	f04f 0600 	mov.w	r6, #0
 800440e:	196b      	adds	r3, r5, r5
 8004410:	eb46 0406 	adc.w	r4, r6, r6
 8004414:	461a      	mov	r2, r3
 8004416:	4623      	mov	r3, r4
 8004418:	f7fc fc3e 	bl	8000c98 <__aeabi_uldivmod>
 800441c:	4603      	mov	r3, r0
 800441e:	460c      	mov	r4, r1
 8004420:	461a      	mov	r2, r3
 8004422:	4b47      	ldr	r3, [pc, #284]	; (8004540 <UART_SetConfig+0x384>)
 8004424:	fba3 2302 	umull	r2, r3, r3, r2
 8004428:	095b      	lsrs	r3, r3, #5
 800442a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	461d      	mov	r5, r3
 8004432:	f04f 0600 	mov.w	r6, #0
 8004436:	46a9      	mov	r9, r5
 8004438:	46b2      	mov	sl, r6
 800443a:	eb19 0309 	adds.w	r3, r9, r9
 800443e:	eb4a 040a 	adc.w	r4, sl, sl
 8004442:	4699      	mov	r9, r3
 8004444:	46a2      	mov	sl, r4
 8004446:	eb19 0905 	adds.w	r9, r9, r5
 800444a:	eb4a 0a06 	adc.w	sl, sl, r6
 800444e:	f04f 0100 	mov.w	r1, #0
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800445a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800445e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004462:	4689      	mov	r9, r1
 8004464:	4692      	mov	sl, r2
 8004466:	eb19 0005 	adds.w	r0, r9, r5
 800446a:	eb4a 0106 	adc.w	r1, sl, r6
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	461d      	mov	r5, r3
 8004474:	f04f 0600 	mov.w	r6, #0
 8004478:	196b      	adds	r3, r5, r5
 800447a:	eb46 0406 	adc.w	r4, r6, r6
 800447e:	461a      	mov	r2, r3
 8004480:	4623      	mov	r3, r4
 8004482:	f7fc fc09 	bl	8000c98 <__aeabi_uldivmod>
 8004486:	4603      	mov	r3, r0
 8004488:	460c      	mov	r4, r1
 800448a:	461a      	mov	r2, r3
 800448c:	4b2c      	ldr	r3, [pc, #176]	; (8004540 <UART_SetConfig+0x384>)
 800448e:	fba3 1302 	umull	r1, r3, r3, r2
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	2164      	movs	r1, #100	; 0x64
 8004496:	fb01 f303 	mul.w	r3, r1, r3
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	3332      	adds	r3, #50	; 0x32
 80044a0:	4a27      	ldr	r2, [pc, #156]	; (8004540 <UART_SetConfig+0x384>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044ae:	4498      	add	r8, r3
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	461d      	mov	r5, r3
 80044b4:	f04f 0600 	mov.w	r6, #0
 80044b8:	46a9      	mov	r9, r5
 80044ba:	46b2      	mov	sl, r6
 80044bc:	eb19 0309 	adds.w	r3, r9, r9
 80044c0:	eb4a 040a 	adc.w	r4, sl, sl
 80044c4:	4699      	mov	r9, r3
 80044c6:	46a2      	mov	sl, r4
 80044c8:	eb19 0905 	adds.w	r9, r9, r5
 80044cc:	eb4a 0a06 	adc.w	sl, sl, r6
 80044d0:	f04f 0100 	mov.w	r1, #0
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044e4:	4689      	mov	r9, r1
 80044e6:	4692      	mov	sl, r2
 80044e8:	eb19 0005 	adds.w	r0, r9, r5
 80044ec:	eb4a 0106 	adc.w	r1, sl, r6
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	461d      	mov	r5, r3
 80044f6:	f04f 0600 	mov.w	r6, #0
 80044fa:	196b      	adds	r3, r5, r5
 80044fc:	eb46 0406 	adc.w	r4, r6, r6
 8004500:	461a      	mov	r2, r3
 8004502:	4623      	mov	r3, r4
 8004504:	f7fc fbc8 	bl	8000c98 <__aeabi_uldivmod>
 8004508:	4603      	mov	r3, r0
 800450a:	460c      	mov	r4, r1
 800450c:	461a      	mov	r2, r3
 800450e:	4b0c      	ldr	r3, [pc, #48]	; (8004540 <UART_SetConfig+0x384>)
 8004510:	fba3 1302 	umull	r1, r3, r3, r2
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	2164      	movs	r1, #100	; 0x64
 8004518:	fb01 f303 	mul.w	r3, r1, r3
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	3332      	adds	r3, #50	; 0x32
 8004522:	4a07      	ldr	r2, [pc, #28]	; (8004540 <UART_SetConfig+0x384>)
 8004524:	fba2 2303 	umull	r2, r3, r2, r3
 8004528:	095b      	lsrs	r3, r3, #5
 800452a:	f003 0207 	and.w	r2, r3, #7
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4442      	add	r2, r8
 8004534:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004536:	e1b2      	b.n	800489e <UART_SetConfig+0x6e2>
 8004538:	40011000 	.word	0x40011000
 800453c:	40011400 	.word	0x40011400
 8004540:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4ad7      	ldr	r2, [pc, #860]	; (80048a8 <UART_SetConfig+0x6ec>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d005      	beq.n	800455a <UART_SetConfig+0x39e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4ad6      	ldr	r2, [pc, #856]	; (80048ac <UART_SetConfig+0x6f0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	f040 80d1 	bne.w	80046fc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800455a:	f7fe ff77 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 800455e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	469a      	mov	sl, r3
 8004564:	f04f 0b00 	mov.w	fp, #0
 8004568:	46d0      	mov	r8, sl
 800456a:	46d9      	mov	r9, fp
 800456c:	eb18 0308 	adds.w	r3, r8, r8
 8004570:	eb49 0409 	adc.w	r4, r9, r9
 8004574:	4698      	mov	r8, r3
 8004576:	46a1      	mov	r9, r4
 8004578:	eb18 080a 	adds.w	r8, r8, sl
 800457c:	eb49 090b 	adc.w	r9, r9, fp
 8004580:	f04f 0100 	mov.w	r1, #0
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800458c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004590:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004594:	4688      	mov	r8, r1
 8004596:	4691      	mov	r9, r2
 8004598:	eb1a 0508 	adds.w	r5, sl, r8
 800459c:	eb4b 0609 	adc.w	r6, fp, r9
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	4619      	mov	r1, r3
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	f04f 0300 	mov.w	r3, #0
 80045ae:	f04f 0400 	mov.w	r4, #0
 80045b2:	0094      	lsls	r4, r2, #2
 80045b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045b8:	008b      	lsls	r3, r1, #2
 80045ba:	461a      	mov	r2, r3
 80045bc:	4623      	mov	r3, r4
 80045be:	4628      	mov	r0, r5
 80045c0:	4631      	mov	r1, r6
 80045c2:	f7fc fb69 	bl	8000c98 <__aeabi_uldivmod>
 80045c6:	4603      	mov	r3, r0
 80045c8:	460c      	mov	r4, r1
 80045ca:	461a      	mov	r2, r3
 80045cc:	4bb8      	ldr	r3, [pc, #736]	; (80048b0 <UART_SetConfig+0x6f4>)
 80045ce:	fba3 2302 	umull	r2, r3, r3, r2
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	469b      	mov	fp, r3
 80045dc:	f04f 0c00 	mov.w	ip, #0
 80045e0:	46d9      	mov	r9, fp
 80045e2:	46e2      	mov	sl, ip
 80045e4:	eb19 0309 	adds.w	r3, r9, r9
 80045e8:	eb4a 040a 	adc.w	r4, sl, sl
 80045ec:	4699      	mov	r9, r3
 80045ee:	46a2      	mov	sl, r4
 80045f0:	eb19 090b 	adds.w	r9, r9, fp
 80045f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045f8:	f04f 0100 	mov.w	r1, #0
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004604:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004608:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800460c:	4689      	mov	r9, r1
 800460e:	4692      	mov	sl, r2
 8004610:	eb1b 0509 	adds.w	r5, fp, r9
 8004614:	eb4c 060a 	adc.w	r6, ip, sl
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	4619      	mov	r1, r3
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	f04f 0400 	mov.w	r4, #0
 800462a:	0094      	lsls	r4, r2, #2
 800462c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004630:	008b      	lsls	r3, r1, #2
 8004632:	461a      	mov	r2, r3
 8004634:	4623      	mov	r3, r4
 8004636:	4628      	mov	r0, r5
 8004638:	4631      	mov	r1, r6
 800463a:	f7fc fb2d 	bl	8000c98 <__aeabi_uldivmod>
 800463e:	4603      	mov	r3, r0
 8004640:	460c      	mov	r4, r1
 8004642:	461a      	mov	r2, r3
 8004644:	4b9a      	ldr	r3, [pc, #616]	; (80048b0 <UART_SetConfig+0x6f4>)
 8004646:	fba3 1302 	umull	r1, r3, r3, r2
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	2164      	movs	r1, #100	; 0x64
 800464e:	fb01 f303 	mul.w	r3, r1, r3
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	3332      	adds	r3, #50	; 0x32
 8004658:	4a95      	ldr	r2, [pc, #596]	; (80048b0 <UART_SetConfig+0x6f4>)
 800465a:	fba2 2303 	umull	r2, r3, r2, r3
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004664:	4498      	add	r8, r3
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	469b      	mov	fp, r3
 800466a:	f04f 0c00 	mov.w	ip, #0
 800466e:	46d9      	mov	r9, fp
 8004670:	46e2      	mov	sl, ip
 8004672:	eb19 0309 	adds.w	r3, r9, r9
 8004676:	eb4a 040a 	adc.w	r4, sl, sl
 800467a:	4699      	mov	r9, r3
 800467c:	46a2      	mov	sl, r4
 800467e:	eb19 090b 	adds.w	r9, r9, fp
 8004682:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004686:	f04f 0100 	mov.w	r1, #0
 800468a:	f04f 0200 	mov.w	r2, #0
 800468e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004692:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004696:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800469a:	4689      	mov	r9, r1
 800469c:	4692      	mov	sl, r2
 800469e:	eb1b 0509 	adds.w	r5, fp, r9
 80046a2:	eb4c 060a 	adc.w	r6, ip, sl
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	4619      	mov	r1, r3
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	f04f 0400 	mov.w	r4, #0
 80046b8:	0094      	lsls	r4, r2, #2
 80046ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046be:	008b      	lsls	r3, r1, #2
 80046c0:	461a      	mov	r2, r3
 80046c2:	4623      	mov	r3, r4
 80046c4:	4628      	mov	r0, r5
 80046c6:	4631      	mov	r1, r6
 80046c8:	f7fc fae6 	bl	8000c98 <__aeabi_uldivmod>
 80046cc:	4603      	mov	r3, r0
 80046ce:	460c      	mov	r4, r1
 80046d0:	461a      	mov	r2, r3
 80046d2:	4b77      	ldr	r3, [pc, #476]	; (80048b0 <UART_SetConfig+0x6f4>)
 80046d4:	fba3 1302 	umull	r1, r3, r3, r2
 80046d8:	095b      	lsrs	r3, r3, #5
 80046da:	2164      	movs	r1, #100	; 0x64
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	3332      	adds	r3, #50	; 0x32
 80046e6:	4a72      	ldr	r2, [pc, #456]	; (80048b0 <UART_SetConfig+0x6f4>)
 80046e8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	f003 020f 	and.w	r2, r3, #15
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4442      	add	r2, r8
 80046f8:	609a      	str	r2, [r3, #8]
 80046fa:	e0d0      	b.n	800489e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80046fc:	f7fe fe92 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 8004700:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	469a      	mov	sl, r3
 8004706:	f04f 0b00 	mov.w	fp, #0
 800470a:	46d0      	mov	r8, sl
 800470c:	46d9      	mov	r9, fp
 800470e:	eb18 0308 	adds.w	r3, r8, r8
 8004712:	eb49 0409 	adc.w	r4, r9, r9
 8004716:	4698      	mov	r8, r3
 8004718:	46a1      	mov	r9, r4
 800471a:	eb18 080a 	adds.w	r8, r8, sl
 800471e:	eb49 090b 	adc.w	r9, r9, fp
 8004722:	f04f 0100 	mov.w	r1, #0
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800472e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004732:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004736:	4688      	mov	r8, r1
 8004738:	4691      	mov	r9, r2
 800473a:	eb1a 0508 	adds.w	r5, sl, r8
 800473e:	eb4b 0609 	adc.w	r6, fp, r9
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	4619      	mov	r1, r3
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	f04f 0400 	mov.w	r4, #0
 8004754:	0094      	lsls	r4, r2, #2
 8004756:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800475a:	008b      	lsls	r3, r1, #2
 800475c:	461a      	mov	r2, r3
 800475e:	4623      	mov	r3, r4
 8004760:	4628      	mov	r0, r5
 8004762:	4631      	mov	r1, r6
 8004764:	f7fc fa98 	bl	8000c98 <__aeabi_uldivmod>
 8004768:	4603      	mov	r3, r0
 800476a:	460c      	mov	r4, r1
 800476c:	461a      	mov	r2, r3
 800476e:	4b50      	ldr	r3, [pc, #320]	; (80048b0 <UART_SetConfig+0x6f4>)
 8004770:	fba3 2302 	umull	r2, r3, r3, r2
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	469b      	mov	fp, r3
 800477e:	f04f 0c00 	mov.w	ip, #0
 8004782:	46d9      	mov	r9, fp
 8004784:	46e2      	mov	sl, ip
 8004786:	eb19 0309 	adds.w	r3, r9, r9
 800478a:	eb4a 040a 	adc.w	r4, sl, sl
 800478e:	4699      	mov	r9, r3
 8004790:	46a2      	mov	sl, r4
 8004792:	eb19 090b 	adds.w	r9, r9, fp
 8004796:	eb4a 0a0c 	adc.w	sl, sl, ip
 800479a:	f04f 0100 	mov.w	r1, #0
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047ae:	4689      	mov	r9, r1
 80047b0:	4692      	mov	sl, r2
 80047b2:	eb1b 0509 	adds.w	r5, fp, r9
 80047b6:	eb4c 060a 	adc.w	r6, ip, sl
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	4619      	mov	r1, r3
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	f04f 0400 	mov.w	r4, #0
 80047cc:	0094      	lsls	r4, r2, #2
 80047ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047d2:	008b      	lsls	r3, r1, #2
 80047d4:	461a      	mov	r2, r3
 80047d6:	4623      	mov	r3, r4
 80047d8:	4628      	mov	r0, r5
 80047da:	4631      	mov	r1, r6
 80047dc:	f7fc fa5c 	bl	8000c98 <__aeabi_uldivmod>
 80047e0:	4603      	mov	r3, r0
 80047e2:	460c      	mov	r4, r1
 80047e4:	461a      	mov	r2, r3
 80047e6:	4b32      	ldr	r3, [pc, #200]	; (80048b0 <UART_SetConfig+0x6f4>)
 80047e8:	fba3 1302 	umull	r1, r3, r3, r2
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	2164      	movs	r1, #100	; 0x64
 80047f0:	fb01 f303 	mul.w	r3, r1, r3
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	3332      	adds	r3, #50	; 0x32
 80047fa:	4a2d      	ldr	r2, [pc, #180]	; (80048b0 <UART_SetConfig+0x6f4>)
 80047fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004806:	4498      	add	r8, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	469b      	mov	fp, r3
 800480c:	f04f 0c00 	mov.w	ip, #0
 8004810:	46d9      	mov	r9, fp
 8004812:	46e2      	mov	sl, ip
 8004814:	eb19 0309 	adds.w	r3, r9, r9
 8004818:	eb4a 040a 	adc.w	r4, sl, sl
 800481c:	4699      	mov	r9, r3
 800481e:	46a2      	mov	sl, r4
 8004820:	eb19 090b 	adds.w	r9, r9, fp
 8004824:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004828:	f04f 0100 	mov.w	r1, #0
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004834:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004838:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800483c:	4689      	mov	r9, r1
 800483e:	4692      	mov	sl, r2
 8004840:	eb1b 0509 	adds.w	r5, fp, r9
 8004844:	eb4c 060a 	adc.w	r6, ip, sl
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	4619      	mov	r1, r3
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	f04f 0400 	mov.w	r4, #0
 800485a:	0094      	lsls	r4, r2, #2
 800485c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004860:	008b      	lsls	r3, r1, #2
 8004862:	461a      	mov	r2, r3
 8004864:	4623      	mov	r3, r4
 8004866:	4628      	mov	r0, r5
 8004868:	4631      	mov	r1, r6
 800486a:	f7fc fa15 	bl	8000c98 <__aeabi_uldivmod>
 800486e:	4603      	mov	r3, r0
 8004870:	460c      	mov	r4, r1
 8004872:	461a      	mov	r2, r3
 8004874:	4b0e      	ldr	r3, [pc, #56]	; (80048b0 <UART_SetConfig+0x6f4>)
 8004876:	fba3 1302 	umull	r1, r3, r3, r2
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	2164      	movs	r1, #100	; 0x64
 800487e:	fb01 f303 	mul.w	r3, r1, r3
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	011b      	lsls	r3, r3, #4
 8004886:	3332      	adds	r3, #50	; 0x32
 8004888:	4a09      	ldr	r2, [pc, #36]	; (80048b0 <UART_SetConfig+0x6f4>)
 800488a:	fba2 2303 	umull	r2, r3, r2, r3
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	f003 020f 	and.w	r2, r3, #15
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4442      	add	r2, r8
 800489a:	609a      	str	r2, [r3, #8]
}
 800489c:	e7ff      	b.n	800489e <UART_SetConfig+0x6e2>
 800489e:	bf00      	nop
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a8:	40011000 	.word	0x40011000
 80048ac:	40011400 	.word	0x40011400
 80048b0:	51eb851f 	.word	0x51eb851f

080048b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80048b8:	bf00      	nop
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
	...

080048c4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048ca:	f3ef 8305 	mrs	r3, IPSR
 80048ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80048d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10f      	bne.n	80048f6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d6:	f3ef 8310 	mrs	r3, PRIMASK
 80048da:	607b      	str	r3, [r7, #4]
  return(result);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d105      	bne.n	80048ee <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048e2:	f3ef 8311 	mrs	r3, BASEPRI
 80048e6:	603b      	str	r3, [r7, #0]
  return(result);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d007      	beq.n	80048fe <osKernelInitialize+0x3a>
 80048ee:	4b0e      	ldr	r3, [pc, #56]	; (8004928 <osKernelInitialize+0x64>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d103      	bne.n	80048fe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80048f6:	f06f 0305 	mvn.w	r3, #5
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	e00c      	b.n	8004918 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80048fe:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <osKernelInitialize+0x64>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d105      	bne.n	8004912 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004906:	4b08      	ldr	r3, [pc, #32]	; (8004928 <osKernelInitialize+0x64>)
 8004908:	2201      	movs	r2, #1
 800490a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800490c:	2300      	movs	r3, #0
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	e002      	b.n	8004918 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004916:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004918:	68fb      	ldr	r3, [r7, #12]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	20000224 	.word	0x20000224

0800492c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004932:	f3ef 8305 	mrs	r3, IPSR
 8004936:	60bb      	str	r3, [r7, #8]
  return(result);
 8004938:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10f      	bne.n	800495e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800493e:	f3ef 8310 	mrs	r3, PRIMASK
 8004942:	607b      	str	r3, [r7, #4]
  return(result);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d105      	bne.n	8004956 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800494a:	f3ef 8311 	mrs	r3, BASEPRI
 800494e:	603b      	str	r3, [r7, #0]
  return(result);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d007      	beq.n	8004966 <osKernelStart+0x3a>
 8004956:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <osKernelStart+0x68>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b02      	cmp	r3, #2
 800495c:	d103      	bne.n	8004966 <osKernelStart+0x3a>
    stat = osErrorISR;
 800495e:	f06f 0305 	mvn.w	r3, #5
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	e010      	b.n	8004988 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004966:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <osKernelStart+0x68>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d109      	bne.n	8004982 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800496e:	f7ff ffa1 	bl	80048b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004972:	4b08      	ldr	r3, [pc, #32]	; (8004994 <osKernelStart+0x68>)
 8004974:	2202      	movs	r2, #2
 8004976:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004978:	f001 f870 	bl	8005a5c <vTaskStartScheduler>
      stat = osOK;
 800497c:	2300      	movs	r3, #0
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	e002      	b.n	8004988 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004986:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004988:	68fb      	ldr	r3, [r7, #12]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20000224 	.word	0x20000224

08004998 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004998:	b580      	push	{r7, lr}
 800499a:	b090      	sub	sp, #64	; 0x40
 800499c:	af04      	add	r7, sp, #16
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049a8:	f3ef 8305 	mrs	r3, IPSR
 80049ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80049ae:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f040 808f 	bne.w	8004ad4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049b6:	f3ef 8310 	mrs	r3, PRIMASK
 80049ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d105      	bne.n	80049ce <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049c2:	f3ef 8311 	mrs	r3, BASEPRI
 80049c6:	617b      	str	r3, [r7, #20]
  return(result);
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <osThreadNew+0x3e>
 80049ce:	4b44      	ldr	r3, [pc, #272]	; (8004ae0 <osThreadNew+0x148>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d07e      	beq.n	8004ad4 <osThreadNew+0x13c>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d07b      	beq.n	8004ad4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80049dc:	2380      	movs	r3, #128	; 0x80
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80049e0:	2318      	movs	r3, #24
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80049e4:	2300      	movs	r3, #0
 80049e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80049e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049ec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d045      	beq.n	8004a80 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <osThreadNew+0x6a>
        name = attr->name;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d008      	beq.n	8004a28 <osThreadNew+0x90>
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	2b38      	cmp	r3, #56	; 0x38
 8004a1a:	d805      	bhi.n	8004a28 <osThreadNew+0x90>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <osThreadNew+0x94>
        return (NULL);
 8004a28:	2300      	movs	r3, #0
 8004a2a:	e054      	b.n	8004ad6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	089b      	lsrs	r3, r3, #2
 8004a3a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00e      	beq.n	8004a62 <osThreadNew+0xca>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	2b5b      	cmp	r3, #91	; 0x5b
 8004a4a:	d90a      	bls.n	8004a62 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d006      	beq.n	8004a62 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d002      	beq.n	8004a62 <osThreadNew+0xca>
        mem = 1;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	623b      	str	r3, [r7, #32]
 8004a60:	e010      	b.n	8004a84 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10c      	bne.n	8004a84 <osThreadNew+0xec>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d108      	bne.n	8004a84 <osThreadNew+0xec>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d104      	bne.n	8004a84 <osThreadNew+0xec>
          mem = 0;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	623b      	str	r3, [r7, #32]
 8004a7e:	e001      	b.n	8004a84 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d110      	bne.n	8004aac <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a92:	9202      	str	r2, [sp, #8]
 8004a94:	9301      	str	r3, [sp, #4]
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 fe09 	bl	80056b8 <xTaskCreateStatic>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	e013      	b.n	8004ad4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d110      	bne.n	8004ad4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	f107 0310 	add.w	r3, r7, #16
 8004aba:	9301      	str	r3, [sp, #4]
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 fe51 	bl	800576c <xTaskCreate>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d001      	beq.n	8004ad4 <osThreadNew+0x13c>
          hTask = NULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004ad4:	693b      	ldr	r3, [r7, #16]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3730      	adds	r7, #48	; 0x30
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	20000224 	.word	0x20000224

08004ae4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aec:	f3ef 8305 	mrs	r3, IPSR
 8004af0:	613b      	str	r3, [r7, #16]
  return(result);
 8004af2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10f      	bne.n	8004b18 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004af8:	f3ef 8310 	mrs	r3, PRIMASK
 8004afc:	60fb      	str	r3, [r7, #12]
  return(result);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d105      	bne.n	8004b10 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b04:	f3ef 8311 	mrs	r3, BASEPRI
 8004b08:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d007      	beq.n	8004b20 <osDelay+0x3c>
 8004b10:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <osDelay+0x58>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d103      	bne.n	8004b20 <osDelay+0x3c>
    stat = osErrorISR;
 8004b18:	f06f 0305 	mvn.w	r3, #5
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	e007      	b.n	8004b30 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 ff62 	bl	80059f4 <vTaskDelay>
    }
  }

  return (stat);
 8004b30:	697b      	ldr	r3, [r7, #20]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000224 	.word	0x20000224

08004b40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4a07      	ldr	r2, [pc, #28]	; (8004b6c <vApplicationGetIdleTaskMemory+0x2c>)
 8004b50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	4a06      	ldr	r2, [pc, #24]	; (8004b70 <vApplicationGetIdleTaskMemory+0x30>)
 8004b56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2280      	movs	r2, #128	; 0x80
 8004b5c:	601a      	str	r2, [r3, #0]
}
 8004b5e:	bf00      	nop
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	20000228 	.word	0x20000228
 8004b70:	20000284 	.word	0x20000284

08004b74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4a07      	ldr	r2, [pc, #28]	; (8004ba0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004b84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	4a06      	ldr	r2, [pc, #24]	; (8004ba4 <vApplicationGetTimerTaskMemory+0x30>)
 8004b8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b92:	601a      	str	r2, [r3, #0]
}
 8004b94:	bf00      	nop
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	20000484 	.word	0x20000484
 8004ba4:	200004e0 	.word	0x200004e0

08004ba8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f103 0208 	add.w	r2, r3, #8
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f103 0208 	add.w	r2, r3, #8
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f103 0208 	add.w	r2, r3, #8
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c02:	b480      	push	{r7}
 8004c04:	b085      	sub	sp, #20
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	601a      	str	r2, [r3, #0]
}
 8004c3e:	bf00      	nop
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b085      	sub	sp, #20
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c60:	d103      	bne.n	8004c6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	e00c      	b.n	8004c84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	e002      	b.n	8004c78 <vListInsert+0x2e>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d2f6      	bcs.n	8004c72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	601a      	str	r2, [r3, #0]
}
 8004cb0:	bf00      	nop
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6892      	ldr	r2, [r2, #8]
 8004cd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6852      	ldr	r2, [r2, #4]
 8004cdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d103      	bne.n	8004cf0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	1e5a      	subs	r2, r3, #1
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d109      	bne.n	8004d38 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	60bb      	str	r3, [r7, #8]
 8004d36:	e7fe      	b.n	8004d36 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004d38:	f002 f810 	bl	8006d5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d44:	68f9      	ldr	r1, [r7, #12]
 8004d46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d48:	fb01 f303 	mul.w	r3, r1, r3
 8004d4c:	441a      	add	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	68f9      	ldr	r1, [r7, #12]
 8004d6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	441a      	add	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	22ff      	movs	r2, #255	; 0xff
 8004d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	22ff      	movs	r2, #255	; 0xff
 8004d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d114      	bne.n	8004db8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d01a      	beq.n	8004dcc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	3310      	adds	r3, #16
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f001 f8de 	bl	8005f5c <xTaskRemoveFromEventList>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d012      	beq.n	8004dcc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004da6:	4b0d      	ldr	r3, [pc, #52]	; (8004ddc <xQueueGenericReset+0xcc>)
 8004da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	e009      	b.n	8004dcc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3310      	adds	r3, #16
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff fef3 	bl	8004ba8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	3324      	adds	r3, #36	; 0x24
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff feee 	bl	8004ba8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004dcc:	f001 fff4 	bl	8006db8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004dd0:	2301      	movs	r3, #1
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	e000ed04 	.word	0xe000ed04

08004de0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08e      	sub	sp, #56	; 0x38
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d109      	bne.n	8004e08 <xQueueGenericCreateStatic+0x28>
 8004df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e06:	e7fe      	b.n	8004e06 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <xQueueGenericCreateStatic+0x42>
 8004e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e20:	e7fe      	b.n	8004e20 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <xQueueGenericCreateStatic+0x4e>
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <xQueueGenericCreateStatic+0x52>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <xQueueGenericCreateStatic+0x54>
 8004e32:	2300      	movs	r3, #0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d109      	bne.n	8004e4c <xQueueGenericCreateStatic+0x6c>
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	623b      	str	r3, [r7, #32]
 8004e4a:	e7fe      	b.n	8004e4a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d102      	bne.n	8004e58 <xQueueGenericCreateStatic+0x78>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <xQueueGenericCreateStatic+0x7c>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e000      	b.n	8004e5e <xQueueGenericCreateStatic+0x7e>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d109      	bne.n	8004e76 <xQueueGenericCreateStatic+0x96>
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	61fb      	str	r3, [r7, #28]
 8004e74:	e7fe      	b.n	8004e74 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e76:	2350      	movs	r3, #80	; 0x50
 8004e78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2b50      	cmp	r3, #80	; 0x50
 8004e7e:	d009      	beq.n	8004e94 <xQueueGenericCreateStatic+0xb4>
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	e7fe      	b.n	8004e92 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e94:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00d      	beq.n	8004ebc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ea8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	68b9      	ldr	r1, [r7, #8]
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 f805 	bl	8004ec6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3730      	adds	r7, #48	; 0x30
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
 8004ed2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d103      	bne.n	8004ee2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	e002      	b.n	8004ee8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	69b8      	ldr	r0, [r7, #24]
 8004ef8:	f7ff ff0a 	bl	8004d10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	78fa      	ldrb	r2, [r7, #3]
 8004f00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f04:	bf00      	nop
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08e      	sub	sp, #56	; 0x38
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d109      	bne.n	8004f3c <xQueueGenericSend+0x30>
 8004f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f3a:	e7fe      	b.n	8004f3a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d103      	bne.n	8004f4a <xQueueGenericSend+0x3e>
 8004f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <xQueueGenericSend+0x42>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <xQueueGenericSend+0x44>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d109      	bne.n	8004f68 <xQueueGenericSend+0x5c>
 8004f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	627b      	str	r3, [r7, #36]	; 0x24
 8004f66:	e7fe      	b.n	8004f66 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d103      	bne.n	8004f76 <xQueueGenericSend+0x6a>
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <xQueueGenericSend+0x6e>
 8004f76:	2301      	movs	r3, #1
 8004f78:	e000      	b.n	8004f7c <xQueueGenericSend+0x70>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d109      	bne.n	8004f94 <xQueueGenericSend+0x88>
 8004f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	623b      	str	r3, [r7, #32]
 8004f92:	e7fe      	b.n	8004f92 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f94:	f001 f998 	bl	80062c8 <xTaskGetSchedulerState>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d102      	bne.n	8004fa4 <xQueueGenericSend+0x98>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <xQueueGenericSend+0x9c>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <xQueueGenericSend+0x9e>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d109      	bne.n	8004fc2 <xQueueGenericSend+0xb6>
 8004fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	61fb      	str	r3, [r7, #28]
 8004fc0:	e7fe      	b.n	8004fc0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fc2:	f001 fecb 	bl	8006d5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d302      	bcc.n	8004fd8 <xQueueGenericSend+0xcc>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d129      	bne.n	800502c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	68b9      	ldr	r1, [r7, #8]
 8004fdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fde:	f000 f9ff 	bl	80053e0 <prvCopyDataToQueue>
 8004fe2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d010      	beq.n	800500e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fee:	3324      	adds	r3, #36	; 0x24
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 ffb3 	bl	8005f5c <xTaskRemoveFromEventList>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d013      	beq.n	8005024 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ffc:	4b3f      	ldr	r3, [pc, #252]	; (80050fc <xQueueGenericSend+0x1f0>)
 8004ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	e00a      	b.n	8005024 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800500e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d007      	beq.n	8005024 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005014:	4b39      	ldr	r3, [pc, #228]	; (80050fc <xQueueGenericSend+0x1f0>)
 8005016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005024:	f001 fec8 	bl	8006db8 <vPortExitCritical>
				return pdPASS;
 8005028:	2301      	movs	r3, #1
 800502a:	e063      	b.n	80050f4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d103      	bne.n	800503a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005032:	f001 fec1 	bl	8006db8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005036:	2300      	movs	r3, #0
 8005038:	e05c      	b.n	80050f4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800503a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503c:	2b00      	cmp	r3, #0
 800503e:	d106      	bne.n	800504e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005040:	f107 0314 	add.w	r3, r7, #20
 8005044:	4618      	mov	r0, r3
 8005046:	f000 ffeb 	bl	8006020 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800504a:	2301      	movs	r3, #1
 800504c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800504e:	f001 feb3 	bl	8006db8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005052:	f000 fd67 	bl	8005b24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005056:	f001 fe81 	bl	8006d5c <vPortEnterCritical>
 800505a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005060:	b25b      	sxtb	r3, r3
 8005062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005066:	d103      	bne.n	8005070 <xQueueGenericSend+0x164>
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005076:	b25b      	sxtb	r3, r3
 8005078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800507c:	d103      	bne.n	8005086 <xQueueGenericSend+0x17a>
 800507e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005086:	f001 fe97 	bl	8006db8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800508a:	1d3a      	adds	r2, r7, #4
 800508c:	f107 0314 	add.w	r3, r7, #20
 8005090:	4611      	mov	r1, r2
 8005092:	4618      	mov	r0, r3
 8005094:	f000 ffda 	bl	800604c <xTaskCheckForTimeOut>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d124      	bne.n	80050e8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800509e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050a0:	f000 fa96 	bl	80055d0 <prvIsQueueFull>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d018      	beq.n	80050dc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ac:	3310      	adds	r3, #16
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	4611      	mov	r1, r2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 ff04 	bl	8005ec0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80050b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050ba:	f000 fa21 	bl	8005500 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80050be:	f000 fd3f 	bl	8005b40 <xTaskResumeAll>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f47f af7c 	bne.w	8004fc2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80050ca:	4b0c      	ldr	r3, [pc, #48]	; (80050fc <xQueueGenericSend+0x1f0>)
 80050cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	e772      	b.n	8004fc2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80050dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050de:	f000 fa0f 	bl	8005500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050e2:	f000 fd2d 	bl	8005b40 <xTaskResumeAll>
 80050e6:	e76c      	b.n	8004fc2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80050e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050ea:	f000 fa09 	bl	8005500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050ee:	f000 fd27 	bl	8005b40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3738      	adds	r7, #56	; 0x38
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	e000ed04 	.word	0xe000ed04

08005100 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08e      	sub	sp, #56	; 0x38
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	2b00      	cmp	r3, #0
 8005116:	d109      	bne.n	800512c <xQueueGenericSendFromISR+0x2c>
 8005118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511c:	f383 8811 	msr	BASEPRI, r3
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
 800512a:	e7fe      	b.n	800512a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d103      	bne.n	800513a <xQueueGenericSendFromISR+0x3a>
 8005132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <xQueueGenericSendFromISR+0x3e>
 800513a:	2301      	movs	r3, #1
 800513c:	e000      	b.n	8005140 <xQueueGenericSendFromISR+0x40>
 800513e:	2300      	movs	r3, #0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d109      	bne.n	8005158 <xQueueGenericSendFromISR+0x58>
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	623b      	str	r3, [r7, #32]
 8005156:	e7fe      	b.n	8005156 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2b02      	cmp	r3, #2
 800515c:	d103      	bne.n	8005166 <xQueueGenericSendFromISR+0x66>
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <xQueueGenericSendFromISR+0x6a>
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <xQueueGenericSendFromISR+0x6c>
 800516a:	2300      	movs	r3, #0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d109      	bne.n	8005184 <xQueueGenericSendFromISR+0x84>
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	61fb      	str	r3, [r7, #28]
 8005182:	e7fe      	b.n	8005182 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005184:	f001 fec6 	bl	8006f14 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005188:	f3ef 8211 	mrs	r2, BASEPRI
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	61ba      	str	r2, [r7, #24]
 800519e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80051a0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d302      	bcc.n	80051b6 <xQueueGenericSendFromISR+0xb6>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d12c      	bne.n	8005210 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	68b9      	ldr	r1, [r7, #8]
 80051c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051c6:	f000 f90b 	bl	80053e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80051ca:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80051ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051d2:	d112      	bne.n	80051fa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d016      	beq.n	800520a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051de:	3324      	adds	r3, #36	; 0x24
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 febb 	bl	8005f5c <xTaskRemoveFromEventList>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00e      	beq.n	800520a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00b      	beq.n	800520a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	e007      	b.n	800520a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051fe:	3301      	adds	r3, #1
 8005200:	b2db      	uxtb	r3, r3
 8005202:	b25a      	sxtb	r2, r3
 8005204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800520a:	2301      	movs	r3, #1
 800520c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800520e:	e001      	b.n	8005214 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005210:	2300      	movs	r3, #0
 8005212:	637b      	str	r3, [r7, #52]	; 0x34
 8005214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005216:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800521e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005220:	4618      	mov	r0, r3
 8005222:	3738      	adds	r7, #56	; 0x38
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b08c      	sub	sp, #48	; 0x30
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005234:	2300      	movs	r3, #0
 8005236:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	2b00      	cmp	r3, #0
 8005240:	d109      	bne.n	8005256 <xQueueReceive+0x2e>
	__asm volatile
 8005242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005246:	f383 8811 	msr	BASEPRI, r3
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	623b      	str	r3, [r7, #32]
 8005254:	e7fe      	b.n	8005254 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d103      	bne.n	8005264 <xQueueReceive+0x3c>
 800525c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <xQueueReceive+0x40>
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <xQueueReceive+0x42>
 8005268:	2300      	movs	r3, #0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d109      	bne.n	8005282 <xQueueReceive+0x5a>
 800526e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	61fb      	str	r3, [r7, #28]
 8005280:	e7fe      	b.n	8005280 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005282:	f001 f821 	bl	80062c8 <xTaskGetSchedulerState>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d102      	bne.n	8005292 <xQueueReceive+0x6a>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <xQueueReceive+0x6e>
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <xQueueReceive+0x70>
 8005296:	2300      	movs	r3, #0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d109      	bne.n	80052b0 <xQueueReceive+0x88>
 800529c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	61bb      	str	r3, [r7, #24]
 80052ae:	e7fe      	b.n	80052ae <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052b0:	f001 fd54 	bl	8006d5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d01f      	beq.n	8005300 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052c0:	68b9      	ldr	r1, [r7, #8]
 80052c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052c4:	f000 f8f6 	bl	80054b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	1e5a      	subs	r2, r3, #1
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00f      	beq.n	80052f8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052da:	3310      	adds	r3, #16
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fe3d 	bl	8005f5c <xTaskRemoveFromEventList>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d007      	beq.n	80052f8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052e8:	4b3c      	ldr	r3, [pc, #240]	; (80053dc <xQueueReceive+0x1b4>)
 80052ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052f8:	f001 fd5e 	bl	8006db8 <vPortExitCritical>
				return pdPASS;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e069      	b.n	80053d4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d103      	bne.n	800530e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005306:	f001 fd57 	bl	8006db8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800530a:	2300      	movs	r3, #0
 800530c:	e062      	b.n	80053d4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	2b00      	cmp	r3, #0
 8005312:	d106      	bne.n	8005322 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005314:	f107 0310 	add.w	r3, r7, #16
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fe81 	bl	8006020 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800531e:	2301      	movs	r3, #1
 8005320:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005322:	f001 fd49 	bl	8006db8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005326:	f000 fbfd 	bl	8005b24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800532a:	f001 fd17 	bl	8006d5c <vPortEnterCritical>
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005334:	b25b      	sxtb	r3, r3
 8005336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800533a:	d103      	bne.n	8005344 <xQueueReceive+0x11c>
 800533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800534a:	b25b      	sxtb	r3, r3
 800534c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005350:	d103      	bne.n	800535a <xQueueReceive+0x132>
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800535a:	f001 fd2d 	bl	8006db8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800535e:	1d3a      	adds	r2, r7, #4
 8005360:	f107 0310 	add.w	r3, r7, #16
 8005364:	4611      	mov	r1, r2
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fe70 	bl	800604c <xTaskCheckForTimeOut>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d123      	bne.n	80053ba <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005374:	f000 f916 	bl	80055a4 <prvIsQueueEmpty>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d017      	beq.n	80053ae <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	3324      	adds	r3, #36	; 0x24
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	4611      	mov	r1, r2
 8005386:	4618      	mov	r0, r3
 8005388:	f000 fd9a 	bl	8005ec0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800538c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800538e:	f000 f8b7 	bl	8005500 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005392:	f000 fbd5 	bl	8005b40 <xTaskResumeAll>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d189      	bne.n	80052b0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800539c:	4b0f      	ldr	r3, [pc, #60]	; (80053dc <xQueueReceive+0x1b4>)
 800539e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	e780      	b.n	80052b0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80053ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053b0:	f000 f8a6 	bl	8005500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053b4:	f000 fbc4 	bl	8005b40 <xTaskResumeAll>
 80053b8:	e77a      	b.n	80052b0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80053ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053bc:	f000 f8a0 	bl	8005500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053c0:	f000 fbbe 	bl	8005b40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053c6:	f000 f8ed 	bl	80055a4 <prvIsQueueEmpty>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f43f af6f 	beq.w	80052b0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3730      	adds	r7, #48	; 0x30
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	e000ed04 	.word	0xe000ed04

080053e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80053ec:	2300      	movs	r3, #0
 80053ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10d      	bne.n	800541a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d14d      	bne.n	80054a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	4618      	mov	r0, r3
 800540c:	f000 ff7a 	bl	8006304 <xTaskPriorityDisinherit>
 8005410:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	609a      	str	r2, [r3, #8]
 8005418:	e043      	b.n	80054a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d119      	bne.n	8005454 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6858      	ldr	r0, [r3, #4]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	461a      	mov	r2, r3
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	f001 ffb0 	bl	8007390 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005438:	441a      	add	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	429a      	cmp	r2, r3
 8005448:	d32b      	bcc.n	80054a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	605a      	str	r2, [r3, #4]
 8005452:	e026      	b.n	80054a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	68d8      	ldr	r0, [r3, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	461a      	mov	r2, r3
 800545e:	68b9      	ldr	r1, [r7, #8]
 8005460:	f001 ff96 	bl	8007390 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	425b      	negs	r3, r3
 800546e:	441a      	add	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	429a      	cmp	r2, r3
 800547e:	d207      	bcs.n	8005490 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005488:	425b      	negs	r3, r3
 800548a:	441a      	add	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b02      	cmp	r3, #2
 8005494:	d105      	bne.n	80054a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	3b01      	subs	r3, #1
 80054a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80054aa:	697b      	ldr	r3, [r7, #20]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d018      	beq.n	80054f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	441a      	add	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d303      	bcc.n	80054e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68d9      	ldr	r1, [r3, #12]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f0:	461a      	mov	r2, r3
 80054f2:	6838      	ldr	r0, [r7, #0]
 80054f4:	f001 ff4c 	bl	8007390 <memcpy>
	}
}
 80054f8:	bf00      	nop
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005508:	f001 fc28 	bl	8006d5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005512:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005514:	e011      	b.n	800553a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	2b00      	cmp	r3, #0
 800551c:	d012      	beq.n	8005544 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3324      	adds	r3, #36	; 0x24
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fd1a 	bl	8005f5c <xTaskRemoveFromEventList>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800552e:	f000 fded 	bl	800610c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	3b01      	subs	r3, #1
 8005536:	b2db      	uxtb	r3, r3
 8005538:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800553a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800553e:	2b00      	cmp	r3, #0
 8005540:	dce9      	bgt.n	8005516 <prvUnlockQueue+0x16>
 8005542:	e000      	b.n	8005546 <prvUnlockQueue+0x46>
					break;
 8005544:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	22ff      	movs	r2, #255	; 0xff
 800554a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800554e:	f001 fc33 	bl	8006db8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005552:	f001 fc03 	bl	8006d5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800555c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800555e:	e011      	b.n	8005584 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d012      	beq.n	800558e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3310      	adds	r3, #16
 800556c:	4618      	mov	r0, r3
 800556e:	f000 fcf5 	bl	8005f5c <xTaskRemoveFromEventList>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005578:	f000 fdc8 	bl	800610c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800557c:	7bbb      	ldrb	r3, [r7, #14]
 800557e:	3b01      	subs	r3, #1
 8005580:	b2db      	uxtb	r3, r3
 8005582:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005584:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005588:	2b00      	cmp	r3, #0
 800558a:	dce9      	bgt.n	8005560 <prvUnlockQueue+0x60>
 800558c:	e000      	b.n	8005590 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800558e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	22ff      	movs	r2, #255	; 0xff
 8005594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005598:	f001 fc0e 	bl	8006db8 <vPortExitCritical>
}
 800559c:	bf00      	nop
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055ac:	f001 fbd6 	bl	8006d5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d102      	bne.n	80055be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80055b8:	2301      	movs	r3, #1
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	e001      	b.n	80055c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80055be:	2300      	movs	r3, #0
 80055c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055c2:	f001 fbf9 	bl	8006db8 <vPortExitCritical>

	return xReturn;
 80055c6:	68fb      	ldr	r3, [r7, #12]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055d8:	f001 fbc0 	bl	8006d5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d102      	bne.n	80055ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80055e8:	2301      	movs	r3, #1
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	e001      	b.n	80055f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055f2:	f001 fbe1 	bl	8006db8 <vPortExitCritical>

	return xReturn;
 80055f6:	68fb      	ldr	r3, [r7, #12]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800560a:	2300      	movs	r3, #0
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	e014      	b.n	800563a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005610:	4a0e      	ldr	r2, [pc, #56]	; (800564c <vQueueAddToRegistry+0x4c>)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10b      	bne.n	8005634 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800561c:	490b      	ldr	r1, [pc, #44]	; (800564c <vQueueAddToRegistry+0x4c>)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005626:	4a09      	ldr	r2, [pc, #36]	; (800564c <vQueueAddToRegistry+0x4c>)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	4413      	add	r3, r2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005632:	e005      	b.n	8005640 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	3301      	adds	r3, #1
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b07      	cmp	r3, #7
 800563e:	d9e7      	bls.n	8005610 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005640:	bf00      	nop
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	20004cd4 	.word	0x20004cd4

08005650 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005660:	f001 fb7c 	bl	8006d5c <vPortEnterCritical>
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800566a:	b25b      	sxtb	r3, r3
 800566c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005670:	d103      	bne.n	800567a <vQueueWaitForMessageRestricted+0x2a>
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005680:	b25b      	sxtb	r3, r3
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005686:	d103      	bne.n	8005690 <vQueueWaitForMessageRestricted+0x40>
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005690:	f001 fb92 	bl	8006db8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005698:	2b00      	cmp	r3, #0
 800569a:	d106      	bne.n	80056aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	3324      	adds	r3, #36	; 0x24
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	68b9      	ldr	r1, [r7, #8]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 fc2f 	bl	8005f08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80056aa:	6978      	ldr	r0, [r7, #20]
 80056ac:	f7ff ff28 	bl	8005500 <prvUnlockQueue>
	}
 80056b0:	bf00      	nop
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08e      	sub	sp, #56	; 0x38
 80056bc:	af04      	add	r7, sp, #16
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80056c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d109      	bne.n	80056e0 <xTaskCreateStatic+0x28>
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	623b      	str	r3, [r7, #32]
 80056de:	e7fe      	b.n	80056de <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80056e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d109      	bne.n	80056fa <xTaskCreateStatic+0x42>
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	61fb      	str	r3, [r7, #28]
 80056f8:	e7fe      	b.n	80056f8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056fa:	235c      	movs	r3, #92	; 0x5c
 80056fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	2b5c      	cmp	r3, #92	; 0x5c
 8005702:	d009      	beq.n	8005718 <xTaskCreateStatic+0x60>
 8005704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	61bb      	str	r3, [r7, #24]
 8005716:	e7fe      	b.n	8005716 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005718:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800571a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01e      	beq.n	800575e <xTaskCreateStatic+0xa6>
 8005720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005722:	2b00      	cmp	r3, #0
 8005724:	d01b      	beq.n	800575e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800572e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	2202      	movs	r2, #2
 8005734:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005738:	2300      	movs	r3, #0
 800573a:	9303      	str	r3, [sp, #12]
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	9302      	str	r3, [sp, #8]
 8005740:	f107 0314 	add.w	r3, r7, #20
 8005744:	9301      	str	r3, [sp, #4]
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	68b9      	ldr	r1, [r7, #8]
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 f850 	bl	80057f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005756:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005758:	f000 f8dc 	bl	8005914 <prvAddNewTaskToReadyList>
 800575c:	e001      	b.n	8005762 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800575e:	2300      	movs	r3, #0
 8005760:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005762:	697b      	ldr	r3, [r7, #20]
	}
 8005764:	4618      	mov	r0, r3
 8005766:	3728      	adds	r7, #40	; 0x28
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08c      	sub	sp, #48	; 0x30
 8005770:	af04      	add	r7, sp, #16
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	4613      	mov	r3, r2
 800577a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800577c:	88fb      	ldrh	r3, [r7, #6]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4618      	mov	r0, r3
 8005782:	f001 fc05 	bl	8006f90 <pvPortMalloc>
 8005786:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00e      	beq.n	80057ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800578e:	205c      	movs	r0, #92	; 0x5c
 8005790:	f001 fbfe 	bl	8006f90 <pvPortMalloc>
 8005794:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	631a      	str	r2, [r3, #48]	; 0x30
 80057a2:	e005      	b.n	80057b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80057a4:	6978      	ldr	r0, [r7, #20]
 80057a6:	f001 fcb5 	bl	8007114 <vPortFree>
 80057aa:	e001      	b.n	80057b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80057ac:	2300      	movs	r3, #0
 80057ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d017      	beq.n	80057e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057be:	88fa      	ldrh	r2, [r7, #6]
 80057c0:	2300      	movs	r3, #0
 80057c2:	9303      	str	r3, [sp, #12]
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	9302      	str	r3, [sp, #8]
 80057c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ca:	9301      	str	r3, [sp, #4]
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 f80e 	bl	80057f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057da:	69f8      	ldr	r0, [r7, #28]
 80057dc:	f000 f89a 	bl	8005914 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057e0:	2301      	movs	r3, #1
 80057e2:	61bb      	str	r3, [r7, #24]
 80057e4:	e002      	b.n	80057ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057ec:	69bb      	ldr	r3, [r7, #24]
	}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3720      	adds	r7, #32
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b088      	sub	sp, #32
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	607a      	str	r2, [r7, #4]
 8005802:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	461a      	mov	r2, r3
 800580e:	21a5      	movs	r1, #165	; 0xa5
 8005810:	f001 fdc9 	bl	80073a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800581e:	3b01      	subs	r3, #1
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	f023 0307 	bic.w	r3, r3, #7
 800582c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	2b00      	cmp	r3, #0
 8005836:	d009      	beq.n	800584c <prvInitialiseNewTask+0x56>
 8005838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	617b      	str	r3, [r7, #20]
 800584a:	e7fe      	b.n	800584a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d01f      	beq.n	8005892 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005852:	2300      	movs	r3, #0
 8005854:	61fb      	str	r3, [r7, #28]
 8005856:	e012      	b.n	800587e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	4413      	add	r3, r2
 800585e:	7819      	ldrb	r1, [r3, #0]
 8005860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	4413      	add	r3, r2
 8005866:	3334      	adds	r3, #52	; 0x34
 8005868:	460a      	mov	r2, r1
 800586a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	4413      	add	r3, r2
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d006      	beq.n	8005886 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	3301      	adds	r3, #1
 800587c:	61fb      	str	r3, [r7, #28]
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	2b0f      	cmp	r3, #15
 8005882:	d9e9      	bls.n	8005858 <prvInitialiseNewTask+0x62>
 8005884:	e000      	b.n	8005888 <prvInitialiseNewTask+0x92>
			{
				break;
 8005886:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005890:	e003      	b.n	800589a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800589a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589c:	2b37      	cmp	r3, #55	; 0x37
 800589e:	d901      	bls.n	80058a4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058a0:	2337      	movs	r3, #55	; 0x37
 80058a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	2200      	movs	r2, #0
 80058b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	3304      	adds	r3, #4
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7ff f994 	bl	8004be8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c2:	3318      	adds	r3, #24
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff f98f 	bl	8004be8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e2:	2200      	movs	r2, #0
 80058e4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	68f9      	ldr	r1, [r7, #12]
 80058f2:	69b8      	ldr	r0, [r7, #24]
 80058f4:	f001 f90c 	bl	8006b10 <pxPortInitialiseStack>
 80058f8:	4602      	mov	r2, r0
 80058fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005908:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800590a:	bf00      	nop
 800590c:	3720      	adds	r7, #32
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800591c:	f001 fa1e 	bl	8006d5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005920:	4b2d      	ldr	r3, [pc, #180]	; (80059d8 <prvAddNewTaskToReadyList+0xc4>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3301      	adds	r3, #1
 8005926:	4a2c      	ldr	r2, [pc, #176]	; (80059d8 <prvAddNewTaskToReadyList+0xc4>)
 8005928:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800592a:	4b2c      	ldr	r3, [pc, #176]	; (80059dc <prvAddNewTaskToReadyList+0xc8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d109      	bne.n	8005946 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005932:	4a2a      	ldr	r2, [pc, #168]	; (80059dc <prvAddNewTaskToReadyList+0xc8>)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005938:	4b27      	ldr	r3, [pc, #156]	; (80059d8 <prvAddNewTaskToReadyList+0xc4>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d110      	bne.n	8005962 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005940:	f000 fc08 	bl	8006154 <prvInitialiseTaskLists>
 8005944:	e00d      	b.n	8005962 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005946:	4b26      	ldr	r3, [pc, #152]	; (80059e0 <prvAddNewTaskToReadyList+0xcc>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d109      	bne.n	8005962 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800594e:	4b23      	ldr	r3, [pc, #140]	; (80059dc <prvAddNewTaskToReadyList+0xc8>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005958:	429a      	cmp	r2, r3
 800595a:	d802      	bhi.n	8005962 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800595c:	4a1f      	ldr	r2, [pc, #124]	; (80059dc <prvAddNewTaskToReadyList+0xc8>)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005962:	4b20      	ldr	r3, [pc, #128]	; (80059e4 <prvAddNewTaskToReadyList+0xd0>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3301      	adds	r3, #1
 8005968:	4a1e      	ldr	r2, [pc, #120]	; (80059e4 <prvAddNewTaskToReadyList+0xd0>)
 800596a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800596c:	4b1d      	ldr	r3, [pc, #116]	; (80059e4 <prvAddNewTaskToReadyList+0xd0>)
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005978:	4b1b      	ldr	r3, [pc, #108]	; (80059e8 <prvAddNewTaskToReadyList+0xd4>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d903      	bls.n	8005988 <prvAddNewTaskToReadyList+0x74>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	4a18      	ldr	r2, [pc, #96]	; (80059e8 <prvAddNewTaskToReadyList+0xd4>)
 8005986:	6013      	str	r3, [r2, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598c:	4613      	mov	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4a15      	ldr	r2, [pc, #84]	; (80059ec <prvAddNewTaskToReadyList+0xd8>)
 8005996:	441a      	add	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3304      	adds	r3, #4
 800599c:	4619      	mov	r1, r3
 800599e:	4610      	mov	r0, r2
 80059a0:	f7ff f92f 	bl	8004c02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80059a4:	f001 fa08 	bl	8006db8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80059a8:	4b0d      	ldr	r3, [pc, #52]	; (80059e0 <prvAddNewTaskToReadyList+0xcc>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00e      	beq.n	80059ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059b0:	4b0a      	ldr	r3, [pc, #40]	; (80059dc <prvAddNewTaskToReadyList+0xc8>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d207      	bcs.n	80059ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80059be:	4b0c      	ldr	r3, [pc, #48]	; (80059f0 <prvAddNewTaskToReadyList+0xdc>)
 80059c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059ce:	bf00      	nop
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	20000db4 	.word	0x20000db4
 80059dc:	200008e0 	.word	0x200008e0
 80059e0:	20000dc0 	.word	0x20000dc0
 80059e4:	20000dd0 	.word	0x20000dd0
 80059e8:	20000dbc 	.word	0x20000dbc
 80059ec:	200008e4 	.word	0x200008e4
 80059f0:	e000ed04 	.word	0xe000ed04

080059f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059fc:	2300      	movs	r3, #0
 80059fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d016      	beq.n	8005a34 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a06:	4b13      	ldr	r3, [pc, #76]	; (8005a54 <vTaskDelay+0x60>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d009      	beq.n	8005a22 <vTaskDelay+0x2e>
 8005a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	60bb      	str	r3, [r7, #8]
 8005a20:	e7fe      	b.n	8005a20 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005a22:	f000 f87f 	bl	8005b24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a26:	2100      	movs	r1, #0
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fcd7 	bl	80063dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a2e:	f000 f887 	bl	8005b40 <xTaskResumeAll>
 8005a32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d107      	bne.n	8005a4a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005a3a:	4b07      	ldr	r3, [pc, #28]	; (8005a58 <vTaskDelay+0x64>)
 8005a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a4a:	bf00      	nop
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	20000ddc 	.word	0x20000ddc
 8005a58:	e000ed04 	.word	0xe000ed04

08005a5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b08a      	sub	sp, #40	; 0x28
 8005a60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a62:	2300      	movs	r3, #0
 8005a64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a6a:	463a      	mov	r2, r7
 8005a6c:	1d39      	adds	r1, r7, #4
 8005a6e:	f107 0308 	add.w	r3, r7, #8
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7ff f864 	bl	8004b40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a78:	6839      	ldr	r1, [r7, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	9202      	str	r2, [sp, #8]
 8005a80:	9301      	str	r3, [sp, #4]
 8005a82:	2300      	movs	r3, #0
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	2300      	movs	r3, #0
 8005a88:	460a      	mov	r2, r1
 8005a8a:	4920      	ldr	r1, [pc, #128]	; (8005b0c <vTaskStartScheduler+0xb0>)
 8005a8c:	4820      	ldr	r0, [pc, #128]	; (8005b10 <vTaskStartScheduler+0xb4>)
 8005a8e:	f7ff fe13 	bl	80056b8 <xTaskCreateStatic>
 8005a92:	4602      	mov	r2, r0
 8005a94:	4b1f      	ldr	r3, [pc, #124]	; (8005b14 <vTaskStartScheduler+0xb8>)
 8005a96:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a98:	4b1e      	ldr	r3, [pc, #120]	; (8005b14 <vTaskStartScheduler+0xb8>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	e001      	b.n	8005aaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d102      	bne.n	8005ab6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ab0:	f000 fce8 	bl	8006484 <xTimerCreateTimerTask>
 8005ab4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d115      	bne.n	8005ae8 <vTaskStartScheduler+0x8c>
 8005abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ace:	4b12      	ldr	r3, [pc, #72]	; (8005b18 <vTaskStartScheduler+0xbc>)
 8005ad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ad4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ad6:	4b11      	ldr	r3, [pc, #68]	; (8005b1c <vTaskStartScheduler+0xc0>)
 8005ad8:	2201      	movs	r2, #1
 8005ada:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005adc:	4b10      	ldr	r3, [pc, #64]	; (8005b20 <vTaskStartScheduler+0xc4>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ae2:	f001 f89d 	bl	8006c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ae6:	e00d      	b.n	8005b04 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aee:	d109      	bne.n	8005b04 <vTaskStartScheduler+0xa8>
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	e7fe      	b.n	8005b02 <vTaskStartScheduler+0xa6>
}
 8005b04:	bf00      	nop
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	0800ae8c 	.word	0x0800ae8c
 8005b10:	08006125 	.word	0x08006125
 8005b14:	20000dd8 	.word	0x20000dd8
 8005b18:	20000dd4 	.word	0x20000dd4
 8005b1c:	20000dc0 	.word	0x20000dc0
 8005b20:	20000db8 	.word	0x20000db8

08005b24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005b28:	4b04      	ldr	r3, [pc, #16]	; (8005b3c <vTaskSuspendAll+0x18>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	4a03      	ldr	r2, [pc, #12]	; (8005b3c <vTaskSuspendAll+0x18>)
 8005b30:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005b32:	bf00      	nop
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	20000ddc 	.word	0x20000ddc

08005b40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b4e:	4b41      	ldr	r3, [pc, #260]	; (8005c54 <xTaskResumeAll+0x114>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d109      	bne.n	8005b6a <xTaskResumeAll+0x2a>
 8005b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	e7fe      	b.n	8005b68 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b6a:	f001 f8f7 	bl	8006d5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b6e:	4b39      	ldr	r3, [pc, #228]	; (8005c54 <xTaskResumeAll+0x114>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	4a37      	ldr	r2, [pc, #220]	; (8005c54 <xTaskResumeAll+0x114>)
 8005b76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b78:	4b36      	ldr	r3, [pc, #216]	; (8005c54 <xTaskResumeAll+0x114>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d162      	bne.n	8005c46 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b80:	4b35      	ldr	r3, [pc, #212]	; (8005c58 <xTaskResumeAll+0x118>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d05e      	beq.n	8005c46 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b88:	e02f      	b.n	8005bea <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b8a:	4b34      	ldr	r3, [pc, #208]	; (8005c5c <xTaskResumeAll+0x11c>)
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3318      	adds	r3, #24
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff f890 	bl	8004cbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff f88b 	bl	8004cbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005baa:	4b2d      	ldr	r3, [pc, #180]	; (8005c60 <xTaskResumeAll+0x120>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d903      	bls.n	8005bba <xTaskResumeAll+0x7a>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb6:	4a2a      	ldr	r2, [pc, #168]	; (8005c60 <xTaskResumeAll+0x120>)
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4a27      	ldr	r2, [pc, #156]	; (8005c64 <xTaskResumeAll+0x124>)
 8005bc8:	441a      	add	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	f7ff f816 	bl	8004c02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bda:	4b23      	ldr	r3, [pc, #140]	; (8005c68 <xTaskResumeAll+0x128>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d302      	bcc.n	8005bea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005be4:	4b21      	ldr	r3, [pc, #132]	; (8005c6c <xTaskResumeAll+0x12c>)
 8005be6:	2201      	movs	r2, #1
 8005be8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bea:	4b1c      	ldr	r3, [pc, #112]	; (8005c5c <xTaskResumeAll+0x11c>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1cb      	bne.n	8005b8a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005bf8:	f000 fb46 	bl	8006288 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005bfc:	4b1c      	ldr	r3, [pc, #112]	; (8005c70 <xTaskResumeAll+0x130>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d010      	beq.n	8005c2a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c08:	f000 f846 	bl	8005c98 <xTaskIncrementTick>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d002      	beq.n	8005c18 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005c12:	4b16      	ldr	r3, [pc, #88]	; (8005c6c <xTaskResumeAll+0x12c>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1f1      	bne.n	8005c08 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005c24:	4b12      	ldr	r3, [pc, #72]	; (8005c70 <xTaskResumeAll+0x130>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c2a:	4b10      	ldr	r3, [pc, #64]	; (8005c6c <xTaskResumeAll+0x12c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d009      	beq.n	8005c46 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c32:	2301      	movs	r3, #1
 8005c34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c36:	4b0f      	ldr	r3, [pc, #60]	; (8005c74 <xTaskResumeAll+0x134>)
 8005c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c46:	f001 f8b7 	bl	8006db8 <vPortExitCritical>

	return xAlreadyYielded;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	20000ddc 	.word	0x20000ddc
 8005c58:	20000db4 	.word	0x20000db4
 8005c5c:	20000d74 	.word	0x20000d74
 8005c60:	20000dbc 	.word	0x20000dbc
 8005c64:	200008e4 	.word	0x200008e4
 8005c68:	200008e0 	.word	0x200008e0
 8005c6c:	20000dc8 	.word	0x20000dc8
 8005c70:	20000dc4 	.word	0x20000dc4
 8005c74:	e000ed04 	.word	0xe000ed04

08005c78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c7e:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <xTaskGetTickCount+0x1c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c84:	687b      	ldr	r3, [r7, #4]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	20000db8 	.word	0x20000db8

08005c98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ca2:	4b4e      	ldr	r3, [pc, #312]	; (8005ddc <xTaskIncrementTick+0x144>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f040 8088 	bne.w	8005dbc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005cac:	4b4c      	ldr	r3, [pc, #304]	; (8005de0 <xTaskIncrementTick+0x148>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cb4:	4a4a      	ldr	r2, [pc, #296]	; (8005de0 <xTaskIncrementTick+0x148>)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d11f      	bne.n	8005d00 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cc0:	4b48      	ldr	r3, [pc, #288]	; (8005de4 <xTaskIncrementTick+0x14c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d009      	beq.n	8005cde <xTaskIncrementTick+0x46>
 8005cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	603b      	str	r3, [r7, #0]
 8005cdc:	e7fe      	b.n	8005cdc <xTaskIncrementTick+0x44>
 8005cde:	4b41      	ldr	r3, [pc, #260]	; (8005de4 <xTaskIncrementTick+0x14c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	4b40      	ldr	r3, [pc, #256]	; (8005de8 <xTaskIncrementTick+0x150>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a3e      	ldr	r2, [pc, #248]	; (8005de4 <xTaskIncrementTick+0x14c>)
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	4a3e      	ldr	r2, [pc, #248]	; (8005de8 <xTaskIncrementTick+0x150>)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	4b3e      	ldr	r3, [pc, #248]	; (8005dec <xTaskIncrementTick+0x154>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	4a3c      	ldr	r2, [pc, #240]	; (8005dec <xTaskIncrementTick+0x154>)
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	f000 fac4 	bl	8006288 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d00:	4b3b      	ldr	r3, [pc, #236]	; (8005df0 <xTaskIncrementTick+0x158>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d349      	bcc.n	8005d9e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d0a:	4b36      	ldr	r3, [pc, #216]	; (8005de4 <xTaskIncrementTick+0x14c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d104      	bne.n	8005d1e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d14:	4b36      	ldr	r3, [pc, #216]	; (8005df0 <xTaskIncrementTick+0x158>)
 8005d16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d1a:	601a      	str	r2, [r3, #0]
					break;
 8005d1c:	e03f      	b.n	8005d9e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d1e:	4b31      	ldr	r3, [pc, #196]	; (8005de4 <xTaskIncrementTick+0x14c>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d203      	bcs.n	8005d3e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d36:	4a2e      	ldr	r2, [pc, #184]	; (8005df0 <xTaskIncrementTick+0x158>)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d3c:	e02f      	b.n	8005d9e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	3304      	adds	r3, #4
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fe ffba 	bl	8004cbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d004      	beq.n	8005d5a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	3318      	adds	r3, #24
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fe ffb1 	bl	8004cbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d5e:	4b25      	ldr	r3, [pc, #148]	; (8005df4 <xTaskIncrementTick+0x15c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d903      	bls.n	8005d6e <xTaskIncrementTick+0xd6>
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6a:	4a22      	ldr	r2, [pc, #136]	; (8005df4 <xTaskIncrementTick+0x15c>)
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d72:	4613      	mov	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4a1f      	ldr	r2, [pc, #124]	; (8005df8 <xTaskIncrementTick+0x160>)
 8005d7c:	441a      	add	r2, r3
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	3304      	adds	r3, #4
 8005d82:	4619      	mov	r1, r3
 8005d84:	4610      	mov	r0, r2
 8005d86:	f7fe ff3c 	bl	8004c02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8e:	4b1b      	ldr	r3, [pc, #108]	; (8005dfc <xTaskIncrementTick+0x164>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d3b8      	bcc.n	8005d0a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d9c:	e7b5      	b.n	8005d0a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d9e:	4b17      	ldr	r3, [pc, #92]	; (8005dfc <xTaskIncrementTick+0x164>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da4:	4914      	ldr	r1, [pc, #80]	; (8005df8 <xTaskIncrementTick+0x160>)
 8005da6:	4613      	mov	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	440b      	add	r3, r1
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d907      	bls.n	8005dc6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005db6:	2301      	movs	r3, #1
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	e004      	b.n	8005dc6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005dbc:	4b10      	ldr	r3, [pc, #64]	; (8005e00 <xTaskIncrementTick+0x168>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	4a0f      	ldr	r2, [pc, #60]	; (8005e00 <xTaskIncrementTick+0x168>)
 8005dc4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005dc6:	4b0f      	ldr	r3, [pc, #60]	; (8005e04 <xTaskIncrementTick+0x16c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005dd2:	697b      	ldr	r3, [r7, #20]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	20000ddc 	.word	0x20000ddc
 8005de0:	20000db8 	.word	0x20000db8
 8005de4:	20000d6c 	.word	0x20000d6c
 8005de8:	20000d70 	.word	0x20000d70
 8005dec:	20000dcc 	.word	0x20000dcc
 8005df0:	20000dd4 	.word	0x20000dd4
 8005df4:	20000dbc 	.word	0x20000dbc
 8005df8:	200008e4 	.word	0x200008e4
 8005dfc:	200008e0 	.word	0x200008e0
 8005e00:	20000dc4 	.word	0x20000dc4
 8005e04:	20000dc8 	.word	0x20000dc8

08005e08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e0e:	4b27      	ldr	r3, [pc, #156]	; (8005eac <vTaskSwitchContext+0xa4>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e16:	4b26      	ldr	r3, [pc, #152]	; (8005eb0 <vTaskSwitchContext+0xa8>)
 8005e18:	2201      	movs	r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e1c:	e040      	b.n	8005ea0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005e1e:	4b24      	ldr	r3, [pc, #144]	; (8005eb0 <vTaskSwitchContext+0xa8>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e24:	4b23      	ldr	r3, [pc, #140]	; (8005eb4 <vTaskSwitchContext+0xac>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	e00f      	b.n	8005e4c <vTaskSwitchContext+0x44>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d109      	bne.n	8005e46 <vTaskSwitchContext+0x3e>
 8005e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	607b      	str	r3, [r7, #4]
 8005e44:	e7fe      	b.n	8005e44 <vTaskSwitchContext+0x3c>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	491a      	ldr	r1, [pc, #104]	; (8005eb8 <vTaskSwitchContext+0xb0>)
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	4613      	mov	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	440b      	add	r3, r1
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0e5      	beq.n	8005e2c <vTaskSwitchContext+0x24>
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4613      	mov	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4a13      	ldr	r2, [pc, #76]	; (8005eb8 <vTaskSwitchContext+0xb0>)
 8005e6c:	4413      	add	r3, r2
 8005e6e:	60bb      	str	r3, [r7, #8]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	605a      	str	r2, [r3, #4]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	3308      	adds	r3, #8
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d104      	bne.n	8005e90 <vTaskSwitchContext+0x88>
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	605a      	str	r2, [r3, #4]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	4a09      	ldr	r2, [pc, #36]	; (8005ebc <vTaskSwitchContext+0xb4>)
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	4a06      	ldr	r2, [pc, #24]	; (8005eb4 <vTaskSwitchContext+0xac>)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6013      	str	r3, [r2, #0]
}
 8005ea0:	bf00      	nop
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	20000ddc 	.word	0x20000ddc
 8005eb0:	20000dc8 	.word	0x20000dc8
 8005eb4:	20000dbc 	.word	0x20000dbc
 8005eb8:	200008e4 	.word	0x200008e4
 8005ebc:	200008e0 	.word	0x200008e0

08005ec0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d109      	bne.n	8005ee4 <vTaskPlaceOnEventList+0x24>
 8005ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	e7fe      	b.n	8005ee2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ee4:	4b07      	ldr	r3, [pc, #28]	; (8005f04 <vTaskPlaceOnEventList+0x44>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3318      	adds	r3, #24
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7fe feac 	bl	8004c4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	6838      	ldr	r0, [r7, #0]
 8005ef6:	f000 fa71 	bl	80063dc <prvAddCurrentTaskToDelayedList>
}
 8005efa:	bf00      	nop
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	200008e0 	.word	0x200008e0

08005f08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d109      	bne.n	8005f2e <vTaskPlaceOnEventListRestricted+0x26>
 8005f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	e7fe      	b.n	8005f2c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f2e:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <vTaskPlaceOnEventListRestricted+0x50>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3318      	adds	r3, #24
 8005f34:	4619      	mov	r1, r3
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f7fe fe63 	bl	8004c02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d002      	beq.n	8005f48 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f46:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	68b8      	ldr	r0, [r7, #8]
 8005f4c:	f000 fa46 	bl	80063dc <prvAddCurrentTaskToDelayedList>
	}
 8005f50:	bf00      	nop
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	200008e0 	.word	0x200008e0

08005f5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d109      	bne.n	8005f86 <xTaskRemoveFromEventList+0x2a>
 8005f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	e7fe      	b.n	8005f84 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	3318      	adds	r3, #24
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fe fe96 	bl	8004cbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f90:	4b1d      	ldr	r3, [pc, #116]	; (8006008 <xTaskRemoveFromEventList+0xac>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d11d      	bne.n	8005fd4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fe fe8d 	bl	8004cbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa6:	4b19      	ldr	r3, [pc, #100]	; (800600c <xTaskRemoveFromEventList+0xb0>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d903      	bls.n	8005fb6 <xTaskRemoveFromEventList+0x5a>
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb2:	4a16      	ldr	r2, [pc, #88]	; (800600c <xTaskRemoveFromEventList+0xb0>)
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fba:	4613      	mov	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4a13      	ldr	r2, [pc, #76]	; (8006010 <xTaskRemoveFromEventList+0xb4>)
 8005fc4:	441a      	add	r2, r3
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	3304      	adds	r3, #4
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4610      	mov	r0, r2
 8005fce:	f7fe fe18 	bl	8004c02 <vListInsertEnd>
 8005fd2:	e005      	b.n	8005fe0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	3318      	adds	r3, #24
 8005fd8:	4619      	mov	r1, r3
 8005fda:	480e      	ldr	r0, [pc, #56]	; (8006014 <xTaskRemoveFromEventList+0xb8>)
 8005fdc:	f7fe fe11 	bl	8004c02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe4:	4b0c      	ldr	r3, [pc, #48]	; (8006018 <xTaskRemoveFromEventList+0xbc>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d905      	bls.n	8005ffa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ff2:	4b0a      	ldr	r3, [pc, #40]	; (800601c <xTaskRemoveFromEventList+0xc0>)
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	e001      	b.n	8005ffe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ffe:	697b      	ldr	r3, [r7, #20]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	20000ddc 	.word	0x20000ddc
 800600c:	20000dbc 	.word	0x20000dbc
 8006010:	200008e4 	.word	0x200008e4
 8006014:	20000d74 	.word	0x20000d74
 8006018:	200008e0 	.word	0x200008e0
 800601c:	20000dc8 	.word	0x20000dc8

08006020 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006028:	4b06      	ldr	r3, [pc, #24]	; (8006044 <vTaskInternalSetTimeOutState+0x24>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006030:	4b05      	ldr	r3, [pc, #20]	; (8006048 <vTaskInternalSetTimeOutState+0x28>)
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	605a      	str	r2, [r3, #4]
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	20000dcc 	.word	0x20000dcc
 8006048:	20000db8 	.word	0x20000db8

0800604c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d109      	bne.n	8006070 <xTaskCheckForTimeOut+0x24>
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	613b      	str	r3, [r7, #16]
 800606e:	e7fe      	b.n	800606e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d109      	bne.n	800608a <xTaskCheckForTimeOut+0x3e>
 8006076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	e7fe      	b.n	8006088 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800608a:	f000 fe67 	bl	8006d5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800608e:	4b1d      	ldr	r3, [pc, #116]	; (8006104 <xTaskCheckForTimeOut+0xb8>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060a6:	d102      	bne.n	80060ae <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060a8:	2300      	movs	r3, #0
 80060aa:	61fb      	str	r3, [r7, #28]
 80060ac:	e023      	b.n	80060f6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	4b15      	ldr	r3, [pc, #84]	; (8006108 <xTaskCheckForTimeOut+0xbc>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d007      	beq.n	80060ca <xTaskCheckForTimeOut+0x7e>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d302      	bcc.n	80060ca <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80060c4:	2301      	movs	r3, #1
 80060c6:	61fb      	str	r3, [r7, #28]
 80060c8:	e015      	b.n	80060f6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d20b      	bcs.n	80060ec <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	1ad2      	subs	r2, r2, r3
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7ff ff9d 	bl	8006020 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060e6:	2300      	movs	r3, #0
 80060e8:	61fb      	str	r3, [r7, #28]
 80060ea:	e004      	b.n	80060f6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	2200      	movs	r2, #0
 80060f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060f2:	2301      	movs	r3, #1
 80060f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060f6:	f000 fe5f 	bl	8006db8 <vPortExitCritical>

	return xReturn;
 80060fa:	69fb      	ldr	r3, [r7, #28]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3720      	adds	r7, #32
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	20000db8 	.word	0x20000db8
 8006108:	20000dcc 	.word	0x20000dcc

0800610c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006110:	4b03      	ldr	r3, [pc, #12]	; (8006120 <vTaskMissedYield+0x14>)
 8006112:	2201      	movs	r2, #1
 8006114:	601a      	str	r2, [r3, #0]
}
 8006116:	bf00      	nop
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	20000dc8 	.word	0x20000dc8

08006124 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800612c:	f000 f852 	bl	80061d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006130:	4b06      	ldr	r3, [pc, #24]	; (800614c <prvIdleTask+0x28>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d9f9      	bls.n	800612c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006138:	4b05      	ldr	r3, [pc, #20]	; (8006150 <prvIdleTask+0x2c>)
 800613a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006148:	e7f0      	b.n	800612c <prvIdleTask+0x8>
 800614a:	bf00      	nop
 800614c:	200008e4 	.word	0x200008e4
 8006150:	e000ed04 	.word	0xe000ed04

08006154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800615a:	2300      	movs	r3, #0
 800615c:	607b      	str	r3, [r7, #4]
 800615e:	e00c      	b.n	800617a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	4613      	mov	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4a12      	ldr	r2, [pc, #72]	; (80061b4 <prvInitialiseTaskLists+0x60>)
 800616c:	4413      	add	r3, r2
 800616e:	4618      	mov	r0, r3
 8006170:	f7fe fd1a 	bl	8004ba8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3301      	adds	r3, #1
 8006178:	607b      	str	r3, [r7, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b37      	cmp	r3, #55	; 0x37
 800617e:	d9ef      	bls.n	8006160 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006180:	480d      	ldr	r0, [pc, #52]	; (80061b8 <prvInitialiseTaskLists+0x64>)
 8006182:	f7fe fd11 	bl	8004ba8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006186:	480d      	ldr	r0, [pc, #52]	; (80061bc <prvInitialiseTaskLists+0x68>)
 8006188:	f7fe fd0e 	bl	8004ba8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800618c:	480c      	ldr	r0, [pc, #48]	; (80061c0 <prvInitialiseTaskLists+0x6c>)
 800618e:	f7fe fd0b 	bl	8004ba8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006192:	480c      	ldr	r0, [pc, #48]	; (80061c4 <prvInitialiseTaskLists+0x70>)
 8006194:	f7fe fd08 	bl	8004ba8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006198:	480b      	ldr	r0, [pc, #44]	; (80061c8 <prvInitialiseTaskLists+0x74>)
 800619a:	f7fe fd05 	bl	8004ba8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800619e:	4b0b      	ldr	r3, [pc, #44]	; (80061cc <prvInitialiseTaskLists+0x78>)
 80061a0:	4a05      	ldr	r2, [pc, #20]	; (80061b8 <prvInitialiseTaskLists+0x64>)
 80061a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061a4:	4b0a      	ldr	r3, [pc, #40]	; (80061d0 <prvInitialiseTaskLists+0x7c>)
 80061a6:	4a05      	ldr	r2, [pc, #20]	; (80061bc <prvInitialiseTaskLists+0x68>)
 80061a8:	601a      	str	r2, [r3, #0]
}
 80061aa:	bf00      	nop
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	200008e4 	.word	0x200008e4
 80061b8:	20000d44 	.word	0x20000d44
 80061bc:	20000d58 	.word	0x20000d58
 80061c0:	20000d74 	.word	0x20000d74
 80061c4:	20000d88 	.word	0x20000d88
 80061c8:	20000da0 	.word	0x20000da0
 80061cc:	20000d6c 	.word	0x20000d6c
 80061d0:	20000d70 	.word	0x20000d70

080061d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061da:	e019      	b.n	8006210 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061dc:	f000 fdbe 	bl	8006d5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061e0:	4b0f      	ldr	r3, [pc, #60]	; (8006220 <prvCheckTasksWaitingTermination+0x4c>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fe fd65 	bl	8004cbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061f2:	4b0c      	ldr	r3, [pc, #48]	; (8006224 <prvCheckTasksWaitingTermination+0x50>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3b01      	subs	r3, #1
 80061f8:	4a0a      	ldr	r2, [pc, #40]	; (8006224 <prvCheckTasksWaitingTermination+0x50>)
 80061fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061fc:	4b0a      	ldr	r3, [pc, #40]	; (8006228 <prvCheckTasksWaitingTermination+0x54>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3b01      	subs	r3, #1
 8006202:	4a09      	ldr	r2, [pc, #36]	; (8006228 <prvCheckTasksWaitingTermination+0x54>)
 8006204:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006206:	f000 fdd7 	bl	8006db8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f80e 	bl	800622c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006210:	4b05      	ldr	r3, [pc, #20]	; (8006228 <prvCheckTasksWaitingTermination+0x54>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1e1      	bne.n	80061dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006218:	bf00      	nop
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	20000d88 	.word	0x20000d88
 8006224:	20000db4 	.word	0x20000db4
 8006228:	20000d9c 	.word	0x20000d9c

0800622c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800623a:	2b00      	cmp	r3, #0
 800623c:	d108      	bne.n	8006250 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006242:	4618      	mov	r0, r3
 8006244:	f000 ff66 	bl	8007114 <vPortFree>
				vPortFree( pxTCB );
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 ff63 	bl	8007114 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800624e:	e017      	b.n	8006280 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006256:	2b01      	cmp	r3, #1
 8006258:	d103      	bne.n	8006262 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 ff5a 	bl	8007114 <vPortFree>
	}
 8006260:	e00e      	b.n	8006280 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006268:	2b02      	cmp	r3, #2
 800626a:	d009      	beq.n	8006280 <prvDeleteTCB+0x54>
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	e7fe      	b.n	800627e <prvDeleteTCB+0x52>
	}
 8006280:	bf00      	nop
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800628e:	4b0c      	ldr	r3, [pc, #48]	; (80062c0 <prvResetNextTaskUnblockTime+0x38>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d104      	bne.n	80062a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006298:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <prvResetNextTaskUnblockTime+0x3c>)
 800629a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800629e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062a0:	e008      	b.n	80062b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062a2:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <prvResetNextTaskUnblockTime+0x38>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	4a04      	ldr	r2, [pc, #16]	; (80062c4 <prvResetNextTaskUnblockTime+0x3c>)
 80062b2:	6013      	str	r3, [r2, #0]
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	20000d6c 	.word	0x20000d6c
 80062c4:	20000dd4 	.word	0x20000dd4

080062c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062ce:	4b0b      	ldr	r3, [pc, #44]	; (80062fc <xTaskGetSchedulerState+0x34>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d102      	bne.n	80062dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062d6:	2301      	movs	r3, #1
 80062d8:	607b      	str	r3, [r7, #4]
 80062da:	e008      	b.n	80062ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062dc:	4b08      	ldr	r3, [pc, #32]	; (8006300 <xTaskGetSchedulerState+0x38>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d102      	bne.n	80062ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062e4:	2302      	movs	r3, #2
 80062e6:	607b      	str	r3, [r7, #4]
 80062e8:	e001      	b.n	80062ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062ea:	2300      	movs	r3, #0
 80062ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062ee:	687b      	ldr	r3, [r7, #4]
	}
 80062f0:	4618      	mov	r0, r3
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	20000dc0 	.word	0x20000dc0
 8006300:	20000ddc 	.word	0x20000ddc

08006304 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006310:	2300      	movs	r3, #0
 8006312:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d054      	beq.n	80063c4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800631a:	4b2d      	ldr	r3, [pc, #180]	; (80063d0 <xTaskPriorityDisinherit+0xcc>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	429a      	cmp	r2, r3
 8006322:	d009      	beq.n	8006338 <xTaskPriorityDisinherit+0x34>
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	e7fe      	b.n	8006336 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800633c:	2b00      	cmp	r3, #0
 800633e:	d109      	bne.n	8006354 <xTaskPriorityDisinherit+0x50>
 8006340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	60bb      	str	r3, [r7, #8]
 8006352:	e7fe      	b.n	8006352 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006358:	1e5a      	subs	r2, r3, #1
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006366:	429a      	cmp	r2, r3
 8006368:	d02c      	beq.n	80063c4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636e:	2b00      	cmp	r3, #0
 8006370:	d128      	bne.n	80063c4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	3304      	adds	r3, #4
 8006376:	4618      	mov	r0, r3
 8006378:	f7fe fca0 	bl	8004cbc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006388:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006394:	4b0f      	ldr	r3, [pc, #60]	; (80063d4 <xTaskPriorityDisinherit+0xd0>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d903      	bls.n	80063a4 <xTaskPriorityDisinherit+0xa0>
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	4a0c      	ldr	r2, [pc, #48]	; (80063d4 <xTaskPriorityDisinherit+0xd0>)
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a8:	4613      	mov	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4a09      	ldr	r2, [pc, #36]	; (80063d8 <xTaskPriorityDisinherit+0xd4>)
 80063b2:	441a      	add	r2, r3
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	3304      	adds	r3, #4
 80063b8:	4619      	mov	r1, r3
 80063ba:	4610      	mov	r0, r2
 80063bc:	f7fe fc21 	bl	8004c02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80063c0:	2301      	movs	r3, #1
 80063c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063c4:	697b      	ldr	r3, [r7, #20]
	}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	200008e0 	.word	0x200008e0
 80063d4:	20000dbc 	.word	0x20000dbc
 80063d8:	200008e4 	.word	0x200008e4

080063dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063e6:	4b21      	ldr	r3, [pc, #132]	; (800646c <prvAddCurrentTaskToDelayedList+0x90>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063ec:	4b20      	ldr	r3, [pc, #128]	; (8006470 <prvAddCurrentTaskToDelayedList+0x94>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3304      	adds	r3, #4
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fe fc62 	bl	8004cbc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063fe:	d10a      	bne.n	8006416 <prvAddCurrentTaskToDelayedList+0x3a>
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d007      	beq.n	8006416 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006406:	4b1a      	ldr	r3, [pc, #104]	; (8006470 <prvAddCurrentTaskToDelayedList+0x94>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3304      	adds	r3, #4
 800640c:	4619      	mov	r1, r3
 800640e:	4819      	ldr	r0, [pc, #100]	; (8006474 <prvAddCurrentTaskToDelayedList+0x98>)
 8006410:	f7fe fbf7 	bl	8004c02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006414:	e026      	b.n	8006464 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4413      	add	r3, r2
 800641c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800641e:	4b14      	ldr	r3, [pc, #80]	; (8006470 <prvAddCurrentTaskToDelayedList+0x94>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	429a      	cmp	r2, r3
 800642c:	d209      	bcs.n	8006442 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800642e:	4b12      	ldr	r3, [pc, #72]	; (8006478 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	4b0f      	ldr	r3, [pc, #60]	; (8006470 <prvAddCurrentTaskToDelayedList+0x94>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3304      	adds	r3, #4
 8006438:	4619      	mov	r1, r3
 800643a:	4610      	mov	r0, r2
 800643c:	f7fe fc05 	bl	8004c4a <vListInsert>
}
 8006440:	e010      	b.n	8006464 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006442:	4b0e      	ldr	r3, [pc, #56]	; (800647c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <prvAddCurrentTaskToDelayedList+0x94>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3304      	adds	r3, #4
 800644c:	4619      	mov	r1, r3
 800644e:	4610      	mov	r0, r2
 8006450:	f7fe fbfb 	bl	8004c4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006454:	4b0a      	ldr	r3, [pc, #40]	; (8006480 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	429a      	cmp	r2, r3
 800645c:	d202      	bcs.n	8006464 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800645e:	4a08      	ldr	r2, [pc, #32]	; (8006480 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	6013      	str	r3, [r2, #0]
}
 8006464:	bf00      	nop
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	20000db8 	.word	0x20000db8
 8006470:	200008e0 	.word	0x200008e0
 8006474:	20000da0 	.word	0x20000da0
 8006478:	20000d70 	.word	0x20000d70
 800647c:	20000d6c 	.word	0x20000d6c
 8006480:	20000dd4 	.word	0x20000dd4

08006484 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b08a      	sub	sp, #40	; 0x28
 8006488:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800648a:	2300      	movs	r3, #0
 800648c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800648e:	f000 faff 	bl	8006a90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006492:	4b1c      	ldr	r3, [pc, #112]	; (8006504 <xTimerCreateTimerTask+0x80>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d021      	beq.n	80064de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80064a2:	1d3a      	adds	r2, r7, #4
 80064a4:	f107 0108 	add.w	r1, r7, #8
 80064a8:	f107 030c 	add.w	r3, r7, #12
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fe fb61 	bl	8004b74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80064b2:	6879      	ldr	r1, [r7, #4]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	9202      	str	r2, [sp, #8]
 80064ba:	9301      	str	r3, [sp, #4]
 80064bc:	2302      	movs	r3, #2
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	2300      	movs	r3, #0
 80064c2:	460a      	mov	r2, r1
 80064c4:	4910      	ldr	r1, [pc, #64]	; (8006508 <xTimerCreateTimerTask+0x84>)
 80064c6:	4811      	ldr	r0, [pc, #68]	; (800650c <xTimerCreateTimerTask+0x88>)
 80064c8:	f7ff f8f6 	bl	80056b8 <xTaskCreateStatic>
 80064cc:	4602      	mov	r2, r0
 80064ce:	4b10      	ldr	r3, [pc, #64]	; (8006510 <xTimerCreateTimerTask+0x8c>)
 80064d0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80064d2:	4b0f      	ldr	r3, [pc, #60]	; (8006510 <xTimerCreateTimerTask+0x8c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80064da:	2301      	movs	r3, #1
 80064dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d109      	bne.n	80064f8 <xTimerCreateTimerTask+0x74>
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	613b      	str	r3, [r7, #16]
 80064f6:	e7fe      	b.n	80064f6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80064f8:	697b      	ldr	r3, [r7, #20]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20000e10 	.word	0x20000e10
 8006508:	0800ae94 	.word	0x0800ae94
 800650c:	08006645 	.word	0x08006645
 8006510:	20000e14 	.word	0x20000e14

08006514 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08a      	sub	sp, #40	; 0x28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006522:	2300      	movs	r3, #0
 8006524:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d109      	bne.n	8006540 <xTimerGenericCommand+0x2c>
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	623b      	str	r3, [r7, #32]
 800653e:	e7fe      	b.n	800653e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006540:	4b19      	ldr	r3, [pc, #100]	; (80065a8 <xTimerGenericCommand+0x94>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d02a      	beq.n	800659e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b05      	cmp	r3, #5
 8006558:	dc18      	bgt.n	800658c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800655a:	f7ff feb5 	bl	80062c8 <xTaskGetSchedulerState>
 800655e:	4603      	mov	r3, r0
 8006560:	2b02      	cmp	r3, #2
 8006562:	d109      	bne.n	8006578 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006564:	4b10      	ldr	r3, [pc, #64]	; (80065a8 <xTimerGenericCommand+0x94>)
 8006566:	6818      	ldr	r0, [r3, #0]
 8006568:	f107 0110 	add.w	r1, r7, #16
 800656c:	2300      	movs	r3, #0
 800656e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006570:	f7fe fccc 	bl	8004f0c <xQueueGenericSend>
 8006574:	6278      	str	r0, [r7, #36]	; 0x24
 8006576:	e012      	b.n	800659e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006578:	4b0b      	ldr	r3, [pc, #44]	; (80065a8 <xTimerGenericCommand+0x94>)
 800657a:	6818      	ldr	r0, [r3, #0]
 800657c:	f107 0110 	add.w	r1, r7, #16
 8006580:	2300      	movs	r3, #0
 8006582:	2200      	movs	r2, #0
 8006584:	f7fe fcc2 	bl	8004f0c <xQueueGenericSend>
 8006588:	6278      	str	r0, [r7, #36]	; 0x24
 800658a:	e008      	b.n	800659e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800658c:	4b06      	ldr	r3, [pc, #24]	; (80065a8 <xTimerGenericCommand+0x94>)
 800658e:	6818      	ldr	r0, [r3, #0]
 8006590:	f107 0110 	add.w	r1, r7, #16
 8006594:	2300      	movs	r3, #0
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	f7fe fdb2 	bl	8005100 <xQueueGenericSendFromISR>
 800659c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3728      	adds	r7, #40	; 0x28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	20000e10 	.word	0x20000e10

080065ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b088      	sub	sp, #32
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065b6:	4b22      	ldr	r3, [pc, #136]	; (8006640 <prvProcessExpiredTimer+0x94>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	3304      	adds	r3, #4
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7fe fb79 	bl	8004cbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d021      	beq.n	800661c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	699a      	ldr	r2, [r3, #24]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	18d1      	adds	r1, r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	6978      	ldr	r0, [r7, #20]
 80065e6:	f000 f8d1 	bl	800678c <prvInsertTimerInActiveList>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d01e      	beq.n	800662e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065f0:	2300      	movs	r3, #0
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	2300      	movs	r3, #0
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	2100      	movs	r1, #0
 80065fa:	6978      	ldr	r0, [r7, #20]
 80065fc:	f7ff ff8a 	bl	8006514 <xTimerGenericCommand>
 8006600:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d112      	bne.n	800662e <prvProcessExpiredTimer+0x82>
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	60fb      	str	r3, [r7, #12]
 800661a:	e7fe      	b.n	800661a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006622:	f023 0301 	bic.w	r3, r3, #1
 8006626:	b2da      	uxtb	r2, r3
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	6978      	ldr	r0, [r7, #20]
 8006634:	4798      	blx	r3
}
 8006636:	bf00      	nop
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	20000e08 	.word	0x20000e08

08006644 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800664c:	f107 0308 	add.w	r3, r7, #8
 8006650:	4618      	mov	r0, r3
 8006652:	f000 f857 	bl	8006704 <prvGetNextExpireTime>
 8006656:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	4619      	mov	r1, r3
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 f803 	bl	8006668 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006662:	f000 f8d5 	bl	8006810 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006666:	e7f1      	b.n	800664c <prvTimerTask+0x8>

08006668 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006672:	f7ff fa57 	bl	8005b24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006676:	f107 0308 	add.w	r3, r7, #8
 800667a:	4618      	mov	r0, r3
 800667c:	f000 f866 	bl	800674c <prvSampleTimeNow>
 8006680:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d130      	bne.n	80066ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10a      	bne.n	80066a4 <prvProcessTimerOrBlockTask+0x3c>
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	429a      	cmp	r2, r3
 8006694:	d806      	bhi.n	80066a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006696:	f7ff fa53 	bl	8005b40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800669a:	68f9      	ldr	r1, [r7, #12]
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7ff ff85 	bl	80065ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80066a2:	e024      	b.n	80066ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d008      	beq.n	80066bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80066aa:	4b13      	ldr	r3, [pc, #76]	; (80066f8 <prvProcessTimerOrBlockTask+0x90>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <prvProcessTimerOrBlockTask+0x50>
 80066b4:	2301      	movs	r3, #1
 80066b6:	e000      	b.n	80066ba <prvProcessTimerOrBlockTask+0x52>
 80066b8:	2300      	movs	r3, #0
 80066ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80066bc:	4b0f      	ldr	r3, [pc, #60]	; (80066fc <prvProcessTimerOrBlockTask+0x94>)
 80066be:	6818      	ldr	r0, [r3, #0]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	4619      	mov	r1, r3
 80066ca:	f7fe ffc1 	bl	8005650 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80066ce:	f7ff fa37 	bl	8005b40 <xTaskResumeAll>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10a      	bne.n	80066ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80066d8:	4b09      	ldr	r3, [pc, #36]	; (8006700 <prvProcessTimerOrBlockTask+0x98>)
 80066da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	f3bf 8f6f 	isb	sy
}
 80066e8:	e001      	b.n	80066ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80066ea:	f7ff fa29 	bl	8005b40 <xTaskResumeAll>
}
 80066ee:	bf00      	nop
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	20000e0c 	.word	0x20000e0c
 80066fc:	20000e10 	.word	0x20000e10
 8006700:	e000ed04 	.word	0xe000ed04

08006704 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800670c:	4b0e      	ldr	r3, [pc, #56]	; (8006748 <prvGetNextExpireTime+0x44>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <prvGetNextExpireTime+0x16>
 8006716:	2201      	movs	r2, #1
 8006718:	e000      	b.n	800671c <prvGetNextExpireTime+0x18>
 800671a:	2200      	movs	r2, #0
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d105      	bne.n	8006734 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006728:	4b07      	ldr	r3, [pc, #28]	; (8006748 <prvGetNextExpireTime+0x44>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	e001      	b.n	8006738 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006738:	68fb      	ldr	r3, [r7, #12]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	20000e08 	.word	0x20000e08

0800674c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006754:	f7ff fa90 	bl	8005c78 <xTaskGetTickCount>
 8006758:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800675a:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <prvSampleTimeNow+0x3c>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	429a      	cmp	r2, r3
 8006762:	d205      	bcs.n	8006770 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006764:	f000 f930 	bl	80069c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	e002      	b.n	8006776 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006776:	4a04      	ldr	r2, [pc, #16]	; (8006788 <prvSampleTimeNow+0x3c>)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800677c:	68fb      	ldr	r3, [r7, #12]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	20000e18 	.word	0x20000e18

0800678c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
 8006798:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800679a:	2300      	movs	r3, #0
 800679c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d812      	bhi.n	80067d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	1ad2      	subs	r2, r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d302      	bcc.n	80067c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80067c0:	2301      	movs	r3, #1
 80067c2:	617b      	str	r3, [r7, #20]
 80067c4:	e01b      	b.n	80067fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80067c6:	4b10      	ldr	r3, [pc, #64]	; (8006808 <prvInsertTimerInActiveList+0x7c>)
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	3304      	adds	r3, #4
 80067ce:	4619      	mov	r1, r3
 80067d0:	4610      	mov	r0, r2
 80067d2:	f7fe fa3a 	bl	8004c4a <vListInsert>
 80067d6:	e012      	b.n	80067fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d206      	bcs.n	80067ee <prvInsertTimerInActiveList+0x62>
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d302      	bcc.n	80067ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80067e8:	2301      	movs	r3, #1
 80067ea:	617b      	str	r3, [r7, #20]
 80067ec:	e007      	b.n	80067fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067ee:	4b07      	ldr	r3, [pc, #28]	; (800680c <prvInsertTimerInActiveList+0x80>)
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	3304      	adds	r3, #4
 80067f6:	4619      	mov	r1, r3
 80067f8:	4610      	mov	r0, r2
 80067fa:	f7fe fa26 	bl	8004c4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80067fe:	697b      	ldr	r3, [r7, #20]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3718      	adds	r7, #24
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	20000e0c 	.word	0x20000e0c
 800680c:	20000e08 	.word	0x20000e08

08006810 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b08e      	sub	sp, #56	; 0x38
 8006814:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006816:	e0c6      	b.n	80069a6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	da17      	bge.n	800684e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800681e:	1d3b      	adds	r3, r7, #4
 8006820:	3304      	adds	r3, #4
 8006822:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006826:	2b00      	cmp	r3, #0
 8006828:	d109      	bne.n	800683e <prvProcessReceivedCommands+0x2e>
 800682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	61fb      	str	r3, [r7, #28]
 800683c:	e7fe      	b.n	800683c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800683e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006844:	6850      	ldr	r0, [r2, #4]
 8006846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006848:	6892      	ldr	r2, [r2, #8]
 800684a:	4611      	mov	r1, r2
 800684c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	f2c0 80a7 	blt.w	80069a4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d004      	beq.n	800686c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006864:	3304      	adds	r3, #4
 8006866:	4618      	mov	r0, r3
 8006868:	f7fe fa28 	bl	8004cbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800686c:	463b      	mov	r3, r7
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff ff6c 	bl	800674c <prvSampleTimeNow>
 8006874:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b09      	cmp	r3, #9
 800687a:	f200 8094 	bhi.w	80069a6 <prvProcessReceivedCommands+0x196>
 800687e:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <prvProcessReceivedCommands+0x74>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	080068ad 	.word	0x080068ad
 8006888:	080068ad 	.word	0x080068ad
 800688c:	080068ad 	.word	0x080068ad
 8006890:	0800691f 	.word	0x0800691f
 8006894:	08006933 	.word	0x08006933
 8006898:	0800697b 	.word	0x0800697b
 800689c:	080068ad 	.word	0x080068ad
 80068a0:	080068ad 	.word	0x080068ad
 80068a4:	0800691f 	.word	0x0800691f
 80068a8:	08006933 	.word	0x08006933
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068b2:	f043 0301 	orr.w	r3, r3, #1
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	18d1      	adds	r1, r2, r3
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068cc:	f7ff ff5e 	bl	800678c <prvInsertTimerInActiveList>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d067      	beq.n	80069a6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068e4:	f003 0304 	and.w	r3, r3, #4
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d05c      	beq.n	80069a6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	441a      	add	r2, r3
 80068f4:	2300      	movs	r3, #0
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	2300      	movs	r3, #0
 80068fa:	2100      	movs	r1, #0
 80068fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068fe:	f7ff fe09 	bl	8006514 <xTimerGenericCommand>
 8006902:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d14d      	bne.n	80069a6 <prvProcessReceivedCommands+0x196>
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	61bb      	str	r3, [r7, #24]
 800691c:	e7fe      	b.n	800691c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800691e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006924:	f023 0301 	bic.w	r3, r3, #1
 8006928:	b2da      	uxtb	r2, r3
 800692a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006930:	e039      	b.n	80069a6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006938:	f043 0301 	orr.w	r3, r3, #1
 800693c:	b2da      	uxtb	r2, r3
 800693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006940:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006948:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800694a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d109      	bne.n	8006966 <prvProcessReceivedCommands+0x156>
 8006952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	e7fe      	b.n	8006964 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006968:	699a      	ldr	r2, [r3, #24]
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	18d1      	adds	r1, r2, r3
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006974:	f7ff ff0a 	bl	800678c <prvInsertTimerInActiveList>
					break;
 8006978:	e015      	b.n	80069a6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800697a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b00      	cmp	r3, #0
 8006986:	d103      	bne.n	8006990 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800698a:	f000 fbc3 	bl	8007114 <vPortFree>
 800698e:	e00a      	b.n	80069a6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006996:	f023 0301 	bic.w	r3, r3, #1
 800699a:	b2da      	uxtb	r2, r3
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80069a2:	e000      	b.n	80069a6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80069a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069a6:	4b07      	ldr	r3, [pc, #28]	; (80069c4 <prvProcessReceivedCommands+0x1b4>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	1d39      	adds	r1, r7, #4
 80069ac:	2200      	movs	r2, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fe fc3a 	bl	8005228 <xQueueReceive>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f47f af2e 	bne.w	8006818 <prvProcessReceivedCommands+0x8>
	}
}
 80069bc:	bf00      	nop
 80069be:	3730      	adds	r7, #48	; 0x30
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	20000e10 	.word	0x20000e10

080069c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069ce:	e047      	b.n	8006a60 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069d0:	4b2d      	ldr	r3, [pc, #180]	; (8006a88 <prvSwitchTimerLists+0xc0>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069da:	4b2b      	ldr	r3, [pc, #172]	; (8006a88 <prvSwitchTimerLists+0xc0>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	3304      	adds	r3, #4
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7fe f967 	bl	8004cbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d02d      	beq.n	8006a60 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d90e      	bls.n	8006a34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a22:	4b19      	ldr	r3, [pc, #100]	; (8006a88 <prvSwitchTimerLists+0xc0>)
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	3304      	adds	r3, #4
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	f7fe f90c 	bl	8004c4a <vListInsert>
 8006a32:	e015      	b.n	8006a60 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a34:	2300      	movs	r3, #0
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	2300      	movs	r3, #0
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f7ff fd68 	bl	8006514 <xTimerGenericCommand>
 8006a44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d109      	bne.n	8006a60 <prvSwitchTimerLists+0x98>
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	603b      	str	r3, [r7, #0]
 8006a5e:	e7fe      	b.n	8006a5e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a60:	4b09      	ldr	r3, [pc, #36]	; (8006a88 <prvSwitchTimerLists+0xc0>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1b2      	bne.n	80069d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a6a:	4b07      	ldr	r3, [pc, #28]	; (8006a88 <prvSwitchTimerLists+0xc0>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a70:	4b06      	ldr	r3, [pc, #24]	; (8006a8c <prvSwitchTimerLists+0xc4>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a04      	ldr	r2, [pc, #16]	; (8006a88 <prvSwitchTimerLists+0xc0>)
 8006a76:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a78:	4a04      	ldr	r2, [pc, #16]	; (8006a8c <prvSwitchTimerLists+0xc4>)
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	6013      	str	r3, [r2, #0]
}
 8006a7e:	bf00      	nop
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20000e08 	.word	0x20000e08
 8006a8c:	20000e0c 	.word	0x20000e0c

08006a90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a96:	f000 f961 	bl	8006d5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a9a:	4b15      	ldr	r3, [pc, #84]	; (8006af0 <prvCheckForValidListAndQueue+0x60>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d120      	bne.n	8006ae4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006aa2:	4814      	ldr	r0, [pc, #80]	; (8006af4 <prvCheckForValidListAndQueue+0x64>)
 8006aa4:	f7fe f880 	bl	8004ba8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006aa8:	4813      	ldr	r0, [pc, #76]	; (8006af8 <prvCheckForValidListAndQueue+0x68>)
 8006aaa:	f7fe f87d 	bl	8004ba8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006aae:	4b13      	ldr	r3, [pc, #76]	; (8006afc <prvCheckForValidListAndQueue+0x6c>)
 8006ab0:	4a10      	ldr	r2, [pc, #64]	; (8006af4 <prvCheckForValidListAndQueue+0x64>)
 8006ab2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ab4:	4b12      	ldr	r3, [pc, #72]	; (8006b00 <prvCheckForValidListAndQueue+0x70>)
 8006ab6:	4a10      	ldr	r2, [pc, #64]	; (8006af8 <prvCheckForValidListAndQueue+0x68>)
 8006ab8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006aba:	2300      	movs	r3, #0
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	4b11      	ldr	r3, [pc, #68]	; (8006b04 <prvCheckForValidListAndQueue+0x74>)
 8006ac0:	4a11      	ldr	r2, [pc, #68]	; (8006b08 <prvCheckForValidListAndQueue+0x78>)
 8006ac2:	2110      	movs	r1, #16
 8006ac4:	200a      	movs	r0, #10
 8006ac6:	f7fe f98b 	bl	8004de0 <xQueueGenericCreateStatic>
 8006aca:	4602      	mov	r2, r0
 8006acc:	4b08      	ldr	r3, [pc, #32]	; (8006af0 <prvCheckForValidListAndQueue+0x60>)
 8006ace:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ad0:	4b07      	ldr	r3, [pc, #28]	; (8006af0 <prvCheckForValidListAndQueue+0x60>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ad8:	4b05      	ldr	r3, [pc, #20]	; (8006af0 <prvCheckForValidListAndQueue+0x60>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	490b      	ldr	r1, [pc, #44]	; (8006b0c <prvCheckForValidListAndQueue+0x7c>)
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7fe fd8e 	bl	8005600 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ae4:	f000 f968 	bl	8006db8 <vPortExitCritical>
}
 8006ae8:	bf00      	nop
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20000e10 	.word	0x20000e10
 8006af4:	20000de0 	.word	0x20000de0
 8006af8:	20000df4 	.word	0x20000df4
 8006afc:	20000e08 	.word	0x20000e08
 8006b00:	20000e0c 	.word	0x20000e0c
 8006b04:	20000ebc 	.word	0x20000ebc
 8006b08:	20000e1c 	.word	0x20000e1c
 8006b0c:	0800ae9c 	.word	0x0800ae9c

08006b10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	3b04      	subs	r3, #4
 8006b20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	3b04      	subs	r3, #4
 8006b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f023 0201 	bic.w	r2, r3, #1
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3b04      	subs	r3, #4
 8006b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b40:	4a0c      	ldr	r2, [pc, #48]	; (8006b74 <pxPortInitialiseStack+0x64>)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	3b14      	subs	r3, #20
 8006b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	3b04      	subs	r3, #4
 8006b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f06f 0202 	mvn.w	r2, #2
 8006b5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	3b20      	subs	r3, #32
 8006b64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b66:	68fb      	ldr	r3, [r7, #12]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3714      	adds	r7, #20
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	08006b79 	.word	0x08006b79

08006b78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b82:	4b11      	ldr	r3, [pc, #68]	; (8006bc8 <prvTaskExitError+0x50>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b8a:	d009      	beq.n	8006ba0 <prvTaskExitError+0x28>
 8006b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	60fb      	str	r3, [r7, #12]
 8006b9e:	e7fe      	b.n	8006b9e <prvTaskExitError+0x26>
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006bb2:	bf00      	nop
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d0fc      	beq.n	8006bb4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006bba:	bf00      	nop
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	20000010 	.word	0x20000010
 8006bcc:	00000000 	.word	0x00000000

08006bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006bd0:	4b07      	ldr	r3, [pc, #28]	; (8006bf0 <pxCurrentTCBConst2>)
 8006bd2:	6819      	ldr	r1, [r3, #0]
 8006bd4:	6808      	ldr	r0, [r1, #0]
 8006bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bda:	f380 8809 	msr	PSP, r0
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f04f 0000 	mov.w	r0, #0
 8006be6:	f380 8811 	msr	BASEPRI, r0
 8006bea:	4770      	bx	lr
 8006bec:	f3af 8000 	nop.w

08006bf0 <pxCurrentTCBConst2>:
 8006bf0:	200008e0 	.word	0x200008e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006bf4:	bf00      	nop
 8006bf6:	bf00      	nop

08006bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006bf8:	4808      	ldr	r0, [pc, #32]	; (8006c1c <prvPortStartFirstTask+0x24>)
 8006bfa:	6800      	ldr	r0, [r0, #0]
 8006bfc:	6800      	ldr	r0, [r0, #0]
 8006bfe:	f380 8808 	msr	MSP, r0
 8006c02:	f04f 0000 	mov.w	r0, #0
 8006c06:	f380 8814 	msr	CONTROL, r0
 8006c0a:	b662      	cpsie	i
 8006c0c:	b661      	cpsie	f
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	df00      	svc	0
 8006c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c1a:	bf00      	nop
 8006c1c:	e000ed08 	.word	0xe000ed08

08006c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c26:	4b44      	ldr	r3, [pc, #272]	; (8006d38 <xPortStartScheduler+0x118>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a44      	ldr	r2, [pc, #272]	; (8006d3c <xPortStartScheduler+0x11c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d109      	bne.n	8006c44 <xPortStartScheduler+0x24>
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	613b      	str	r3, [r7, #16]
 8006c42:	e7fe      	b.n	8006c42 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c44:	4b3c      	ldr	r3, [pc, #240]	; (8006d38 <xPortStartScheduler+0x118>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a3d      	ldr	r2, [pc, #244]	; (8006d40 <xPortStartScheduler+0x120>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d109      	bne.n	8006c62 <xPortStartScheduler+0x42>
 8006c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	60fb      	str	r3, [r7, #12]
 8006c60:	e7fe      	b.n	8006c60 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c62:	4b38      	ldr	r3, [pc, #224]	; (8006d44 <xPortStartScheduler+0x124>)
 8006c64:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	22ff      	movs	r2, #255	; 0xff
 8006c72:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c7c:	78fb      	ldrb	r3, [r7, #3]
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	4b30      	ldr	r3, [pc, #192]	; (8006d48 <xPortStartScheduler+0x128>)
 8006c88:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c8a:	4b30      	ldr	r3, [pc, #192]	; (8006d4c <xPortStartScheduler+0x12c>)
 8006c8c:	2207      	movs	r2, #7
 8006c8e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c90:	e009      	b.n	8006ca6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006c92:	4b2e      	ldr	r3, [pc, #184]	; (8006d4c <xPortStartScheduler+0x12c>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3b01      	subs	r3, #1
 8006c98:	4a2c      	ldr	r2, [pc, #176]	; (8006d4c <xPortStartScheduler+0x12c>)
 8006c9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c9c:	78fb      	ldrb	r3, [r7, #3]
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ca6:	78fb      	ldrb	r3, [r7, #3]
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cae:	2b80      	cmp	r3, #128	; 0x80
 8006cb0:	d0ef      	beq.n	8006c92 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006cb2:	4b26      	ldr	r3, [pc, #152]	; (8006d4c <xPortStartScheduler+0x12c>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f1c3 0307 	rsb	r3, r3, #7
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d009      	beq.n	8006cd2 <xPortStartScheduler+0xb2>
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	60bb      	str	r3, [r7, #8]
 8006cd0:	e7fe      	b.n	8006cd0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006cd2:	4b1e      	ldr	r3, [pc, #120]	; (8006d4c <xPortStartScheduler+0x12c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	021b      	lsls	r3, r3, #8
 8006cd8:	4a1c      	ldr	r2, [pc, #112]	; (8006d4c <xPortStartScheduler+0x12c>)
 8006cda:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006cdc:	4b1b      	ldr	r3, [pc, #108]	; (8006d4c <xPortStartScheduler+0x12c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ce4:	4a19      	ldr	r2, [pc, #100]	; (8006d4c <xPortStartScheduler+0x12c>)
 8006ce6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006cf0:	4b17      	ldr	r3, [pc, #92]	; (8006d50 <xPortStartScheduler+0x130>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a16      	ldr	r2, [pc, #88]	; (8006d50 <xPortStartScheduler+0x130>)
 8006cf6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006cfa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006cfc:	4b14      	ldr	r3, [pc, #80]	; (8006d50 <xPortStartScheduler+0x130>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a13      	ldr	r2, [pc, #76]	; (8006d50 <xPortStartScheduler+0x130>)
 8006d02:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d06:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d08:	f000 f8d6 	bl	8006eb8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d0c:	4b11      	ldr	r3, [pc, #68]	; (8006d54 <xPortStartScheduler+0x134>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d12:	f000 f8f5 	bl	8006f00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d16:	4b10      	ldr	r3, [pc, #64]	; (8006d58 <xPortStartScheduler+0x138>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a0f      	ldr	r2, [pc, #60]	; (8006d58 <xPortStartScheduler+0x138>)
 8006d1c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d20:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d22:	f7ff ff69 	bl	8006bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d26:	f7ff f86f 	bl	8005e08 <vTaskSwitchContext>
	prvTaskExitError();
 8006d2a:	f7ff ff25 	bl	8006b78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	e000ed00 	.word	0xe000ed00
 8006d3c:	410fc271 	.word	0x410fc271
 8006d40:	410fc270 	.word	0x410fc270
 8006d44:	e000e400 	.word	0xe000e400
 8006d48:	20000f0c 	.word	0x20000f0c
 8006d4c:	20000f10 	.word	0x20000f10
 8006d50:	e000ed20 	.word	0xe000ed20
 8006d54:	20000010 	.word	0x20000010
 8006d58:	e000ef34 	.word	0xe000ef34

08006d5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d74:	4b0e      	ldr	r3, [pc, #56]	; (8006db0 <vPortEnterCritical+0x54>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	4a0d      	ldr	r2, [pc, #52]	; (8006db0 <vPortEnterCritical+0x54>)
 8006d7c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d7e:	4b0c      	ldr	r3, [pc, #48]	; (8006db0 <vPortEnterCritical+0x54>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d10e      	bne.n	8006da4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d86:	4b0b      	ldr	r3, [pc, #44]	; (8006db4 <vPortEnterCritical+0x58>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d009      	beq.n	8006da4 <vPortEnterCritical+0x48>
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	603b      	str	r3, [r7, #0]
 8006da2:	e7fe      	b.n	8006da2 <vPortEnterCritical+0x46>
	}
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	20000010 	.word	0x20000010
 8006db4:	e000ed04 	.word	0xe000ed04

08006db8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006dbe:	4b11      	ldr	r3, [pc, #68]	; (8006e04 <vPortExitCritical+0x4c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d109      	bne.n	8006dda <vPortExitCritical+0x22>
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	607b      	str	r3, [r7, #4]
 8006dd8:	e7fe      	b.n	8006dd8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006dda:	4b0a      	ldr	r3, [pc, #40]	; (8006e04 <vPortExitCritical+0x4c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3b01      	subs	r3, #1
 8006de0:	4a08      	ldr	r2, [pc, #32]	; (8006e04 <vPortExitCritical+0x4c>)
 8006de2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006de4:	4b07      	ldr	r3, [pc, #28]	; (8006e04 <vPortExitCritical+0x4c>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d104      	bne.n	8006df6 <vPortExitCritical+0x3e>
 8006dec:	2300      	movs	r3, #0
 8006dee:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006df6:	bf00      	nop
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	20000010 	.word	0x20000010
	...

08006e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e10:	f3ef 8009 	mrs	r0, PSP
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	4b15      	ldr	r3, [pc, #84]	; (8006e70 <pxCurrentTCBConst>)
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	f01e 0f10 	tst.w	lr, #16
 8006e20:	bf08      	it	eq
 8006e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2a:	6010      	str	r0, [r2, #0]
 8006e2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e34:	f380 8811 	msr	BASEPRI, r0
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f7fe ffe2 	bl	8005e08 <vTaskSwitchContext>
 8006e44:	f04f 0000 	mov.w	r0, #0
 8006e48:	f380 8811 	msr	BASEPRI, r0
 8006e4c:	bc09      	pop	{r0, r3}
 8006e4e:	6819      	ldr	r1, [r3, #0]
 8006e50:	6808      	ldr	r0, [r1, #0]
 8006e52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e56:	f01e 0f10 	tst.w	lr, #16
 8006e5a:	bf08      	it	eq
 8006e5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e60:	f380 8809 	msr	PSP, r0
 8006e64:	f3bf 8f6f 	isb	sy
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	f3af 8000 	nop.w

08006e70 <pxCurrentTCBConst>:
 8006e70:	200008e0 	.word	0x200008e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e74:	bf00      	nop
 8006e76:	bf00      	nop

08006e78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e90:	f7fe ff02 	bl	8005c98 <xTaskIncrementTick>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e9a:	4b06      	ldr	r3, [pc, #24]	; (8006eb4 <SysTick_Handler+0x3c>)
 8006e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006eac:	bf00      	nop
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	e000ed04 	.word	0xe000ed04

08006eb8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006eb8:	b480      	push	{r7}
 8006eba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ebc:	4b0b      	ldr	r3, [pc, #44]	; (8006eec <vPortSetupTimerInterrupt+0x34>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ec2:	4b0b      	ldr	r3, [pc, #44]	; (8006ef0 <vPortSetupTimerInterrupt+0x38>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ec8:	4b0a      	ldr	r3, [pc, #40]	; (8006ef4 <vPortSetupTimerInterrupt+0x3c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a0a      	ldr	r2, [pc, #40]	; (8006ef8 <vPortSetupTimerInterrupt+0x40>)
 8006ece:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed2:	099b      	lsrs	r3, r3, #6
 8006ed4:	4a09      	ldr	r2, [pc, #36]	; (8006efc <vPortSetupTimerInterrupt+0x44>)
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006eda:	4b04      	ldr	r3, [pc, #16]	; (8006eec <vPortSetupTimerInterrupt+0x34>)
 8006edc:	2207      	movs	r2, #7
 8006ede:	601a      	str	r2, [r3, #0]
}
 8006ee0:	bf00      	nop
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	e000e010 	.word	0xe000e010
 8006ef0:	e000e018 	.word	0xe000e018
 8006ef4:	20000004 	.word	0x20000004
 8006ef8:	10624dd3 	.word	0x10624dd3
 8006efc:	e000e014 	.word	0xe000e014

08006f00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f10 <vPortEnableVFP+0x10>
 8006f04:	6801      	ldr	r1, [r0, #0]
 8006f06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f0a:	6001      	str	r1, [r0, #0]
 8006f0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f0e:	bf00      	nop
 8006f10:	e000ed88 	.word	0xe000ed88

08006f14 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f1a:	f3ef 8305 	mrs	r3, IPSR
 8006f1e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2b0f      	cmp	r3, #15
 8006f24:	d913      	bls.n	8006f4e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f26:	4a16      	ldr	r2, [pc, #88]	; (8006f80 <vPortValidateInterruptPriority+0x6c>)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f30:	4b14      	ldr	r3, [pc, #80]	; (8006f84 <vPortValidateInterruptPriority+0x70>)
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	7afa      	ldrb	r2, [r7, #11]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d209      	bcs.n	8006f4e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	607b      	str	r3, [r7, #4]
 8006f4c:	e7fe      	b.n	8006f4c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f4e:	4b0e      	ldr	r3, [pc, #56]	; (8006f88 <vPortValidateInterruptPriority+0x74>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f56:	4b0d      	ldr	r3, [pc, #52]	; (8006f8c <vPortValidateInterruptPriority+0x78>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d909      	bls.n	8006f72 <vPortValidateInterruptPriority+0x5e>
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	603b      	str	r3, [r7, #0]
 8006f70:	e7fe      	b.n	8006f70 <vPortValidateInterruptPriority+0x5c>
	}
 8006f72:	bf00      	nop
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	e000e3f0 	.word	0xe000e3f0
 8006f84:	20000f0c 	.word	0x20000f0c
 8006f88:	e000ed0c 	.word	0xe000ed0c
 8006f8c:	20000f10 	.word	0x20000f10

08006f90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b08a      	sub	sp, #40	; 0x28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f9c:	f7fe fdc2 	bl	8005b24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006fa0:	4b57      	ldr	r3, [pc, #348]	; (8007100 <pvPortMalloc+0x170>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006fa8:	f000 f90c 	bl	80071c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006fac:	4b55      	ldr	r3, [pc, #340]	; (8007104 <pvPortMalloc+0x174>)
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f040 808c 	bne.w	80070d2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d01c      	beq.n	8006ffa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006fc0:	2208      	movs	r2, #8
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f003 0307 	and.w	r3, r3, #7
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d013      	beq.n	8006ffa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f023 0307 	bic.w	r3, r3, #7
 8006fd8:	3308      	adds	r3, #8
 8006fda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f003 0307 	and.w	r3, r3, #7
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d009      	beq.n	8006ffa <pvPortMalloc+0x6a>
 8006fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	e7fe      	b.n	8006ff8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d068      	beq.n	80070d2 <pvPortMalloc+0x142>
 8007000:	4b41      	ldr	r3, [pc, #260]	; (8007108 <pvPortMalloc+0x178>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	429a      	cmp	r2, r3
 8007008:	d863      	bhi.n	80070d2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800700a:	4b40      	ldr	r3, [pc, #256]	; (800710c <pvPortMalloc+0x17c>)
 800700c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800700e:	4b3f      	ldr	r3, [pc, #252]	; (800710c <pvPortMalloc+0x17c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007014:	e004      	b.n	8007020 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007018:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	429a      	cmp	r2, r3
 8007028:	d903      	bls.n	8007032 <pvPortMalloc+0xa2>
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1f1      	bne.n	8007016 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007032:	4b33      	ldr	r3, [pc, #204]	; (8007100 <pvPortMalloc+0x170>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007038:	429a      	cmp	r2, r3
 800703a:	d04a      	beq.n	80070d2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2208      	movs	r2, #8
 8007042:	4413      	add	r3, r2
 8007044:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	1ad2      	subs	r2, r2, r3
 8007056:	2308      	movs	r3, #8
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	429a      	cmp	r2, r3
 800705c:	d91e      	bls.n	800709c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800705e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4413      	add	r3, r2
 8007064:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	2b00      	cmp	r3, #0
 800706e:	d009      	beq.n	8007084 <pvPortMalloc+0xf4>
 8007070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	613b      	str	r3, [r7, #16]
 8007082:	e7fe      	b.n	8007082 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	1ad2      	subs	r2, r2, r3
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007096:	69b8      	ldr	r0, [r7, #24]
 8007098:	f000 f8f6 	bl	8007288 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800709c:	4b1a      	ldr	r3, [pc, #104]	; (8007108 <pvPortMalloc+0x178>)
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	4a18      	ldr	r2, [pc, #96]	; (8007108 <pvPortMalloc+0x178>)
 80070a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070aa:	4b17      	ldr	r3, [pc, #92]	; (8007108 <pvPortMalloc+0x178>)
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	4b18      	ldr	r3, [pc, #96]	; (8007110 <pvPortMalloc+0x180>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d203      	bcs.n	80070be <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070b6:	4b14      	ldr	r3, [pc, #80]	; (8007108 <pvPortMalloc+0x178>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a15      	ldr	r2, [pc, #84]	; (8007110 <pvPortMalloc+0x180>)
 80070bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	4b10      	ldr	r3, [pc, #64]	; (8007104 <pvPortMalloc+0x174>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	431a      	orrs	r2, r3
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ce:	2200      	movs	r2, #0
 80070d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80070d2:	f7fe fd35 	bl	8005b40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d009      	beq.n	80070f4 <pvPortMalloc+0x164>
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	60fb      	str	r3, [r7, #12]
 80070f2:	e7fe      	b.n	80070f2 <pvPortMalloc+0x162>
	return pvReturn;
 80070f4:	69fb      	ldr	r3, [r7, #28]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3728      	adds	r7, #40	; 0x28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	20004b1c 	.word	0x20004b1c
 8007104:	20004b28 	.word	0x20004b28
 8007108:	20004b20 	.word	0x20004b20
 800710c:	20004b14 	.word	0x20004b14
 8007110:	20004b24 	.word	0x20004b24

08007114 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d046      	beq.n	80071b4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007126:	2308      	movs	r3, #8
 8007128:	425b      	negs	r3, r3
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	4413      	add	r3, r2
 800712e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	4b20      	ldr	r3, [pc, #128]	; (80071bc <vPortFree+0xa8>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4013      	ands	r3, r2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d109      	bne.n	8007156 <vPortFree+0x42>
 8007142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	e7fe      	b.n	8007154 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d009      	beq.n	8007172 <vPortFree+0x5e>
 800715e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	60bb      	str	r3, [r7, #8]
 8007170:	e7fe      	b.n	8007170 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	4b11      	ldr	r3, [pc, #68]	; (80071bc <vPortFree+0xa8>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4013      	ands	r3, r2
 800717c:	2b00      	cmp	r3, #0
 800717e:	d019      	beq.n	80071b4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d115      	bne.n	80071b4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	4b0b      	ldr	r3, [pc, #44]	; (80071bc <vPortFree+0xa8>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	43db      	mvns	r3, r3
 8007192:	401a      	ands	r2, r3
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007198:	f7fe fcc4 	bl	8005b24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	4b07      	ldr	r3, [pc, #28]	; (80071c0 <vPortFree+0xac>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4413      	add	r3, r2
 80071a6:	4a06      	ldr	r2, [pc, #24]	; (80071c0 <vPortFree+0xac>)
 80071a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071aa:	6938      	ldr	r0, [r7, #16]
 80071ac:	f000 f86c 	bl	8007288 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80071b0:	f7fe fcc6 	bl	8005b40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071b4:	bf00      	nop
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	20004b28 	.word	0x20004b28
 80071c0:	20004b20 	.word	0x20004b20

080071c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80071ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071d0:	4b27      	ldr	r3, [pc, #156]	; (8007270 <prvHeapInit+0xac>)
 80071d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f003 0307 	and.w	r3, r3, #7
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00c      	beq.n	80071f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	3307      	adds	r3, #7
 80071e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 0307 	bic.w	r3, r3, #7
 80071ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	4a1f      	ldr	r2, [pc, #124]	; (8007270 <prvHeapInit+0xac>)
 80071f4:	4413      	add	r3, r2
 80071f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80071fc:	4a1d      	ldr	r2, [pc, #116]	; (8007274 <prvHeapInit+0xb0>)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007202:	4b1c      	ldr	r3, [pc, #112]	; (8007274 <prvHeapInit+0xb0>)
 8007204:	2200      	movs	r2, #0
 8007206:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	4413      	add	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007210:	2208      	movs	r2, #8
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	1a9b      	subs	r3, r3, r2
 8007216:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f023 0307 	bic.w	r3, r3, #7
 800721e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4a15      	ldr	r2, [pc, #84]	; (8007278 <prvHeapInit+0xb4>)
 8007224:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007226:	4b14      	ldr	r3, [pc, #80]	; (8007278 <prvHeapInit+0xb4>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2200      	movs	r2, #0
 800722c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800722e:	4b12      	ldr	r3, [pc, #72]	; (8007278 <prvHeapInit+0xb4>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2200      	movs	r2, #0
 8007234:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	1ad2      	subs	r2, r2, r3
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007244:	4b0c      	ldr	r3, [pc, #48]	; (8007278 <prvHeapInit+0xb4>)
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	4a0a      	ldr	r2, [pc, #40]	; (800727c <prvHeapInit+0xb8>)
 8007252:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	4a09      	ldr	r2, [pc, #36]	; (8007280 <prvHeapInit+0xbc>)
 800725a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800725c:	4b09      	ldr	r3, [pc, #36]	; (8007284 <prvHeapInit+0xc0>)
 800725e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007262:	601a      	str	r2, [r3, #0]
}
 8007264:	bf00      	nop
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	20000f14 	.word	0x20000f14
 8007274:	20004b14 	.word	0x20004b14
 8007278:	20004b1c 	.word	0x20004b1c
 800727c:	20004b24 	.word	0x20004b24
 8007280:	20004b20 	.word	0x20004b20
 8007284:	20004b28 	.word	0x20004b28

08007288 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007290:	4b28      	ldr	r3, [pc, #160]	; (8007334 <prvInsertBlockIntoFreeList+0xac>)
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	e002      	b.n	800729c <prvInsertBlockIntoFreeList+0x14>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d8f7      	bhi.n	8007296 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	4413      	add	r3, r2
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d108      	bne.n	80072ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	441a      	add	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	441a      	add	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d118      	bne.n	8007310 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	4b15      	ldr	r3, [pc, #84]	; (8007338 <prvInsertBlockIntoFreeList+0xb0>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d00d      	beq.n	8007306 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	441a      	add	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	e008      	b.n	8007318 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007306:	4b0c      	ldr	r3, [pc, #48]	; (8007338 <prvInsertBlockIntoFreeList+0xb0>)
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	e003      	b.n	8007318 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	429a      	cmp	r2, r3
 800731e:	d002      	beq.n	8007326 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007326:	bf00      	nop
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	20004b14 	.word	0x20004b14
 8007338:	20004b1c 	.word	0x20004b1c

0800733c <__errno>:
 800733c:	4b01      	ldr	r3, [pc, #4]	; (8007344 <__errno+0x8>)
 800733e:	6818      	ldr	r0, [r3, #0]
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	20000014 	.word	0x20000014

08007348 <__libc_init_array>:
 8007348:	b570      	push	{r4, r5, r6, lr}
 800734a:	4e0d      	ldr	r6, [pc, #52]	; (8007380 <__libc_init_array+0x38>)
 800734c:	4c0d      	ldr	r4, [pc, #52]	; (8007384 <__libc_init_array+0x3c>)
 800734e:	1ba4      	subs	r4, r4, r6
 8007350:	10a4      	asrs	r4, r4, #2
 8007352:	2500      	movs	r5, #0
 8007354:	42a5      	cmp	r5, r4
 8007356:	d109      	bne.n	800736c <__libc_init_array+0x24>
 8007358:	4e0b      	ldr	r6, [pc, #44]	; (8007388 <__libc_init_array+0x40>)
 800735a:	4c0c      	ldr	r4, [pc, #48]	; (800738c <__libc_init_array+0x44>)
 800735c:	f003 fd58 	bl	800ae10 <_init>
 8007360:	1ba4      	subs	r4, r4, r6
 8007362:	10a4      	asrs	r4, r4, #2
 8007364:	2500      	movs	r5, #0
 8007366:	42a5      	cmp	r5, r4
 8007368:	d105      	bne.n	8007376 <__libc_init_array+0x2e>
 800736a:	bd70      	pop	{r4, r5, r6, pc}
 800736c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007370:	4798      	blx	r3
 8007372:	3501      	adds	r5, #1
 8007374:	e7ee      	b.n	8007354 <__libc_init_array+0xc>
 8007376:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800737a:	4798      	blx	r3
 800737c:	3501      	adds	r5, #1
 800737e:	e7f2      	b.n	8007366 <__libc_init_array+0x1e>
 8007380:	0800b250 	.word	0x0800b250
 8007384:	0800b250 	.word	0x0800b250
 8007388:	0800b250 	.word	0x0800b250
 800738c:	0800b254 	.word	0x0800b254

08007390 <memcpy>:
 8007390:	b510      	push	{r4, lr}
 8007392:	1e43      	subs	r3, r0, #1
 8007394:	440a      	add	r2, r1
 8007396:	4291      	cmp	r1, r2
 8007398:	d100      	bne.n	800739c <memcpy+0xc>
 800739a:	bd10      	pop	{r4, pc}
 800739c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073a4:	e7f7      	b.n	8007396 <memcpy+0x6>

080073a6 <memset>:
 80073a6:	4402      	add	r2, r0
 80073a8:	4603      	mov	r3, r0
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d100      	bne.n	80073b0 <memset+0xa>
 80073ae:	4770      	bx	lr
 80073b0:	f803 1b01 	strb.w	r1, [r3], #1
 80073b4:	e7f9      	b.n	80073aa <memset+0x4>

080073b6 <__cvt>:
 80073b6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073ba:	ec55 4b10 	vmov	r4, r5, d0
 80073be:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80073c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80073c4:	2d00      	cmp	r5, #0
 80073c6:	460e      	mov	r6, r1
 80073c8:	4691      	mov	r9, r2
 80073ca:	4619      	mov	r1, r3
 80073cc:	bfb8      	it	lt
 80073ce:	4622      	movlt	r2, r4
 80073d0:	462b      	mov	r3, r5
 80073d2:	f027 0720 	bic.w	r7, r7, #32
 80073d6:	bfbb      	ittet	lt
 80073d8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80073dc:	461d      	movlt	r5, r3
 80073de:	2300      	movge	r3, #0
 80073e0:	232d      	movlt	r3, #45	; 0x2d
 80073e2:	bfb8      	it	lt
 80073e4:	4614      	movlt	r4, r2
 80073e6:	2f46      	cmp	r7, #70	; 0x46
 80073e8:	700b      	strb	r3, [r1, #0]
 80073ea:	d004      	beq.n	80073f6 <__cvt+0x40>
 80073ec:	2f45      	cmp	r7, #69	; 0x45
 80073ee:	d100      	bne.n	80073f2 <__cvt+0x3c>
 80073f0:	3601      	adds	r6, #1
 80073f2:	2102      	movs	r1, #2
 80073f4:	e000      	b.n	80073f8 <__cvt+0x42>
 80073f6:	2103      	movs	r1, #3
 80073f8:	ab03      	add	r3, sp, #12
 80073fa:	9301      	str	r3, [sp, #4]
 80073fc:	ab02      	add	r3, sp, #8
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	4632      	mov	r2, r6
 8007402:	4653      	mov	r3, sl
 8007404:	ec45 4b10 	vmov	d0, r4, r5
 8007408:	f001 fd76 	bl	8008ef8 <_dtoa_r>
 800740c:	2f47      	cmp	r7, #71	; 0x47
 800740e:	4680      	mov	r8, r0
 8007410:	d102      	bne.n	8007418 <__cvt+0x62>
 8007412:	f019 0f01 	tst.w	r9, #1
 8007416:	d026      	beq.n	8007466 <__cvt+0xb0>
 8007418:	2f46      	cmp	r7, #70	; 0x46
 800741a:	eb08 0906 	add.w	r9, r8, r6
 800741e:	d111      	bne.n	8007444 <__cvt+0x8e>
 8007420:	f898 3000 	ldrb.w	r3, [r8]
 8007424:	2b30      	cmp	r3, #48	; 0x30
 8007426:	d10a      	bne.n	800743e <__cvt+0x88>
 8007428:	2200      	movs	r2, #0
 800742a:	2300      	movs	r3, #0
 800742c:	4620      	mov	r0, r4
 800742e:	4629      	mov	r1, r5
 8007430:	f7f9 fb52 	bl	8000ad8 <__aeabi_dcmpeq>
 8007434:	b918      	cbnz	r0, 800743e <__cvt+0x88>
 8007436:	f1c6 0601 	rsb	r6, r6, #1
 800743a:	f8ca 6000 	str.w	r6, [sl]
 800743e:	f8da 3000 	ldr.w	r3, [sl]
 8007442:	4499      	add	r9, r3
 8007444:	2200      	movs	r2, #0
 8007446:	2300      	movs	r3, #0
 8007448:	4620      	mov	r0, r4
 800744a:	4629      	mov	r1, r5
 800744c:	f7f9 fb44 	bl	8000ad8 <__aeabi_dcmpeq>
 8007450:	b938      	cbnz	r0, 8007462 <__cvt+0xac>
 8007452:	2230      	movs	r2, #48	; 0x30
 8007454:	9b03      	ldr	r3, [sp, #12]
 8007456:	454b      	cmp	r3, r9
 8007458:	d205      	bcs.n	8007466 <__cvt+0xb0>
 800745a:	1c59      	adds	r1, r3, #1
 800745c:	9103      	str	r1, [sp, #12]
 800745e:	701a      	strb	r2, [r3, #0]
 8007460:	e7f8      	b.n	8007454 <__cvt+0x9e>
 8007462:	f8cd 900c 	str.w	r9, [sp, #12]
 8007466:	9b03      	ldr	r3, [sp, #12]
 8007468:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800746a:	eba3 0308 	sub.w	r3, r3, r8
 800746e:	4640      	mov	r0, r8
 8007470:	6013      	str	r3, [r2, #0]
 8007472:	b004      	add	sp, #16
 8007474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007478 <__exponent>:
 8007478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800747a:	2900      	cmp	r1, #0
 800747c:	4604      	mov	r4, r0
 800747e:	bfba      	itte	lt
 8007480:	4249      	neglt	r1, r1
 8007482:	232d      	movlt	r3, #45	; 0x2d
 8007484:	232b      	movge	r3, #43	; 0x2b
 8007486:	2909      	cmp	r1, #9
 8007488:	f804 2b02 	strb.w	r2, [r4], #2
 800748c:	7043      	strb	r3, [r0, #1]
 800748e:	dd20      	ble.n	80074d2 <__exponent+0x5a>
 8007490:	f10d 0307 	add.w	r3, sp, #7
 8007494:	461f      	mov	r7, r3
 8007496:	260a      	movs	r6, #10
 8007498:	fb91 f5f6 	sdiv	r5, r1, r6
 800749c:	fb06 1115 	mls	r1, r6, r5, r1
 80074a0:	3130      	adds	r1, #48	; 0x30
 80074a2:	2d09      	cmp	r5, #9
 80074a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80074a8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80074ac:	4629      	mov	r1, r5
 80074ae:	dc09      	bgt.n	80074c4 <__exponent+0x4c>
 80074b0:	3130      	adds	r1, #48	; 0x30
 80074b2:	3b02      	subs	r3, #2
 80074b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80074b8:	42bb      	cmp	r3, r7
 80074ba:	4622      	mov	r2, r4
 80074bc:	d304      	bcc.n	80074c8 <__exponent+0x50>
 80074be:	1a10      	subs	r0, r2, r0
 80074c0:	b003      	add	sp, #12
 80074c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074c4:	4613      	mov	r3, r2
 80074c6:	e7e7      	b.n	8007498 <__exponent+0x20>
 80074c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074cc:	f804 2b01 	strb.w	r2, [r4], #1
 80074d0:	e7f2      	b.n	80074b8 <__exponent+0x40>
 80074d2:	2330      	movs	r3, #48	; 0x30
 80074d4:	4419      	add	r1, r3
 80074d6:	7083      	strb	r3, [r0, #2]
 80074d8:	1d02      	adds	r2, r0, #4
 80074da:	70c1      	strb	r1, [r0, #3]
 80074dc:	e7ef      	b.n	80074be <__exponent+0x46>
	...

080074e0 <_printf_float>:
 80074e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e4:	b08d      	sub	sp, #52	; 0x34
 80074e6:	460c      	mov	r4, r1
 80074e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80074ec:	4616      	mov	r6, r2
 80074ee:	461f      	mov	r7, r3
 80074f0:	4605      	mov	r5, r0
 80074f2:	f002 fde5 	bl	800a0c0 <_localeconv_r>
 80074f6:	6803      	ldr	r3, [r0, #0]
 80074f8:	9304      	str	r3, [sp, #16]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7f8 fe70 	bl	80001e0 <strlen>
 8007500:	2300      	movs	r3, #0
 8007502:	930a      	str	r3, [sp, #40]	; 0x28
 8007504:	f8d8 3000 	ldr.w	r3, [r8]
 8007508:	9005      	str	r0, [sp, #20]
 800750a:	3307      	adds	r3, #7
 800750c:	f023 0307 	bic.w	r3, r3, #7
 8007510:	f103 0208 	add.w	r2, r3, #8
 8007514:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007518:	f8d4 b000 	ldr.w	fp, [r4]
 800751c:	f8c8 2000 	str.w	r2, [r8]
 8007520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007524:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007528:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800752c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007530:	9307      	str	r3, [sp, #28]
 8007532:	f8cd 8018 	str.w	r8, [sp, #24]
 8007536:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800753a:	4ba7      	ldr	r3, [pc, #668]	; (80077d8 <_printf_float+0x2f8>)
 800753c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007540:	f7f9 fafc 	bl	8000b3c <__aeabi_dcmpun>
 8007544:	bb70      	cbnz	r0, 80075a4 <_printf_float+0xc4>
 8007546:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800754a:	4ba3      	ldr	r3, [pc, #652]	; (80077d8 <_printf_float+0x2f8>)
 800754c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007550:	f7f9 fad6 	bl	8000b00 <__aeabi_dcmple>
 8007554:	bb30      	cbnz	r0, 80075a4 <_printf_float+0xc4>
 8007556:	2200      	movs	r2, #0
 8007558:	2300      	movs	r3, #0
 800755a:	4640      	mov	r0, r8
 800755c:	4649      	mov	r1, r9
 800755e:	f7f9 fac5 	bl	8000aec <__aeabi_dcmplt>
 8007562:	b110      	cbz	r0, 800756a <_printf_float+0x8a>
 8007564:	232d      	movs	r3, #45	; 0x2d
 8007566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800756a:	4a9c      	ldr	r2, [pc, #624]	; (80077dc <_printf_float+0x2fc>)
 800756c:	4b9c      	ldr	r3, [pc, #624]	; (80077e0 <_printf_float+0x300>)
 800756e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007572:	bf8c      	ite	hi
 8007574:	4690      	movhi	r8, r2
 8007576:	4698      	movls	r8, r3
 8007578:	2303      	movs	r3, #3
 800757a:	f02b 0204 	bic.w	r2, fp, #4
 800757e:	6123      	str	r3, [r4, #16]
 8007580:	6022      	str	r2, [r4, #0]
 8007582:	f04f 0900 	mov.w	r9, #0
 8007586:	9700      	str	r7, [sp, #0]
 8007588:	4633      	mov	r3, r6
 800758a:	aa0b      	add	r2, sp, #44	; 0x2c
 800758c:	4621      	mov	r1, r4
 800758e:	4628      	mov	r0, r5
 8007590:	f000 f9e6 	bl	8007960 <_printf_common>
 8007594:	3001      	adds	r0, #1
 8007596:	f040 808d 	bne.w	80076b4 <_printf_float+0x1d4>
 800759a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800759e:	b00d      	add	sp, #52	; 0x34
 80075a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a4:	4642      	mov	r2, r8
 80075a6:	464b      	mov	r3, r9
 80075a8:	4640      	mov	r0, r8
 80075aa:	4649      	mov	r1, r9
 80075ac:	f7f9 fac6 	bl	8000b3c <__aeabi_dcmpun>
 80075b0:	b110      	cbz	r0, 80075b8 <_printf_float+0xd8>
 80075b2:	4a8c      	ldr	r2, [pc, #560]	; (80077e4 <_printf_float+0x304>)
 80075b4:	4b8c      	ldr	r3, [pc, #560]	; (80077e8 <_printf_float+0x308>)
 80075b6:	e7da      	b.n	800756e <_printf_float+0x8e>
 80075b8:	6861      	ldr	r1, [r4, #4]
 80075ba:	1c4b      	adds	r3, r1, #1
 80075bc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80075c0:	a80a      	add	r0, sp, #40	; 0x28
 80075c2:	d13e      	bne.n	8007642 <_printf_float+0x162>
 80075c4:	2306      	movs	r3, #6
 80075c6:	6063      	str	r3, [r4, #4]
 80075c8:	2300      	movs	r3, #0
 80075ca:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80075ce:	ab09      	add	r3, sp, #36	; 0x24
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	ec49 8b10 	vmov	d0, r8, r9
 80075d6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80075da:	6022      	str	r2, [r4, #0]
 80075dc:	f8cd a004 	str.w	sl, [sp, #4]
 80075e0:	6861      	ldr	r1, [r4, #4]
 80075e2:	4628      	mov	r0, r5
 80075e4:	f7ff fee7 	bl	80073b6 <__cvt>
 80075e8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80075ec:	2b47      	cmp	r3, #71	; 0x47
 80075ee:	4680      	mov	r8, r0
 80075f0:	d109      	bne.n	8007606 <_printf_float+0x126>
 80075f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f4:	1cd8      	adds	r0, r3, #3
 80075f6:	db02      	blt.n	80075fe <_printf_float+0x11e>
 80075f8:	6862      	ldr	r2, [r4, #4]
 80075fa:	4293      	cmp	r3, r2
 80075fc:	dd47      	ble.n	800768e <_printf_float+0x1ae>
 80075fe:	f1aa 0a02 	sub.w	sl, sl, #2
 8007602:	fa5f fa8a 	uxtb.w	sl, sl
 8007606:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800760a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800760c:	d824      	bhi.n	8007658 <_printf_float+0x178>
 800760e:	3901      	subs	r1, #1
 8007610:	4652      	mov	r2, sl
 8007612:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007616:	9109      	str	r1, [sp, #36]	; 0x24
 8007618:	f7ff ff2e 	bl	8007478 <__exponent>
 800761c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800761e:	1813      	adds	r3, r2, r0
 8007620:	2a01      	cmp	r2, #1
 8007622:	4681      	mov	r9, r0
 8007624:	6123      	str	r3, [r4, #16]
 8007626:	dc02      	bgt.n	800762e <_printf_float+0x14e>
 8007628:	6822      	ldr	r2, [r4, #0]
 800762a:	07d1      	lsls	r1, r2, #31
 800762c:	d501      	bpl.n	8007632 <_printf_float+0x152>
 800762e:	3301      	adds	r3, #1
 8007630:	6123      	str	r3, [r4, #16]
 8007632:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007636:	2b00      	cmp	r3, #0
 8007638:	d0a5      	beq.n	8007586 <_printf_float+0xa6>
 800763a:	232d      	movs	r3, #45	; 0x2d
 800763c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007640:	e7a1      	b.n	8007586 <_printf_float+0xa6>
 8007642:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007646:	f000 8177 	beq.w	8007938 <_printf_float+0x458>
 800764a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800764e:	d1bb      	bne.n	80075c8 <_printf_float+0xe8>
 8007650:	2900      	cmp	r1, #0
 8007652:	d1b9      	bne.n	80075c8 <_printf_float+0xe8>
 8007654:	2301      	movs	r3, #1
 8007656:	e7b6      	b.n	80075c6 <_printf_float+0xe6>
 8007658:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800765c:	d119      	bne.n	8007692 <_printf_float+0x1b2>
 800765e:	2900      	cmp	r1, #0
 8007660:	6863      	ldr	r3, [r4, #4]
 8007662:	dd0c      	ble.n	800767e <_printf_float+0x19e>
 8007664:	6121      	str	r1, [r4, #16]
 8007666:	b913      	cbnz	r3, 800766e <_printf_float+0x18e>
 8007668:	6822      	ldr	r2, [r4, #0]
 800766a:	07d2      	lsls	r2, r2, #31
 800766c:	d502      	bpl.n	8007674 <_printf_float+0x194>
 800766e:	3301      	adds	r3, #1
 8007670:	440b      	add	r3, r1
 8007672:	6123      	str	r3, [r4, #16]
 8007674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007676:	65a3      	str	r3, [r4, #88]	; 0x58
 8007678:	f04f 0900 	mov.w	r9, #0
 800767c:	e7d9      	b.n	8007632 <_printf_float+0x152>
 800767e:	b913      	cbnz	r3, 8007686 <_printf_float+0x1a6>
 8007680:	6822      	ldr	r2, [r4, #0]
 8007682:	07d0      	lsls	r0, r2, #31
 8007684:	d501      	bpl.n	800768a <_printf_float+0x1aa>
 8007686:	3302      	adds	r3, #2
 8007688:	e7f3      	b.n	8007672 <_printf_float+0x192>
 800768a:	2301      	movs	r3, #1
 800768c:	e7f1      	b.n	8007672 <_printf_float+0x192>
 800768e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007692:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007696:	4293      	cmp	r3, r2
 8007698:	db05      	blt.n	80076a6 <_printf_float+0x1c6>
 800769a:	6822      	ldr	r2, [r4, #0]
 800769c:	6123      	str	r3, [r4, #16]
 800769e:	07d1      	lsls	r1, r2, #31
 80076a0:	d5e8      	bpl.n	8007674 <_printf_float+0x194>
 80076a2:	3301      	adds	r3, #1
 80076a4:	e7e5      	b.n	8007672 <_printf_float+0x192>
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	bfd4      	ite	le
 80076aa:	f1c3 0302 	rsble	r3, r3, #2
 80076ae:	2301      	movgt	r3, #1
 80076b0:	4413      	add	r3, r2
 80076b2:	e7de      	b.n	8007672 <_printf_float+0x192>
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	055a      	lsls	r2, r3, #21
 80076b8:	d407      	bmi.n	80076ca <_printf_float+0x1ea>
 80076ba:	6923      	ldr	r3, [r4, #16]
 80076bc:	4642      	mov	r2, r8
 80076be:	4631      	mov	r1, r6
 80076c0:	4628      	mov	r0, r5
 80076c2:	47b8      	blx	r7
 80076c4:	3001      	adds	r0, #1
 80076c6:	d12b      	bne.n	8007720 <_printf_float+0x240>
 80076c8:	e767      	b.n	800759a <_printf_float+0xba>
 80076ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80076ce:	f240 80dc 	bls.w	800788a <_printf_float+0x3aa>
 80076d2:	2200      	movs	r2, #0
 80076d4:	2300      	movs	r3, #0
 80076d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076da:	f7f9 f9fd 	bl	8000ad8 <__aeabi_dcmpeq>
 80076de:	2800      	cmp	r0, #0
 80076e0:	d033      	beq.n	800774a <_printf_float+0x26a>
 80076e2:	2301      	movs	r3, #1
 80076e4:	4a41      	ldr	r2, [pc, #260]	; (80077ec <_printf_float+0x30c>)
 80076e6:	4631      	mov	r1, r6
 80076e8:	4628      	mov	r0, r5
 80076ea:	47b8      	blx	r7
 80076ec:	3001      	adds	r0, #1
 80076ee:	f43f af54 	beq.w	800759a <_printf_float+0xba>
 80076f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076f6:	429a      	cmp	r2, r3
 80076f8:	db02      	blt.n	8007700 <_printf_float+0x220>
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	07d8      	lsls	r0, r3, #31
 80076fe:	d50f      	bpl.n	8007720 <_printf_float+0x240>
 8007700:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007704:	4631      	mov	r1, r6
 8007706:	4628      	mov	r0, r5
 8007708:	47b8      	blx	r7
 800770a:	3001      	adds	r0, #1
 800770c:	f43f af45 	beq.w	800759a <_printf_float+0xba>
 8007710:	f04f 0800 	mov.w	r8, #0
 8007714:	f104 091a 	add.w	r9, r4, #26
 8007718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800771a:	3b01      	subs	r3, #1
 800771c:	4543      	cmp	r3, r8
 800771e:	dc09      	bgt.n	8007734 <_printf_float+0x254>
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	079b      	lsls	r3, r3, #30
 8007724:	f100 8103 	bmi.w	800792e <_printf_float+0x44e>
 8007728:	68e0      	ldr	r0, [r4, #12]
 800772a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800772c:	4298      	cmp	r0, r3
 800772e:	bfb8      	it	lt
 8007730:	4618      	movlt	r0, r3
 8007732:	e734      	b.n	800759e <_printf_float+0xbe>
 8007734:	2301      	movs	r3, #1
 8007736:	464a      	mov	r2, r9
 8007738:	4631      	mov	r1, r6
 800773a:	4628      	mov	r0, r5
 800773c:	47b8      	blx	r7
 800773e:	3001      	adds	r0, #1
 8007740:	f43f af2b 	beq.w	800759a <_printf_float+0xba>
 8007744:	f108 0801 	add.w	r8, r8, #1
 8007748:	e7e6      	b.n	8007718 <_printf_float+0x238>
 800774a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800774c:	2b00      	cmp	r3, #0
 800774e:	dc2b      	bgt.n	80077a8 <_printf_float+0x2c8>
 8007750:	2301      	movs	r3, #1
 8007752:	4a26      	ldr	r2, [pc, #152]	; (80077ec <_printf_float+0x30c>)
 8007754:	4631      	mov	r1, r6
 8007756:	4628      	mov	r0, r5
 8007758:	47b8      	blx	r7
 800775a:	3001      	adds	r0, #1
 800775c:	f43f af1d 	beq.w	800759a <_printf_float+0xba>
 8007760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007762:	b923      	cbnz	r3, 800776e <_printf_float+0x28e>
 8007764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007766:	b913      	cbnz	r3, 800776e <_printf_float+0x28e>
 8007768:	6823      	ldr	r3, [r4, #0]
 800776a:	07d9      	lsls	r1, r3, #31
 800776c:	d5d8      	bpl.n	8007720 <_printf_float+0x240>
 800776e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007772:	4631      	mov	r1, r6
 8007774:	4628      	mov	r0, r5
 8007776:	47b8      	blx	r7
 8007778:	3001      	adds	r0, #1
 800777a:	f43f af0e 	beq.w	800759a <_printf_float+0xba>
 800777e:	f04f 0900 	mov.w	r9, #0
 8007782:	f104 0a1a 	add.w	sl, r4, #26
 8007786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007788:	425b      	negs	r3, r3
 800778a:	454b      	cmp	r3, r9
 800778c:	dc01      	bgt.n	8007792 <_printf_float+0x2b2>
 800778e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007790:	e794      	b.n	80076bc <_printf_float+0x1dc>
 8007792:	2301      	movs	r3, #1
 8007794:	4652      	mov	r2, sl
 8007796:	4631      	mov	r1, r6
 8007798:	4628      	mov	r0, r5
 800779a:	47b8      	blx	r7
 800779c:	3001      	adds	r0, #1
 800779e:	f43f aefc 	beq.w	800759a <_printf_float+0xba>
 80077a2:	f109 0901 	add.w	r9, r9, #1
 80077a6:	e7ee      	b.n	8007786 <_printf_float+0x2a6>
 80077a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077ac:	429a      	cmp	r2, r3
 80077ae:	bfa8      	it	ge
 80077b0:	461a      	movge	r2, r3
 80077b2:	2a00      	cmp	r2, #0
 80077b4:	4691      	mov	r9, r2
 80077b6:	dd07      	ble.n	80077c8 <_printf_float+0x2e8>
 80077b8:	4613      	mov	r3, r2
 80077ba:	4631      	mov	r1, r6
 80077bc:	4642      	mov	r2, r8
 80077be:	4628      	mov	r0, r5
 80077c0:	47b8      	blx	r7
 80077c2:	3001      	adds	r0, #1
 80077c4:	f43f aee9 	beq.w	800759a <_printf_float+0xba>
 80077c8:	f104 031a 	add.w	r3, r4, #26
 80077cc:	f04f 0b00 	mov.w	fp, #0
 80077d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077d4:	9306      	str	r3, [sp, #24]
 80077d6:	e015      	b.n	8007804 <_printf_float+0x324>
 80077d8:	7fefffff 	.word	0x7fefffff
 80077dc:	0800af98 	.word	0x0800af98
 80077e0:	0800af94 	.word	0x0800af94
 80077e4:	0800afa0 	.word	0x0800afa0
 80077e8:	0800af9c 	.word	0x0800af9c
 80077ec:	0800afa4 	.word	0x0800afa4
 80077f0:	2301      	movs	r3, #1
 80077f2:	9a06      	ldr	r2, [sp, #24]
 80077f4:	4631      	mov	r1, r6
 80077f6:	4628      	mov	r0, r5
 80077f8:	47b8      	blx	r7
 80077fa:	3001      	adds	r0, #1
 80077fc:	f43f aecd 	beq.w	800759a <_printf_float+0xba>
 8007800:	f10b 0b01 	add.w	fp, fp, #1
 8007804:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007808:	ebaa 0309 	sub.w	r3, sl, r9
 800780c:	455b      	cmp	r3, fp
 800780e:	dcef      	bgt.n	80077f0 <_printf_float+0x310>
 8007810:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007814:	429a      	cmp	r2, r3
 8007816:	44d0      	add	r8, sl
 8007818:	db15      	blt.n	8007846 <_printf_float+0x366>
 800781a:	6823      	ldr	r3, [r4, #0]
 800781c:	07da      	lsls	r2, r3, #31
 800781e:	d412      	bmi.n	8007846 <_printf_float+0x366>
 8007820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007822:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007824:	eba3 020a 	sub.w	r2, r3, sl
 8007828:	eba3 0a01 	sub.w	sl, r3, r1
 800782c:	4592      	cmp	sl, r2
 800782e:	bfa8      	it	ge
 8007830:	4692      	movge	sl, r2
 8007832:	f1ba 0f00 	cmp.w	sl, #0
 8007836:	dc0e      	bgt.n	8007856 <_printf_float+0x376>
 8007838:	f04f 0800 	mov.w	r8, #0
 800783c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007840:	f104 091a 	add.w	r9, r4, #26
 8007844:	e019      	b.n	800787a <_printf_float+0x39a>
 8007846:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800784a:	4631      	mov	r1, r6
 800784c:	4628      	mov	r0, r5
 800784e:	47b8      	blx	r7
 8007850:	3001      	adds	r0, #1
 8007852:	d1e5      	bne.n	8007820 <_printf_float+0x340>
 8007854:	e6a1      	b.n	800759a <_printf_float+0xba>
 8007856:	4653      	mov	r3, sl
 8007858:	4642      	mov	r2, r8
 800785a:	4631      	mov	r1, r6
 800785c:	4628      	mov	r0, r5
 800785e:	47b8      	blx	r7
 8007860:	3001      	adds	r0, #1
 8007862:	d1e9      	bne.n	8007838 <_printf_float+0x358>
 8007864:	e699      	b.n	800759a <_printf_float+0xba>
 8007866:	2301      	movs	r3, #1
 8007868:	464a      	mov	r2, r9
 800786a:	4631      	mov	r1, r6
 800786c:	4628      	mov	r0, r5
 800786e:	47b8      	blx	r7
 8007870:	3001      	adds	r0, #1
 8007872:	f43f ae92 	beq.w	800759a <_printf_float+0xba>
 8007876:	f108 0801 	add.w	r8, r8, #1
 800787a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800787e:	1a9b      	subs	r3, r3, r2
 8007880:	eba3 030a 	sub.w	r3, r3, sl
 8007884:	4543      	cmp	r3, r8
 8007886:	dcee      	bgt.n	8007866 <_printf_float+0x386>
 8007888:	e74a      	b.n	8007720 <_printf_float+0x240>
 800788a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800788c:	2a01      	cmp	r2, #1
 800788e:	dc01      	bgt.n	8007894 <_printf_float+0x3b4>
 8007890:	07db      	lsls	r3, r3, #31
 8007892:	d53a      	bpl.n	800790a <_printf_float+0x42a>
 8007894:	2301      	movs	r3, #1
 8007896:	4642      	mov	r2, r8
 8007898:	4631      	mov	r1, r6
 800789a:	4628      	mov	r0, r5
 800789c:	47b8      	blx	r7
 800789e:	3001      	adds	r0, #1
 80078a0:	f43f ae7b 	beq.w	800759a <_printf_float+0xba>
 80078a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078a8:	4631      	mov	r1, r6
 80078aa:	4628      	mov	r0, r5
 80078ac:	47b8      	blx	r7
 80078ae:	3001      	adds	r0, #1
 80078b0:	f108 0801 	add.w	r8, r8, #1
 80078b4:	f43f ae71 	beq.w	800759a <_printf_float+0xba>
 80078b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ba:	2200      	movs	r2, #0
 80078bc:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80078c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078c4:	2300      	movs	r3, #0
 80078c6:	f7f9 f907 	bl	8000ad8 <__aeabi_dcmpeq>
 80078ca:	b9c8      	cbnz	r0, 8007900 <_printf_float+0x420>
 80078cc:	4653      	mov	r3, sl
 80078ce:	4642      	mov	r2, r8
 80078d0:	4631      	mov	r1, r6
 80078d2:	4628      	mov	r0, r5
 80078d4:	47b8      	blx	r7
 80078d6:	3001      	adds	r0, #1
 80078d8:	d10e      	bne.n	80078f8 <_printf_float+0x418>
 80078da:	e65e      	b.n	800759a <_printf_float+0xba>
 80078dc:	2301      	movs	r3, #1
 80078de:	4652      	mov	r2, sl
 80078e0:	4631      	mov	r1, r6
 80078e2:	4628      	mov	r0, r5
 80078e4:	47b8      	blx	r7
 80078e6:	3001      	adds	r0, #1
 80078e8:	f43f ae57 	beq.w	800759a <_printf_float+0xba>
 80078ec:	f108 0801 	add.w	r8, r8, #1
 80078f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078f2:	3b01      	subs	r3, #1
 80078f4:	4543      	cmp	r3, r8
 80078f6:	dcf1      	bgt.n	80078dc <_printf_float+0x3fc>
 80078f8:	464b      	mov	r3, r9
 80078fa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80078fe:	e6de      	b.n	80076be <_printf_float+0x1de>
 8007900:	f04f 0800 	mov.w	r8, #0
 8007904:	f104 0a1a 	add.w	sl, r4, #26
 8007908:	e7f2      	b.n	80078f0 <_printf_float+0x410>
 800790a:	2301      	movs	r3, #1
 800790c:	e7df      	b.n	80078ce <_printf_float+0x3ee>
 800790e:	2301      	movs	r3, #1
 8007910:	464a      	mov	r2, r9
 8007912:	4631      	mov	r1, r6
 8007914:	4628      	mov	r0, r5
 8007916:	47b8      	blx	r7
 8007918:	3001      	adds	r0, #1
 800791a:	f43f ae3e 	beq.w	800759a <_printf_float+0xba>
 800791e:	f108 0801 	add.w	r8, r8, #1
 8007922:	68e3      	ldr	r3, [r4, #12]
 8007924:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007926:	1a9b      	subs	r3, r3, r2
 8007928:	4543      	cmp	r3, r8
 800792a:	dcf0      	bgt.n	800790e <_printf_float+0x42e>
 800792c:	e6fc      	b.n	8007728 <_printf_float+0x248>
 800792e:	f04f 0800 	mov.w	r8, #0
 8007932:	f104 0919 	add.w	r9, r4, #25
 8007936:	e7f4      	b.n	8007922 <_printf_float+0x442>
 8007938:	2900      	cmp	r1, #0
 800793a:	f43f ae8b 	beq.w	8007654 <_printf_float+0x174>
 800793e:	2300      	movs	r3, #0
 8007940:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007944:	ab09      	add	r3, sp, #36	; 0x24
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	ec49 8b10 	vmov	d0, r8, r9
 800794c:	6022      	str	r2, [r4, #0]
 800794e:	f8cd a004 	str.w	sl, [sp, #4]
 8007952:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007956:	4628      	mov	r0, r5
 8007958:	f7ff fd2d 	bl	80073b6 <__cvt>
 800795c:	4680      	mov	r8, r0
 800795e:	e648      	b.n	80075f2 <_printf_float+0x112>

08007960 <_printf_common>:
 8007960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007964:	4691      	mov	r9, r2
 8007966:	461f      	mov	r7, r3
 8007968:	688a      	ldr	r2, [r1, #8]
 800796a:	690b      	ldr	r3, [r1, #16]
 800796c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007970:	4293      	cmp	r3, r2
 8007972:	bfb8      	it	lt
 8007974:	4613      	movlt	r3, r2
 8007976:	f8c9 3000 	str.w	r3, [r9]
 800797a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800797e:	4606      	mov	r6, r0
 8007980:	460c      	mov	r4, r1
 8007982:	b112      	cbz	r2, 800798a <_printf_common+0x2a>
 8007984:	3301      	adds	r3, #1
 8007986:	f8c9 3000 	str.w	r3, [r9]
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	0699      	lsls	r1, r3, #26
 800798e:	bf42      	ittt	mi
 8007990:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007994:	3302      	addmi	r3, #2
 8007996:	f8c9 3000 	strmi.w	r3, [r9]
 800799a:	6825      	ldr	r5, [r4, #0]
 800799c:	f015 0506 	ands.w	r5, r5, #6
 80079a0:	d107      	bne.n	80079b2 <_printf_common+0x52>
 80079a2:	f104 0a19 	add.w	sl, r4, #25
 80079a6:	68e3      	ldr	r3, [r4, #12]
 80079a8:	f8d9 2000 	ldr.w	r2, [r9]
 80079ac:	1a9b      	subs	r3, r3, r2
 80079ae:	42ab      	cmp	r3, r5
 80079b0:	dc28      	bgt.n	8007a04 <_printf_common+0xa4>
 80079b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80079b6:	6822      	ldr	r2, [r4, #0]
 80079b8:	3300      	adds	r3, #0
 80079ba:	bf18      	it	ne
 80079bc:	2301      	movne	r3, #1
 80079be:	0692      	lsls	r2, r2, #26
 80079c0:	d42d      	bmi.n	8007a1e <_printf_common+0xbe>
 80079c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079c6:	4639      	mov	r1, r7
 80079c8:	4630      	mov	r0, r6
 80079ca:	47c0      	blx	r8
 80079cc:	3001      	adds	r0, #1
 80079ce:	d020      	beq.n	8007a12 <_printf_common+0xb2>
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	68e5      	ldr	r5, [r4, #12]
 80079d4:	f8d9 2000 	ldr.w	r2, [r9]
 80079d8:	f003 0306 	and.w	r3, r3, #6
 80079dc:	2b04      	cmp	r3, #4
 80079de:	bf08      	it	eq
 80079e0:	1aad      	subeq	r5, r5, r2
 80079e2:	68a3      	ldr	r3, [r4, #8]
 80079e4:	6922      	ldr	r2, [r4, #16]
 80079e6:	bf0c      	ite	eq
 80079e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079ec:	2500      	movne	r5, #0
 80079ee:	4293      	cmp	r3, r2
 80079f0:	bfc4      	itt	gt
 80079f2:	1a9b      	subgt	r3, r3, r2
 80079f4:	18ed      	addgt	r5, r5, r3
 80079f6:	f04f 0900 	mov.w	r9, #0
 80079fa:	341a      	adds	r4, #26
 80079fc:	454d      	cmp	r5, r9
 80079fe:	d11a      	bne.n	8007a36 <_printf_common+0xd6>
 8007a00:	2000      	movs	r0, #0
 8007a02:	e008      	b.n	8007a16 <_printf_common+0xb6>
 8007a04:	2301      	movs	r3, #1
 8007a06:	4652      	mov	r2, sl
 8007a08:	4639      	mov	r1, r7
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	47c0      	blx	r8
 8007a0e:	3001      	adds	r0, #1
 8007a10:	d103      	bne.n	8007a1a <_printf_common+0xba>
 8007a12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a1a:	3501      	adds	r5, #1
 8007a1c:	e7c3      	b.n	80079a6 <_printf_common+0x46>
 8007a1e:	18e1      	adds	r1, r4, r3
 8007a20:	1c5a      	adds	r2, r3, #1
 8007a22:	2030      	movs	r0, #48	; 0x30
 8007a24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a28:	4422      	add	r2, r4
 8007a2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a32:	3302      	adds	r3, #2
 8007a34:	e7c5      	b.n	80079c2 <_printf_common+0x62>
 8007a36:	2301      	movs	r3, #1
 8007a38:	4622      	mov	r2, r4
 8007a3a:	4639      	mov	r1, r7
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	47c0      	blx	r8
 8007a40:	3001      	adds	r0, #1
 8007a42:	d0e6      	beq.n	8007a12 <_printf_common+0xb2>
 8007a44:	f109 0901 	add.w	r9, r9, #1
 8007a48:	e7d8      	b.n	80079fc <_printf_common+0x9c>
	...

08007a4c <_printf_i>:
 8007a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007a54:	460c      	mov	r4, r1
 8007a56:	7e09      	ldrb	r1, [r1, #24]
 8007a58:	b085      	sub	sp, #20
 8007a5a:	296e      	cmp	r1, #110	; 0x6e
 8007a5c:	4617      	mov	r7, r2
 8007a5e:	4606      	mov	r6, r0
 8007a60:	4698      	mov	r8, r3
 8007a62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a64:	f000 80b3 	beq.w	8007bce <_printf_i+0x182>
 8007a68:	d822      	bhi.n	8007ab0 <_printf_i+0x64>
 8007a6a:	2963      	cmp	r1, #99	; 0x63
 8007a6c:	d036      	beq.n	8007adc <_printf_i+0x90>
 8007a6e:	d80a      	bhi.n	8007a86 <_printf_i+0x3a>
 8007a70:	2900      	cmp	r1, #0
 8007a72:	f000 80b9 	beq.w	8007be8 <_printf_i+0x19c>
 8007a76:	2958      	cmp	r1, #88	; 0x58
 8007a78:	f000 8083 	beq.w	8007b82 <_printf_i+0x136>
 8007a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007a84:	e032      	b.n	8007aec <_printf_i+0xa0>
 8007a86:	2964      	cmp	r1, #100	; 0x64
 8007a88:	d001      	beq.n	8007a8e <_printf_i+0x42>
 8007a8a:	2969      	cmp	r1, #105	; 0x69
 8007a8c:	d1f6      	bne.n	8007a7c <_printf_i+0x30>
 8007a8e:	6820      	ldr	r0, [r4, #0]
 8007a90:	6813      	ldr	r3, [r2, #0]
 8007a92:	0605      	lsls	r5, r0, #24
 8007a94:	f103 0104 	add.w	r1, r3, #4
 8007a98:	d52a      	bpl.n	8007af0 <_printf_i+0xa4>
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6011      	str	r1, [r2, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	da03      	bge.n	8007aaa <_printf_i+0x5e>
 8007aa2:	222d      	movs	r2, #45	; 0x2d
 8007aa4:	425b      	negs	r3, r3
 8007aa6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007aaa:	486f      	ldr	r0, [pc, #444]	; (8007c68 <_printf_i+0x21c>)
 8007aac:	220a      	movs	r2, #10
 8007aae:	e039      	b.n	8007b24 <_printf_i+0xd8>
 8007ab0:	2973      	cmp	r1, #115	; 0x73
 8007ab2:	f000 809d 	beq.w	8007bf0 <_printf_i+0x1a4>
 8007ab6:	d808      	bhi.n	8007aca <_printf_i+0x7e>
 8007ab8:	296f      	cmp	r1, #111	; 0x6f
 8007aba:	d020      	beq.n	8007afe <_printf_i+0xb2>
 8007abc:	2970      	cmp	r1, #112	; 0x70
 8007abe:	d1dd      	bne.n	8007a7c <_printf_i+0x30>
 8007ac0:	6823      	ldr	r3, [r4, #0]
 8007ac2:	f043 0320 	orr.w	r3, r3, #32
 8007ac6:	6023      	str	r3, [r4, #0]
 8007ac8:	e003      	b.n	8007ad2 <_printf_i+0x86>
 8007aca:	2975      	cmp	r1, #117	; 0x75
 8007acc:	d017      	beq.n	8007afe <_printf_i+0xb2>
 8007ace:	2978      	cmp	r1, #120	; 0x78
 8007ad0:	d1d4      	bne.n	8007a7c <_printf_i+0x30>
 8007ad2:	2378      	movs	r3, #120	; 0x78
 8007ad4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ad8:	4864      	ldr	r0, [pc, #400]	; (8007c6c <_printf_i+0x220>)
 8007ada:	e055      	b.n	8007b88 <_printf_i+0x13c>
 8007adc:	6813      	ldr	r3, [r2, #0]
 8007ade:	1d19      	adds	r1, r3, #4
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	6011      	str	r1, [r2, #0]
 8007ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007aec:	2301      	movs	r3, #1
 8007aee:	e08c      	b.n	8007c0a <_printf_i+0x1be>
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6011      	str	r1, [r2, #0]
 8007af4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007af8:	bf18      	it	ne
 8007afa:	b21b      	sxthne	r3, r3
 8007afc:	e7cf      	b.n	8007a9e <_printf_i+0x52>
 8007afe:	6813      	ldr	r3, [r2, #0]
 8007b00:	6825      	ldr	r5, [r4, #0]
 8007b02:	1d18      	adds	r0, r3, #4
 8007b04:	6010      	str	r0, [r2, #0]
 8007b06:	0628      	lsls	r0, r5, #24
 8007b08:	d501      	bpl.n	8007b0e <_printf_i+0xc2>
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	e002      	b.n	8007b14 <_printf_i+0xc8>
 8007b0e:	0668      	lsls	r0, r5, #25
 8007b10:	d5fb      	bpl.n	8007b0a <_printf_i+0xbe>
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	4854      	ldr	r0, [pc, #336]	; (8007c68 <_printf_i+0x21c>)
 8007b16:	296f      	cmp	r1, #111	; 0x6f
 8007b18:	bf14      	ite	ne
 8007b1a:	220a      	movne	r2, #10
 8007b1c:	2208      	moveq	r2, #8
 8007b1e:	2100      	movs	r1, #0
 8007b20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b24:	6865      	ldr	r5, [r4, #4]
 8007b26:	60a5      	str	r5, [r4, #8]
 8007b28:	2d00      	cmp	r5, #0
 8007b2a:	f2c0 8095 	blt.w	8007c58 <_printf_i+0x20c>
 8007b2e:	6821      	ldr	r1, [r4, #0]
 8007b30:	f021 0104 	bic.w	r1, r1, #4
 8007b34:	6021      	str	r1, [r4, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d13d      	bne.n	8007bb6 <_printf_i+0x16a>
 8007b3a:	2d00      	cmp	r5, #0
 8007b3c:	f040 808e 	bne.w	8007c5c <_printf_i+0x210>
 8007b40:	4665      	mov	r5, ip
 8007b42:	2a08      	cmp	r2, #8
 8007b44:	d10b      	bne.n	8007b5e <_printf_i+0x112>
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	07db      	lsls	r3, r3, #31
 8007b4a:	d508      	bpl.n	8007b5e <_printf_i+0x112>
 8007b4c:	6923      	ldr	r3, [r4, #16]
 8007b4e:	6862      	ldr	r2, [r4, #4]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	bfde      	ittt	le
 8007b54:	2330      	movle	r3, #48	; 0x30
 8007b56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b5a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007b5e:	ebac 0305 	sub.w	r3, ip, r5
 8007b62:	6123      	str	r3, [r4, #16]
 8007b64:	f8cd 8000 	str.w	r8, [sp]
 8007b68:	463b      	mov	r3, r7
 8007b6a:	aa03      	add	r2, sp, #12
 8007b6c:	4621      	mov	r1, r4
 8007b6e:	4630      	mov	r0, r6
 8007b70:	f7ff fef6 	bl	8007960 <_printf_common>
 8007b74:	3001      	adds	r0, #1
 8007b76:	d14d      	bne.n	8007c14 <_printf_i+0x1c8>
 8007b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b7c:	b005      	add	sp, #20
 8007b7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b82:	4839      	ldr	r0, [pc, #228]	; (8007c68 <_printf_i+0x21c>)
 8007b84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007b88:	6813      	ldr	r3, [r2, #0]
 8007b8a:	6821      	ldr	r1, [r4, #0]
 8007b8c:	1d1d      	adds	r5, r3, #4
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6015      	str	r5, [r2, #0]
 8007b92:	060a      	lsls	r2, r1, #24
 8007b94:	d50b      	bpl.n	8007bae <_printf_i+0x162>
 8007b96:	07ca      	lsls	r2, r1, #31
 8007b98:	bf44      	itt	mi
 8007b9a:	f041 0120 	orrmi.w	r1, r1, #32
 8007b9e:	6021      	strmi	r1, [r4, #0]
 8007ba0:	b91b      	cbnz	r3, 8007baa <_printf_i+0x15e>
 8007ba2:	6822      	ldr	r2, [r4, #0]
 8007ba4:	f022 0220 	bic.w	r2, r2, #32
 8007ba8:	6022      	str	r2, [r4, #0]
 8007baa:	2210      	movs	r2, #16
 8007bac:	e7b7      	b.n	8007b1e <_printf_i+0xd2>
 8007bae:	064d      	lsls	r5, r1, #25
 8007bb0:	bf48      	it	mi
 8007bb2:	b29b      	uxthmi	r3, r3
 8007bb4:	e7ef      	b.n	8007b96 <_printf_i+0x14a>
 8007bb6:	4665      	mov	r5, ip
 8007bb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bbc:	fb02 3311 	mls	r3, r2, r1, r3
 8007bc0:	5cc3      	ldrb	r3, [r0, r3]
 8007bc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	2900      	cmp	r1, #0
 8007bca:	d1f5      	bne.n	8007bb8 <_printf_i+0x16c>
 8007bcc:	e7b9      	b.n	8007b42 <_printf_i+0xf6>
 8007bce:	6813      	ldr	r3, [r2, #0]
 8007bd0:	6825      	ldr	r5, [r4, #0]
 8007bd2:	6961      	ldr	r1, [r4, #20]
 8007bd4:	1d18      	adds	r0, r3, #4
 8007bd6:	6010      	str	r0, [r2, #0]
 8007bd8:	0628      	lsls	r0, r5, #24
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	d501      	bpl.n	8007be2 <_printf_i+0x196>
 8007bde:	6019      	str	r1, [r3, #0]
 8007be0:	e002      	b.n	8007be8 <_printf_i+0x19c>
 8007be2:	066a      	lsls	r2, r5, #25
 8007be4:	d5fb      	bpl.n	8007bde <_printf_i+0x192>
 8007be6:	8019      	strh	r1, [r3, #0]
 8007be8:	2300      	movs	r3, #0
 8007bea:	6123      	str	r3, [r4, #16]
 8007bec:	4665      	mov	r5, ip
 8007bee:	e7b9      	b.n	8007b64 <_printf_i+0x118>
 8007bf0:	6813      	ldr	r3, [r2, #0]
 8007bf2:	1d19      	adds	r1, r3, #4
 8007bf4:	6011      	str	r1, [r2, #0]
 8007bf6:	681d      	ldr	r5, [r3, #0]
 8007bf8:	6862      	ldr	r2, [r4, #4]
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	f7f8 faf7 	bl	80001f0 <memchr>
 8007c02:	b108      	cbz	r0, 8007c08 <_printf_i+0x1bc>
 8007c04:	1b40      	subs	r0, r0, r5
 8007c06:	6060      	str	r0, [r4, #4]
 8007c08:	6863      	ldr	r3, [r4, #4]
 8007c0a:	6123      	str	r3, [r4, #16]
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c12:	e7a7      	b.n	8007b64 <_printf_i+0x118>
 8007c14:	6923      	ldr	r3, [r4, #16]
 8007c16:	462a      	mov	r2, r5
 8007c18:	4639      	mov	r1, r7
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	47c0      	blx	r8
 8007c1e:	3001      	adds	r0, #1
 8007c20:	d0aa      	beq.n	8007b78 <_printf_i+0x12c>
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	079b      	lsls	r3, r3, #30
 8007c26:	d413      	bmi.n	8007c50 <_printf_i+0x204>
 8007c28:	68e0      	ldr	r0, [r4, #12]
 8007c2a:	9b03      	ldr	r3, [sp, #12]
 8007c2c:	4298      	cmp	r0, r3
 8007c2e:	bfb8      	it	lt
 8007c30:	4618      	movlt	r0, r3
 8007c32:	e7a3      	b.n	8007b7c <_printf_i+0x130>
 8007c34:	2301      	movs	r3, #1
 8007c36:	464a      	mov	r2, r9
 8007c38:	4639      	mov	r1, r7
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	47c0      	blx	r8
 8007c3e:	3001      	adds	r0, #1
 8007c40:	d09a      	beq.n	8007b78 <_printf_i+0x12c>
 8007c42:	3501      	adds	r5, #1
 8007c44:	68e3      	ldr	r3, [r4, #12]
 8007c46:	9a03      	ldr	r2, [sp, #12]
 8007c48:	1a9b      	subs	r3, r3, r2
 8007c4a:	42ab      	cmp	r3, r5
 8007c4c:	dcf2      	bgt.n	8007c34 <_printf_i+0x1e8>
 8007c4e:	e7eb      	b.n	8007c28 <_printf_i+0x1dc>
 8007c50:	2500      	movs	r5, #0
 8007c52:	f104 0919 	add.w	r9, r4, #25
 8007c56:	e7f5      	b.n	8007c44 <_printf_i+0x1f8>
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1ac      	bne.n	8007bb6 <_printf_i+0x16a>
 8007c5c:	7803      	ldrb	r3, [r0, #0]
 8007c5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c66:	e76c      	b.n	8007b42 <_printf_i+0xf6>
 8007c68:	0800afa6 	.word	0x0800afa6
 8007c6c:	0800afb7 	.word	0x0800afb7

08007c70 <_scanf_float>:
 8007c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c74:	469a      	mov	sl, r3
 8007c76:	688b      	ldr	r3, [r1, #8]
 8007c78:	4616      	mov	r6, r2
 8007c7a:	1e5a      	subs	r2, r3, #1
 8007c7c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007c80:	b087      	sub	sp, #28
 8007c82:	bf83      	ittte	hi
 8007c84:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007c88:	189b      	addhi	r3, r3, r2
 8007c8a:	9301      	strhi	r3, [sp, #4]
 8007c8c:	2300      	movls	r3, #0
 8007c8e:	bf86      	itte	hi
 8007c90:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007c94:	608b      	strhi	r3, [r1, #8]
 8007c96:	9301      	strls	r3, [sp, #4]
 8007c98:	680b      	ldr	r3, [r1, #0]
 8007c9a:	4688      	mov	r8, r1
 8007c9c:	f04f 0b00 	mov.w	fp, #0
 8007ca0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007ca4:	f848 3b1c 	str.w	r3, [r8], #28
 8007ca8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8007cac:	4607      	mov	r7, r0
 8007cae:	460c      	mov	r4, r1
 8007cb0:	4645      	mov	r5, r8
 8007cb2:	465a      	mov	r2, fp
 8007cb4:	46d9      	mov	r9, fp
 8007cb6:	f8cd b008 	str.w	fp, [sp, #8]
 8007cba:	68a1      	ldr	r1, [r4, #8]
 8007cbc:	b181      	cbz	r1, 8007ce0 <_scanf_float+0x70>
 8007cbe:	6833      	ldr	r3, [r6, #0]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	2b49      	cmp	r3, #73	; 0x49
 8007cc4:	d071      	beq.n	8007daa <_scanf_float+0x13a>
 8007cc6:	d84d      	bhi.n	8007d64 <_scanf_float+0xf4>
 8007cc8:	2b39      	cmp	r3, #57	; 0x39
 8007cca:	d840      	bhi.n	8007d4e <_scanf_float+0xde>
 8007ccc:	2b31      	cmp	r3, #49	; 0x31
 8007cce:	f080 8088 	bcs.w	8007de2 <_scanf_float+0x172>
 8007cd2:	2b2d      	cmp	r3, #45	; 0x2d
 8007cd4:	f000 8090 	beq.w	8007df8 <_scanf_float+0x188>
 8007cd8:	d815      	bhi.n	8007d06 <_scanf_float+0x96>
 8007cda:	2b2b      	cmp	r3, #43	; 0x2b
 8007cdc:	f000 808c 	beq.w	8007df8 <_scanf_float+0x188>
 8007ce0:	f1b9 0f00 	cmp.w	r9, #0
 8007ce4:	d003      	beq.n	8007cee <_scanf_float+0x7e>
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	3a01      	subs	r2, #1
 8007cf0:	2a01      	cmp	r2, #1
 8007cf2:	f200 80ea 	bhi.w	8007eca <_scanf_float+0x25a>
 8007cf6:	4545      	cmp	r5, r8
 8007cf8:	f200 80dc 	bhi.w	8007eb4 <_scanf_float+0x244>
 8007cfc:	2601      	movs	r6, #1
 8007cfe:	4630      	mov	r0, r6
 8007d00:	b007      	add	sp, #28
 8007d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d06:	2b2e      	cmp	r3, #46	; 0x2e
 8007d08:	f000 809f 	beq.w	8007e4a <_scanf_float+0x1da>
 8007d0c:	2b30      	cmp	r3, #48	; 0x30
 8007d0e:	d1e7      	bne.n	8007ce0 <_scanf_float+0x70>
 8007d10:	6820      	ldr	r0, [r4, #0]
 8007d12:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007d16:	d064      	beq.n	8007de2 <_scanf_float+0x172>
 8007d18:	9b01      	ldr	r3, [sp, #4]
 8007d1a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8007d1e:	6020      	str	r0, [r4, #0]
 8007d20:	f109 0901 	add.w	r9, r9, #1
 8007d24:	b11b      	cbz	r3, 8007d2e <_scanf_float+0xbe>
 8007d26:	3b01      	subs	r3, #1
 8007d28:	3101      	adds	r1, #1
 8007d2a:	9301      	str	r3, [sp, #4]
 8007d2c:	60a1      	str	r1, [r4, #8]
 8007d2e:	68a3      	ldr	r3, [r4, #8]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	60a3      	str	r3, [r4, #8]
 8007d34:	6923      	ldr	r3, [r4, #16]
 8007d36:	3301      	adds	r3, #1
 8007d38:	6123      	str	r3, [r4, #16]
 8007d3a:	6873      	ldr	r3, [r6, #4]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	6073      	str	r3, [r6, #4]
 8007d42:	f340 80ac 	ble.w	8007e9e <_scanf_float+0x22e>
 8007d46:	6833      	ldr	r3, [r6, #0]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	6033      	str	r3, [r6, #0]
 8007d4c:	e7b5      	b.n	8007cba <_scanf_float+0x4a>
 8007d4e:	2b45      	cmp	r3, #69	; 0x45
 8007d50:	f000 8085 	beq.w	8007e5e <_scanf_float+0x1ee>
 8007d54:	2b46      	cmp	r3, #70	; 0x46
 8007d56:	d06a      	beq.n	8007e2e <_scanf_float+0x1be>
 8007d58:	2b41      	cmp	r3, #65	; 0x41
 8007d5a:	d1c1      	bne.n	8007ce0 <_scanf_float+0x70>
 8007d5c:	2a01      	cmp	r2, #1
 8007d5e:	d1bf      	bne.n	8007ce0 <_scanf_float+0x70>
 8007d60:	2202      	movs	r2, #2
 8007d62:	e046      	b.n	8007df2 <_scanf_float+0x182>
 8007d64:	2b65      	cmp	r3, #101	; 0x65
 8007d66:	d07a      	beq.n	8007e5e <_scanf_float+0x1ee>
 8007d68:	d818      	bhi.n	8007d9c <_scanf_float+0x12c>
 8007d6a:	2b54      	cmp	r3, #84	; 0x54
 8007d6c:	d066      	beq.n	8007e3c <_scanf_float+0x1cc>
 8007d6e:	d811      	bhi.n	8007d94 <_scanf_float+0x124>
 8007d70:	2b4e      	cmp	r3, #78	; 0x4e
 8007d72:	d1b5      	bne.n	8007ce0 <_scanf_float+0x70>
 8007d74:	2a00      	cmp	r2, #0
 8007d76:	d146      	bne.n	8007e06 <_scanf_float+0x196>
 8007d78:	f1b9 0f00 	cmp.w	r9, #0
 8007d7c:	d145      	bne.n	8007e0a <_scanf_float+0x19a>
 8007d7e:	6821      	ldr	r1, [r4, #0]
 8007d80:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007d84:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007d88:	d13f      	bne.n	8007e0a <_scanf_float+0x19a>
 8007d8a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007d8e:	6021      	str	r1, [r4, #0]
 8007d90:	2201      	movs	r2, #1
 8007d92:	e02e      	b.n	8007df2 <_scanf_float+0x182>
 8007d94:	2b59      	cmp	r3, #89	; 0x59
 8007d96:	d01e      	beq.n	8007dd6 <_scanf_float+0x166>
 8007d98:	2b61      	cmp	r3, #97	; 0x61
 8007d9a:	e7de      	b.n	8007d5a <_scanf_float+0xea>
 8007d9c:	2b6e      	cmp	r3, #110	; 0x6e
 8007d9e:	d0e9      	beq.n	8007d74 <_scanf_float+0x104>
 8007da0:	d815      	bhi.n	8007dce <_scanf_float+0x15e>
 8007da2:	2b66      	cmp	r3, #102	; 0x66
 8007da4:	d043      	beq.n	8007e2e <_scanf_float+0x1be>
 8007da6:	2b69      	cmp	r3, #105	; 0x69
 8007da8:	d19a      	bne.n	8007ce0 <_scanf_float+0x70>
 8007daa:	f1bb 0f00 	cmp.w	fp, #0
 8007dae:	d138      	bne.n	8007e22 <_scanf_float+0x1b2>
 8007db0:	f1b9 0f00 	cmp.w	r9, #0
 8007db4:	d197      	bne.n	8007ce6 <_scanf_float+0x76>
 8007db6:	6821      	ldr	r1, [r4, #0]
 8007db8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007dbc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007dc0:	d195      	bne.n	8007cee <_scanf_float+0x7e>
 8007dc2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007dc6:	6021      	str	r1, [r4, #0]
 8007dc8:	f04f 0b01 	mov.w	fp, #1
 8007dcc:	e011      	b.n	8007df2 <_scanf_float+0x182>
 8007dce:	2b74      	cmp	r3, #116	; 0x74
 8007dd0:	d034      	beq.n	8007e3c <_scanf_float+0x1cc>
 8007dd2:	2b79      	cmp	r3, #121	; 0x79
 8007dd4:	d184      	bne.n	8007ce0 <_scanf_float+0x70>
 8007dd6:	f1bb 0f07 	cmp.w	fp, #7
 8007dda:	d181      	bne.n	8007ce0 <_scanf_float+0x70>
 8007ddc:	f04f 0b08 	mov.w	fp, #8
 8007de0:	e007      	b.n	8007df2 <_scanf_float+0x182>
 8007de2:	eb12 0f0b 	cmn.w	r2, fp
 8007de6:	f47f af7b 	bne.w	8007ce0 <_scanf_float+0x70>
 8007dea:	6821      	ldr	r1, [r4, #0]
 8007dec:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8007df0:	6021      	str	r1, [r4, #0]
 8007df2:	702b      	strb	r3, [r5, #0]
 8007df4:	3501      	adds	r5, #1
 8007df6:	e79a      	b.n	8007d2e <_scanf_float+0xbe>
 8007df8:	6821      	ldr	r1, [r4, #0]
 8007dfa:	0608      	lsls	r0, r1, #24
 8007dfc:	f57f af70 	bpl.w	8007ce0 <_scanf_float+0x70>
 8007e00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007e04:	e7f4      	b.n	8007df0 <_scanf_float+0x180>
 8007e06:	2a02      	cmp	r2, #2
 8007e08:	d047      	beq.n	8007e9a <_scanf_float+0x22a>
 8007e0a:	f1bb 0f01 	cmp.w	fp, #1
 8007e0e:	d003      	beq.n	8007e18 <_scanf_float+0x1a8>
 8007e10:	f1bb 0f04 	cmp.w	fp, #4
 8007e14:	f47f af64 	bne.w	8007ce0 <_scanf_float+0x70>
 8007e18:	f10b 0b01 	add.w	fp, fp, #1
 8007e1c:	fa5f fb8b 	uxtb.w	fp, fp
 8007e20:	e7e7      	b.n	8007df2 <_scanf_float+0x182>
 8007e22:	f1bb 0f03 	cmp.w	fp, #3
 8007e26:	d0f7      	beq.n	8007e18 <_scanf_float+0x1a8>
 8007e28:	f1bb 0f05 	cmp.w	fp, #5
 8007e2c:	e7f2      	b.n	8007e14 <_scanf_float+0x1a4>
 8007e2e:	f1bb 0f02 	cmp.w	fp, #2
 8007e32:	f47f af55 	bne.w	8007ce0 <_scanf_float+0x70>
 8007e36:	f04f 0b03 	mov.w	fp, #3
 8007e3a:	e7da      	b.n	8007df2 <_scanf_float+0x182>
 8007e3c:	f1bb 0f06 	cmp.w	fp, #6
 8007e40:	f47f af4e 	bne.w	8007ce0 <_scanf_float+0x70>
 8007e44:	f04f 0b07 	mov.w	fp, #7
 8007e48:	e7d3      	b.n	8007df2 <_scanf_float+0x182>
 8007e4a:	6821      	ldr	r1, [r4, #0]
 8007e4c:	0588      	lsls	r0, r1, #22
 8007e4e:	f57f af47 	bpl.w	8007ce0 <_scanf_float+0x70>
 8007e52:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8007e56:	6021      	str	r1, [r4, #0]
 8007e58:	f8cd 9008 	str.w	r9, [sp, #8]
 8007e5c:	e7c9      	b.n	8007df2 <_scanf_float+0x182>
 8007e5e:	6821      	ldr	r1, [r4, #0]
 8007e60:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8007e64:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007e68:	d006      	beq.n	8007e78 <_scanf_float+0x208>
 8007e6a:	0548      	lsls	r0, r1, #21
 8007e6c:	f57f af38 	bpl.w	8007ce0 <_scanf_float+0x70>
 8007e70:	f1b9 0f00 	cmp.w	r9, #0
 8007e74:	f43f af3b 	beq.w	8007cee <_scanf_float+0x7e>
 8007e78:	0588      	lsls	r0, r1, #22
 8007e7a:	bf58      	it	pl
 8007e7c:	9802      	ldrpl	r0, [sp, #8]
 8007e7e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007e82:	bf58      	it	pl
 8007e84:	eba9 0000 	subpl.w	r0, r9, r0
 8007e88:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8007e8c:	bf58      	it	pl
 8007e8e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8007e92:	6021      	str	r1, [r4, #0]
 8007e94:	f04f 0900 	mov.w	r9, #0
 8007e98:	e7ab      	b.n	8007df2 <_scanf_float+0x182>
 8007e9a:	2203      	movs	r2, #3
 8007e9c:	e7a9      	b.n	8007df2 <_scanf_float+0x182>
 8007e9e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007ea2:	9205      	str	r2, [sp, #20]
 8007ea4:	4631      	mov	r1, r6
 8007ea6:	4638      	mov	r0, r7
 8007ea8:	4798      	blx	r3
 8007eaa:	9a05      	ldr	r2, [sp, #20]
 8007eac:	2800      	cmp	r0, #0
 8007eae:	f43f af04 	beq.w	8007cba <_scanf_float+0x4a>
 8007eb2:	e715      	b.n	8007ce0 <_scanf_float+0x70>
 8007eb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007eb8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007ebc:	4632      	mov	r2, r6
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	4798      	blx	r3
 8007ec2:	6923      	ldr	r3, [r4, #16]
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	6123      	str	r3, [r4, #16]
 8007ec8:	e715      	b.n	8007cf6 <_scanf_float+0x86>
 8007eca:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8007ece:	2b06      	cmp	r3, #6
 8007ed0:	d80a      	bhi.n	8007ee8 <_scanf_float+0x278>
 8007ed2:	f1bb 0f02 	cmp.w	fp, #2
 8007ed6:	d968      	bls.n	8007faa <_scanf_float+0x33a>
 8007ed8:	f1ab 0b03 	sub.w	fp, fp, #3
 8007edc:	fa5f fb8b 	uxtb.w	fp, fp
 8007ee0:	eba5 0b0b 	sub.w	fp, r5, fp
 8007ee4:	455d      	cmp	r5, fp
 8007ee6:	d14b      	bne.n	8007f80 <_scanf_float+0x310>
 8007ee8:	6823      	ldr	r3, [r4, #0]
 8007eea:	05da      	lsls	r2, r3, #23
 8007eec:	d51f      	bpl.n	8007f2e <_scanf_float+0x2be>
 8007eee:	055b      	lsls	r3, r3, #21
 8007ef0:	d468      	bmi.n	8007fc4 <_scanf_float+0x354>
 8007ef2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007ef6:	6923      	ldr	r3, [r4, #16]
 8007ef8:	2965      	cmp	r1, #101	; 0x65
 8007efa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007efe:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8007f02:	6123      	str	r3, [r4, #16]
 8007f04:	d00d      	beq.n	8007f22 <_scanf_float+0x2b2>
 8007f06:	2945      	cmp	r1, #69	; 0x45
 8007f08:	d00b      	beq.n	8007f22 <_scanf_float+0x2b2>
 8007f0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f0e:	4632      	mov	r2, r6
 8007f10:	4638      	mov	r0, r7
 8007f12:	4798      	blx	r3
 8007f14:	6923      	ldr	r3, [r4, #16]
 8007f16:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	f1a5 0b02 	sub.w	fp, r5, #2
 8007f20:	6123      	str	r3, [r4, #16]
 8007f22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f26:	4632      	mov	r2, r6
 8007f28:	4638      	mov	r0, r7
 8007f2a:	4798      	blx	r3
 8007f2c:	465d      	mov	r5, fp
 8007f2e:	6826      	ldr	r6, [r4, #0]
 8007f30:	f016 0610 	ands.w	r6, r6, #16
 8007f34:	d17a      	bne.n	800802c <_scanf_float+0x3bc>
 8007f36:	702e      	strb	r6, [r5, #0]
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f42:	d142      	bne.n	8007fca <_scanf_float+0x35a>
 8007f44:	9b02      	ldr	r3, [sp, #8]
 8007f46:	eba9 0303 	sub.w	r3, r9, r3
 8007f4a:	425a      	negs	r2, r3
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d149      	bne.n	8007fe4 <_scanf_float+0x374>
 8007f50:	2200      	movs	r2, #0
 8007f52:	4641      	mov	r1, r8
 8007f54:	4638      	mov	r0, r7
 8007f56:	f000 fea3 	bl	8008ca0 <_strtod_r>
 8007f5a:	6825      	ldr	r5, [r4, #0]
 8007f5c:	f8da 3000 	ldr.w	r3, [sl]
 8007f60:	f015 0f02 	tst.w	r5, #2
 8007f64:	f103 0204 	add.w	r2, r3, #4
 8007f68:	ec59 8b10 	vmov	r8, r9, d0
 8007f6c:	f8ca 2000 	str.w	r2, [sl]
 8007f70:	d043      	beq.n	8007ffa <_scanf_float+0x38a>
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	e9c3 8900 	strd	r8, r9, [r3]
 8007f78:	68e3      	ldr	r3, [r4, #12]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	60e3      	str	r3, [r4, #12]
 8007f7e:	e6be      	b.n	8007cfe <_scanf_float+0x8e>
 8007f80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f84:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007f88:	4632      	mov	r2, r6
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	4798      	blx	r3
 8007f8e:	6923      	ldr	r3, [r4, #16]
 8007f90:	3b01      	subs	r3, #1
 8007f92:	6123      	str	r3, [r4, #16]
 8007f94:	e7a6      	b.n	8007ee4 <_scanf_float+0x274>
 8007f96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f9a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007f9e:	4632      	mov	r2, r6
 8007fa0:	4638      	mov	r0, r7
 8007fa2:	4798      	blx	r3
 8007fa4:	6923      	ldr	r3, [r4, #16]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	6123      	str	r3, [r4, #16]
 8007faa:	4545      	cmp	r5, r8
 8007fac:	d8f3      	bhi.n	8007f96 <_scanf_float+0x326>
 8007fae:	e6a5      	b.n	8007cfc <_scanf_float+0x8c>
 8007fb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fb4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007fb8:	4632      	mov	r2, r6
 8007fba:	4638      	mov	r0, r7
 8007fbc:	4798      	blx	r3
 8007fbe:	6923      	ldr	r3, [r4, #16]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	6123      	str	r3, [r4, #16]
 8007fc4:	4545      	cmp	r5, r8
 8007fc6:	d8f3      	bhi.n	8007fb0 <_scanf_float+0x340>
 8007fc8:	e698      	b.n	8007cfc <_scanf_float+0x8c>
 8007fca:	9b03      	ldr	r3, [sp, #12]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d0bf      	beq.n	8007f50 <_scanf_float+0x2e0>
 8007fd0:	9904      	ldr	r1, [sp, #16]
 8007fd2:	230a      	movs	r3, #10
 8007fd4:	4632      	mov	r2, r6
 8007fd6:	3101      	adds	r1, #1
 8007fd8:	4638      	mov	r0, r7
 8007fda:	f000 feed 	bl	8008db8 <_strtol_r>
 8007fde:	9b03      	ldr	r3, [sp, #12]
 8007fe0:	9d04      	ldr	r5, [sp, #16]
 8007fe2:	1ac2      	subs	r2, r0, r3
 8007fe4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007fe8:	429d      	cmp	r5, r3
 8007fea:	bf28      	it	cs
 8007fec:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8007ff0:	490f      	ldr	r1, [pc, #60]	; (8008030 <_scanf_float+0x3c0>)
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	f000 f824 	bl	8008040 <siprintf>
 8007ff8:	e7aa      	b.n	8007f50 <_scanf_float+0x2e0>
 8007ffa:	f015 0504 	ands.w	r5, r5, #4
 8007ffe:	d1b8      	bne.n	8007f72 <_scanf_float+0x302>
 8008000:	681f      	ldr	r7, [r3, #0]
 8008002:	ee10 2a10 	vmov	r2, s0
 8008006:	464b      	mov	r3, r9
 8008008:	ee10 0a10 	vmov	r0, s0
 800800c:	4649      	mov	r1, r9
 800800e:	f7f8 fd95 	bl	8000b3c <__aeabi_dcmpun>
 8008012:	b128      	cbz	r0, 8008020 <_scanf_float+0x3b0>
 8008014:	4628      	mov	r0, r5
 8008016:	f000 f80d 	bl	8008034 <nanf>
 800801a:	ed87 0a00 	vstr	s0, [r7]
 800801e:	e7ab      	b.n	8007f78 <_scanf_float+0x308>
 8008020:	4640      	mov	r0, r8
 8008022:	4649      	mov	r1, r9
 8008024:	f7f8 fde8 	bl	8000bf8 <__aeabi_d2f>
 8008028:	6038      	str	r0, [r7, #0]
 800802a:	e7a5      	b.n	8007f78 <_scanf_float+0x308>
 800802c:	2600      	movs	r6, #0
 800802e:	e666      	b.n	8007cfe <_scanf_float+0x8e>
 8008030:	0800afc8 	.word	0x0800afc8

08008034 <nanf>:
 8008034:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800803c <nanf+0x8>
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	7fc00000 	.word	0x7fc00000

08008040 <siprintf>:
 8008040:	b40e      	push	{r1, r2, r3}
 8008042:	b500      	push	{lr}
 8008044:	b09c      	sub	sp, #112	; 0x70
 8008046:	ab1d      	add	r3, sp, #116	; 0x74
 8008048:	9002      	str	r0, [sp, #8]
 800804a:	9006      	str	r0, [sp, #24]
 800804c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008050:	4809      	ldr	r0, [pc, #36]	; (8008078 <siprintf+0x38>)
 8008052:	9107      	str	r1, [sp, #28]
 8008054:	9104      	str	r1, [sp, #16]
 8008056:	4909      	ldr	r1, [pc, #36]	; (800807c <siprintf+0x3c>)
 8008058:	f853 2b04 	ldr.w	r2, [r3], #4
 800805c:	9105      	str	r1, [sp, #20]
 800805e:	6800      	ldr	r0, [r0, #0]
 8008060:	9301      	str	r3, [sp, #4]
 8008062:	a902      	add	r1, sp, #8
 8008064:	f002 fd64 	bl	800ab30 <_svfiprintf_r>
 8008068:	9b02      	ldr	r3, [sp, #8]
 800806a:	2200      	movs	r2, #0
 800806c:	701a      	strb	r2, [r3, #0]
 800806e:	b01c      	add	sp, #112	; 0x70
 8008070:	f85d eb04 	ldr.w	lr, [sp], #4
 8008074:	b003      	add	sp, #12
 8008076:	4770      	bx	lr
 8008078:	20000014 	.word	0x20000014
 800807c:	ffff0208 	.word	0xffff0208

08008080 <sulp>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	4604      	mov	r4, r0
 8008084:	460d      	mov	r5, r1
 8008086:	ec45 4b10 	vmov	d0, r4, r5
 800808a:	4616      	mov	r6, r2
 800808c:	f002 fb0c 	bl	800a6a8 <__ulp>
 8008090:	ec51 0b10 	vmov	r0, r1, d0
 8008094:	b17e      	cbz	r6, 80080b6 <sulp+0x36>
 8008096:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800809a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800809e:	2b00      	cmp	r3, #0
 80080a0:	dd09      	ble.n	80080b6 <sulp+0x36>
 80080a2:	051b      	lsls	r3, r3, #20
 80080a4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80080a8:	2400      	movs	r4, #0
 80080aa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80080ae:	4622      	mov	r2, r4
 80080b0:	462b      	mov	r3, r5
 80080b2:	f7f8 faa9 	bl	8000608 <__aeabi_dmul>
 80080b6:	bd70      	pop	{r4, r5, r6, pc}

080080b8 <_strtod_l>:
 80080b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080bc:	461f      	mov	r7, r3
 80080be:	b0a1      	sub	sp, #132	; 0x84
 80080c0:	2300      	movs	r3, #0
 80080c2:	4681      	mov	r9, r0
 80080c4:	4638      	mov	r0, r7
 80080c6:	460e      	mov	r6, r1
 80080c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80080ca:	931c      	str	r3, [sp, #112]	; 0x70
 80080cc:	f001 fff5 	bl	800a0ba <__localeconv_l>
 80080d0:	4680      	mov	r8, r0
 80080d2:	6800      	ldr	r0, [r0, #0]
 80080d4:	f7f8 f884 	bl	80001e0 <strlen>
 80080d8:	f04f 0a00 	mov.w	sl, #0
 80080dc:	4604      	mov	r4, r0
 80080de:	f04f 0b00 	mov.w	fp, #0
 80080e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80080e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080e6:	781a      	ldrb	r2, [r3, #0]
 80080e8:	2a0d      	cmp	r2, #13
 80080ea:	d832      	bhi.n	8008152 <_strtod_l+0x9a>
 80080ec:	2a09      	cmp	r2, #9
 80080ee:	d236      	bcs.n	800815e <_strtod_l+0xa6>
 80080f0:	2a00      	cmp	r2, #0
 80080f2:	d03e      	beq.n	8008172 <_strtod_l+0xba>
 80080f4:	2300      	movs	r3, #0
 80080f6:	930d      	str	r3, [sp, #52]	; 0x34
 80080f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80080fa:	782b      	ldrb	r3, [r5, #0]
 80080fc:	2b30      	cmp	r3, #48	; 0x30
 80080fe:	f040 80ac 	bne.w	800825a <_strtod_l+0x1a2>
 8008102:	786b      	ldrb	r3, [r5, #1]
 8008104:	2b58      	cmp	r3, #88	; 0x58
 8008106:	d001      	beq.n	800810c <_strtod_l+0x54>
 8008108:	2b78      	cmp	r3, #120	; 0x78
 800810a:	d167      	bne.n	80081dc <_strtod_l+0x124>
 800810c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800810e:	9301      	str	r3, [sp, #4]
 8008110:	ab1c      	add	r3, sp, #112	; 0x70
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	9702      	str	r7, [sp, #8]
 8008116:	ab1d      	add	r3, sp, #116	; 0x74
 8008118:	4a88      	ldr	r2, [pc, #544]	; (800833c <_strtod_l+0x284>)
 800811a:	a91b      	add	r1, sp, #108	; 0x6c
 800811c:	4648      	mov	r0, r9
 800811e:	f001 fcf2 	bl	8009b06 <__gethex>
 8008122:	f010 0407 	ands.w	r4, r0, #7
 8008126:	4606      	mov	r6, r0
 8008128:	d005      	beq.n	8008136 <_strtod_l+0x7e>
 800812a:	2c06      	cmp	r4, #6
 800812c:	d12b      	bne.n	8008186 <_strtod_l+0xce>
 800812e:	3501      	adds	r5, #1
 8008130:	2300      	movs	r3, #0
 8008132:	951b      	str	r5, [sp, #108]	; 0x6c
 8008134:	930d      	str	r3, [sp, #52]	; 0x34
 8008136:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008138:	2b00      	cmp	r3, #0
 800813a:	f040 859a 	bne.w	8008c72 <_strtod_l+0xbba>
 800813e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008140:	b1e3      	cbz	r3, 800817c <_strtod_l+0xc4>
 8008142:	4652      	mov	r2, sl
 8008144:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008148:	ec43 2b10 	vmov	d0, r2, r3
 800814c:	b021      	add	sp, #132	; 0x84
 800814e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008152:	2a2b      	cmp	r2, #43	; 0x2b
 8008154:	d015      	beq.n	8008182 <_strtod_l+0xca>
 8008156:	2a2d      	cmp	r2, #45	; 0x2d
 8008158:	d004      	beq.n	8008164 <_strtod_l+0xac>
 800815a:	2a20      	cmp	r2, #32
 800815c:	d1ca      	bne.n	80080f4 <_strtod_l+0x3c>
 800815e:	3301      	adds	r3, #1
 8008160:	931b      	str	r3, [sp, #108]	; 0x6c
 8008162:	e7bf      	b.n	80080e4 <_strtod_l+0x2c>
 8008164:	2201      	movs	r2, #1
 8008166:	920d      	str	r2, [sp, #52]	; 0x34
 8008168:	1c5a      	adds	r2, r3, #1
 800816a:	921b      	str	r2, [sp, #108]	; 0x6c
 800816c:	785b      	ldrb	r3, [r3, #1]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1c2      	bne.n	80080f8 <_strtod_l+0x40>
 8008172:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008174:	961b      	str	r6, [sp, #108]	; 0x6c
 8008176:	2b00      	cmp	r3, #0
 8008178:	f040 8579 	bne.w	8008c6e <_strtod_l+0xbb6>
 800817c:	4652      	mov	r2, sl
 800817e:	465b      	mov	r3, fp
 8008180:	e7e2      	b.n	8008148 <_strtod_l+0x90>
 8008182:	2200      	movs	r2, #0
 8008184:	e7ef      	b.n	8008166 <_strtod_l+0xae>
 8008186:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008188:	b13a      	cbz	r2, 800819a <_strtod_l+0xe2>
 800818a:	2135      	movs	r1, #53	; 0x35
 800818c:	a81e      	add	r0, sp, #120	; 0x78
 800818e:	f002 fb83 	bl	800a898 <__copybits>
 8008192:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008194:	4648      	mov	r0, r9
 8008196:	f001 ffef 	bl	800a178 <_Bfree>
 800819a:	3c01      	subs	r4, #1
 800819c:	2c04      	cmp	r4, #4
 800819e:	d806      	bhi.n	80081ae <_strtod_l+0xf6>
 80081a0:	e8df f004 	tbb	[pc, r4]
 80081a4:	1714030a 	.word	0x1714030a
 80081a8:	0a          	.byte	0x0a
 80081a9:	00          	.byte	0x00
 80081aa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80081ae:	0730      	lsls	r0, r6, #28
 80081b0:	d5c1      	bpl.n	8008136 <_strtod_l+0x7e>
 80081b2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80081b6:	e7be      	b.n	8008136 <_strtod_l+0x7e>
 80081b8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80081bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80081be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80081c2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80081c6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80081ca:	e7f0      	b.n	80081ae <_strtod_l+0xf6>
 80081cc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008340 <_strtod_l+0x288>
 80081d0:	e7ed      	b.n	80081ae <_strtod_l+0xf6>
 80081d2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80081d6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80081da:	e7e8      	b.n	80081ae <_strtod_l+0xf6>
 80081dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80081e2:	785b      	ldrb	r3, [r3, #1]
 80081e4:	2b30      	cmp	r3, #48	; 0x30
 80081e6:	d0f9      	beq.n	80081dc <_strtod_l+0x124>
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d0a4      	beq.n	8008136 <_strtod_l+0x7e>
 80081ec:	2301      	movs	r3, #1
 80081ee:	2500      	movs	r5, #0
 80081f0:	9306      	str	r3, [sp, #24]
 80081f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081f4:	9308      	str	r3, [sp, #32]
 80081f6:	9507      	str	r5, [sp, #28]
 80081f8:	9505      	str	r5, [sp, #20]
 80081fa:	220a      	movs	r2, #10
 80081fc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80081fe:	7807      	ldrb	r7, [r0, #0]
 8008200:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008204:	b2d9      	uxtb	r1, r3
 8008206:	2909      	cmp	r1, #9
 8008208:	d929      	bls.n	800825e <_strtod_l+0x1a6>
 800820a:	4622      	mov	r2, r4
 800820c:	f8d8 1000 	ldr.w	r1, [r8]
 8008210:	f002 fd96 	bl	800ad40 <strncmp>
 8008214:	2800      	cmp	r0, #0
 8008216:	d031      	beq.n	800827c <_strtod_l+0x1c4>
 8008218:	2000      	movs	r0, #0
 800821a:	9c05      	ldr	r4, [sp, #20]
 800821c:	9004      	str	r0, [sp, #16]
 800821e:	463b      	mov	r3, r7
 8008220:	4602      	mov	r2, r0
 8008222:	2b65      	cmp	r3, #101	; 0x65
 8008224:	d001      	beq.n	800822a <_strtod_l+0x172>
 8008226:	2b45      	cmp	r3, #69	; 0x45
 8008228:	d114      	bne.n	8008254 <_strtod_l+0x19c>
 800822a:	b924      	cbnz	r4, 8008236 <_strtod_l+0x17e>
 800822c:	b910      	cbnz	r0, 8008234 <_strtod_l+0x17c>
 800822e:	9b06      	ldr	r3, [sp, #24]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d09e      	beq.n	8008172 <_strtod_l+0xba>
 8008234:	2400      	movs	r4, #0
 8008236:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008238:	1c73      	adds	r3, r6, #1
 800823a:	931b      	str	r3, [sp, #108]	; 0x6c
 800823c:	7873      	ldrb	r3, [r6, #1]
 800823e:	2b2b      	cmp	r3, #43	; 0x2b
 8008240:	d078      	beq.n	8008334 <_strtod_l+0x27c>
 8008242:	2b2d      	cmp	r3, #45	; 0x2d
 8008244:	d070      	beq.n	8008328 <_strtod_l+0x270>
 8008246:	f04f 0c00 	mov.w	ip, #0
 800824a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800824e:	2f09      	cmp	r7, #9
 8008250:	d97c      	bls.n	800834c <_strtod_l+0x294>
 8008252:	961b      	str	r6, [sp, #108]	; 0x6c
 8008254:	f04f 0e00 	mov.w	lr, #0
 8008258:	e09a      	b.n	8008390 <_strtod_l+0x2d8>
 800825a:	2300      	movs	r3, #0
 800825c:	e7c7      	b.n	80081ee <_strtod_l+0x136>
 800825e:	9905      	ldr	r1, [sp, #20]
 8008260:	2908      	cmp	r1, #8
 8008262:	bfdd      	ittte	le
 8008264:	9907      	ldrle	r1, [sp, #28]
 8008266:	fb02 3301 	mlale	r3, r2, r1, r3
 800826a:	9307      	strle	r3, [sp, #28]
 800826c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008270:	9b05      	ldr	r3, [sp, #20]
 8008272:	3001      	adds	r0, #1
 8008274:	3301      	adds	r3, #1
 8008276:	9305      	str	r3, [sp, #20]
 8008278:	901b      	str	r0, [sp, #108]	; 0x6c
 800827a:	e7bf      	b.n	80081fc <_strtod_l+0x144>
 800827c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800827e:	191a      	adds	r2, r3, r4
 8008280:	921b      	str	r2, [sp, #108]	; 0x6c
 8008282:	9a05      	ldr	r2, [sp, #20]
 8008284:	5d1b      	ldrb	r3, [r3, r4]
 8008286:	2a00      	cmp	r2, #0
 8008288:	d037      	beq.n	80082fa <_strtod_l+0x242>
 800828a:	9c05      	ldr	r4, [sp, #20]
 800828c:	4602      	mov	r2, r0
 800828e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008292:	2909      	cmp	r1, #9
 8008294:	d913      	bls.n	80082be <_strtod_l+0x206>
 8008296:	2101      	movs	r1, #1
 8008298:	9104      	str	r1, [sp, #16]
 800829a:	e7c2      	b.n	8008222 <_strtod_l+0x16a>
 800829c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800829e:	1c5a      	adds	r2, r3, #1
 80082a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80082a2:	785b      	ldrb	r3, [r3, #1]
 80082a4:	3001      	adds	r0, #1
 80082a6:	2b30      	cmp	r3, #48	; 0x30
 80082a8:	d0f8      	beq.n	800829c <_strtod_l+0x1e4>
 80082aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80082ae:	2a08      	cmp	r2, #8
 80082b0:	f200 84e4 	bhi.w	8008c7c <_strtod_l+0xbc4>
 80082b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80082b6:	9208      	str	r2, [sp, #32]
 80082b8:	4602      	mov	r2, r0
 80082ba:	2000      	movs	r0, #0
 80082bc:	4604      	mov	r4, r0
 80082be:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80082c2:	f100 0101 	add.w	r1, r0, #1
 80082c6:	d012      	beq.n	80082ee <_strtod_l+0x236>
 80082c8:	440a      	add	r2, r1
 80082ca:	eb00 0c04 	add.w	ip, r0, r4
 80082ce:	4621      	mov	r1, r4
 80082d0:	270a      	movs	r7, #10
 80082d2:	458c      	cmp	ip, r1
 80082d4:	d113      	bne.n	80082fe <_strtod_l+0x246>
 80082d6:	1821      	adds	r1, r4, r0
 80082d8:	2908      	cmp	r1, #8
 80082da:	f104 0401 	add.w	r4, r4, #1
 80082de:	4404      	add	r4, r0
 80082e0:	dc19      	bgt.n	8008316 <_strtod_l+0x25e>
 80082e2:	9b07      	ldr	r3, [sp, #28]
 80082e4:	210a      	movs	r1, #10
 80082e6:	fb01 e303 	mla	r3, r1, r3, lr
 80082ea:	9307      	str	r3, [sp, #28]
 80082ec:	2100      	movs	r1, #0
 80082ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082f0:	1c58      	adds	r0, r3, #1
 80082f2:	901b      	str	r0, [sp, #108]	; 0x6c
 80082f4:	785b      	ldrb	r3, [r3, #1]
 80082f6:	4608      	mov	r0, r1
 80082f8:	e7c9      	b.n	800828e <_strtod_l+0x1d6>
 80082fa:	9805      	ldr	r0, [sp, #20]
 80082fc:	e7d3      	b.n	80082a6 <_strtod_l+0x1ee>
 80082fe:	2908      	cmp	r1, #8
 8008300:	f101 0101 	add.w	r1, r1, #1
 8008304:	dc03      	bgt.n	800830e <_strtod_l+0x256>
 8008306:	9b07      	ldr	r3, [sp, #28]
 8008308:	437b      	muls	r3, r7
 800830a:	9307      	str	r3, [sp, #28]
 800830c:	e7e1      	b.n	80082d2 <_strtod_l+0x21a>
 800830e:	2910      	cmp	r1, #16
 8008310:	bfd8      	it	le
 8008312:	437d      	mulle	r5, r7
 8008314:	e7dd      	b.n	80082d2 <_strtod_l+0x21a>
 8008316:	2c10      	cmp	r4, #16
 8008318:	bfdc      	itt	le
 800831a:	210a      	movle	r1, #10
 800831c:	fb01 e505 	mlale	r5, r1, r5, lr
 8008320:	e7e4      	b.n	80082ec <_strtod_l+0x234>
 8008322:	2301      	movs	r3, #1
 8008324:	9304      	str	r3, [sp, #16]
 8008326:	e781      	b.n	800822c <_strtod_l+0x174>
 8008328:	f04f 0c01 	mov.w	ip, #1
 800832c:	1cb3      	adds	r3, r6, #2
 800832e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008330:	78b3      	ldrb	r3, [r6, #2]
 8008332:	e78a      	b.n	800824a <_strtod_l+0x192>
 8008334:	f04f 0c00 	mov.w	ip, #0
 8008338:	e7f8      	b.n	800832c <_strtod_l+0x274>
 800833a:	bf00      	nop
 800833c:	0800afd0 	.word	0x0800afd0
 8008340:	7ff00000 	.word	0x7ff00000
 8008344:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008346:	1c5f      	adds	r7, r3, #1
 8008348:	971b      	str	r7, [sp, #108]	; 0x6c
 800834a:	785b      	ldrb	r3, [r3, #1]
 800834c:	2b30      	cmp	r3, #48	; 0x30
 800834e:	d0f9      	beq.n	8008344 <_strtod_l+0x28c>
 8008350:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8008354:	2f08      	cmp	r7, #8
 8008356:	f63f af7d 	bhi.w	8008254 <_strtod_l+0x19c>
 800835a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800835e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008360:	930a      	str	r3, [sp, #40]	; 0x28
 8008362:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008364:	1c5f      	adds	r7, r3, #1
 8008366:	971b      	str	r7, [sp, #108]	; 0x6c
 8008368:	785b      	ldrb	r3, [r3, #1]
 800836a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800836e:	f1b8 0f09 	cmp.w	r8, #9
 8008372:	d937      	bls.n	80083e4 <_strtod_l+0x32c>
 8008374:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008376:	1a7f      	subs	r7, r7, r1
 8008378:	2f08      	cmp	r7, #8
 800837a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800837e:	dc37      	bgt.n	80083f0 <_strtod_l+0x338>
 8008380:	45be      	cmp	lr, r7
 8008382:	bfa8      	it	ge
 8008384:	46be      	movge	lr, r7
 8008386:	f1bc 0f00 	cmp.w	ip, #0
 800838a:	d001      	beq.n	8008390 <_strtod_l+0x2d8>
 800838c:	f1ce 0e00 	rsb	lr, lr, #0
 8008390:	2c00      	cmp	r4, #0
 8008392:	d151      	bne.n	8008438 <_strtod_l+0x380>
 8008394:	2800      	cmp	r0, #0
 8008396:	f47f aece 	bne.w	8008136 <_strtod_l+0x7e>
 800839a:	9a06      	ldr	r2, [sp, #24]
 800839c:	2a00      	cmp	r2, #0
 800839e:	f47f aeca 	bne.w	8008136 <_strtod_l+0x7e>
 80083a2:	9a04      	ldr	r2, [sp, #16]
 80083a4:	2a00      	cmp	r2, #0
 80083a6:	f47f aee4 	bne.w	8008172 <_strtod_l+0xba>
 80083aa:	2b4e      	cmp	r3, #78	; 0x4e
 80083ac:	d027      	beq.n	80083fe <_strtod_l+0x346>
 80083ae:	dc21      	bgt.n	80083f4 <_strtod_l+0x33c>
 80083b0:	2b49      	cmp	r3, #73	; 0x49
 80083b2:	f47f aede 	bne.w	8008172 <_strtod_l+0xba>
 80083b6:	49a0      	ldr	r1, [pc, #640]	; (8008638 <_strtod_l+0x580>)
 80083b8:	a81b      	add	r0, sp, #108	; 0x6c
 80083ba:	f001 fdd7 	bl	8009f6c <__match>
 80083be:	2800      	cmp	r0, #0
 80083c0:	f43f aed7 	beq.w	8008172 <_strtod_l+0xba>
 80083c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083c6:	499d      	ldr	r1, [pc, #628]	; (800863c <_strtod_l+0x584>)
 80083c8:	3b01      	subs	r3, #1
 80083ca:	a81b      	add	r0, sp, #108	; 0x6c
 80083cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80083ce:	f001 fdcd 	bl	8009f6c <__match>
 80083d2:	b910      	cbnz	r0, 80083da <_strtod_l+0x322>
 80083d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083d6:	3301      	adds	r3, #1
 80083d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80083da:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008650 <_strtod_l+0x598>
 80083de:	f04f 0a00 	mov.w	sl, #0
 80083e2:	e6a8      	b.n	8008136 <_strtod_l+0x7e>
 80083e4:	210a      	movs	r1, #10
 80083e6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80083ea:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80083ee:	e7b8      	b.n	8008362 <_strtod_l+0x2aa>
 80083f0:	46be      	mov	lr, r7
 80083f2:	e7c8      	b.n	8008386 <_strtod_l+0x2ce>
 80083f4:	2b69      	cmp	r3, #105	; 0x69
 80083f6:	d0de      	beq.n	80083b6 <_strtod_l+0x2fe>
 80083f8:	2b6e      	cmp	r3, #110	; 0x6e
 80083fa:	f47f aeba 	bne.w	8008172 <_strtod_l+0xba>
 80083fe:	4990      	ldr	r1, [pc, #576]	; (8008640 <_strtod_l+0x588>)
 8008400:	a81b      	add	r0, sp, #108	; 0x6c
 8008402:	f001 fdb3 	bl	8009f6c <__match>
 8008406:	2800      	cmp	r0, #0
 8008408:	f43f aeb3 	beq.w	8008172 <_strtod_l+0xba>
 800840c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	2b28      	cmp	r3, #40	; 0x28
 8008412:	d10e      	bne.n	8008432 <_strtod_l+0x37a>
 8008414:	aa1e      	add	r2, sp, #120	; 0x78
 8008416:	498b      	ldr	r1, [pc, #556]	; (8008644 <_strtod_l+0x58c>)
 8008418:	a81b      	add	r0, sp, #108	; 0x6c
 800841a:	f001 fdbb 	bl	8009f94 <__hexnan>
 800841e:	2805      	cmp	r0, #5
 8008420:	d107      	bne.n	8008432 <_strtod_l+0x37a>
 8008422:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008424:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008428:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800842c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008430:	e681      	b.n	8008136 <_strtod_l+0x7e>
 8008432:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008658 <_strtod_l+0x5a0>
 8008436:	e7d2      	b.n	80083de <_strtod_l+0x326>
 8008438:	ebae 0302 	sub.w	r3, lr, r2
 800843c:	9306      	str	r3, [sp, #24]
 800843e:	9b05      	ldr	r3, [sp, #20]
 8008440:	9807      	ldr	r0, [sp, #28]
 8008442:	2b00      	cmp	r3, #0
 8008444:	bf08      	it	eq
 8008446:	4623      	moveq	r3, r4
 8008448:	2c10      	cmp	r4, #16
 800844a:	9305      	str	r3, [sp, #20]
 800844c:	46a0      	mov	r8, r4
 800844e:	bfa8      	it	ge
 8008450:	f04f 0810 	movge.w	r8, #16
 8008454:	f7f8 f85e 	bl	8000514 <__aeabi_ui2d>
 8008458:	2c09      	cmp	r4, #9
 800845a:	4682      	mov	sl, r0
 800845c:	468b      	mov	fp, r1
 800845e:	dc13      	bgt.n	8008488 <_strtod_l+0x3d0>
 8008460:	9b06      	ldr	r3, [sp, #24]
 8008462:	2b00      	cmp	r3, #0
 8008464:	f43f ae67 	beq.w	8008136 <_strtod_l+0x7e>
 8008468:	9b06      	ldr	r3, [sp, #24]
 800846a:	dd7a      	ble.n	8008562 <_strtod_l+0x4aa>
 800846c:	2b16      	cmp	r3, #22
 800846e:	dc61      	bgt.n	8008534 <_strtod_l+0x47c>
 8008470:	4a75      	ldr	r2, [pc, #468]	; (8008648 <_strtod_l+0x590>)
 8008472:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008476:	e9de 0100 	ldrd	r0, r1, [lr]
 800847a:	4652      	mov	r2, sl
 800847c:	465b      	mov	r3, fp
 800847e:	f7f8 f8c3 	bl	8000608 <__aeabi_dmul>
 8008482:	4682      	mov	sl, r0
 8008484:	468b      	mov	fp, r1
 8008486:	e656      	b.n	8008136 <_strtod_l+0x7e>
 8008488:	4b6f      	ldr	r3, [pc, #444]	; (8008648 <_strtod_l+0x590>)
 800848a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800848e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008492:	f7f8 f8b9 	bl	8000608 <__aeabi_dmul>
 8008496:	4606      	mov	r6, r0
 8008498:	4628      	mov	r0, r5
 800849a:	460f      	mov	r7, r1
 800849c:	f7f8 f83a 	bl	8000514 <__aeabi_ui2d>
 80084a0:	4602      	mov	r2, r0
 80084a2:	460b      	mov	r3, r1
 80084a4:	4630      	mov	r0, r6
 80084a6:	4639      	mov	r1, r7
 80084a8:	f7f7 fef8 	bl	800029c <__adddf3>
 80084ac:	2c0f      	cmp	r4, #15
 80084ae:	4682      	mov	sl, r0
 80084b0:	468b      	mov	fp, r1
 80084b2:	ddd5      	ble.n	8008460 <_strtod_l+0x3a8>
 80084b4:	9b06      	ldr	r3, [sp, #24]
 80084b6:	eba4 0808 	sub.w	r8, r4, r8
 80084ba:	4498      	add	r8, r3
 80084bc:	f1b8 0f00 	cmp.w	r8, #0
 80084c0:	f340 8096 	ble.w	80085f0 <_strtod_l+0x538>
 80084c4:	f018 030f 	ands.w	r3, r8, #15
 80084c8:	d00a      	beq.n	80084e0 <_strtod_l+0x428>
 80084ca:	495f      	ldr	r1, [pc, #380]	; (8008648 <_strtod_l+0x590>)
 80084cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084d0:	4652      	mov	r2, sl
 80084d2:	465b      	mov	r3, fp
 80084d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084d8:	f7f8 f896 	bl	8000608 <__aeabi_dmul>
 80084dc:	4682      	mov	sl, r0
 80084de:	468b      	mov	fp, r1
 80084e0:	f038 080f 	bics.w	r8, r8, #15
 80084e4:	d073      	beq.n	80085ce <_strtod_l+0x516>
 80084e6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80084ea:	dd47      	ble.n	800857c <_strtod_l+0x4c4>
 80084ec:	2400      	movs	r4, #0
 80084ee:	46a0      	mov	r8, r4
 80084f0:	9407      	str	r4, [sp, #28]
 80084f2:	9405      	str	r4, [sp, #20]
 80084f4:	2322      	movs	r3, #34	; 0x22
 80084f6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008650 <_strtod_l+0x598>
 80084fa:	f8c9 3000 	str.w	r3, [r9]
 80084fe:	f04f 0a00 	mov.w	sl, #0
 8008502:	9b07      	ldr	r3, [sp, #28]
 8008504:	2b00      	cmp	r3, #0
 8008506:	f43f ae16 	beq.w	8008136 <_strtod_l+0x7e>
 800850a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800850c:	4648      	mov	r0, r9
 800850e:	f001 fe33 	bl	800a178 <_Bfree>
 8008512:	9905      	ldr	r1, [sp, #20]
 8008514:	4648      	mov	r0, r9
 8008516:	f001 fe2f 	bl	800a178 <_Bfree>
 800851a:	4641      	mov	r1, r8
 800851c:	4648      	mov	r0, r9
 800851e:	f001 fe2b 	bl	800a178 <_Bfree>
 8008522:	9907      	ldr	r1, [sp, #28]
 8008524:	4648      	mov	r0, r9
 8008526:	f001 fe27 	bl	800a178 <_Bfree>
 800852a:	4621      	mov	r1, r4
 800852c:	4648      	mov	r0, r9
 800852e:	f001 fe23 	bl	800a178 <_Bfree>
 8008532:	e600      	b.n	8008136 <_strtod_l+0x7e>
 8008534:	9a06      	ldr	r2, [sp, #24]
 8008536:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800853a:	4293      	cmp	r3, r2
 800853c:	dbba      	blt.n	80084b4 <_strtod_l+0x3fc>
 800853e:	4d42      	ldr	r5, [pc, #264]	; (8008648 <_strtod_l+0x590>)
 8008540:	f1c4 040f 	rsb	r4, r4, #15
 8008544:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008548:	4652      	mov	r2, sl
 800854a:	465b      	mov	r3, fp
 800854c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008550:	f7f8 f85a 	bl	8000608 <__aeabi_dmul>
 8008554:	9b06      	ldr	r3, [sp, #24]
 8008556:	1b1c      	subs	r4, r3, r4
 8008558:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800855c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008560:	e78d      	b.n	800847e <_strtod_l+0x3c6>
 8008562:	f113 0f16 	cmn.w	r3, #22
 8008566:	dba5      	blt.n	80084b4 <_strtod_l+0x3fc>
 8008568:	4a37      	ldr	r2, [pc, #220]	; (8008648 <_strtod_l+0x590>)
 800856a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800856e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8008572:	4650      	mov	r0, sl
 8008574:	4659      	mov	r1, fp
 8008576:	f7f8 f971 	bl	800085c <__aeabi_ddiv>
 800857a:	e782      	b.n	8008482 <_strtod_l+0x3ca>
 800857c:	2300      	movs	r3, #0
 800857e:	4e33      	ldr	r6, [pc, #204]	; (800864c <_strtod_l+0x594>)
 8008580:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008584:	4650      	mov	r0, sl
 8008586:	4659      	mov	r1, fp
 8008588:	461d      	mov	r5, r3
 800858a:	f1b8 0f01 	cmp.w	r8, #1
 800858e:	dc21      	bgt.n	80085d4 <_strtod_l+0x51c>
 8008590:	b10b      	cbz	r3, 8008596 <_strtod_l+0x4de>
 8008592:	4682      	mov	sl, r0
 8008594:	468b      	mov	fp, r1
 8008596:	4b2d      	ldr	r3, [pc, #180]	; (800864c <_strtod_l+0x594>)
 8008598:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800859c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80085a0:	4652      	mov	r2, sl
 80085a2:	465b      	mov	r3, fp
 80085a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80085a8:	f7f8 f82e 	bl	8000608 <__aeabi_dmul>
 80085ac:	4b28      	ldr	r3, [pc, #160]	; (8008650 <_strtod_l+0x598>)
 80085ae:	460a      	mov	r2, r1
 80085b0:	400b      	ands	r3, r1
 80085b2:	4928      	ldr	r1, [pc, #160]	; (8008654 <_strtod_l+0x59c>)
 80085b4:	428b      	cmp	r3, r1
 80085b6:	4682      	mov	sl, r0
 80085b8:	d898      	bhi.n	80084ec <_strtod_l+0x434>
 80085ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80085be:	428b      	cmp	r3, r1
 80085c0:	bf86      	itte	hi
 80085c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800865c <_strtod_l+0x5a4>
 80085c6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80085ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80085ce:	2300      	movs	r3, #0
 80085d0:	9304      	str	r3, [sp, #16]
 80085d2:	e077      	b.n	80086c4 <_strtod_l+0x60c>
 80085d4:	f018 0f01 	tst.w	r8, #1
 80085d8:	d006      	beq.n	80085e8 <_strtod_l+0x530>
 80085da:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80085de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e2:	f7f8 f811 	bl	8000608 <__aeabi_dmul>
 80085e6:	2301      	movs	r3, #1
 80085e8:	3501      	adds	r5, #1
 80085ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80085ee:	e7cc      	b.n	800858a <_strtod_l+0x4d2>
 80085f0:	d0ed      	beq.n	80085ce <_strtod_l+0x516>
 80085f2:	f1c8 0800 	rsb	r8, r8, #0
 80085f6:	f018 020f 	ands.w	r2, r8, #15
 80085fa:	d00a      	beq.n	8008612 <_strtod_l+0x55a>
 80085fc:	4b12      	ldr	r3, [pc, #72]	; (8008648 <_strtod_l+0x590>)
 80085fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008602:	4650      	mov	r0, sl
 8008604:	4659      	mov	r1, fp
 8008606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860a:	f7f8 f927 	bl	800085c <__aeabi_ddiv>
 800860e:	4682      	mov	sl, r0
 8008610:	468b      	mov	fp, r1
 8008612:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008616:	d0da      	beq.n	80085ce <_strtod_l+0x516>
 8008618:	f1b8 0f1f 	cmp.w	r8, #31
 800861c:	dd20      	ble.n	8008660 <_strtod_l+0x5a8>
 800861e:	2400      	movs	r4, #0
 8008620:	46a0      	mov	r8, r4
 8008622:	9407      	str	r4, [sp, #28]
 8008624:	9405      	str	r4, [sp, #20]
 8008626:	2322      	movs	r3, #34	; 0x22
 8008628:	f04f 0a00 	mov.w	sl, #0
 800862c:	f04f 0b00 	mov.w	fp, #0
 8008630:	f8c9 3000 	str.w	r3, [r9]
 8008634:	e765      	b.n	8008502 <_strtod_l+0x44a>
 8008636:	bf00      	nop
 8008638:	0800af99 	.word	0x0800af99
 800863c:	0800b023 	.word	0x0800b023
 8008640:	0800afa1 	.word	0x0800afa1
 8008644:	0800afe4 	.word	0x0800afe4
 8008648:	0800b060 	.word	0x0800b060
 800864c:	0800b038 	.word	0x0800b038
 8008650:	7ff00000 	.word	0x7ff00000
 8008654:	7ca00000 	.word	0x7ca00000
 8008658:	fff80000 	.word	0xfff80000
 800865c:	7fefffff 	.word	0x7fefffff
 8008660:	f018 0310 	ands.w	r3, r8, #16
 8008664:	bf18      	it	ne
 8008666:	236a      	movne	r3, #106	; 0x6a
 8008668:	4da0      	ldr	r5, [pc, #640]	; (80088ec <_strtod_l+0x834>)
 800866a:	9304      	str	r3, [sp, #16]
 800866c:	4650      	mov	r0, sl
 800866e:	4659      	mov	r1, fp
 8008670:	2300      	movs	r3, #0
 8008672:	f1b8 0f00 	cmp.w	r8, #0
 8008676:	f300 810a 	bgt.w	800888e <_strtod_l+0x7d6>
 800867a:	b10b      	cbz	r3, 8008680 <_strtod_l+0x5c8>
 800867c:	4682      	mov	sl, r0
 800867e:	468b      	mov	fp, r1
 8008680:	9b04      	ldr	r3, [sp, #16]
 8008682:	b1bb      	cbz	r3, 80086b4 <_strtod_l+0x5fc>
 8008684:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008688:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800868c:	2b00      	cmp	r3, #0
 800868e:	4659      	mov	r1, fp
 8008690:	dd10      	ble.n	80086b4 <_strtod_l+0x5fc>
 8008692:	2b1f      	cmp	r3, #31
 8008694:	f340 8107 	ble.w	80088a6 <_strtod_l+0x7ee>
 8008698:	2b34      	cmp	r3, #52	; 0x34
 800869a:	bfde      	ittt	le
 800869c:	3b20      	suble	r3, #32
 800869e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80086a2:	fa02 f303 	lslle.w	r3, r2, r3
 80086a6:	f04f 0a00 	mov.w	sl, #0
 80086aa:	bfcc      	ite	gt
 80086ac:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80086b0:	ea03 0b01 	andle.w	fp, r3, r1
 80086b4:	2200      	movs	r2, #0
 80086b6:	2300      	movs	r3, #0
 80086b8:	4650      	mov	r0, sl
 80086ba:	4659      	mov	r1, fp
 80086bc:	f7f8 fa0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80086c0:	2800      	cmp	r0, #0
 80086c2:	d1ac      	bne.n	800861e <_strtod_l+0x566>
 80086c4:	9b07      	ldr	r3, [sp, #28]
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	9a05      	ldr	r2, [sp, #20]
 80086ca:	9908      	ldr	r1, [sp, #32]
 80086cc:	4623      	mov	r3, r4
 80086ce:	4648      	mov	r0, r9
 80086d0:	f001 fda4 	bl	800a21c <__s2b>
 80086d4:	9007      	str	r0, [sp, #28]
 80086d6:	2800      	cmp	r0, #0
 80086d8:	f43f af08 	beq.w	80084ec <_strtod_l+0x434>
 80086dc:	9a06      	ldr	r2, [sp, #24]
 80086de:	9b06      	ldr	r3, [sp, #24]
 80086e0:	2a00      	cmp	r2, #0
 80086e2:	f1c3 0300 	rsb	r3, r3, #0
 80086e6:	bfa8      	it	ge
 80086e8:	2300      	movge	r3, #0
 80086ea:	930e      	str	r3, [sp, #56]	; 0x38
 80086ec:	2400      	movs	r4, #0
 80086ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80086f2:	9316      	str	r3, [sp, #88]	; 0x58
 80086f4:	46a0      	mov	r8, r4
 80086f6:	9b07      	ldr	r3, [sp, #28]
 80086f8:	4648      	mov	r0, r9
 80086fa:	6859      	ldr	r1, [r3, #4]
 80086fc:	f001 fd08 	bl	800a110 <_Balloc>
 8008700:	9005      	str	r0, [sp, #20]
 8008702:	2800      	cmp	r0, #0
 8008704:	f43f aef6 	beq.w	80084f4 <_strtod_l+0x43c>
 8008708:	9b07      	ldr	r3, [sp, #28]
 800870a:	691a      	ldr	r2, [r3, #16]
 800870c:	3202      	adds	r2, #2
 800870e:	f103 010c 	add.w	r1, r3, #12
 8008712:	0092      	lsls	r2, r2, #2
 8008714:	300c      	adds	r0, #12
 8008716:	f7fe fe3b 	bl	8007390 <memcpy>
 800871a:	aa1e      	add	r2, sp, #120	; 0x78
 800871c:	a91d      	add	r1, sp, #116	; 0x74
 800871e:	ec4b ab10 	vmov	d0, sl, fp
 8008722:	4648      	mov	r0, r9
 8008724:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008728:	f002 f834 	bl	800a794 <__d2b>
 800872c:	901c      	str	r0, [sp, #112]	; 0x70
 800872e:	2800      	cmp	r0, #0
 8008730:	f43f aee0 	beq.w	80084f4 <_strtod_l+0x43c>
 8008734:	2101      	movs	r1, #1
 8008736:	4648      	mov	r0, r9
 8008738:	f001 fdfc 	bl	800a334 <__i2b>
 800873c:	4680      	mov	r8, r0
 800873e:	2800      	cmp	r0, #0
 8008740:	f43f aed8 	beq.w	80084f4 <_strtod_l+0x43c>
 8008744:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008746:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008748:	2e00      	cmp	r6, #0
 800874a:	bfab      	itete	ge
 800874c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800874e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008750:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008752:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8008754:	bfac      	ite	ge
 8008756:	18f7      	addge	r7, r6, r3
 8008758:	1b9d      	sublt	r5, r3, r6
 800875a:	9b04      	ldr	r3, [sp, #16]
 800875c:	1af6      	subs	r6, r6, r3
 800875e:	4416      	add	r6, r2
 8008760:	4b63      	ldr	r3, [pc, #396]	; (80088f0 <_strtod_l+0x838>)
 8008762:	3e01      	subs	r6, #1
 8008764:	429e      	cmp	r6, r3
 8008766:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800876a:	f280 80af 	bge.w	80088cc <_strtod_l+0x814>
 800876e:	1b9b      	subs	r3, r3, r6
 8008770:	2b1f      	cmp	r3, #31
 8008772:	eba2 0203 	sub.w	r2, r2, r3
 8008776:	f04f 0101 	mov.w	r1, #1
 800877a:	f300 809b 	bgt.w	80088b4 <_strtod_l+0x7fc>
 800877e:	fa01 f303 	lsl.w	r3, r1, r3
 8008782:	930f      	str	r3, [sp, #60]	; 0x3c
 8008784:	2300      	movs	r3, #0
 8008786:	930a      	str	r3, [sp, #40]	; 0x28
 8008788:	18be      	adds	r6, r7, r2
 800878a:	9b04      	ldr	r3, [sp, #16]
 800878c:	42b7      	cmp	r7, r6
 800878e:	4415      	add	r5, r2
 8008790:	441d      	add	r5, r3
 8008792:	463b      	mov	r3, r7
 8008794:	bfa8      	it	ge
 8008796:	4633      	movge	r3, r6
 8008798:	42ab      	cmp	r3, r5
 800879a:	bfa8      	it	ge
 800879c:	462b      	movge	r3, r5
 800879e:	2b00      	cmp	r3, #0
 80087a0:	bfc2      	ittt	gt
 80087a2:	1af6      	subgt	r6, r6, r3
 80087a4:	1aed      	subgt	r5, r5, r3
 80087a6:	1aff      	subgt	r7, r7, r3
 80087a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087aa:	b1bb      	cbz	r3, 80087dc <_strtod_l+0x724>
 80087ac:	4641      	mov	r1, r8
 80087ae:	461a      	mov	r2, r3
 80087b0:	4648      	mov	r0, r9
 80087b2:	f001 fe5f 	bl	800a474 <__pow5mult>
 80087b6:	4680      	mov	r8, r0
 80087b8:	2800      	cmp	r0, #0
 80087ba:	f43f ae9b 	beq.w	80084f4 <_strtod_l+0x43c>
 80087be:	4601      	mov	r1, r0
 80087c0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80087c2:	4648      	mov	r0, r9
 80087c4:	f001 fdbf 	bl	800a346 <__multiply>
 80087c8:	900c      	str	r0, [sp, #48]	; 0x30
 80087ca:	2800      	cmp	r0, #0
 80087cc:	f43f ae92 	beq.w	80084f4 <_strtod_l+0x43c>
 80087d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80087d2:	4648      	mov	r0, r9
 80087d4:	f001 fcd0 	bl	800a178 <_Bfree>
 80087d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087da:	931c      	str	r3, [sp, #112]	; 0x70
 80087dc:	2e00      	cmp	r6, #0
 80087de:	dc7a      	bgt.n	80088d6 <_strtod_l+0x81e>
 80087e0:	9b06      	ldr	r3, [sp, #24]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	dd08      	ble.n	80087f8 <_strtod_l+0x740>
 80087e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80087e8:	9905      	ldr	r1, [sp, #20]
 80087ea:	4648      	mov	r0, r9
 80087ec:	f001 fe42 	bl	800a474 <__pow5mult>
 80087f0:	9005      	str	r0, [sp, #20]
 80087f2:	2800      	cmp	r0, #0
 80087f4:	f43f ae7e 	beq.w	80084f4 <_strtod_l+0x43c>
 80087f8:	2d00      	cmp	r5, #0
 80087fa:	dd08      	ble.n	800880e <_strtod_l+0x756>
 80087fc:	462a      	mov	r2, r5
 80087fe:	9905      	ldr	r1, [sp, #20]
 8008800:	4648      	mov	r0, r9
 8008802:	f001 fe85 	bl	800a510 <__lshift>
 8008806:	9005      	str	r0, [sp, #20]
 8008808:	2800      	cmp	r0, #0
 800880a:	f43f ae73 	beq.w	80084f4 <_strtod_l+0x43c>
 800880e:	2f00      	cmp	r7, #0
 8008810:	dd08      	ble.n	8008824 <_strtod_l+0x76c>
 8008812:	4641      	mov	r1, r8
 8008814:	463a      	mov	r2, r7
 8008816:	4648      	mov	r0, r9
 8008818:	f001 fe7a 	bl	800a510 <__lshift>
 800881c:	4680      	mov	r8, r0
 800881e:	2800      	cmp	r0, #0
 8008820:	f43f ae68 	beq.w	80084f4 <_strtod_l+0x43c>
 8008824:	9a05      	ldr	r2, [sp, #20]
 8008826:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008828:	4648      	mov	r0, r9
 800882a:	f001 fedf 	bl	800a5ec <__mdiff>
 800882e:	4604      	mov	r4, r0
 8008830:	2800      	cmp	r0, #0
 8008832:	f43f ae5f 	beq.w	80084f4 <_strtod_l+0x43c>
 8008836:	68c3      	ldr	r3, [r0, #12]
 8008838:	930c      	str	r3, [sp, #48]	; 0x30
 800883a:	2300      	movs	r3, #0
 800883c:	60c3      	str	r3, [r0, #12]
 800883e:	4641      	mov	r1, r8
 8008840:	f001 feba 	bl	800a5b8 <__mcmp>
 8008844:	2800      	cmp	r0, #0
 8008846:	da55      	bge.n	80088f4 <_strtod_l+0x83c>
 8008848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800884a:	b9e3      	cbnz	r3, 8008886 <_strtod_l+0x7ce>
 800884c:	f1ba 0f00 	cmp.w	sl, #0
 8008850:	d119      	bne.n	8008886 <_strtod_l+0x7ce>
 8008852:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008856:	b9b3      	cbnz	r3, 8008886 <_strtod_l+0x7ce>
 8008858:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800885c:	0d1b      	lsrs	r3, r3, #20
 800885e:	051b      	lsls	r3, r3, #20
 8008860:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008864:	d90f      	bls.n	8008886 <_strtod_l+0x7ce>
 8008866:	6963      	ldr	r3, [r4, #20]
 8008868:	b913      	cbnz	r3, 8008870 <_strtod_l+0x7b8>
 800886a:	6923      	ldr	r3, [r4, #16]
 800886c:	2b01      	cmp	r3, #1
 800886e:	dd0a      	ble.n	8008886 <_strtod_l+0x7ce>
 8008870:	4621      	mov	r1, r4
 8008872:	2201      	movs	r2, #1
 8008874:	4648      	mov	r0, r9
 8008876:	f001 fe4b 	bl	800a510 <__lshift>
 800887a:	4641      	mov	r1, r8
 800887c:	4604      	mov	r4, r0
 800887e:	f001 fe9b 	bl	800a5b8 <__mcmp>
 8008882:	2800      	cmp	r0, #0
 8008884:	dc67      	bgt.n	8008956 <_strtod_l+0x89e>
 8008886:	9b04      	ldr	r3, [sp, #16]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d171      	bne.n	8008970 <_strtod_l+0x8b8>
 800888c:	e63d      	b.n	800850a <_strtod_l+0x452>
 800888e:	f018 0f01 	tst.w	r8, #1
 8008892:	d004      	beq.n	800889e <_strtod_l+0x7e6>
 8008894:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008898:	f7f7 feb6 	bl	8000608 <__aeabi_dmul>
 800889c:	2301      	movs	r3, #1
 800889e:	ea4f 0868 	mov.w	r8, r8, asr #1
 80088a2:	3508      	adds	r5, #8
 80088a4:	e6e5      	b.n	8008672 <_strtod_l+0x5ba>
 80088a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088aa:	fa02 f303 	lsl.w	r3, r2, r3
 80088ae:	ea03 0a0a 	and.w	sl, r3, sl
 80088b2:	e6ff      	b.n	80086b4 <_strtod_l+0x5fc>
 80088b4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80088b8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80088bc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80088c0:	36e2      	adds	r6, #226	; 0xe2
 80088c2:	fa01 f306 	lsl.w	r3, r1, r6
 80088c6:	930a      	str	r3, [sp, #40]	; 0x28
 80088c8:	910f      	str	r1, [sp, #60]	; 0x3c
 80088ca:	e75d      	b.n	8008788 <_strtod_l+0x6d0>
 80088cc:	2300      	movs	r3, #0
 80088ce:	930a      	str	r3, [sp, #40]	; 0x28
 80088d0:	2301      	movs	r3, #1
 80088d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80088d4:	e758      	b.n	8008788 <_strtod_l+0x6d0>
 80088d6:	4632      	mov	r2, r6
 80088d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80088da:	4648      	mov	r0, r9
 80088dc:	f001 fe18 	bl	800a510 <__lshift>
 80088e0:	901c      	str	r0, [sp, #112]	; 0x70
 80088e2:	2800      	cmp	r0, #0
 80088e4:	f47f af7c 	bne.w	80087e0 <_strtod_l+0x728>
 80088e8:	e604      	b.n	80084f4 <_strtod_l+0x43c>
 80088ea:	bf00      	nop
 80088ec:	0800aff8 	.word	0x0800aff8
 80088f0:	fffffc02 	.word	0xfffffc02
 80088f4:	465d      	mov	r5, fp
 80088f6:	f040 8086 	bne.w	8008a06 <_strtod_l+0x94e>
 80088fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008900:	b32a      	cbz	r2, 800894e <_strtod_l+0x896>
 8008902:	4aaf      	ldr	r2, [pc, #700]	; (8008bc0 <_strtod_l+0xb08>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d153      	bne.n	80089b0 <_strtod_l+0x8f8>
 8008908:	9b04      	ldr	r3, [sp, #16]
 800890a:	4650      	mov	r0, sl
 800890c:	b1d3      	cbz	r3, 8008944 <_strtod_l+0x88c>
 800890e:	4aad      	ldr	r2, [pc, #692]	; (8008bc4 <_strtod_l+0xb0c>)
 8008910:	402a      	ands	r2, r5
 8008912:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008916:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800891a:	d816      	bhi.n	800894a <_strtod_l+0x892>
 800891c:	0d12      	lsrs	r2, r2, #20
 800891e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008922:	fa01 f303 	lsl.w	r3, r1, r3
 8008926:	4298      	cmp	r0, r3
 8008928:	d142      	bne.n	80089b0 <_strtod_l+0x8f8>
 800892a:	4ba7      	ldr	r3, [pc, #668]	; (8008bc8 <_strtod_l+0xb10>)
 800892c:	429d      	cmp	r5, r3
 800892e:	d102      	bne.n	8008936 <_strtod_l+0x87e>
 8008930:	3001      	adds	r0, #1
 8008932:	f43f addf 	beq.w	80084f4 <_strtod_l+0x43c>
 8008936:	4ba3      	ldr	r3, [pc, #652]	; (8008bc4 <_strtod_l+0xb0c>)
 8008938:	402b      	ands	r3, r5
 800893a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800893e:	f04f 0a00 	mov.w	sl, #0
 8008942:	e7a0      	b.n	8008886 <_strtod_l+0x7ce>
 8008944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008948:	e7ed      	b.n	8008926 <_strtod_l+0x86e>
 800894a:	460b      	mov	r3, r1
 800894c:	e7eb      	b.n	8008926 <_strtod_l+0x86e>
 800894e:	bb7b      	cbnz	r3, 80089b0 <_strtod_l+0x8f8>
 8008950:	f1ba 0f00 	cmp.w	sl, #0
 8008954:	d12c      	bne.n	80089b0 <_strtod_l+0x8f8>
 8008956:	9904      	ldr	r1, [sp, #16]
 8008958:	4a9a      	ldr	r2, [pc, #616]	; (8008bc4 <_strtod_l+0xb0c>)
 800895a:	465b      	mov	r3, fp
 800895c:	b1f1      	cbz	r1, 800899c <_strtod_l+0x8e4>
 800895e:	ea02 010b 	and.w	r1, r2, fp
 8008962:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008966:	dc19      	bgt.n	800899c <_strtod_l+0x8e4>
 8008968:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800896c:	f77f ae5b 	ble.w	8008626 <_strtod_l+0x56e>
 8008970:	4a96      	ldr	r2, [pc, #600]	; (8008bcc <_strtod_l+0xb14>)
 8008972:	2300      	movs	r3, #0
 8008974:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008978:	4650      	mov	r0, sl
 800897a:	4659      	mov	r1, fp
 800897c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008980:	f7f7 fe42 	bl	8000608 <__aeabi_dmul>
 8008984:	4682      	mov	sl, r0
 8008986:	468b      	mov	fp, r1
 8008988:	2900      	cmp	r1, #0
 800898a:	f47f adbe 	bne.w	800850a <_strtod_l+0x452>
 800898e:	2800      	cmp	r0, #0
 8008990:	f47f adbb 	bne.w	800850a <_strtod_l+0x452>
 8008994:	2322      	movs	r3, #34	; 0x22
 8008996:	f8c9 3000 	str.w	r3, [r9]
 800899a:	e5b6      	b.n	800850a <_strtod_l+0x452>
 800899c:	4013      	ands	r3, r2
 800899e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80089a2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80089a6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80089aa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80089ae:	e76a      	b.n	8008886 <_strtod_l+0x7ce>
 80089b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b2:	b193      	cbz	r3, 80089da <_strtod_l+0x922>
 80089b4:	422b      	tst	r3, r5
 80089b6:	f43f af66 	beq.w	8008886 <_strtod_l+0x7ce>
 80089ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089bc:	9a04      	ldr	r2, [sp, #16]
 80089be:	4650      	mov	r0, sl
 80089c0:	4659      	mov	r1, fp
 80089c2:	b173      	cbz	r3, 80089e2 <_strtod_l+0x92a>
 80089c4:	f7ff fb5c 	bl	8008080 <sulp>
 80089c8:	4602      	mov	r2, r0
 80089ca:	460b      	mov	r3, r1
 80089cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80089d0:	f7f7 fc64 	bl	800029c <__adddf3>
 80089d4:	4682      	mov	sl, r0
 80089d6:	468b      	mov	fp, r1
 80089d8:	e755      	b.n	8008886 <_strtod_l+0x7ce>
 80089da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089dc:	ea13 0f0a 	tst.w	r3, sl
 80089e0:	e7e9      	b.n	80089b6 <_strtod_l+0x8fe>
 80089e2:	f7ff fb4d 	bl	8008080 <sulp>
 80089e6:	4602      	mov	r2, r0
 80089e8:	460b      	mov	r3, r1
 80089ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80089ee:	f7f7 fc53 	bl	8000298 <__aeabi_dsub>
 80089f2:	2200      	movs	r2, #0
 80089f4:	2300      	movs	r3, #0
 80089f6:	4682      	mov	sl, r0
 80089f8:	468b      	mov	fp, r1
 80089fa:	f7f8 f86d 	bl	8000ad8 <__aeabi_dcmpeq>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	f47f ae11 	bne.w	8008626 <_strtod_l+0x56e>
 8008a04:	e73f      	b.n	8008886 <_strtod_l+0x7ce>
 8008a06:	4641      	mov	r1, r8
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f001 ff12 	bl	800a832 <__ratio>
 8008a0e:	ec57 6b10 	vmov	r6, r7, d0
 8008a12:	2200      	movs	r2, #0
 8008a14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a18:	ee10 0a10 	vmov	r0, s0
 8008a1c:	4639      	mov	r1, r7
 8008a1e:	f7f8 f86f 	bl	8000b00 <__aeabi_dcmple>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d077      	beq.n	8008b16 <_strtod_l+0xa5e>
 8008a26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d04a      	beq.n	8008ac2 <_strtod_l+0xa0a>
 8008a2c:	4b68      	ldr	r3, [pc, #416]	; (8008bd0 <_strtod_l+0xb18>)
 8008a2e:	2200      	movs	r2, #0
 8008a30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008a34:	4f66      	ldr	r7, [pc, #408]	; (8008bd0 <_strtod_l+0xb18>)
 8008a36:	2600      	movs	r6, #0
 8008a38:	4b62      	ldr	r3, [pc, #392]	; (8008bc4 <_strtod_l+0xb0c>)
 8008a3a:	402b      	ands	r3, r5
 8008a3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a40:	4b64      	ldr	r3, [pc, #400]	; (8008bd4 <_strtod_l+0xb1c>)
 8008a42:	429a      	cmp	r2, r3
 8008a44:	f040 80ce 	bne.w	8008be4 <_strtod_l+0xb2c>
 8008a48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008a4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a50:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8008a54:	ec4b ab10 	vmov	d0, sl, fp
 8008a58:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008a5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008a60:	f001 fe22 	bl	800a6a8 <__ulp>
 8008a64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a68:	ec53 2b10 	vmov	r2, r3, d0
 8008a6c:	f7f7 fdcc 	bl	8000608 <__aeabi_dmul>
 8008a70:	4652      	mov	r2, sl
 8008a72:	465b      	mov	r3, fp
 8008a74:	f7f7 fc12 	bl	800029c <__adddf3>
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4952      	ldr	r1, [pc, #328]	; (8008bc4 <_strtod_l+0xb0c>)
 8008a7c:	4a56      	ldr	r2, [pc, #344]	; (8008bd8 <_strtod_l+0xb20>)
 8008a7e:	4019      	ands	r1, r3
 8008a80:	4291      	cmp	r1, r2
 8008a82:	4682      	mov	sl, r0
 8008a84:	d95b      	bls.n	8008b3e <_strtod_l+0xa86>
 8008a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a88:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d103      	bne.n	8008a98 <_strtod_l+0x9e0>
 8008a90:	9b08      	ldr	r3, [sp, #32]
 8008a92:	3301      	adds	r3, #1
 8008a94:	f43f ad2e 	beq.w	80084f4 <_strtod_l+0x43c>
 8008a98:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008bc8 <_strtod_l+0xb10>
 8008a9c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008aa0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008aa2:	4648      	mov	r0, r9
 8008aa4:	f001 fb68 	bl	800a178 <_Bfree>
 8008aa8:	9905      	ldr	r1, [sp, #20]
 8008aaa:	4648      	mov	r0, r9
 8008aac:	f001 fb64 	bl	800a178 <_Bfree>
 8008ab0:	4641      	mov	r1, r8
 8008ab2:	4648      	mov	r0, r9
 8008ab4:	f001 fb60 	bl	800a178 <_Bfree>
 8008ab8:	4621      	mov	r1, r4
 8008aba:	4648      	mov	r0, r9
 8008abc:	f001 fb5c 	bl	800a178 <_Bfree>
 8008ac0:	e619      	b.n	80086f6 <_strtod_l+0x63e>
 8008ac2:	f1ba 0f00 	cmp.w	sl, #0
 8008ac6:	d11a      	bne.n	8008afe <_strtod_l+0xa46>
 8008ac8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008acc:	b9eb      	cbnz	r3, 8008b0a <_strtod_l+0xa52>
 8008ace:	2200      	movs	r2, #0
 8008ad0:	4b3f      	ldr	r3, [pc, #252]	; (8008bd0 <_strtod_l+0xb18>)
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	4639      	mov	r1, r7
 8008ad6:	f7f8 f809 	bl	8000aec <__aeabi_dcmplt>
 8008ada:	b9c8      	cbnz	r0, 8008b10 <_strtod_l+0xa58>
 8008adc:	4630      	mov	r0, r6
 8008ade:	4639      	mov	r1, r7
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	4b3e      	ldr	r3, [pc, #248]	; (8008bdc <_strtod_l+0xb24>)
 8008ae4:	f7f7 fd90 	bl	8000608 <__aeabi_dmul>
 8008ae8:	4606      	mov	r6, r0
 8008aea:	460f      	mov	r7, r1
 8008aec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008af0:	9618      	str	r6, [sp, #96]	; 0x60
 8008af2:	9319      	str	r3, [sp, #100]	; 0x64
 8008af4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008af8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008afc:	e79c      	b.n	8008a38 <_strtod_l+0x980>
 8008afe:	f1ba 0f01 	cmp.w	sl, #1
 8008b02:	d102      	bne.n	8008b0a <_strtod_l+0xa52>
 8008b04:	2d00      	cmp	r5, #0
 8008b06:	f43f ad8e 	beq.w	8008626 <_strtod_l+0x56e>
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	4b34      	ldr	r3, [pc, #208]	; (8008be0 <_strtod_l+0xb28>)
 8008b0e:	e78f      	b.n	8008a30 <_strtod_l+0x978>
 8008b10:	2600      	movs	r6, #0
 8008b12:	4f32      	ldr	r7, [pc, #200]	; (8008bdc <_strtod_l+0xb24>)
 8008b14:	e7ea      	b.n	8008aec <_strtod_l+0xa34>
 8008b16:	4b31      	ldr	r3, [pc, #196]	; (8008bdc <_strtod_l+0xb24>)
 8008b18:	4630      	mov	r0, r6
 8008b1a:	4639      	mov	r1, r7
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f7f7 fd73 	bl	8000608 <__aeabi_dmul>
 8008b22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b24:	4606      	mov	r6, r0
 8008b26:	460f      	mov	r7, r1
 8008b28:	b933      	cbnz	r3, 8008b38 <_strtod_l+0xa80>
 8008b2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b2e:	9010      	str	r0, [sp, #64]	; 0x40
 8008b30:	9311      	str	r3, [sp, #68]	; 0x44
 8008b32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b36:	e7df      	b.n	8008af8 <_strtod_l+0xa40>
 8008b38:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008b3c:	e7f9      	b.n	8008b32 <_strtod_l+0xa7a>
 8008b3e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008b42:	9b04      	ldr	r3, [sp, #16]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1ab      	bne.n	8008aa0 <_strtod_l+0x9e8>
 8008b48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008b4c:	0d1b      	lsrs	r3, r3, #20
 8008b4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b50:	051b      	lsls	r3, r3, #20
 8008b52:	429a      	cmp	r2, r3
 8008b54:	465d      	mov	r5, fp
 8008b56:	d1a3      	bne.n	8008aa0 <_strtod_l+0x9e8>
 8008b58:	4639      	mov	r1, r7
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f7f8 f804 	bl	8000b68 <__aeabi_d2iz>
 8008b60:	f7f7 fce8 	bl	8000534 <__aeabi_i2d>
 8008b64:	460b      	mov	r3, r1
 8008b66:	4602      	mov	r2, r0
 8008b68:	4639      	mov	r1, r7
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	f7f7 fb94 	bl	8000298 <__aeabi_dsub>
 8008b70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b72:	4606      	mov	r6, r0
 8008b74:	460f      	mov	r7, r1
 8008b76:	b933      	cbnz	r3, 8008b86 <_strtod_l+0xace>
 8008b78:	f1ba 0f00 	cmp.w	sl, #0
 8008b7c:	d103      	bne.n	8008b86 <_strtod_l+0xace>
 8008b7e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8008b82:	2d00      	cmp	r5, #0
 8008b84:	d06d      	beq.n	8008c62 <_strtod_l+0xbaa>
 8008b86:	a30a      	add	r3, pc, #40	; (adr r3, 8008bb0 <_strtod_l+0xaf8>)
 8008b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8c:	4630      	mov	r0, r6
 8008b8e:	4639      	mov	r1, r7
 8008b90:	f7f7 ffac 	bl	8000aec <__aeabi_dcmplt>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	f47f acb8 	bne.w	800850a <_strtod_l+0x452>
 8008b9a:	a307      	add	r3, pc, #28	; (adr r3, 8008bb8 <_strtod_l+0xb00>)
 8008b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	4639      	mov	r1, r7
 8008ba4:	f7f7 ffc0 	bl	8000b28 <__aeabi_dcmpgt>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	f43f af79 	beq.w	8008aa0 <_strtod_l+0x9e8>
 8008bae:	e4ac      	b.n	800850a <_strtod_l+0x452>
 8008bb0:	94a03595 	.word	0x94a03595
 8008bb4:	3fdfffff 	.word	0x3fdfffff
 8008bb8:	35afe535 	.word	0x35afe535
 8008bbc:	3fe00000 	.word	0x3fe00000
 8008bc0:	000fffff 	.word	0x000fffff
 8008bc4:	7ff00000 	.word	0x7ff00000
 8008bc8:	7fefffff 	.word	0x7fefffff
 8008bcc:	39500000 	.word	0x39500000
 8008bd0:	3ff00000 	.word	0x3ff00000
 8008bd4:	7fe00000 	.word	0x7fe00000
 8008bd8:	7c9fffff 	.word	0x7c9fffff
 8008bdc:	3fe00000 	.word	0x3fe00000
 8008be0:	bff00000 	.word	0xbff00000
 8008be4:	9b04      	ldr	r3, [sp, #16]
 8008be6:	b333      	cbz	r3, 8008c36 <_strtod_l+0xb7e>
 8008be8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008bee:	d822      	bhi.n	8008c36 <_strtod_l+0xb7e>
 8008bf0:	a327      	add	r3, pc, #156	; (adr r3, 8008c90 <_strtod_l+0xbd8>)
 8008bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	f7f7 ff81 	bl	8000b00 <__aeabi_dcmple>
 8008bfe:	b1a0      	cbz	r0, 8008c2a <_strtod_l+0xb72>
 8008c00:	4639      	mov	r1, r7
 8008c02:	4630      	mov	r0, r6
 8008c04:	f7f7 ffd8 	bl	8000bb8 <__aeabi_d2uiz>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	bf08      	it	eq
 8008c0c:	2001      	moveq	r0, #1
 8008c0e:	f7f7 fc81 	bl	8000514 <__aeabi_ui2d>
 8008c12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c14:	4606      	mov	r6, r0
 8008c16:	460f      	mov	r7, r1
 8008c18:	bb03      	cbnz	r3, 8008c5c <_strtod_l+0xba4>
 8008c1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c1e:	9012      	str	r0, [sp, #72]	; 0x48
 8008c20:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c22:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008c26:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c2e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008c32:	1a9b      	subs	r3, r3, r2
 8008c34:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c36:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008c3a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8008c3e:	f001 fd33 	bl	800a6a8 <__ulp>
 8008c42:	4650      	mov	r0, sl
 8008c44:	ec53 2b10 	vmov	r2, r3, d0
 8008c48:	4659      	mov	r1, fp
 8008c4a:	f7f7 fcdd 	bl	8000608 <__aeabi_dmul>
 8008c4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c52:	f7f7 fb23 	bl	800029c <__adddf3>
 8008c56:	4682      	mov	sl, r0
 8008c58:	468b      	mov	fp, r1
 8008c5a:	e772      	b.n	8008b42 <_strtod_l+0xa8a>
 8008c5c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008c60:	e7df      	b.n	8008c22 <_strtod_l+0xb6a>
 8008c62:	a30d      	add	r3, pc, #52	; (adr r3, 8008c98 <_strtod_l+0xbe0>)
 8008c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c68:	f7f7 ff40 	bl	8000aec <__aeabi_dcmplt>
 8008c6c:	e79c      	b.n	8008ba8 <_strtod_l+0xaf0>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	930d      	str	r3, [sp, #52]	; 0x34
 8008c72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c76:	6013      	str	r3, [r2, #0]
 8008c78:	f7ff ba61 	b.w	800813e <_strtod_l+0x86>
 8008c7c:	2b65      	cmp	r3, #101	; 0x65
 8008c7e:	f04f 0200 	mov.w	r2, #0
 8008c82:	f43f ab4e 	beq.w	8008322 <_strtod_l+0x26a>
 8008c86:	2101      	movs	r1, #1
 8008c88:	4614      	mov	r4, r2
 8008c8a:	9104      	str	r1, [sp, #16]
 8008c8c:	f7ff bacb 	b.w	8008226 <_strtod_l+0x16e>
 8008c90:	ffc00000 	.word	0xffc00000
 8008c94:	41dfffff 	.word	0x41dfffff
 8008c98:	94a03595 	.word	0x94a03595
 8008c9c:	3fcfffff 	.word	0x3fcfffff

08008ca0 <_strtod_r>:
 8008ca0:	4b05      	ldr	r3, [pc, #20]	; (8008cb8 <_strtod_r+0x18>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	b410      	push	{r4}
 8008ca6:	6a1b      	ldr	r3, [r3, #32]
 8008ca8:	4c04      	ldr	r4, [pc, #16]	; (8008cbc <_strtod_r+0x1c>)
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	bf08      	it	eq
 8008cae:	4623      	moveq	r3, r4
 8008cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cb4:	f7ff ba00 	b.w	80080b8 <_strtod_l>
 8008cb8:	20000014 	.word	0x20000014
 8008cbc:	20000078 	.word	0x20000078

08008cc0 <_strtol_l.isra.0>:
 8008cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc4:	4680      	mov	r8, r0
 8008cc6:	4689      	mov	r9, r1
 8008cc8:	4692      	mov	sl, r2
 8008cca:	461e      	mov	r6, r3
 8008ccc:	460f      	mov	r7, r1
 8008cce:	463d      	mov	r5, r7
 8008cd0:	9808      	ldr	r0, [sp, #32]
 8008cd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008cd6:	f001 f9ed 	bl	800a0b4 <__locale_ctype_ptr_l>
 8008cda:	4420      	add	r0, r4
 8008cdc:	7843      	ldrb	r3, [r0, #1]
 8008cde:	f013 0308 	ands.w	r3, r3, #8
 8008ce2:	d132      	bne.n	8008d4a <_strtol_l.isra.0+0x8a>
 8008ce4:	2c2d      	cmp	r4, #45	; 0x2d
 8008ce6:	d132      	bne.n	8008d4e <_strtol_l.isra.0+0x8e>
 8008ce8:	787c      	ldrb	r4, [r7, #1]
 8008cea:	1cbd      	adds	r5, r7, #2
 8008cec:	2201      	movs	r2, #1
 8008cee:	2e00      	cmp	r6, #0
 8008cf0:	d05d      	beq.n	8008dae <_strtol_l.isra.0+0xee>
 8008cf2:	2e10      	cmp	r6, #16
 8008cf4:	d109      	bne.n	8008d0a <_strtol_l.isra.0+0x4a>
 8008cf6:	2c30      	cmp	r4, #48	; 0x30
 8008cf8:	d107      	bne.n	8008d0a <_strtol_l.isra.0+0x4a>
 8008cfa:	782b      	ldrb	r3, [r5, #0]
 8008cfc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d00:	2b58      	cmp	r3, #88	; 0x58
 8008d02:	d14f      	bne.n	8008da4 <_strtol_l.isra.0+0xe4>
 8008d04:	786c      	ldrb	r4, [r5, #1]
 8008d06:	2610      	movs	r6, #16
 8008d08:	3502      	adds	r5, #2
 8008d0a:	2a00      	cmp	r2, #0
 8008d0c:	bf14      	ite	ne
 8008d0e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008d12:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008d16:	2700      	movs	r7, #0
 8008d18:	fbb1 fcf6 	udiv	ip, r1, r6
 8008d1c:	4638      	mov	r0, r7
 8008d1e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008d22:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008d26:	2b09      	cmp	r3, #9
 8008d28:	d817      	bhi.n	8008d5a <_strtol_l.isra.0+0x9a>
 8008d2a:	461c      	mov	r4, r3
 8008d2c:	42a6      	cmp	r6, r4
 8008d2e:	dd23      	ble.n	8008d78 <_strtol_l.isra.0+0xb8>
 8008d30:	1c7b      	adds	r3, r7, #1
 8008d32:	d007      	beq.n	8008d44 <_strtol_l.isra.0+0x84>
 8008d34:	4584      	cmp	ip, r0
 8008d36:	d31c      	bcc.n	8008d72 <_strtol_l.isra.0+0xb2>
 8008d38:	d101      	bne.n	8008d3e <_strtol_l.isra.0+0x7e>
 8008d3a:	45a6      	cmp	lr, r4
 8008d3c:	db19      	blt.n	8008d72 <_strtol_l.isra.0+0xb2>
 8008d3e:	fb00 4006 	mla	r0, r0, r6, r4
 8008d42:	2701      	movs	r7, #1
 8008d44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d48:	e7eb      	b.n	8008d22 <_strtol_l.isra.0+0x62>
 8008d4a:	462f      	mov	r7, r5
 8008d4c:	e7bf      	b.n	8008cce <_strtol_l.isra.0+0xe>
 8008d4e:	2c2b      	cmp	r4, #43	; 0x2b
 8008d50:	bf04      	itt	eq
 8008d52:	1cbd      	addeq	r5, r7, #2
 8008d54:	787c      	ldrbeq	r4, [r7, #1]
 8008d56:	461a      	mov	r2, r3
 8008d58:	e7c9      	b.n	8008cee <_strtol_l.isra.0+0x2e>
 8008d5a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008d5e:	2b19      	cmp	r3, #25
 8008d60:	d801      	bhi.n	8008d66 <_strtol_l.isra.0+0xa6>
 8008d62:	3c37      	subs	r4, #55	; 0x37
 8008d64:	e7e2      	b.n	8008d2c <_strtol_l.isra.0+0x6c>
 8008d66:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008d6a:	2b19      	cmp	r3, #25
 8008d6c:	d804      	bhi.n	8008d78 <_strtol_l.isra.0+0xb8>
 8008d6e:	3c57      	subs	r4, #87	; 0x57
 8008d70:	e7dc      	b.n	8008d2c <_strtol_l.isra.0+0x6c>
 8008d72:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008d76:	e7e5      	b.n	8008d44 <_strtol_l.isra.0+0x84>
 8008d78:	1c7b      	adds	r3, r7, #1
 8008d7a:	d108      	bne.n	8008d8e <_strtol_l.isra.0+0xce>
 8008d7c:	2322      	movs	r3, #34	; 0x22
 8008d7e:	f8c8 3000 	str.w	r3, [r8]
 8008d82:	4608      	mov	r0, r1
 8008d84:	f1ba 0f00 	cmp.w	sl, #0
 8008d88:	d107      	bne.n	8008d9a <_strtol_l.isra.0+0xda>
 8008d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8e:	b102      	cbz	r2, 8008d92 <_strtol_l.isra.0+0xd2>
 8008d90:	4240      	negs	r0, r0
 8008d92:	f1ba 0f00 	cmp.w	sl, #0
 8008d96:	d0f8      	beq.n	8008d8a <_strtol_l.isra.0+0xca>
 8008d98:	b10f      	cbz	r7, 8008d9e <_strtol_l.isra.0+0xde>
 8008d9a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8008d9e:	f8ca 9000 	str.w	r9, [sl]
 8008da2:	e7f2      	b.n	8008d8a <_strtol_l.isra.0+0xca>
 8008da4:	2430      	movs	r4, #48	; 0x30
 8008da6:	2e00      	cmp	r6, #0
 8008da8:	d1af      	bne.n	8008d0a <_strtol_l.isra.0+0x4a>
 8008daa:	2608      	movs	r6, #8
 8008dac:	e7ad      	b.n	8008d0a <_strtol_l.isra.0+0x4a>
 8008dae:	2c30      	cmp	r4, #48	; 0x30
 8008db0:	d0a3      	beq.n	8008cfa <_strtol_l.isra.0+0x3a>
 8008db2:	260a      	movs	r6, #10
 8008db4:	e7a9      	b.n	8008d0a <_strtol_l.isra.0+0x4a>
	...

08008db8 <_strtol_r>:
 8008db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dba:	4c06      	ldr	r4, [pc, #24]	; (8008dd4 <_strtol_r+0x1c>)
 8008dbc:	4d06      	ldr	r5, [pc, #24]	; (8008dd8 <_strtol_r+0x20>)
 8008dbe:	6824      	ldr	r4, [r4, #0]
 8008dc0:	6a24      	ldr	r4, [r4, #32]
 8008dc2:	2c00      	cmp	r4, #0
 8008dc4:	bf08      	it	eq
 8008dc6:	462c      	moveq	r4, r5
 8008dc8:	9400      	str	r4, [sp, #0]
 8008dca:	f7ff ff79 	bl	8008cc0 <_strtol_l.isra.0>
 8008dce:	b003      	add	sp, #12
 8008dd0:	bd30      	pop	{r4, r5, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20000014 	.word	0x20000014
 8008dd8:	20000078 	.word	0x20000078

08008ddc <quorem>:
 8008ddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de0:	6903      	ldr	r3, [r0, #16]
 8008de2:	690c      	ldr	r4, [r1, #16]
 8008de4:	42a3      	cmp	r3, r4
 8008de6:	4680      	mov	r8, r0
 8008de8:	f2c0 8082 	blt.w	8008ef0 <quorem+0x114>
 8008dec:	3c01      	subs	r4, #1
 8008dee:	f101 0714 	add.w	r7, r1, #20
 8008df2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008df6:	f100 0614 	add.w	r6, r0, #20
 8008dfa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008dfe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008e02:	eb06 030c 	add.w	r3, r6, ip
 8008e06:	3501      	adds	r5, #1
 8008e08:	eb07 090c 	add.w	r9, r7, ip
 8008e0c:	9301      	str	r3, [sp, #4]
 8008e0e:	fbb0 f5f5 	udiv	r5, r0, r5
 8008e12:	b395      	cbz	r5, 8008e7a <quorem+0x9e>
 8008e14:	f04f 0a00 	mov.w	sl, #0
 8008e18:	4638      	mov	r0, r7
 8008e1a:	46b6      	mov	lr, r6
 8008e1c:	46d3      	mov	fp, sl
 8008e1e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e22:	b293      	uxth	r3, r2
 8008e24:	fb05 a303 	mla	r3, r5, r3, sl
 8008e28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	ebab 0303 	sub.w	r3, fp, r3
 8008e32:	0c12      	lsrs	r2, r2, #16
 8008e34:	f8de b000 	ldr.w	fp, [lr]
 8008e38:	fb05 a202 	mla	r2, r5, r2, sl
 8008e3c:	fa13 f38b 	uxtah	r3, r3, fp
 8008e40:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008e44:	fa1f fb82 	uxth.w	fp, r2
 8008e48:	f8de 2000 	ldr.w	r2, [lr]
 8008e4c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008e50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e5a:	4581      	cmp	r9, r0
 8008e5c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008e60:	f84e 3b04 	str.w	r3, [lr], #4
 8008e64:	d2db      	bcs.n	8008e1e <quorem+0x42>
 8008e66:	f856 300c 	ldr.w	r3, [r6, ip]
 8008e6a:	b933      	cbnz	r3, 8008e7a <quorem+0x9e>
 8008e6c:	9b01      	ldr	r3, [sp, #4]
 8008e6e:	3b04      	subs	r3, #4
 8008e70:	429e      	cmp	r6, r3
 8008e72:	461a      	mov	r2, r3
 8008e74:	d330      	bcc.n	8008ed8 <quorem+0xfc>
 8008e76:	f8c8 4010 	str.w	r4, [r8, #16]
 8008e7a:	4640      	mov	r0, r8
 8008e7c:	f001 fb9c 	bl	800a5b8 <__mcmp>
 8008e80:	2800      	cmp	r0, #0
 8008e82:	db25      	blt.n	8008ed0 <quorem+0xf4>
 8008e84:	3501      	adds	r5, #1
 8008e86:	4630      	mov	r0, r6
 8008e88:	f04f 0c00 	mov.w	ip, #0
 8008e8c:	f857 2b04 	ldr.w	r2, [r7], #4
 8008e90:	f8d0 e000 	ldr.w	lr, [r0]
 8008e94:	b293      	uxth	r3, r2
 8008e96:	ebac 0303 	sub.w	r3, ip, r3
 8008e9a:	0c12      	lsrs	r2, r2, #16
 8008e9c:	fa13 f38e 	uxtah	r3, r3, lr
 8008ea0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ea4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008eae:	45b9      	cmp	r9, r7
 8008eb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008eb4:	f840 3b04 	str.w	r3, [r0], #4
 8008eb8:	d2e8      	bcs.n	8008e8c <quorem+0xb0>
 8008eba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008ebe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008ec2:	b92a      	cbnz	r2, 8008ed0 <quorem+0xf4>
 8008ec4:	3b04      	subs	r3, #4
 8008ec6:	429e      	cmp	r6, r3
 8008ec8:	461a      	mov	r2, r3
 8008eca:	d30b      	bcc.n	8008ee4 <quorem+0x108>
 8008ecc:	f8c8 4010 	str.w	r4, [r8, #16]
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	b003      	add	sp, #12
 8008ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed8:	6812      	ldr	r2, [r2, #0]
 8008eda:	3b04      	subs	r3, #4
 8008edc:	2a00      	cmp	r2, #0
 8008ede:	d1ca      	bne.n	8008e76 <quorem+0x9a>
 8008ee0:	3c01      	subs	r4, #1
 8008ee2:	e7c5      	b.n	8008e70 <quorem+0x94>
 8008ee4:	6812      	ldr	r2, [r2, #0]
 8008ee6:	3b04      	subs	r3, #4
 8008ee8:	2a00      	cmp	r2, #0
 8008eea:	d1ef      	bne.n	8008ecc <quorem+0xf0>
 8008eec:	3c01      	subs	r4, #1
 8008eee:	e7ea      	b.n	8008ec6 <quorem+0xea>
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	e7ee      	b.n	8008ed2 <quorem+0xf6>
 8008ef4:	0000      	movs	r0, r0
	...

08008ef8 <_dtoa_r>:
 8008ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	ec57 6b10 	vmov	r6, r7, d0
 8008f00:	b097      	sub	sp, #92	; 0x5c
 8008f02:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f04:	9106      	str	r1, [sp, #24]
 8008f06:	4604      	mov	r4, r0
 8008f08:	920b      	str	r2, [sp, #44]	; 0x2c
 8008f0a:	9312      	str	r3, [sp, #72]	; 0x48
 8008f0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f10:	e9cd 6700 	strd	r6, r7, [sp]
 8008f14:	b93d      	cbnz	r5, 8008f26 <_dtoa_r+0x2e>
 8008f16:	2010      	movs	r0, #16
 8008f18:	f001 f8e0 	bl	800a0dc <malloc>
 8008f1c:	6260      	str	r0, [r4, #36]	; 0x24
 8008f1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f22:	6005      	str	r5, [r0, #0]
 8008f24:	60c5      	str	r5, [r0, #12]
 8008f26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f28:	6819      	ldr	r1, [r3, #0]
 8008f2a:	b151      	cbz	r1, 8008f42 <_dtoa_r+0x4a>
 8008f2c:	685a      	ldr	r2, [r3, #4]
 8008f2e:	604a      	str	r2, [r1, #4]
 8008f30:	2301      	movs	r3, #1
 8008f32:	4093      	lsls	r3, r2
 8008f34:	608b      	str	r3, [r1, #8]
 8008f36:	4620      	mov	r0, r4
 8008f38:	f001 f91e 	bl	800a178 <_Bfree>
 8008f3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f3e:	2200      	movs	r2, #0
 8008f40:	601a      	str	r2, [r3, #0]
 8008f42:	1e3b      	subs	r3, r7, #0
 8008f44:	bfbb      	ittet	lt
 8008f46:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008f4a:	9301      	strlt	r3, [sp, #4]
 8008f4c:	2300      	movge	r3, #0
 8008f4e:	2201      	movlt	r2, #1
 8008f50:	bfac      	ite	ge
 8008f52:	f8c8 3000 	strge.w	r3, [r8]
 8008f56:	f8c8 2000 	strlt.w	r2, [r8]
 8008f5a:	4baf      	ldr	r3, [pc, #700]	; (8009218 <_dtoa_r+0x320>)
 8008f5c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008f60:	ea33 0308 	bics.w	r3, r3, r8
 8008f64:	d114      	bne.n	8008f90 <_dtoa_r+0x98>
 8008f66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f68:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f6c:	6013      	str	r3, [r2, #0]
 8008f6e:	9b00      	ldr	r3, [sp, #0]
 8008f70:	b923      	cbnz	r3, 8008f7c <_dtoa_r+0x84>
 8008f72:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008f76:	2800      	cmp	r0, #0
 8008f78:	f000 8542 	beq.w	8009a00 <_dtoa_r+0xb08>
 8008f7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f7e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800922c <_dtoa_r+0x334>
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 8544 	beq.w	8009a10 <_dtoa_r+0xb18>
 8008f88:	f10b 0303 	add.w	r3, fp, #3
 8008f8c:	f000 bd3e 	b.w	8009a0c <_dtoa_r+0xb14>
 8008f90:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008f94:	2200      	movs	r2, #0
 8008f96:	2300      	movs	r3, #0
 8008f98:	4630      	mov	r0, r6
 8008f9a:	4639      	mov	r1, r7
 8008f9c:	f7f7 fd9c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fa0:	4681      	mov	r9, r0
 8008fa2:	b168      	cbz	r0, 8008fc0 <_dtoa_r+0xc8>
 8008fa4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	6013      	str	r3, [r2, #0]
 8008faa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f000 8524 	beq.w	80099fa <_dtoa_r+0xb02>
 8008fb2:	4b9a      	ldr	r3, [pc, #616]	; (800921c <_dtoa_r+0x324>)
 8008fb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008fb6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	f000 bd28 	b.w	8009a10 <_dtoa_r+0xb18>
 8008fc0:	aa14      	add	r2, sp, #80	; 0x50
 8008fc2:	a915      	add	r1, sp, #84	; 0x54
 8008fc4:	ec47 6b10 	vmov	d0, r6, r7
 8008fc8:	4620      	mov	r0, r4
 8008fca:	f001 fbe3 	bl	800a794 <__d2b>
 8008fce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008fd2:	9004      	str	r0, [sp, #16]
 8008fd4:	2d00      	cmp	r5, #0
 8008fd6:	d07c      	beq.n	80090d2 <_dtoa_r+0x1da>
 8008fd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fdc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008fe0:	46b2      	mov	sl, r6
 8008fe2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008fe6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008fea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008fee:	2200      	movs	r2, #0
 8008ff0:	4b8b      	ldr	r3, [pc, #556]	; (8009220 <_dtoa_r+0x328>)
 8008ff2:	4650      	mov	r0, sl
 8008ff4:	4659      	mov	r1, fp
 8008ff6:	f7f7 f94f 	bl	8000298 <__aeabi_dsub>
 8008ffa:	a381      	add	r3, pc, #516	; (adr r3, 8009200 <_dtoa_r+0x308>)
 8008ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009000:	f7f7 fb02 	bl	8000608 <__aeabi_dmul>
 8009004:	a380      	add	r3, pc, #512	; (adr r3, 8009208 <_dtoa_r+0x310>)
 8009006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900a:	f7f7 f947 	bl	800029c <__adddf3>
 800900e:	4606      	mov	r6, r0
 8009010:	4628      	mov	r0, r5
 8009012:	460f      	mov	r7, r1
 8009014:	f7f7 fa8e 	bl	8000534 <__aeabi_i2d>
 8009018:	a37d      	add	r3, pc, #500	; (adr r3, 8009210 <_dtoa_r+0x318>)
 800901a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901e:	f7f7 faf3 	bl	8000608 <__aeabi_dmul>
 8009022:	4602      	mov	r2, r0
 8009024:	460b      	mov	r3, r1
 8009026:	4630      	mov	r0, r6
 8009028:	4639      	mov	r1, r7
 800902a:	f7f7 f937 	bl	800029c <__adddf3>
 800902e:	4606      	mov	r6, r0
 8009030:	460f      	mov	r7, r1
 8009032:	f7f7 fd99 	bl	8000b68 <__aeabi_d2iz>
 8009036:	2200      	movs	r2, #0
 8009038:	4682      	mov	sl, r0
 800903a:	2300      	movs	r3, #0
 800903c:	4630      	mov	r0, r6
 800903e:	4639      	mov	r1, r7
 8009040:	f7f7 fd54 	bl	8000aec <__aeabi_dcmplt>
 8009044:	b148      	cbz	r0, 800905a <_dtoa_r+0x162>
 8009046:	4650      	mov	r0, sl
 8009048:	f7f7 fa74 	bl	8000534 <__aeabi_i2d>
 800904c:	4632      	mov	r2, r6
 800904e:	463b      	mov	r3, r7
 8009050:	f7f7 fd42 	bl	8000ad8 <__aeabi_dcmpeq>
 8009054:	b908      	cbnz	r0, 800905a <_dtoa_r+0x162>
 8009056:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800905a:	f1ba 0f16 	cmp.w	sl, #22
 800905e:	d859      	bhi.n	8009114 <_dtoa_r+0x21c>
 8009060:	4970      	ldr	r1, [pc, #448]	; (8009224 <_dtoa_r+0x32c>)
 8009062:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009066:	e9dd 2300 	ldrd	r2, r3, [sp]
 800906a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800906e:	f7f7 fd5b 	bl	8000b28 <__aeabi_dcmpgt>
 8009072:	2800      	cmp	r0, #0
 8009074:	d050      	beq.n	8009118 <_dtoa_r+0x220>
 8009076:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800907a:	2300      	movs	r3, #0
 800907c:	930f      	str	r3, [sp, #60]	; 0x3c
 800907e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009080:	1b5d      	subs	r5, r3, r5
 8009082:	f1b5 0801 	subs.w	r8, r5, #1
 8009086:	bf49      	itett	mi
 8009088:	f1c5 0301 	rsbmi	r3, r5, #1
 800908c:	2300      	movpl	r3, #0
 800908e:	9305      	strmi	r3, [sp, #20]
 8009090:	f04f 0800 	movmi.w	r8, #0
 8009094:	bf58      	it	pl
 8009096:	9305      	strpl	r3, [sp, #20]
 8009098:	f1ba 0f00 	cmp.w	sl, #0
 800909c:	db3e      	blt.n	800911c <_dtoa_r+0x224>
 800909e:	2300      	movs	r3, #0
 80090a0:	44d0      	add	r8, sl
 80090a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80090a6:	9307      	str	r3, [sp, #28]
 80090a8:	9b06      	ldr	r3, [sp, #24]
 80090aa:	2b09      	cmp	r3, #9
 80090ac:	f200 8090 	bhi.w	80091d0 <_dtoa_r+0x2d8>
 80090b0:	2b05      	cmp	r3, #5
 80090b2:	bfc4      	itt	gt
 80090b4:	3b04      	subgt	r3, #4
 80090b6:	9306      	strgt	r3, [sp, #24]
 80090b8:	9b06      	ldr	r3, [sp, #24]
 80090ba:	f1a3 0302 	sub.w	r3, r3, #2
 80090be:	bfcc      	ite	gt
 80090c0:	2500      	movgt	r5, #0
 80090c2:	2501      	movle	r5, #1
 80090c4:	2b03      	cmp	r3, #3
 80090c6:	f200 808f 	bhi.w	80091e8 <_dtoa_r+0x2f0>
 80090ca:	e8df f003 	tbb	[pc, r3]
 80090ce:	7f7d      	.short	0x7f7d
 80090d0:	7131      	.short	0x7131
 80090d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80090d6:	441d      	add	r5, r3
 80090d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80090dc:	2820      	cmp	r0, #32
 80090de:	dd13      	ble.n	8009108 <_dtoa_r+0x210>
 80090e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80090e4:	9b00      	ldr	r3, [sp, #0]
 80090e6:	fa08 f800 	lsl.w	r8, r8, r0
 80090ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80090ee:	fa23 f000 	lsr.w	r0, r3, r0
 80090f2:	ea48 0000 	orr.w	r0, r8, r0
 80090f6:	f7f7 fa0d 	bl	8000514 <__aeabi_ui2d>
 80090fa:	2301      	movs	r3, #1
 80090fc:	4682      	mov	sl, r0
 80090fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009102:	3d01      	subs	r5, #1
 8009104:	9313      	str	r3, [sp, #76]	; 0x4c
 8009106:	e772      	b.n	8008fee <_dtoa_r+0xf6>
 8009108:	9b00      	ldr	r3, [sp, #0]
 800910a:	f1c0 0020 	rsb	r0, r0, #32
 800910e:	fa03 f000 	lsl.w	r0, r3, r0
 8009112:	e7f0      	b.n	80090f6 <_dtoa_r+0x1fe>
 8009114:	2301      	movs	r3, #1
 8009116:	e7b1      	b.n	800907c <_dtoa_r+0x184>
 8009118:	900f      	str	r0, [sp, #60]	; 0x3c
 800911a:	e7b0      	b.n	800907e <_dtoa_r+0x186>
 800911c:	9b05      	ldr	r3, [sp, #20]
 800911e:	eba3 030a 	sub.w	r3, r3, sl
 8009122:	9305      	str	r3, [sp, #20]
 8009124:	f1ca 0300 	rsb	r3, sl, #0
 8009128:	9307      	str	r3, [sp, #28]
 800912a:	2300      	movs	r3, #0
 800912c:	930e      	str	r3, [sp, #56]	; 0x38
 800912e:	e7bb      	b.n	80090a8 <_dtoa_r+0x1b0>
 8009130:	2301      	movs	r3, #1
 8009132:	930a      	str	r3, [sp, #40]	; 0x28
 8009134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009136:	2b00      	cmp	r3, #0
 8009138:	dd59      	ble.n	80091ee <_dtoa_r+0x2f6>
 800913a:	9302      	str	r3, [sp, #8]
 800913c:	4699      	mov	r9, r3
 800913e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009140:	2200      	movs	r2, #0
 8009142:	6072      	str	r2, [r6, #4]
 8009144:	2204      	movs	r2, #4
 8009146:	f102 0014 	add.w	r0, r2, #20
 800914a:	4298      	cmp	r0, r3
 800914c:	6871      	ldr	r1, [r6, #4]
 800914e:	d953      	bls.n	80091f8 <_dtoa_r+0x300>
 8009150:	4620      	mov	r0, r4
 8009152:	f000 ffdd 	bl	800a110 <_Balloc>
 8009156:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009158:	6030      	str	r0, [r6, #0]
 800915a:	f1b9 0f0e 	cmp.w	r9, #14
 800915e:	f8d3 b000 	ldr.w	fp, [r3]
 8009162:	f200 80e6 	bhi.w	8009332 <_dtoa_r+0x43a>
 8009166:	2d00      	cmp	r5, #0
 8009168:	f000 80e3 	beq.w	8009332 <_dtoa_r+0x43a>
 800916c:	ed9d 7b00 	vldr	d7, [sp]
 8009170:	f1ba 0f00 	cmp.w	sl, #0
 8009174:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009178:	dd74      	ble.n	8009264 <_dtoa_r+0x36c>
 800917a:	4a2a      	ldr	r2, [pc, #168]	; (8009224 <_dtoa_r+0x32c>)
 800917c:	f00a 030f 	and.w	r3, sl, #15
 8009180:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009184:	ed93 7b00 	vldr	d7, [r3]
 8009188:	ea4f 162a 	mov.w	r6, sl, asr #4
 800918c:	06f0      	lsls	r0, r6, #27
 800918e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009192:	d565      	bpl.n	8009260 <_dtoa_r+0x368>
 8009194:	4b24      	ldr	r3, [pc, #144]	; (8009228 <_dtoa_r+0x330>)
 8009196:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800919a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800919e:	f7f7 fb5d 	bl	800085c <__aeabi_ddiv>
 80091a2:	e9cd 0100 	strd	r0, r1, [sp]
 80091a6:	f006 060f 	and.w	r6, r6, #15
 80091aa:	2503      	movs	r5, #3
 80091ac:	4f1e      	ldr	r7, [pc, #120]	; (8009228 <_dtoa_r+0x330>)
 80091ae:	e04c      	b.n	800924a <_dtoa_r+0x352>
 80091b0:	2301      	movs	r3, #1
 80091b2:	930a      	str	r3, [sp, #40]	; 0x28
 80091b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091b6:	4453      	add	r3, sl
 80091b8:	f103 0901 	add.w	r9, r3, #1
 80091bc:	9302      	str	r3, [sp, #8]
 80091be:	464b      	mov	r3, r9
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	bfb8      	it	lt
 80091c4:	2301      	movlt	r3, #1
 80091c6:	e7ba      	b.n	800913e <_dtoa_r+0x246>
 80091c8:	2300      	movs	r3, #0
 80091ca:	e7b2      	b.n	8009132 <_dtoa_r+0x23a>
 80091cc:	2300      	movs	r3, #0
 80091ce:	e7f0      	b.n	80091b2 <_dtoa_r+0x2ba>
 80091d0:	2501      	movs	r5, #1
 80091d2:	2300      	movs	r3, #0
 80091d4:	9306      	str	r3, [sp, #24]
 80091d6:	950a      	str	r5, [sp, #40]	; 0x28
 80091d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091dc:	9302      	str	r3, [sp, #8]
 80091de:	4699      	mov	r9, r3
 80091e0:	2200      	movs	r2, #0
 80091e2:	2312      	movs	r3, #18
 80091e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80091e6:	e7aa      	b.n	800913e <_dtoa_r+0x246>
 80091e8:	2301      	movs	r3, #1
 80091ea:	930a      	str	r3, [sp, #40]	; 0x28
 80091ec:	e7f4      	b.n	80091d8 <_dtoa_r+0x2e0>
 80091ee:	2301      	movs	r3, #1
 80091f0:	9302      	str	r3, [sp, #8]
 80091f2:	4699      	mov	r9, r3
 80091f4:	461a      	mov	r2, r3
 80091f6:	e7f5      	b.n	80091e4 <_dtoa_r+0x2ec>
 80091f8:	3101      	adds	r1, #1
 80091fa:	6071      	str	r1, [r6, #4]
 80091fc:	0052      	lsls	r2, r2, #1
 80091fe:	e7a2      	b.n	8009146 <_dtoa_r+0x24e>
 8009200:	636f4361 	.word	0x636f4361
 8009204:	3fd287a7 	.word	0x3fd287a7
 8009208:	8b60c8b3 	.word	0x8b60c8b3
 800920c:	3fc68a28 	.word	0x3fc68a28
 8009210:	509f79fb 	.word	0x509f79fb
 8009214:	3fd34413 	.word	0x3fd34413
 8009218:	7ff00000 	.word	0x7ff00000
 800921c:	0800afa5 	.word	0x0800afa5
 8009220:	3ff80000 	.word	0x3ff80000
 8009224:	0800b060 	.word	0x0800b060
 8009228:	0800b038 	.word	0x0800b038
 800922c:	0800b029 	.word	0x0800b029
 8009230:	07f1      	lsls	r1, r6, #31
 8009232:	d508      	bpl.n	8009246 <_dtoa_r+0x34e>
 8009234:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800923c:	f7f7 f9e4 	bl	8000608 <__aeabi_dmul>
 8009240:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009244:	3501      	adds	r5, #1
 8009246:	1076      	asrs	r6, r6, #1
 8009248:	3708      	adds	r7, #8
 800924a:	2e00      	cmp	r6, #0
 800924c:	d1f0      	bne.n	8009230 <_dtoa_r+0x338>
 800924e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009252:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009256:	f7f7 fb01 	bl	800085c <__aeabi_ddiv>
 800925a:	e9cd 0100 	strd	r0, r1, [sp]
 800925e:	e01a      	b.n	8009296 <_dtoa_r+0x39e>
 8009260:	2502      	movs	r5, #2
 8009262:	e7a3      	b.n	80091ac <_dtoa_r+0x2b4>
 8009264:	f000 80a0 	beq.w	80093a8 <_dtoa_r+0x4b0>
 8009268:	f1ca 0600 	rsb	r6, sl, #0
 800926c:	4b9f      	ldr	r3, [pc, #636]	; (80094ec <_dtoa_r+0x5f4>)
 800926e:	4fa0      	ldr	r7, [pc, #640]	; (80094f0 <_dtoa_r+0x5f8>)
 8009270:	f006 020f 	and.w	r2, r6, #15
 8009274:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009280:	f7f7 f9c2 	bl	8000608 <__aeabi_dmul>
 8009284:	e9cd 0100 	strd	r0, r1, [sp]
 8009288:	1136      	asrs	r6, r6, #4
 800928a:	2300      	movs	r3, #0
 800928c:	2502      	movs	r5, #2
 800928e:	2e00      	cmp	r6, #0
 8009290:	d17f      	bne.n	8009392 <_dtoa_r+0x49a>
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1e1      	bne.n	800925a <_dtoa_r+0x362>
 8009296:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009298:	2b00      	cmp	r3, #0
 800929a:	f000 8087 	beq.w	80093ac <_dtoa_r+0x4b4>
 800929e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80092a2:	2200      	movs	r2, #0
 80092a4:	4b93      	ldr	r3, [pc, #588]	; (80094f4 <_dtoa_r+0x5fc>)
 80092a6:	4630      	mov	r0, r6
 80092a8:	4639      	mov	r1, r7
 80092aa:	f7f7 fc1f 	bl	8000aec <__aeabi_dcmplt>
 80092ae:	2800      	cmp	r0, #0
 80092b0:	d07c      	beq.n	80093ac <_dtoa_r+0x4b4>
 80092b2:	f1b9 0f00 	cmp.w	r9, #0
 80092b6:	d079      	beq.n	80093ac <_dtoa_r+0x4b4>
 80092b8:	9b02      	ldr	r3, [sp, #8]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	dd35      	ble.n	800932a <_dtoa_r+0x432>
 80092be:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80092c2:	9308      	str	r3, [sp, #32]
 80092c4:	4639      	mov	r1, r7
 80092c6:	2200      	movs	r2, #0
 80092c8:	4b8b      	ldr	r3, [pc, #556]	; (80094f8 <_dtoa_r+0x600>)
 80092ca:	4630      	mov	r0, r6
 80092cc:	f7f7 f99c 	bl	8000608 <__aeabi_dmul>
 80092d0:	e9cd 0100 	strd	r0, r1, [sp]
 80092d4:	9f02      	ldr	r7, [sp, #8]
 80092d6:	3501      	adds	r5, #1
 80092d8:	4628      	mov	r0, r5
 80092da:	f7f7 f92b 	bl	8000534 <__aeabi_i2d>
 80092de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092e2:	f7f7 f991 	bl	8000608 <__aeabi_dmul>
 80092e6:	2200      	movs	r2, #0
 80092e8:	4b84      	ldr	r3, [pc, #528]	; (80094fc <_dtoa_r+0x604>)
 80092ea:	f7f6 ffd7 	bl	800029c <__adddf3>
 80092ee:	4605      	mov	r5, r0
 80092f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80092f4:	2f00      	cmp	r7, #0
 80092f6:	d15d      	bne.n	80093b4 <_dtoa_r+0x4bc>
 80092f8:	2200      	movs	r2, #0
 80092fa:	4b81      	ldr	r3, [pc, #516]	; (8009500 <_dtoa_r+0x608>)
 80092fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009300:	f7f6 ffca 	bl	8000298 <__aeabi_dsub>
 8009304:	462a      	mov	r2, r5
 8009306:	4633      	mov	r3, r6
 8009308:	e9cd 0100 	strd	r0, r1, [sp]
 800930c:	f7f7 fc0c 	bl	8000b28 <__aeabi_dcmpgt>
 8009310:	2800      	cmp	r0, #0
 8009312:	f040 8288 	bne.w	8009826 <_dtoa_r+0x92e>
 8009316:	462a      	mov	r2, r5
 8009318:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800931c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009320:	f7f7 fbe4 	bl	8000aec <__aeabi_dcmplt>
 8009324:	2800      	cmp	r0, #0
 8009326:	f040 827c 	bne.w	8009822 <_dtoa_r+0x92a>
 800932a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800932e:	e9cd 2300 	strd	r2, r3, [sp]
 8009332:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009334:	2b00      	cmp	r3, #0
 8009336:	f2c0 8150 	blt.w	80095da <_dtoa_r+0x6e2>
 800933a:	f1ba 0f0e 	cmp.w	sl, #14
 800933e:	f300 814c 	bgt.w	80095da <_dtoa_r+0x6e2>
 8009342:	4b6a      	ldr	r3, [pc, #424]	; (80094ec <_dtoa_r+0x5f4>)
 8009344:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009348:	ed93 7b00 	vldr	d7, [r3]
 800934c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800934e:	2b00      	cmp	r3, #0
 8009350:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009354:	f280 80d8 	bge.w	8009508 <_dtoa_r+0x610>
 8009358:	f1b9 0f00 	cmp.w	r9, #0
 800935c:	f300 80d4 	bgt.w	8009508 <_dtoa_r+0x610>
 8009360:	f040 825e 	bne.w	8009820 <_dtoa_r+0x928>
 8009364:	2200      	movs	r2, #0
 8009366:	4b66      	ldr	r3, [pc, #408]	; (8009500 <_dtoa_r+0x608>)
 8009368:	ec51 0b17 	vmov	r0, r1, d7
 800936c:	f7f7 f94c 	bl	8000608 <__aeabi_dmul>
 8009370:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009374:	f7f7 fbce 	bl	8000b14 <__aeabi_dcmpge>
 8009378:	464f      	mov	r7, r9
 800937a:	464e      	mov	r6, r9
 800937c:	2800      	cmp	r0, #0
 800937e:	f040 8234 	bne.w	80097ea <_dtoa_r+0x8f2>
 8009382:	2331      	movs	r3, #49	; 0x31
 8009384:	f10b 0501 	add.w	r5, fp, #1
 8009388:	f88b 3000 	strb.w	r3, [fp]
 800938c:	f10a 0a01 	add.w	sl, sl, #1
 8009390:	e22f      	b.n	80097f2 <_dtoa_r+0x8fa>
 8009392:	07f2      	lsls	r2, r6, #31
 8009394:	d505      	bpl.n	80093a2 <_dtoa_r+0x4aa>
 8009396:	e9d7 2300 	ldrd	r2, r3, [r7]
 800939a:	f7f7 f935 	bl	8000608 <__aeabi_dmul>
 800939e:	3501      	adds	r5, #1
 80093a0:	2301      	movs	r3, #1
 80093a2:	1076      	asrs	r6, r6, #1
 80093a4:	3708      	adds	r7, #8
 80093a6:	e772      	b.n	800928e <_dtoa_r+0x396>
 80093a8:	2502      	movs	r5, #2
 80093aa:	e774      	b.n	8009296 <_dtoa_r+0x39e>
 80093ac:	f8cd a020 	str.w	sl, [sp, #32]
 80093b0:	464f      	mov	r7, r9
 80093b2:	e791      	b.n	80092d8 <_dtoa_r+0x3e0>
 80093b4:	4b4d      	ldr	r3, [pc, #308]	; (80094ec <_dtoa_r+0x5f4>)
 80093b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80093ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80093be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d047      	beq.n	8009454 <_dtoa_r+0x55c>
 80093c4:	4602      	mov	r2, r0
 80093c6:	460b      	mov	r3, r1
 80093c8:	2000      	movs	r0, #0
 80093ca:	494e      	ldr	r1, [pc, #312]	; (8009504 <_dtoa_r+0x60c>)
 80093cc:	f7f7 fa46 	bl	800085c <__aeabi_ddiv>
 80093d0:	462a      	mov	r2, r5
 80093d2:	4633      	mov	r3, r6
 80093d4:	f7f6 ff60 	bl	8000298 <__aeabi_dsub>
 80093d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80093dc:	465d      	mov	r5, fp
 80093de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093e2:	f7f7 fbc1 	bl	8000b68 <__aeabi_d2iz>
 80093e6:	4606      	mov	r6, r0
 80093e8:	f7f7 f8a4 	bl	8000534 <__aeabi_i2d>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093f4:	f7f6 ff50 	bl	8000298 <__aeabi_dsub>
 80093f8:	3630      	adds	r6, #48	; 0x30
 80093fa:	f805 6b01 	strb.w	r6, [r5], #1
 80093fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009402:	e9cd 0100 	strd	r0, r1, [sp]
 8009406:	f7f7 fb71 	bl	8000aec <__aeabi_dcmplt>
 800940a:	2800      	cmp	r0, #0
 800940c:	d163      	bne.n	80094d6 <_dtoa_r+0x5de>
 800940e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009412:	2000      	movs	r0, #0
 8009414:	4937      	ldr	r1, [pc, #220]	; (80094f4 <_dtoa_r+0x5fc>)
 8009416:	f7f6 ff3f 	bl	8000298 <__aeabi_dsub>
 800941a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800941e:	f7f7 fb65 	bl	8000aec <__aeabi_dcmplt>
 8009422:	2800      	cmp	r0, #0
 8009424:	f040 80b7 	bne.w	8009596 <_dtoa_r+0x69e>
 8009428:	eba5 030b 	sub.w	r3, r5, fp
 800942c:	429f      	cmp	r7, r3
 800942e:	f77f af7c 	ble.w	800932a <_dtoa_r+0x432>
 8009432:	2200      	movs	r2, #0
 8009434:	4b30      	ldr	r3, [pc, #192]	; (80094f8 <_dtoa_r+0x600>)
 8009436:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800943a:	f7f7 f8e5 	bl	8000608 <__aeabi_dmul>
 800943e:	2200      	movs	r2, #0
 8009440:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009444:	4b2c      	ldr	r3, [pc, #176]	; (80094f8 <_dtoa_r+0x600>)
 8009446:	e9dd 0100 	ldrd	r0, r1, [sp]
 800944a:	f7f7 f8dd 	bl	8000608 <__aeabi_dmul>
 800944e:	e9cd 0100 	strd	r0, r1, [sp]
 8009452:	e7c4      	b.n	80093de <_dtoa_r+0x4e6>
 8009454:	462a      	mov	r2, r5
 8009456:	4633      	mov	r3, r6
 8009458:	f7f7 f8d6 	bl	8000608 <__aeabi_dmul>
 800945c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009460:	eb0b 0507 	add.w	r5, fp, r7
 8009464:	465e      	mov	r6, fp
 8009466:	e9dd 0100 	ldrd	r0, r1, [sp]
 800946a:	f7f7 fb7d 	bl	8000b68 <__aeabi_d2iz>
 800946e:	4607      	mov	r7, r0
 8009470:	f7f7 f860 	bl	8000534 <__aeabi_i2d>
 8009474:	3730      	adds	r7, #48	; 0x30
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800947e:	f7f6 ff0b 	bl	8000298 <__aeabi_dsub>
 8009482:	f806 7b01 	strb.w	r7, [r6], #1
 8009486:	42ae      	cmp	r6, r5
 8009488:	e9cd 0100 	strd	r0, r1, [sp]
 800948c:	f04f 0200 	mov.w	r2, #0
 8009490:	d126      	bne.n	80094e0 <_dtoa_r+0x5e8>
 8009492:	4b1c      	ldr	r3, [pc, #112]	; (8009504 <_dtoa_r+0x60c>)
 8009494:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009498:	f7f6 ff00 	bl	800029c <__adddf3>
 800949c:	4602      	mov	r2, r0
 800949e:	460b      	mov	r3, r1
 80094a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094a4:	f7f7 fb40 	bl	8000b28 <__aeabi_dcmpgt>
 80094a8:	2800      	cmp	r0, #0
 80094aa:	d174      	bne.n	8009596 <_dtoa_r+0x69e>
 80094ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80094b0:	2000      	movs	r0, #0
 80094b2:	4914      	ldr	r1, [pc, #80]	; (8009504 <_dtoa_r+0x60c>)
 80094b4:	f7f6 fef0 	bl	8000298 <__aeabi_dsub>
 80094b8:	4602      	mov	r2, r0
 80094ba:	460b      	mov	r3, r1
 80094bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094c0:	f7f7 fb14 	bl	8000aec <__aeabi_dcmplt>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	f43f af30 	beq.w	800932a <_dtoa_r+0x432>
 80094ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094ce:	2b30      	cmp	r3, #48	; 0x30
 80094d0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80094d4:	d002      	beq.n	80094dc <_dtoa_r+0x5e4>
 80094d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80094da:	e04a      	b.n	8009572 <_dtoa_r+0x67a>
 80094dc:	4615      	mov	r5, r2
 80094de:	e7f4      	b.n	80094ca <_dtoa_r+0x5d2>
 80094e0:	4b05      	ldr	r3, [pc, #20]	; (80094f8 <_dtoa_r+0x600>)
 80094e2:	f7f7 f891 	bl	8000608 <__aeabi_dmul>
 80094e6:	e9cd 0100 	strd	r0, r1, [sp]
 80094ea:	e7bc      	b.n	8009466 <_dtoa_r+0x56e>
 80094ec:	0800b060 	.word	0x0800b060
 80094f0:	0800b038 	.word	0x0800b038
 80094f4:	3ff00000 	.word	0x3ff00000
 80094f8:	40240000 	.word	0x40240000
 80094fc:	401c0000 	.word	0x401c0000
 8009500:	40140000 	.word	0x40140000
 8009504:	3fe00000 	.word	0x3fe00000
 8009508:	e9dd 6700 	ldrd	r6, r7, [sp]
 800950c:	465d      	mov	r5, fp
 800950e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009512:	4630      	mov	r0, r6
 8009514:	4639      	mov	r1, r7
 8009516:	f7f7 f9a1 	bl	800085c <__aeabi_ddiv>
 800951a:	f7f7 fb25 	bl	8000b68 <__aeabi_d2iz>
 800951e:	4680      	mov	r8, r0
 8009520:	f7f7 f808 	bl	8000534 <__aeabi_i2d>
 8009524:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009528:	f7f7 f86e 	bl	8000608 <__aeabi_dmul>
 800952c:	4602      	mov	r2, r0
 800952e:	460b      	mov	r3, r1
 8009530:	4630      	mov	r0, r6
 8009532:	4639      	mov	r1, r7
 8009534:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009538:	f7f6 feae 	bl	8000298 <__aeabi_dsub>
 800953c:	f805 6b01 	strb.w	r6, [r5], #1
 8009540:	eba5 060b 	sub.w	r6, r5, fp
 8009544:	45b1      	cmp	r9, r6
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	d139      	bne.n	80095c0 <_dtoa_r+0x6c8>
 800954c:	f7f6 fea6 	bl	800029c <__adddf3>
 8009550:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009554:	4606      	mov	r6, r0
 8009556:	460f      	mov	r7, r1
 8009558:	f7f7 fae6 	bl	8000b28 <__aeabi_dcmpgt>
 800955c:	b9c8      	cbnz	r0, 8009592 <_dtoa_r+0x69a>
 800955e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009562:	4630      	mov	r0, r6
 8009564:	4639      	mov	r1, r7
 8009566:	f7f7 fab7 	bl	8000ad8 <__aeabi_dcmpeq>
 800956a:	b110      	cbz	r0, 8009572 <_dtoa_r+0x67a>
 800956c:	f018 0f01 	tst.w	r8, #1
 8009570:	d10f      	bne.n	8009592 <_dtoa_r+0x69a>
 8009572:	9904      	ldr	r1, [sp, #16]
 8009574:	4620      	mov	r0, r4
 8009576:	f000 fdff 	bl	800a178 <_Bfree>
 800957a:	2300      	movs	r3, #0
 800957c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800957e:	702b      	strb	r3, [r5, #0]
 8009580:	f10a 0301 	add.w	r3, sl, #1
 8009584:	6013      	str	r3, [r2, #0]
 8009586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009588:	2b00      	cmp	r3, #0
 800958a:	f000 8241 	beq.w	8009a10 <_dtoa_r+0xb18>
 800958e:	601d      	str	r5, [r3, #0]
 8009590:	e23e      	b.n	8009a10 <_dtoa_r+0xb18>
 8009592:	f8cd a020 	str.w	sl, [sp, #32]
 8009596:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800959a:	2a39      	cmp	r2, #57	; 0x39
 800959c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80095a0:	d108      	bne.n	80095b4 <_dtoa_r+0x6bc>
 80095a2:	459b      	cmp	fp, r3
 80095a4:	d10a      	bne.n	80095bc <_dtoa_r+0x6c4>
 80095a6:	9b08      	ldr	r3, [sp, #32]
 80095a8:	3301      	adds	r3, #1
 80095aa:	9308      	str	r3, [sp, #32]
 80095ac:	2330      	movs	r3, #48	; 0x30
 80095ae:	f88b 3000 	strb.w	r3, [fp]
 80095b2:	465b      	mov	r3, fp
 80095b4:	781a      	ldrb	r2, [r3, #0]
 80095b6:	3201      	adds	r2, #1
 80095b8:	701a      	strb	r2, [r3, #0]
 80095ba:	e78c      	b.n	80094d6 <_dtoa_r+0x5de>
 80095bc:	461d      	mov	r5, r3
 80095be:	e7ea      	b.n	8009596 <_dtoa_r+0x69e>
 80095c0:	2200      	movs	r2, #0
 80095c2:	4b9b      	ldr	r3, [pc, #620]	; (8009830 <_dtoa_r+0x938>)
 80095c4:	f7f7 f820 	bl	8000608 <__aeabi_dmul>
 80095c8:	2200      	movs	r2, #0
 80095ca:	2300      	movs	r3, #0
 80095cc:	4606      	mov	r6, r0
 80095ce:	460f      	mov	r7, r1
 80095d0:	f7f7 fa82 	bl	8000ad8 <__aeabi_dcmpeq>
 80095d4:	2800      	cmp	r0, #0
 80095d6:	d09a      	beq.n	800950e <_dtoa_r+0x616>
 80095d8:	e7cb      	b.n	8009572 <_dtoa_r+0x67a>
 80095da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095dc:	2a00      	cmp	r2, #0
 80095de:	f000 808b 	beq.w	80096f8 <_dtoa_r+0x800>
 80095e2:	9a06      	ldr	r2, [sp, #24]
 80095e4:	2a01      	cmp	r2, #1
 80095e6:	dc6e      	bgt.n	80096c6 <_dtoa_r+0x7ce>
 80095e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80095ea:	2a00      	cmp	r2, #0
 80095ec:	d067      	beq.n	80096be <_dtoa_r+0x7c6>
 80095ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80095f2:	9f07      	ldr	r7, [sp, #28]
 80095f4:	9d05      	ldr	r5, [sp, #20]
 80095f6:	9a05      	ldr	r2, [sp, #20]
 80095f8:	2101      	movs	r1, #1
 80095fa:	441a      	add	r2, r3
 80095fc:	4620      	mov	r0, r4
 80095fe:	9205      	str	r2, [sp, #20]
 8009600:	4498      	add	r8, r3
 8009602:	f000 fe97 	bl	800a334 <__i2b>
 8009606:	4606      	mov	r6, r0
 8009608:	2d00      	cmp	r5, #0
 800960a:	dd0c      	ble.n	8009626 <_dtoa_r+0x72e>
 800960c:	f1b8 0f00 	cmp.w	r8, #0
 8009610:	dd09      	ble.n	8009626 <_dtoa_r+0x72e>
 8009612:	4545      	cmp	r5, r8
 8009614:	9a05      	ldr	r2, [sp, #20]
 8009616:	462b      	mov	r3, r5
 8009618:	bfa8      	it	ge
 800961a:	4643      	movge	r3, r8
 800961c:	1ad2      	subs	r2, r2, r3
 800961e:	9205      	str	r2, [sp, #20]
 8009620:	1aed      	subs	r5, r5, r3
 8009622:	eba8 0803 	sub.w	r8, r8, r3
 8009626:	9b07      	ldr	r3, [sp, #28]
 8009628:	b1eb      	cbz	r3, 8009666 <_dtoa_r+0x76e>
 800962a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800962c:	2b00      	cmp	r3, #0
 800962e:	d067      	beq.n	8009700 <_dtoa_r+0x808>
 8009630:	b18f      	cbz	r7, 8009656 <_dtoa_r+0x75e>
 8009632:	4631      	mov	r1, r6
 8009634:	463a      	mov	r2, r7
 8009636:	4620      	mov	r0, r4
 8009638:	f000 ff1c 	bl	800a474 <__pow5mult>
 800963c:	9a04      	ldr	r2, [sp, #16]
 800963e:	4601      	mov	r1, r0
 8009640:	4606      	mov	r6, r0
 8009642:	4620      	mov	r0, r4
 8009644:	f000 fe7f 	bl	800a346 <__multiply>
 8009648:	9904      	ldr	r1, [sp, #16]
 800964a:	9008      	str	r0, [sp, #32]
 800964c:	4620      	mov	r0, r4
 800964e:	f000 fd93 	bl	800a178 <_Bfree>
 8009652:	9b08      	ldr	r3, [sp, #32]
 8009654:	9304      	str	r3, [sp, #16]
 8009656:	9b07      	ldr	r3, [sp, #28]
 8009658:	1bda      	subs	r2, r3, r7
 800965a:	d004      	beq.n	8009666 <_dtoa_r+0x76e>
 800965c:	9904      	ldr	r1, [sp, #16]
 800965e:	4620      	mov	r0, r4
 8009660:	f000 ff08 	bl	800a474 <__pow5mult>
 8009664:	9004      	str	r0, [sp, #16]
 8009666:	2101      	movs	r1, #1
 8009668:	4620      	mov	r0, r4
 800966a:	f000 fe63 	bl	800a334 <__i2b>
 800966e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009670:	4607      	mov	r7, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	f000 81d0 	beq.w	8009a18 <_dtoa_r+0xb20>
 8009678:	461a      	mov	r2, r3
 800967a:	4601      	mov	r1, r0
 800967c:	4620      	mov	r0, r4
 800967e:	f000 fef9 	bl	800a474 <__pow5mult>
 8009682:	9b06      	ldr	r3, [sp, #24]
 8009684:	2b01      	cmp	r3, #1
 8009686:	4607      	mov	r7, r0
 8009688:	dc40      	bgt.n	800970c <_dtoa_r+0x814>
 800968a:	9b00      	ldr	r3, [sp, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d139      	bne.n	8009704 <_dtoa_r+0x80c>
 8009690:	9b01      	ldr	r3, [sp, #4]
 8009692:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009696:	2b00      	cmp	r3, #0
 8009698:	d136      	bne.n	8009708 <_dtoa_r+0x810>
 800969a:	9b01      	ldr	r3, [sp, #4]
 800969c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096a0:	0d1b      	lsrs	r3, r3, #20
 80096a2:	051b      	lsls	r3, r3, #20
 80096a4:	b12b      	cbz	r3, 80096b2 <_dtoa_r+0x7ba>
 80096a6:	9b05      	ldr	r3, [sp, #20]
 80096a8:	3301      	adds	r3, #1
 80096aa:	9305      	str	r3, [sp, #20]
 80096ac:	f108 0801 	add.w	r8, r8, #1
 80096b0:	2301      	movs	r3, #1
 80096b2:	9307      	str	r3, [sp, #28]
 80096b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d12a      	bne.n	8009710 <_dtoa_r+0x818>
 80096ba:	2001      	movs	r0, #1
 80096bc:	e030      	b.n	8009720 <_dtoa_r+0x828>
 80096be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80096c4:	e795      	b.n	80095f2 <_dtoa_r+0x6fa>
 80096c6:	9b07      	ldr	r3, [sp, #28]
 80096c8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80096cc:	42bb      	cmp	r3, r7
 80096ce:	bfbf      	itttt	lt
 80096d0:	9b07      	ldrlt	r3, [sp, #28]
 80096d2:	9707      	strlt	r7, [sp, #28]
 80096d4:	1afa      	sublt	r2, r7, r3
 80096d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80096d8:	bfbb      	ittet	lt
 80096da:	189b      	addlt	r3, r3, r2
 80096dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80096de:	1bdf      	subge	r7, r3, r7
 80096e0:	2700      	movlt	r7, #0
 80096e2:	f1b9 0f00 	cmp.w	r9, #0
 80096e6:	bfb5      	itete	lt
 80096e8:	9b05      	ldrlt	r3, [sp, #20]
 80096ea:	9d05      	ldrge	r5, [sp, #20]
 80096ec:	eba3 0509 	sublt.w	r5, r3, r9
 80096f0:	464b      	movge	r3, r9
 80096f2:	bfb8      	it	lt
 80096f4:	2300      	movlt	r3, #0
 80096f6:	e77e      	b.n	80095f6 <_dtoa_r+0x6fe>
 80096f8:	9f07      	ldr	r7, [sp, #28]
 80096fa:	9d05      	ldr	r5, [sp, #20]
 80096fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80096fe:	e783      	b.n	8009608 <_dtoa_r+0x710>
 8009700:	9a07      	ldr	r2, [sp, #28]
 8009702:	e7ab      	b.n	800965c <_dtoa_r+0x764>
 8009704:	2300      	movs	r3, #0
 8009706:	e7d4      	b.n	80096b2 <_dtoa_r+0x7ba>
 8009708:	9b00      	ldr	r3, [sp, #0]
 800970a:	e7d2      	b.n	80096b2 <_dtoa_r+0x7ba>
 800970c:	2300      	movs	r3, #0
 800970e:	9307      	str	r3, [sp, #28]
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009716:	6918      	ldr	r0, [r3, #16]
 8009718:	f000 fdbe 	bl	800a298 <__hi0bits>
 800971c:	f1c0 0020 	rsb	r0, r0, #32
 8009720:	4440      	add	r0, r8
 8009722:	f010 001f 	ands.w	r0, r0, #31
 8009726:	d047      	beq.n	80097b8 <_dtoa_r+0x8c0>
 8009728:	f1c0 0320 	rsb	r3, r0, #32
 800972c:	2b04      	cmp	r3, #4
 800972e:	dd3b      	ble.n	80097a8 <_dtoa_r+0x8b0>
 8009730:	9b05      	ldr	r3, [sp, #20]
 8009732:	f1c0 001c 	rsb	r0, r0, #28
 8009736:	4403      	add	r3, r0
 8009738:	9305      	str	r3, [sp, #20]
 800973a:	4405      	add	r5, r0
 800973c:	4480      	add	r8, r0
 800973e:	9b05      	ldr	r3, [sp, #20]
 8009740:	2b00      	cmp	r3, #0
 8009742:	dd05      	ble.n	8009750 <_dtoa_r+0x858>
 8009744:	461a      	mov	r2, r3
 8009746:	9904      	ldr	r1, [sp, #16]
 8009748:	4620      	mov	r0, r4
 800974a:	f000 fee1 	bl	800a510 <__lshift>
 800974e:	9004      	str	r0, [sp, #16]
 8009750:	f1b8 0f00 	cmp.w	r8, #0
 8009754:	dd05      	ble.n	8009762 <_dtoa_r+0x86a>
 8009756:	4639      	mov	r1, r7
 8009758:	4642      	mov	r2, r8
 800975a:	4620      	mov	r0, r4
 800975c:	f000 fed8 	bl	800a510 <__lshift>
 8009760:	4607      	mov	r7, r0
 8009762:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009764:	b353      	cbz	r3, 80097bc <_dtoa_r+0x8c4>
 8009766:	4639      	mov	r1, r7
 8009768:	9804      	ldr	r0, [sp, #16]
 800976a:	f000 ff25 	bl	800a5b8 <__mcmp>
 800976e:	2800      	cmp	r0, #0
 8009770:	da24      	bge.n	80097bc <_dtoa_r+0x8c4>
 8009772:	2300      	movs	r3, #0
 8009774:	220a      	movs	r2, #10
 8009776:	9904      	ldr	r1, [sp, #16]
 8009778:	4620      	mov	r0, r4
 800977a:	f000 fd14 	bl	800a1a6 <__multadd>
 800977e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009780:	9004      	str	r0, [sp, #16]
 8009782:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 814d 	beq.w	8009a26 <_dtoa_r+0xb2e>
 800978c:	2300      	movs	r3, #0
 800978e:	4631      	mov	r1, r6
 8009790:	220a      	movs	r2, #10
 8009792:	4620      	mov	r0, r4
 8009794:	f000 fd07 	bl	800a1a6 <__multadd>
 8009798:	9b02      	ldr	r3, [sp, #8]
 800979a:	2b00      	cmp	r3, #0
 800979c:	4606      	mov	r6, r0
 800979e:	dc4f      	bgt.n	8009840 <_dtoa_r+0x948>
 80097a0:	9b06      	ldr	r3, [sp, #24]
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	dd4c      	ble.n	8009840 <_dtoa_r+0x948>
 80097a6:	e011      	b.n	80097cc <_dtoa_r+0x8d4>
 80097a8:	d0c9      	beq.n	800973e <_dtoa_r+0x846>
 80097aa:	9a05      	ldr	r2, [sp, #20]
 80097ac:	331c      	adds	r3, #28
 80097ae:	441a      	add	r2, r3
 80097b0:	9205      	str	r2, [sp, #20]
 80097b2:	441d      	add	r5, r3
 80097b4:	4498      	add	r8, r3
 80097b6:	e7c2      	b.n	800973e <_dtoa_r+0x846>
 80097b8:	4603      	mov	r3, r0
 80097ba:	e7f6      	b.n	80097aa <_dtoa_r+0x8b2>
 80097bc:	f1b9 0f00 	cmp.w	r9, #0
 80097c0:	dc38      	bgt.n	8009834 <_dtoa_r+0x93c>
 80097c2:	9b06      	ldr	r3, [sp, #24]
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	dd35      	ble.n	8009834 <_dtoa_r+0x93c>
 80097c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80097cc:	9b02      	ldr	r3, [sp, #8]
 80097ce:	b963      	cbnz	r3, 80097ea <_dtoa_r+0x8f2>
 80097d0:	4639      	mov	r1, r7
 80097d2:	2205      	movs	r2, #5
 80097d4:	4620      	mov	r0, r4
 80097d6:	f000 fce6 	bl	800a1a6 <__multadd>
 80097da:	4601      	mov	r1, r0
 80097dc:	4607      	mov	r7, r0
 80097de:	9804      	ldr	r0, [sp, #16]
 80097e0:	f000 feea 	bl	800a5b8 <__mcmp>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	f73f adcc 	bgt.w	8009382 <_dtoa_r+0x48a>
 80097ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097ec:	465d      	mov	r5, fp
 80097ee:	ea6f 0a03 	mvn.w	sl, r3
 80097f2:	f04f 0900 	mov.w	r9, #0
 80097f6:	4639      	mov	r1, r7
 80097f8:	4620      	mov	r0, r4
 80097fa:	f000 fcbd 	bl	800a178 <_Bfree>
 80097fe:	2e00      	cmp	r6, #0
 8009800:	f43f aeb7 	beq.w	8009572 <_dtoa_r+0x67a>
 8009804:	f1b9 0f00 	cmp.w	r9, #0
 8009808:	d005      	beq.n	8009816 <_dtoa_r+0x91e>
 800980a:	45b1      	cmp	r9, r6
 800980c:	d003      	beq.n	8009816 <_dtoa_r+0x91e>
 800980e:	4649      	mov	r1, r9
 8009810:	4620      	mov	r0, r4
 8009812:	f000 fcb1 	bl	800a178 <_Bfree>
 8009816:	4631      	mov	r1, r6
 8009818:	4620      	mov	r0, r4
 800981a:	f000 fcad 	bl	800a178 <_Bfree>
 800981e:	e6a8      	b.n	8009572 <_dtoa_r+0x67a>
 8009820:	2700      	movs	r7, #0
 8009822:	463e      	mov	r6, r7
 8009824:	e7e1      	b.n	80097ea <_dtoa_r+0x8f2>
 8009826:	f8dd a020 	ldr.w	sl, [sp, #32]
 800982a:	463e      	mov	r6, r7
 800982c:	e5a9      	b.n	8009382 <_dtoa_r+0x48a>
 800982e:	bf00      	nop
 8009830:	40240000 	.word	0x40240000
 8009834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009836:	f8cd 9008 	str.w	r9, [sp, #8]
 800983a:	2b00      	cmp	r3, #0
 800983c:	f000 80fa 	beq.w	8009a34 <_dtoa_r+0xb3c>
 8009840:	2d00      	cmp	r5, #0
 8009842:	dd05      	ble.n	8009850 <_dtoa_r+0x958>
 8009844:	4631      	mov	r1, r6
 8009846:	462a      	mov	r2, r5
 8009848:	4620      	mov	r0, r4
 800984a:	f000 fe61 	bl	800a510 <__lshift>
 800984e:	4606      	mov	r6, r0
 8009850:	9b07      	ldr	r3, [sp, #28]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d04c      	beq.n	80098f0 <_dtoa_r+0x9f8>
 8009856:	6871      	ldr	r1, [r6, #4]
 8009858:	4620      	mov	r0, r4
 800985a:	f000 fc59 	bl	800a110 <_Balloc>
 800985e:	6932      	ldr	r2, [r6, #16]
 8009860:	3202      	adds	r2, #2
 8009862:	4605      	mov	r5, r0
 8009864:	0092      	lsls	r2, r2, #2
 8009866:	f106 010c 	add.w	r1, r6, #12
 800986a:	300c      	adds	r0, #12
 800986c:	f7fd fd90 	bl	8007390 <memcpy>
 8009870:	2201      	movs	r2, #1
 8009872:	4629      	mov	r1, r5
 8009874:	4620      	mov	r0, r4
 8009876:	f000 fe4b 	bl	800a510 <__lshift>
 800987a:	9b00      	ldr	r3, [sp, #0]
 800987c:	f8cd b014 	str.w	fp, [sp, #20]
 8009880:	f003 0301 	and.w	r3, r3, #1
 8009884:	46b1      	mov	r9, r6
 8009886:	9307      	str	r3, [sp, #28]
 8009888:	4606      	mov	r6, r0
 800988a:	4639      	mov	r1, r7
 800988c:	9804      	ldr	r0, [sp, #16]
 800988e:	f7ff faa5 	bl	8008ddc <quorem>
 8009892:	4649      	mov	r1, r9
 8009894:	4605      	mov	r5, r0
 8009896:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800989a:	9804      	ldr	r0, [sp, #16]
 800989c:	f000 fe8c 	bl	800a5b8 <__mcmp>
 80098a0:	4632      	mov	r2, r6
 80098a2:	9000      	str	r0, [sp, #0]
 80098a4:	4639      	mov	r1, r7
 80098a6:	4620      	mov	r0, r4
 80098a8:	f000 fea0 	bl	800a5ec <__mdiff>
 80098ac:	68c3      	ldr	r3, [r0, #12]
 80098ae:	4602      	mov	r2, r0
 80098b0:	bb03      	cbnz	r3, 80098f4 <_dtoa_r+0x9fc>
 80098b2:	4601      	mov	r1, r0
 80098b4:	9008      	str	r0, [sp, #32]
 80098b6:	9804      	ldr	r0, [sp, #16]
 80098b8:	f000 fe7e 	bl	800a5b8 <__mcmp>
 80098bc:	9a08      	ldr	r2, [sp, #32]
 80098be:	4603      	mov	r3, r0
 80098c0:	4611      	mov	r1, r2
 80098c2:	4620      	mov	r0, r4
 80098c4:	9308      	str	r3, [sp, #32]
 80098c6:	f000 fc57 	bl	800a178 <_Bfree>
 80098ca:	9b08      	ldr	r3, [sp, #32]
 80098cc:	b9a3      	cbnz	r3, 80098f8 <_dtoa_r+0xa00>
 80098ce:	9a06      	ldr	r2, [sp, #24]
 80098d0:	b992      	cbnz	r2, 80098f8 <_dtoa_r+0xa00>
 80098d2:	9a07      	ldr	r2, [sp, #28]
 80098d4:	b982      	cbnz	r2, 80098f8 <_dtoa_r+0xa00>
 80098d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80098da:	d029      	beq.n	8009930 <_dtoa_r+0xa38>
 80098dc:	9b00      	ldr	r3, [sp, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	dd01      	ble.n	80098e6 <_dtoa_r+0x9ee>
 80098e2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80098e6:	9b05      	ldr	r3, [sp, #20]
 80098e8:	1c5d      	adds	r5, r3, #1
 80098ea:	f883 8000 	strb.w	r8, [r3]
 80098ee:	e782      	b.n	80097f6 <_dtoa_r+0x8fe>
 80098f0:	4630      	mov	r0, r6
 80098f2:	e7c2      	b.n	800987a <_dtoa_r+0x982>
 80098f4:	2301      	movs	r3, #1
 80098f6:	e7e3      	b.n	80098c0 <_dtoa_r+0x9c8>
 80098f8:	9a00      	ldr	r2, [sp, #0]
 80098fa:	2a00      	cmp	r2, #0
 80098fc:	db04      	blt.n	8009908 <_dtoa_r+0xa10>
 80098fe:	d125      	bne.n	800994c <_dtoa_r+0xa54>
 8009900:	9a06      	ldr	r2, [sp, #24]
 8009902:	bb1a      	cbnz	r2, 800994c <_dtoa_r+0xa54>
 8009904:	9a07      	ldr	r2, [sp, #28]
 8009906:	bb0a      	cbnz	r2, 800994c <_dtoa_r+0xa54>
 8009908:	2b00      	cmp	r3, #0
 800990a:	ddec      	ble.n	80098e6 <_dtoa_r+0x9ee>
 800990c:	2201      	movs	r2, #1
 800990e:	9904      	ldr	r1, [sp, #16]
 8009910:	4620      	mov	r0, r4
 8009912:	f000 fdfd 	bl	800a510 <__lshift>
 8009916:	4639      	mov	r1, r7
 8009918:	9004      	str	r0, [sp, #16]
 800991a:	f000 fe4d 	bl	800a5b8 <__mcmp>
 800991e:	2800      	cmp	r0, #0
 8009920:	dc03      	bgt.n	800992a <_dtoa_r+0xa32>
 8009922:	d1e0      	bne.n	80098e6 <_dtoa_r+0x9ee>
 8009924:	f018 0f01 	tst.w	r8, #1
 8009928:	d0dd      	beq.n	80098e6 <_dtoa_r+0x9ee>
 800992a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800992e:	d1d8      	bne.n	80098e2 <_dtoa_r+0x9ea>
 8009930:	9b05      	ldr	r3, [sp, #20]
 8009932:	9a05      	ldr	r2, [sp, #20]
 8009934:	1c5d      	adds	r5, r3, #1
 8009936:	2339      	movs	r3, #57	; 0x39
 8009938:	7013      	strb	r3, [r2, #0]
 800993a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800993e:	2b39      	cmp	r3, #57	; 0x39
 8009940:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8009944:	d04f      	beq.n	80099e6 <_dtoa_r+0xaee>
 8009946:	3301      	adds	r3, #1
 8009948:	7013      	strb	r3, [r2, #0]
 800994a:	e754      	b.n	80097f6 <_dtoa_r+0x8fe>
 800994c:	9a05      	ldr	r2, [sp, #20]
 800994e:	2b00      	cmp	r3, #0
 8009950:	f102 0501 	add.w	r5, r2, #1
 8009954:	dd06      	ble.n	8009964 <_dtoa_r+0xa6c>
 8009956:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800995a:	d0e9      	beq.n	8009930 <_dtoa_r+0xa38>
 800995c:	f108 0801 	add.w	r8, r8, #1
 8009960:	9b05      	ldr	r3, [sp, #20]
 8009962:	e7c2      	b.n	80098ea <_dtoa_r+0x9f2>
 8009964:	9a02      	ldr	r2, [sp, #8]
 8009966:	f805 8c01 	strb.w	r8, [r5, #-1]
 800996a:	eba5 030b 	sub.w	r3, r5, fp
 800996e:	4293      	cmp	r3, r2
 8009970:	d021      	beq.n	80099b6 <_dtoa_r+0xabe>
 8009972:	2300      	movs	r3, #0
 8009974:	220a      	movs	r2, #10
 8009976:	9904      	ldr	r1, [sp, #16]
 8009978:	4620      	mov	r0, r4
 800997a:	f000 fc14 	bl	800a1a6 <__multadd>
 800997e:	45b1      	cmp	r9, r6
 8009980:	9004      	str	r0, [sp, #16]
 8009982:	f04f 0300 	mov.w	r3, #0
 8009986:	f04f 020a 	mov.w	r2, #10
 800998a:	4649      	mov	r1, r9
 800998c:	4620      	mov	r0, r4
 800998e:	d105      	bne.n	800999c <_dtoa_r+0xaa4>
 8009990:	f000 fc09 	bl	800a1a6 <__multadd>
 8009994:	4681      	mov	r9, r0
 8009996:	4606      	mov	r6, r0
 8009998:	9505      	str	r5, [sp, #20]
 800999a:	e776      	b.n	800988a <_dtoa_r+0x992>
 800999c:	f000 fc03 	bl	800a1a6 <__multadd>
 80099a0:	4631      	mov	r1, r6
 80099a2:	4681      	mov	r9, r0
 80099a4:	2300      	movs	r3, #0
 80099a6:	220a      	movs	r2, #10
 80099a8:	4620      	mov	r0, r4
 80099aa:	f000 fbfc 	bl	800a1a6 <__multadd>
 80099ae:	4606      	mov	r6, r0
 80099b0:	e7f2      	b.n	8009998 <_dtoa_r+0xaa0>
 80099b2:	f04f 0900 	mov.w	r9, #0
 80099b6:	2201      	movs	r2, #1
 80099b8:	9904      	ldr	r1, [sp, #16]
 80099ba:	4620      	mov	r0, r4
 80099bc:	f000 fda8 	bl	800a510 <__lshift>
 80099c0:	4639      	mov	r1, r7
 80099c2:	9004      	str	r0, [sp, #16]
 80099c4:	f000 fdf8 	bl	800a5b8 <__mcmp>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	dcb6      	bgt.n	800993a <_dtoa_r+0xa42>
 80099cc:	d102      	bne.n	80099d4 <_dtoa_r+0xadc>
 80099ce:	f018 0f01 	tst.w	r8, #1
 80099d2:	d1b2      	bne.n	800993a <_dtoa_r+0xa42>
 80099d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80099d8:	2b30      	cmp	r3, #48	; 0x30
 80099da:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80099de:	f47f af0a 	bne.w	80097f6 <_dtoa_r+0x8fe>
 80099e2:	4615      	mov	r5, r2
 80099e4:	e7f6      	b.n	80099d4 <_dtoa_r+0xadc>
 80099e6:	4593      	cmp	fp, r2
 80099e8:	d105      	bne.n	80099f6 <_dtoa_r+0xafe>
 80099ea:	2331      	movs	r3, #49	; 0x31
 80099ec:	f10a 0a01 	add.w	sl, sl, #1
 80099f0:	f88b 3000 	strb.w	r3, [fp]
 80099f4:	e6ff      	b.n	80097f6 <_dtoa_r+0x8fe>
 80099f6:	4615      	mov	r5, r2
 80099f8:	e79f      	b.n	800993a <_dtoa_r+0xa42>
 80099fa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009a60 <_dtoa_r+0xb68>
 80099fe:	e007      	b.n	8009a10 <_dtoa_r+0xb18>
 8009a00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a02:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009a64 <_dtoa_r+0xb6c>
 8009a06:	b11b      	cbz	r3, 8009a10 <_dtoa_r+0xb18>
 8009a08:	f10b 0308 	add.w	r3, fp, #8
 8009a0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a0e:	6013      	str	r3, [r2, #0]
 8009a10:	4658      	mov	r0, fp
 8009a12:	b017      	add	sp, #92	; 0x5c
 8009a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a18:	9b06      	ldr	r3, [sp, #24]
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	f77f ae35 	ble.w	800968a <_dtoa_r+0x792>
 8009a20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a22:	9307      	str	r3, [sp, #28]
 8009a24:	e649      	b.n	80096ba <_dtoa_r+0x7c2>
 8009a26:	9b02      	ldr	r3, [sp, #8]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	dc03      	bgt.n	8009a34 <_dtoa_r+0xb3c>
 8009a2c:	9b06      	ldr	r3, [sp, #24]
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	f73f aecc 	bgt.w	80097cc <_dtoa_r+0x8d4>
 8009a34:	465d      	mov	r5, fp
 8009a36:	4639      	mov	r1, r7
 8009a38:	9804      	ldr	r0, [sp, #16]
 8009a3a:	f7ff f9cf 	bl	8008ddc <quorem>
 8009a3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009a42:	f805 8b01 	strb.w	r8, [r5], #1
 8009a46:	9a02      	ldr	r2, [sp, #8]
 8009a48:	eba5 030b 	sub.w	r3, r5, fp
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	ddb0      	ble.n	80099b2 <_dtoa_r+0xaba>
 8009a50:	2300      	movs	r3, #0
 8009a52:	220a      	movs	r2, #10
 8009a54:	9904      	ldr	r1, [sp, #16]
 8009a56:	4620      	mov	r0, r4
 8009a58:	f000 fba5 	bl	800a1a6 <__multadd>
 8009a5c:	9004      	str	r0, [sp, #16]
 8009a5e:	e7ea      	b.n	8009a36 <_dtoa_r+0xb3e>
 8009a60:	0800afa4 	.word	0x0800afa4
 8009a64:	0800b020 	.word	0x0800b020

08009a68 <rshift>:
 8009a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a6a:	6906      	ldr	r6, [r0, #16]
 8009a6c:	114b      	asrs	r3, r1, #5
 8009a6e:	429e      	cmp	r6, r3
 8009a70:	f100 0414 	add.w	r4, r0, #20
 8009a74:	dd30      	ble.n	8009ad8 <rshift+0x70>
 8009a76:	f011 011f 	ands.w	r1, r1, #31
 8009a7a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009a7e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009a82:	d108      	bne.n	8009a96 <rshift+0x2e>
 8009a84:	4621      	mov	r1, r4
 8009a86:	42b2      	cmp	r2, r6
 8009a88:	460b      	mov	r3, r1
 8009a8a:	d211      	bcs.n	8009ab0 <rshift+0x48>
 8009a8c:	f852 3b04 	ldr.w	r3, [r2], #4
 8009a90:	f841 3b04 	str.w	r3, [r1], #4
 8009a94:	e7f7      	b.n	8009a86 <rshift+0x1e>
 8009a96:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009a9a:	f1c1 0c20 	rsb	ip, r1, #32
 8009a9e:	40cd      	lsrs	r5, r1
 8009aa0:	3204      	adds	r2, #4
 8009aa2:	4623      	mov	r3, r4
 8009aa4:	42b2      	cmp	r2, r6
 8009aa6:	4617      	mov	r7, r2
 8009aa8:	d30c      	bcc.n	8009ac4 <rshift+0x5c>
 8009aaa:	601d      	str	r5, [r3, #0]
 8009aac:	b105      	cbz	r5, 8009ab0 <rshift+0x48>
 8009aae:	3304      	adds	r3, #4
 8009ab0:	1b1a      	subs	r2, r3, r4
 8009ab2:	42a3      	cmp	r3, r4
 8009ab4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009ab8:	bf08      	it	eq
 8009aba:	2300      	moveq	r3, #0
 8009abc:	6102      	str	r2, [r0, #16]
 8009abe:	bf08      	it	eq
 8009ac0:	6143      	streq	r3, [r0, #20]
 8009ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ac4:	683f      	ldr	r7, [r7, #0]
 8009ac6:	fa07 f70c 	lsl.w	r7, r7, ip
 8009aca:	433d      	orrs	r5, r7
 8009acc:	f843 5b04 	str.w	r5, [r3], #4
 8009ad0:	f852 5b04 	ldr.w	r5, [r2], #4
 8009ad4:	40cd      	lsrs	r5, r1
 8009ad6:	e7e5      	b.n	8009aa4 <rshift+0x3c>
 8009ad8:	4623      	mov	r3, r4
 8009ada:	e7e9      	b.n	8009ab0 <rshift+0x48>

08009adc <__hexdig_fun>:
 8009adc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009ae0:	2b09      	cmp	r3, #9
 8009ae2:	d802      	bhi.n	8009aea <__hexdig_fun+0xe>
 8009ae4:	3820      	subs	r0, #32
 8009ae6:	b2c0      	uxtb	r0, r0
 8009ae8:	4770      	bx	lr
 8009aea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009aee:	2b05      	cmp	r3, #5
 8009af0:	d801      	bhi.n	8009af6 <__hexdig_fun+0x1a>
 8009af2:	3847      	subs	r0, #71	; 0x47
 8009af4:	e7f7      	b.n	8009ae6 <__hexdig_fun+0xa>
 8009af6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009afa:	2b05      	cmp	r3, #5
 8009afc:	d801      	bhi.n	8009b02 <__hexdig_fun+0x26>
 8009afe:	3827      	subs	r0, #39	; 0x27
 8009b00:	e7f1      	b.n	8009ae6 <__hexdig_fun+0xa>
 8009b02:	2000      	movs	r0, #0
 8009b04:	4770      	bx	lr

08009b06 <__gethex>:
 8009b06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b0a:	b08b      	sub	sp, #44	; 0x2c
 8009b0c:	468a      	mov	sl, r1
 8009b0e:	9002      	str	r0, [sp, #8]
 8009b10:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009b12:	9306      	str	r3, [sp, #24]
 8009b14:	4690      	mov	r8, r2
 8009b16:	f000 fad0 	bl	800a0ba <__localeconv_l>
 8009b1a:	6803      	ldr	r3, [r0, #0]
 8009b1c:	9303      	str	r3, [sp, #12]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7f6 fb5e 	bl	80001e0 <strlen>
 8009b24:	9b03      	ldr	r3, [sp, #12]
 8009b26:	9001      	str	r0, [sp, #4]
 8009b28:	4403      	add	r3, r0
 8009b2a:	f04f 0b00 	mov.w	fp, #0
 8009b2e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009b32:	9307      	str	r3, [sp, #28]
 8009b34:	f8da 3000 	ldr.w	r3, [sl]
 8009b38:	3302      	adds	r3, #2
 8009b3a:	461f      	mov	r7, r3
 8009b3c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b40:	2830      	cmp	r0, #48	; 0x30
 8009b42:	d06c      	beq.n	8009c1e <__gethex+0x118>
 8009b44:	f7ff ffca 	bl	8009adc <__hexdig_fun>
 8009b48:	4604      	mov	r4, r0
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	d16a      	bne.n	8009c24 <__gethex+0x11e>
 8009b4e:	9a01      	ldr	r2, [sp, #4]
 8009b50:	9903      	ldr	r1, [sp, #12]
 8009b52:	4638      	mov	r0, r7
 8009b54:	f001 f8f4 	bl	800ad40 <strncmp>
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	d166      	bne.n	8009c2a <__gethex+0x124>
 8009b5c:	9b01      	ldr	r3, [sp, #4]
 8009b5e:	5cf8      	ldrb	r0, [r7, r3]
 8009b60:	18fe      	adds	r6, r7, r3
 8009b62:	f7ff ffbb 	bl	8009adc <__hexdig_fun>
 8009b66:	2800      	cmp	r0, #0
 8009b68:	d062      	beq.n	8009c30 <__gethex+0x12a>
 8009b6a:	4633      	mov	r3, r6
 8009b6c:	7818      	ldrb	r0, [r3, #0]
 8009b6e:	2830      	cmp	r0, #48	; 0x30
 8009b70:	461f      	mov	r7, r3
 8009b72:	f103 0301 	add.w	r3, r3, #1
 8009b76:	d0f9      	beq.n	8009b6c <__gethex+0x66>
 8009b78:	f7ff ffb0 	bl	8009adc <__hexdig_fun>
 8009b7c:	fab0 f580 	clz	r5, r0
 8009b80:	096d      	lsrs	r5, r5, #5
 8009b82:	4634      	mov	r4, r6
 8009b84:	f04f 0b01 	mov.w	fp, #1
 8009b88:	463a      	mov	r2, r7
 8009b8a:	4616      	mov	r6, r2
 8009b8c:	3201      	adds	r2, #1
 8009b8e:	7830      	ldrb	r0, [r6, #0]
 8009b90:	f7ff ffa4 	bl	8009adc <__hexdig_fun>
 8009b94:	2800      	cmp	r0, #0
 8009b96:	d1f8      	bne.n	8009b8a <__gethex+0x84>
 8009b98:	9a01      	ldr	r2, [sp, #4]
 8009b9a:	9903      	ldr	r1, [sp, #12]
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	f001 f8cf 	bl	800ad40 <strncmp>
 8009ba2:	b950      	cbnz	r0, 8009bba <__gethex+0xb4>
 8009ba4:	b954      	cbnz	r4, 8009bbc <__gethex+0xb6>
 8009ba6:	9b01      	ldr	r3, [sp, #4]
 8009ba8:	18f4      	adds	r4, r6, r3
 8009baa:	4622      	mov	r2, r4
 8009bac:	4616      	mov	r6, r2
 8009bae:	3201      	adds	r2, #1
 8009bb0:	7830      	ldrb	r0, [r6, #0]
 8009bb2:	f7ff ff93 	bl	8009adc <__hexdig_fun>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d1f8      	bne.n	8009bac <__gethex+0xa6>
 8009bba:	b10c      	cbz	r4, 8009bc0 <__gethex+0xba>
 8009bbc:	1ba4      	subs	r4, r4, r6
 8009bbe:	00a4      	lsls	r4, r4, #2
 8009bc0:	7833      	ldrb	r3, [r6, #0]
 8009bc2:	2b50      	cmp	r3, #80	; 0x50
 8009bc4:	d001      	beq.n	8009bca <__gethex+0xc4>
 8009bc6:	2b70      	cmp	r3, #112	; 0x70
 8009bc8:	d140      	bne.n	8009c4c <__gethex+0x146>
 8009bca:	7873      	ldrb	r3, [r6, #1]
 8009bcc:	2b2b      	cmp	r3, #43	; 0x2b
 8009bce:	d031      	beq.n	8009c34 <__gethex+0x12e>
 8009bd0:	2b2d      	cmp	r3, #45	; 0x2d
 8009bd2:	d033      	beq.n	8009c3c <__gethex+0x136>
 8009bd4:	1c71      	adds	r1, r6, #1
 8009bd6:	f04f 0900 	mov.w	r9, #0
 8009bda:	7808      	ldrb	r0, [r1, #0]
 8009bdc:	f7ff ff7e 	bl	8009adc <__hexdig_fun>
 8009be0:	1e43      	subs	r3, r0, #1
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	2b18      	cmp	r3, #24
 8009be6:	d831      	bhi.n	8009c4c <__gethex+0x146>
 8009be8:	f1a0 0210 	sub.w	r2, r0, #16
 8009bec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009bf0:	f7ff ff74 	bl	8009adc <__hexdig_fun>
 8009bf4:	1e43      	subs	r3, r0, #1
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	2b18      	cmp	r3, #24
 8009bfa:	d922      	bls.n	8009c42 <__gethex+0x13c>
 8009bfc:	f1b9 0f00 	cmp.w	r9, #0
 8009c00:	d000      	beq.n	8009c04 <__gethex+0xfe>
 8009c02:	4252      	negs	r2, r2
 8009c04:	4414      	add	r4, r2
 8009c06:	f8ca 1000 	str.w	r1, [sl]
 8009c0a:	b30d      	cbz	r5, 8009c50 <__gethex+0x14a>
 8009c0c:	f1bb 0f00 	cmp.w	fp, #0
 8009c10:	bf0c      	ite	eq
 8009c12:	2706      	moveq	r7, #6
 8009c14:	2700      	movne	r7, #0
 8009c16:	4638      	mov	r0, r7
 8009c18:	b00b      	add	sp, #44	; 0x2c
 8009c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1e:	f10b 0b01 	add.w	fp, fp, #1
 8009c22:	e78a      	b.n	8009b3a <__gethex+0x34>
 8009c24:	2500      	movs	r5, #0
 8009c26:	462c      	mov	r4, r5
 8009c28:	e7ae      	b.n	8009b88 <__gethex+0x82>
 8009c2a:	463e      	mov	r6, r7
 8009c2c:	2501      	movs	r5, #1
 8009c2e:	e7c7      	b.n	8009bc0 <__gethex+0xba>
 8009c30:	4604      	mov	r4, r0
 8009c32:	e7fb      	b.n	8009c2c <__gethex+0x126>
 8009c34:	f04f 0900 	mov.w	r9, #0
 8009c38:	1cb1      	adds	r1, r6, #2
 8009c3a:	e7ce      	b.n	8009bda <__gethex+0xd4>
 8009c3c:	f04f 0901 	mov.w	r9, #1
 8009c40:	e7fa      	b.n	8009c38 <__gethex+0x132>
 8009c42:	230a      	movs	r3, #10
 8009c44:	fb03 0202 	mla	r2, r3, r2, r0
 8009c48:	3a10      	subs	r2, #16
 8009c4a:	e7cf      	b.n	8009bec <__gethex+0xe6>
 8009c4c:	4631      	mov	r1, r6
 8009c4e:	e7da      	b.n	8009c06 <__gethex+0x100>
 8009c50:	1bf3      	subs	r3, r6, r7
 8009c52:	3b01      	subs	r3, #1
 8009c54:	4629      	mov	r1, r5
 8009c56:	2b07      	cmp	r3, #7
 8009c58:	dc49      	bgt.n	8009cee <__gethex+0x1e8>
 8009c5a:	9802      	ldr	r0, [sp, #8]
 8009c5c:	f000 fa58 	bl	800a110 <_Balloc>
 8009c60:	9b01      	ldr	r3, [sp, #4]
 8009c62:	f100 0914 	add.w	r9, r0, #20
 8009c66:	f04f 0b00 	mov.w	fp, #0
 8009c6a:	f1c3 0301 	rsb	r3, r3, #1
 8009c6e:	4605      	mov	r5, r0
 8009c70:	f8cd 9010 	str.w	r9, [sp, #16]
 8009c74:	46da      	mov	sl, fp
 8009c76:	9308      	str	r3, [sp, #32]
 8009c78:	42b7      	cmp	r7, r6
 8009c7a:	d33b      	bcc.n	8009cf4 <__gethex+0x1ee>
 8009c7c:	9804      	ldr	r0, [sp, #16]
 8009c7e:	f840 ab04 	str.w	sl, [r0], #4
 8009c82:	eba0 0009 	sub.w	r0, r0, r9
 8009c86:	1080      	asrs	r0, r0, #2
 8009c88:	6128      	str	r0, [r5, #16]
 8009c8a:	0147      	lsls	r7, r0, #5
 8009c8c:	4650      	mov	r0, sl
 8009c8e:	f000 fb03 	bl	800a298 <__hi0bits>
 8009c92:	f8d8 6000 	ldr.w	r6, [r8]
 8009c96:	1a3f      	subs	r7, r7, r0
 8009c98:	42b7      	cmp	r7, r6
 8009c9a:	dd64      	ble.n	8009d66 <__gethex+0x260>
 8009c9c:	1bbf      	subs	r7, r7, r6
 8009c9e:	4639      	mov	r1, r7
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	f000 fe13 	bl	800a8cc <__any_on>
 8009ca6:	4682      	mov	sl, r0
 8009ca8:	b178      	cbz	r0, 8009cca <__gethex+0x1c4>
 8009caa:	1e7b      	subs	r3, r7, #1
 8009cac:	1159      	asrs	r1, r3, #5
 8009cae:	f003 021f 	and.w	r2, r3, #31
 8009cb2:	f04f 0a01 	mov.w	sl, #1
 8009cb6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009cba:	fa0a f202 	lsl.w	r2, sl, r2
 8009cbe:	420a      	tst	r2, r1
 8009cc0:	d003      	beq.n	8009cca <__gethex+0x1c4>
 8009cc2:	4553      	cmp	r3, sl
 8009cc4:	dc46      	bgt.n	8009d54 <__gethex+0x24e>
 8009cc6:	f04f 0a02 	mov.w	sl, #2
 8009cca:	4639      	mov	r1, r7
 8009ccc:	4628      	mov	r0, r5
 8009cce:	f7ff fecb 	bl	8009a68 <rshift>
 8009cd2:	443c      	add	r4, r7
 8009cd4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009cd8:	42a3      	cmp	r3, r4
 8009cda:	da52      	bge.n	8009d82 <__gethex+0x27c>
 8009cdc:	4629      	mov	r1, r5
 8009cde:	9802      	ldr	r0, [sp, #8]
 8009ce0:	f000 fa4a 	bl	800a178 <_Bfree>
 8009ce4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	6013      	str	r3, [r2, #0]
 8009cea:	27a3      	movs	r7, #163	; 0xa3
 8009cec:	e793      	b.n	8009c16 <__gethex+0x110>
 8009cee:	3101      	adds	r1, #1
 8009cf0:	105b      	asrs	r3, r3, #1
 8009cf2:	e7b0      	b.n	8009c56 <__gethex+0x150>
 8009cf4:	1e73      	subs	r3, r6, #1
 8009cf6:	9305      	str	r3, [sp, #20]
 8009cf8:	9a07      	ldr	r2, [sp, #28]
 8009cfa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d018      	beq.n	8009d34 <__gethex+0x22e>
 8009d02:	f1bb 0f20 	cmp.w	fp, #32
 8009d06:	d107      	bne.n	8009d18 <__gethex+0x212>
 8009d08:	9b04      	ldr	r3, [sp, #16]
 8009d0a:	f8c3 a000 	str.w	sl, [r3]
 8009d0e:	3304      	adds	r3, #4
 8009d10:	f04f 0a00 	mov.w	sl, #0
 8009d14:	9304      	str	r3, [sp, #16]
 8009d16:	46d3      	mov	fp, sl
 8009d18:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009d1c:	f7ff fede 	bl	8009adc <__hexdig_fun>
 8009d20:	f000 000f 	and.w	r0, r0, #15
 8009d24:	fa00 f00b 	lsl.w	r0, r0, fp
 8009d28:	ea4a 0a00 	orr.w	sl, sl, r0
 8009d2c:	f10b 0b04 	add.w	fp, fp, #4
 8009d30:	9b05      	ldr	r3, [sp, #20]
 8009d32:	e00d      	b.n	8009d50 <__gethex+0x24a>
 8009d34:	9b05      	ldr	r3, [sp, #20]
 8009d36:	9a08      	ldr	r2, [sp, #32]
 8009d38:	4413      	add	r3, r2
 8009d3a:	42bb      	cmp	r3, r7
 8009d3c:	d3e1      	bcc.n	8009d02 <__gethex+0x1fc>
 8009d3e:	4618      	mov	r0, r3
 8009d40:	9a01      	ldr	r2, [sp, #4]
 8009d42:	9903      	ldr	r1, [sp, #12]
 8009d44:	9309      	str	r3, [sp, #36]	; 0x24
 8009d46:	f000 fffb 	bl	800ad40 <strncmp>
 8009d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d1d8      	bne.n	8009d02 <__gethex+0x1fc>
 8009d50:	461e      	mov	r6, r3
 8009d52:	e791      	b.n	8009c78 <__gethex+0x172>
 8009d54:	1eb9      	subs	r1, r7, #2
 8009d56:	4628      	mov	r0, r5
 8009d58:	f000 fdb8 	bl	800a8cc <__any_on>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d0b2      	beq.n	8009cc6 <__gethex+0x1c0>
 8009d60:	f04f 0a03 	mov.w	sl, #3
 8009d64:	e7b1      	b.n	8009cca <__gethex+0x1c4>
 8009d66:	da09      	bge.n	8009d7c <__gethex+0x276>
 8009d68:	1bf7      	subs	r7, r6, r7
 8009d6a:	4629      	mov	r1, r5
 8009d6c:	463a      	mov	r2, r7
 8009d6e:	9802      	ldr	r0, [sp, #8]
 8009d70:	f000 fbce 	bl	800a510 <__lshift>
 8009d74:	1be4      	subs	r4, r4, r7
 8009d76:	4605      	mov	r5, r0
 8009d78:	f100 0914 	add.w	r9, r0, #20
 8009d7c:	f04f 0a00 	mov.w	sl, #0
 8009d80:	e7a8      	b.n	8009cd4 <__gethex+0x1ce>
 8009d82:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009d86:	42a0      	cmp	r0, r4
 8009d88:	dd6a      	ble.n	8009e60 <__gethex+0x35a>
 8009d8a:	1b04      	subs	r4, r0, r4
 8009d8c:	42a6      	cmp	r6, r4
 8009d8e:	dc2e      	bgt.n	8009dee <__gethex+0x2e8>
 8009d90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d022      	beq.n	8009dde <__gethex+0x2d8>
 8009d98:	2b03      	cmp	r3, #3
 8009d9a:	d024      	beq.n	8009de6 <__gethex+0x2e0>
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d115      	bne.n	8009dcc <__gethex+0x2c6>
 8009da0:	42a6      	cmp	r6, r4
 8009da2:	d113      	bne.n	8009dcc <__gethex+0x2c6>
 8009da4:	2e01      	cmp	r6, #1
 8009da6:	dc0b      	bgt.n	8009dc0 <__gethex+0x2ba>
 8009da8:	9a06      	ldr	r2, [sp, #24]
 8009daa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009dae:	6013      	str	r3, [r2, #0]
 8009db0:	2301      	movs	r3, #1
 8009db2:	612b      	str	r3, [r5, #16]
 8009db4:	f8c9 3000 	str.w	r3, [r9]
 8009db8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009dba:	2762      	movs	r7, #98	; 0x62
 8009dbc:	601d      	str	r5, [r3, #0]
 8009dbe:	e72a      	b.n	8009c16 <__gethex+0x110>
 8009dc0:	1e71      	subs	r1, r6, #1
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	f000 fd82 	bl	800a8cc <__any_on>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d1ed      	bne.n	8009da8 <__gethex+0x2a2>
 8009dcc:	4629      	mov	r1, r5
 8009dce:	9802      	ldr	r0, [sp, #8]
 8009dd0:	f000 f9d2 	bl	800a178 <_Bfree>
 8009dd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	6013      	str	r3, [r2, #0]
 8009dda:	2750      	movs	r7, #80	; 0x50
 8009ddc:	e71b      	b.n	8009c16 <__gethex+0x110>
 8009dde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d0e1      	beq.n	8009da8 <__gethex+0x2a2>
 8009de4:	e7f2      	b.n	8009dcc <__gethex+0x2c6>
 8009de6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1dd      	bne.n	8009da8 <__gethex+0x2a2>
 8009dec:	e7ee      	b.n	8009dcc <__gethex+0x2c6>
 8009dee:	1e67      	subs	r7, r4, #1
 8009df0:	f1ba 0f00 	cmp.w	sl, #0
 8009df4:	d131      	bne.n	8009e5a <__gethex+0x354>
 8009df6:	b127      	cbz	r7, 8009e02 <__gethex+0x2fc>
 8009df8:	4639      	mov	r1, r7
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	f000 fd66 	bl	800a8cc <__any_on>
 8009e00:	4682      	mov	sl, r0
 8009e02:	117a      	asrs	r2, r7, #5
 8009e04:	2301      	movs	r3, #1
 8009e06:	f007 071f 	and.w	r7, r7, #31
 8009e0a:	fa03 f707 	lsl.w	r7, r3, r7
 8009e0e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009e12:	4621      	mov	r1, r4
 8009e14:	421f      	tst	r7, r3
 8009e16:	4628      	mov	r0, r5
 8009e18:	bf18      	it	ne
 8009e1a:	f04a 0a02 	orrne.w	sl, sl, #2
 8009e1e:	1b36      	subs	r6, r6, r4
 8009e20:	f7ff fe22 	bl	8009a68 <rshift>
 8009e24:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009e28:	2702      	movs	r7, #2
 8009e2a:	f1ba 0f00 	cmp.w	sl, #0
 8009e2e:	d048      	beq.n	8009ec2 <__gethex+0x3bc>
 8009e30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d015      	beq.n	8009e64 <__gethex+0x35e>
 8009e38:	2b03      	cmp	r3, #3
 8009e3a:	d017      	beq.n	8009e6c <__gethex+0x366>
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d109      	bne.n	8009e54 <__gethex+0x34e>
 8009e40:	f01a 0f02 	tst.w	sl, #2
 8009e44:	d006      	beq.n	8009e54 <__gethex+0x34e>
 8009e46:	f8d9 3000 	ldr.w	r3, [r9]
 8009e4a:	ea4a 0a03 	orr.w	sl, sl, r3
 8009e4e:	f01a 0f01 	tst.w	sl, #1
 8009e52:	d10e      	bne.n	8009e72 <__gethex+0x36c>
 8009e54:	f047 0710 	orr.w	r7, r7, #16
 8009e58:	e033      	b.n	8009ec2 <__gethex+0x3bc>
 8009e5a:	f04f 0a01 	mov.w	sl, #1
 8009e5e:	e7d0      	b.n	8009e02 <__gethex+0x2fc>
 8009e60:	2701      	movs	r7, #1
 8009e62:	e7e2      	b.n	8009e2a <__gethex+0x324>
 8009e64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e66:	f1c3 0301 	rsb	r3, r3, #1
 8009e6a:	9315      	str	r3, [sp, #84]	; 0x54
 8009e6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d0f0      	beq.n	8009e54 <__gethex+0x34e>
 8009e72:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009e76:	f105 0314 	add.w	r3, r5, #20
 8009e7a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009e7e:	eb03 010a 	add.w	r1, r3, sl
 8009e82:	f04f 0c00 	mov.w	ip, #0
 8009e86:	4618      	mov	r0, r3
 8009e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e8c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009e90:	d01c      	beq.n	8009ecc <__gethex+0x3c6>
 8009e92:	3201      	adds	r2, #1
 8009e94:	6002      	str	r2, [r0, #0]
 8009e96:	2f02      	cmp	r7, #2
 8009e98:	f105 0314 	add.w	r3, r5, #20
 8009e9c:	d138      	bne.n	8009f10 <__gethex+0x40a>
 8009e9e:	f8d8 2000 	ldr.w	r2, [r8]
 8009ea2:	3a01      	subs	r2, #1
 8009ea4:	42b2      	cmp	r2, r6
 8009ea6:	d10a      	bne.n	8009ebe <__gethex+0x3b8>
 8009ea8:	1171      	asrs	r1, r6, #5
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f006 061f 	and.w	r6, r6, #31
 8009eb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009eb4:	fa02 f606 	lsl.w	r6, r2, r6
 8009eb8:	421e      	tst	r6, r3
 8009eba:	bf18      	it	ne
 8009ebc:	4617      	movne	r7, r2
 8009ebe:	f047 0720 	orr.w	r7, r7, #32
 8009ec2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ec4:	601d      	str	r5, [r3, #0]
 8009ec6:	9b06      	ldr	r3, [sp, #24]
 8009ec8:	601c      	str	r4, [r3, #0]
 8009eca:	e6a4      	b.n	8009c16 <__gethex+0x110>
 8009ecc:	4299      	cmp	r1, r3
 8009ece:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ed2:	d8d8      	bhi.n	8009e86 <__gethex+0x380>
 8009ed4:	68ab      	ldr	r3, [r5, #8]
 8009ed6:	4599      	cmp	r9, r3
 8009ed8:	db12      	blt.n	8009f00 <__gethex+0x3fa>
 8009eda:	6869      	ldr	r1, [r5, #4]
 8009edc:	9802      	ldr	r0, [sp, #8]
 8009ede:	3101      	adds	r1, #1
 8009ee0:	f000 f916 	bl	800a110 <_Balloc>
 8009ee4:	692a      	ldr	r2, [r5, #16]
 8009ee6:	3202      	adds	r2, #2
 8009ee8:	f105 010c 	add.w	r1, r5, #12
 8009eec:	4683      	mov	fp, r0
 8009eee:	0092      	lsls	r2, r2, #2
 8009ef0:	300c      	adds	r0, #12
 8009ef2:	f7fd fa4d 	bl	8007390 <memcpy>
 8009ef6:	4629      	mov	r1, r5
 8009ef8:	9802      	ldr	r0, [sp, #8]
 8009efa:	f000 f93d 	bl	800a178 <_Bfree>
 8009efe:	465d      	mov	r5, fp
 8009f00:	692b      	ldr	r3, [r5, #16]
 8009f02:	1c5a      	adds	r2, r3, #1
 8009f04:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009f08:	612a      	str	r2, [r5, #16]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	615a      	str	r2, [r3, #20]
 8009f0e:	e7c2      	b.n	8009e96 <__gethex+0x390>
 8009f10:	692a      	ldr	r2, [r5, #16]
 8009f12:	454a      	cmp	r2, r9
 8009f14:	dd0b      	ble.n	8009f2e <__gethex+0x428>
 8009f16:	2101      	movs	r1, #1
 8009f18:	4628      	mov	r0, r5
 8009f1a:	f7ff fda5 	bl	8009a68 <rshift>
 8009f1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f22:	3401      	adds	r4, #1
 8009f24:	42a3      	cmp	r3, r4
 8009f26:	f6ff aed9 	blt.w	8009cdc <__gethex+0x1d6>
 8009f2a:	2701      	movs	r7, #1
 8009f2c:	e7c7      	b.n	8009ebe <__gethex+0x3b8>
 8009f2e:	f016 061f 	ands.w	r6, r6, #31
 8009f32:	d0fa      	beq.n	8009f2a <__gethex+0x424>
 8009f34:	449a      	add	sl, r3
 8009f36:	f1c6 0620 	rsb	r6, r6, #32
 8009f3a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009f3e:	f000 f9ab 	bl	800a298 <__hi0bits>
 8009f42:	42b0      	cmp	r0, r6
 8009f44:	dbe7      	blt.n	8009f16 <__gethex+0x410>
 8009f46:	e7f0      	b.n	8009f2a <__gethex+0x424>

08009f48 <L_shift>:
 8009f48:	f1c2 0208 	rsb	r2, r2, #8
 8009f4c:	0092      	lsls	r2, r2, #2
 8009f4e:	b570      	push	{r4, r5, r6, lr}
 8009f50:	f1c2 0620 	rsb	r6, r2, #32
 8009f54:	6843      	ldr	r3, [r0, #4]
 8009f56:	6804      	ldr	r4, [r0, #0]
 8009f58:	fa03 f506 	lsl.w	r5, r3, r6
 8009f5c:	432c      	orrs	r4, r5
 8009f5e:	40d3      	lsrs	r3, r2
 8009f60:	6004      	str	r4, [r0, #0]
 8009f62:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f66:	4288      	cmp	r0, r1
 8009f68:	d3f4      	bcc.n	8009f54 <L_shift+0xc>
 8009f6a:	bd70      	pop	{r4, r5, r6, pc}

08009f6c <__match>:
 8009f6c:	b530      	push	{r4, r5, lr}
 8009f6e:	6803      	ldr	r3, [r0, #0]
 8009f70:	3301      	adds	r3, #1
 8009f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f76:	b914      	cbnz	r4, 8009f7e <__match+0x12>
 8009f78:	6003      	str	r3, [r0, #0]
 8009f7a:	2001      	movs	r0, #1
 8009f7c:	bd30      	pop	{r4, r5, pc}
 8009f7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f82:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009f86:	2d19      	cmp	r5, #25
 8009f88:	bf98      	it	ls
 8009f8a:	3220      	addls	r2, #32
 8009f8c:	42a2      	cmp	r2, r4
 8009f8e:	d0f0      	beq.n	8009f72 <__match+0x6>
 8009f90:	2000      	movs	r0, #0
 8009f92:	e7f3      	b.n	8009f7c <__match+0x10>

08009f94 <__hexnan>:
 8009f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f98:	680b      	ldr	r3, [r1, #0]
 8009f9a:	6801      	ldr	r1, [r0, #0]
 8009f9c:	115f      	asrs	r7, r3, #5
 8009f9e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009fa2:	f013 031f 	ands.w	r3, r3, #31
 8009fa6:	b087      	sub	sp, #28
 8009fa8:	bf18      	it	ne
 8009faa:	3704      	addne	r7, #4
 8009fac:	2500      	movs	r5, #0
 8009fae:	1f3e      	subs	r6, r7, #4
 8009fb0:	4682      	mov	sl, r0
 8009fb2:	4690      	mov	r8, r2
 8009fb4:	9301      	str	r3, [sp, #4]
 8009fb6:	f847 5c04 	str.w	r5, [r7, #-4]
 8009fba:	46b1      	mov	r9, r6
 8009fbc:	4634      	mov	r4, r6
 8009fbe:	9502      	str	r5, [sp, #8]
 8009fc0:	46ab      	mov	fp, r5
 8009fc2:	784a      	ldrb	r2, [r1, #1]
 8009fc4:	1c4b      	adds	r3, r1, #1
 8009fc6:	9303      	str	r3, [sp, #12]
 8009fc8:	b342      	cbz	r2, 800a01c <__hexnan+0x88>
 8009fca:	4610      	mov	r0, r2
 8009fcc:	9105      	str	r1, [sp, #20]
 8009fce:	9204      	str	r2, [sp, #16]
 8009fd0:	f7ff fd84 	bl	8009adc <__hexdig_fun>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	d143      	bne.n	800a060 <__hexnan+0xcc>
 8009fd8:	9a04      	ldr	r2, [sp, #16]
 8009fda:	9905      	ldr	r1, [sp, #20]
 8009fdc:	2a20      	cmp	r2, #32
 8009fde:	d818      	bhi.n	800a012 <__hexnan+0x7e>
 8009fe0:	9b02      	ldr	r3, [sp, #8]
 8009fe2:	459b      	cmp	fp, r3
 8009fe4:	dd13      	ble.n	800a00e <__hexnan+0x7a>
 8009fe6:	454c      	cmp	r4, r9
 8009fe8:	d206      	bcs.n	8009ff8 <__hexnan+0x64>
 8009fea:	2d07      	cmp	r5, #7
 8009fec:	dc04      	bgt.n	8009ff8 <__hexnan+0x64>
 8009fee:	462a      	mov	r2, r5
 8009ff0:	4649      	mov	r1, r9
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f7ff ffa8 	bl	8009f48 <L_shift>
 8009ff8:	4544      	cmp	r4, r8
 8009ffa:	d944      	bls.n	800a086 <__hexnan+0xf2>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	f1a4 0904 	sub.w	r9, r4, #4
 800a002:	f844 3c04 	str.w	r3, [r4, #-4]
 800a006:	f8cd b008 	str.w	fp, [sp, #8]
 800a00a:	464c      	mov	r4, r9
 800a00c:	461d      	mov	r5, r3
 800a00e:	9903      	ldr	r1, [sp, #12]
 800a010:	e7d7      	b.n	8009fc2 <__hexnan+0x2e>
 800a012:	2a29      	cmp	r2, #41	; 0x29
 800a014:	d14a      	bne.n	800a0ac <__hexnan+0x118>
 800a016:	3102      	adds	r1, #2
 800a018:	f8ca 1000 	str.w	r1, [sl]
 800a01c:	f1bb 0f00 	cmp.w	fp, #0
 800a020:	d044      	beq.n	800a0ac <__hexnan+0x118>
 800a022:	454c      	cmp	r4, r9
 800a024:	d206      	bcs.n	800a034 <__hexnan+0xa0>
 800a026:	2d07      	cmp	r5, #7
 800a028:	dc04      	bgt.n	800a034 <__hexnan+0xa0>
 800a02a:	462a      	mov	r2, r5
 800a02c:	4649      	mov	r1, r9
 800a02e:	4620      	mov	r0, r4
 800a030:	f7ff ff8a 	bl	8009f48 <L_shift>
 800a034:	4544      	cmp	r4, r8
 800a036:	d928      	bls.n	800a08a <__hexnan+0xf6>
 800a038:	4643      	mov	r3, r8
 800a03a:	f854 2b04 	ldr.w	r2, [r4], #4
 800a03e:	f843 2b04 	str.w	r2, [r3], #4
 800a042:	42a6      	cmp	r6, r4
 800a044:	d2f9      	bcs.n	800a03a <__hexnan+0xa6>
 800a046:	2200      	movs	r2, #0
 800a048:	f843 2b04 	str.w	r2, [r3], #4
 800a04c:	429e      	cmp	r6, r3
 800a04e:	d2fb      	bcs.n	800a048 <__hexnan+0xb4>
 800a050:	6833      	ldr	r3, [r6, #0]
 800a052:	b91b      	cbnz	r3, 800a05c <__hexnan+0xc8>
 800a054:	4546      	cmp	r6, r8
 800a056:	d127      	bne.n	800a0a8 <__hexnan+0x114>
 800a058:	2301      	movs	r3, #1
 800a05a:	6033      	str	r3, [r6, #0]
 800a05c:	2005      	movs	r0, #5
 800a05e:	e026      	b.n	800a0ae <__hexnan+0x11a>
 800a060:	3501      	adds	r5, #1
 800a062:	2d08      	cmp	r5, #8
 800a064:	f10b 0b01 	add.w	fp, fp, #1
 800a068:	dd06      	ble.n	800a078 <__hexnan+0xe4>
 800a06a:	4544      	cmp	r4, r8
 800a06c:	d9cf      	bls.n	800a00e <__hexnan+0x7a>
 800a06e:	2300      	movs	r3, #0
 800a070:	f844 3c04 	str.w	r3, [r4, #-4]
 800a074:	2501      	movs	r5, #1
 800a076:	3c04      	subs	r4, #4
 800a078:	6822      	ldr	r2, [r4, #0]
 800a07a:	f000 000f 	and.w	r0, r0, #15
 800a07e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a082:	6020      	str	r0, [r4, #0]
 800a084:	e7c3      	b.n	800a00e <__hexnan+0x7a>
 800a086:	2508      	movs	r5, #8
 800a088:	e7c1      	b.n	800a00e <__hexnan+0x7a>
 800a08a:	9b01      	ldr	r3, [sp, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d0df      	beq.n	800a050 <__hexnan+0xbc>
 800a090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a094:	f1c3 0320 	rsb	r3, r3, #32
 800a098:	fa22 f303 	lsr.w	r3, r2, r3
 800a09c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a0a0:	401a      	ands	r2, r3
 800a0a2:	f847 2c04 	str.w	r2, [r7, #-4]
 800a0a6:	e7d3      	b.n	800a050 <__hexnan+0xbc>
 800a0a8:	3e04      	subs	r6, #4
 800a0aa:	e7d1      	b.n	800a050 <__hexnan+0xbc>
 800a0ac:	2004      	movs	r0, #4
 800a0ae:	b007      	add	sp, #28
 800a0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0b4 <__locale_ctype_ptr_l>:
 800a0b4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a0b8:	4770      	bx	lr

0800a0ba <__localeconv_l>:
 800a0ba:	30f0      	adds	r0, #240	; 0xf0
 800a0bc:	4770      	bx	lr
	...

0800a0c0 <_localeconv_r>:
 800a0c0:	4b04      	ldr	r3, [pc, #16]	; (800a0d4 <_localeconv_r+0x14>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	6a18      	ldr	r0, [r3, #32]
 800a0c6:	4b04      	ldr	r3, [pc, #16]	; (800a0d8 <_localeconv_r+0x18>)
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	bf08      	it	eq
 800a0cc:	4618      	moveq	r0, r3
 800a0ce:	30f0      	adds	r0, #240	; 0xf0
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	20000014 	.word	0x20000014
 800a0d8:	20000078 	.word	0x20000078

0800a0dc <malloc>:
 800a0dc:	4b02      	ldr	r3, [pc, #8]	; (800a0e8 <malloc+0xc>)
 800a0de:	4601      	mov	r1, r0
 800a0e0:	6818      	ldr	r0, [r3, #0]
 800a0e2:	f000 bc71 	b.w	800a9c8 <_malloc_r>
 800a0e6:	bf00      	nop
 800a0e8:	20000014 	.word	0x20000014

0800a0ec <__ascii_mbtowc>:
 800a0ec:	b082      	sub	sp, #8
 800a0ee:	b901      	cbnz	r1, 800a0f2 <__ascii_mbtowc+0x6>
 800a0f0:	a901      	add	r1, sp, #4
 800a0f2:	b142      	cbz	r2, 800a106 <__ascii_mbtowc+0x1a>
 800a0f4:	b14b      	cbz	r3, 800a10a <__ascii_mbtowc+0x1e>
 800a0f6:	7813      	ldrb	r3, [r2, #0]
 800a0f8:	600b      	str	r3, [r1, #0]
 800a0fa:	7812      	ldrb	r2, [r2, #0]
 800a0fc:	1c10      	adds	r0, r2, #0
 800a0fe:	bf18      	it	ne
 800a100:	2001      	movne	r0, #1
 800a102:	b002      	add	sp, #8
 800a104:	4770      	bx	lr
 800a106:	4610      	mov	r0, r2
 800a108:	e7fb      	b.n	800a102 <__ascii_mbtowc+0x16>
 800a10a:	f06f 0001 	mvn.w	r0, #1
 800a10e:	e7f8      	b.n	800a102 <__ascii_mbtowc+0x16>

0800a110 <_Balloc>:
 800a110:	b570      	push	{r4, r5, r6, lr}
 800a112:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a114:	4604      	mov	r4, r0
 800a116:	460e      	mov	r6, r1
 800a118:	b93d      	cbnz	r5, 800a12a <_Balloc+0x1a>
 800a11a:	2010      	movs	r0, #16
 800a11c:	f7ff ffde 	bl	800a0dc <malloc>
 800a120:	6260      	str	r0, [r4, #36]	; 0x24
 800a122:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a126:	6005      	str	r5, [r0, #0]
 800a128:	60c5      	str	r5, [r0, #12]
 800a12a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a12c:	68eb      	ldr	r3, [r5, #12]
 800a12e:	b183      	cbz	r3, 800a152 <_Balloc+0x42>
 800a130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a138:	b9b8      	cbnz	r0, 800a16a <_Balloc+0x5a>
 800a13a:	2101      	movs	r1, #1
 800a13c:	fa01 f506 	lsl.w	r5, r1, r6
 800a140:	1d6a      	adds	r2, r5, #5
 800a142:	0092      	lsls	r2, r2, #2
 800a144:	4620      	mov	r0, r4
 800a146:	f000 fbe2 	bl	800a90e <_calloc_r>
 800a14a:	b160      	cbz	r0, 800a166 <_Balloc+0x56>
 800a14c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a150:	e00e      	b.n	800a170 <_Balloc+0x60>
 800a152:	2221      	movs	r2, #33	; 0x21
 800a154:	2104      	movs	r1, #4
 800a156:	4620      	mov	r0, r4
 800a158:	f000 fbd9 	bl	800a90e <_calloc_r>
 800a15c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a15e:	60e8      	str	r0, [r5, #12]
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1e4      	bne.n	800a130 <_Balloc+0x20>
 800a166:	2000      	movs	r0, #0
 800a168:	bd70      	pop	{r4, r5, r6, pc}
 800a16a:	6802      	ldr	r2, [r0, #0]
 800a16c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a170:	2300      	movs	r3, #0
 800a172:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a176:	e7f7      	b.n	800a168 <_Balloc+0x58>

0800a178 <_Bfree>:
 800a178:	b570      	push	{r4, r5, r6, lr}
 800a17a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a17c:	4606      	mov	r6, r0
 800a17e:	460d      	mov	r5, r1
 800a180:	b93c      	cbnz	r4, 800a192 <_Bfree+0x1a>
 800a182:	2010      	movs	r0, #16
 800a184:	f7ff ffaa 	bl	800a0dc <malloc>
 800a188:	6270      	str	r0, [r6, #36]	; 0x24
 800a18a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a18e:	6004      	str	r4, [r0, #0]
 800a190:	60c4      	str	r4, [r0, #12]
 800a192:	b13d      	cbz	r5, 800a1a4 <_Bfree+0x2c>
 800a194:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a196:	686a      	ldr	r2, [r5, #4]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a19e:	6029      	str	r1, [r5, #0]
 800a1a0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a1a4:	bd70      	pop	{r4, r5, r6, pc}

0800a1a6 <__multadd>:
 800a1a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1aa:	690d      	ldr	r5, [r1, #16]
 800a1ac:	461f      	mov	r7, r3
 800a1ae:	4606      	mov	r6, r0
 800a1b0:	460c      	mov	r4, r1
 800a1b2:	f101 0c14 	add.w	ip, r1, #20
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	f8dc 0000 	ldr.w	r0, [ip]
 800a1bc:	b281      	uxth	r1, r0
 800a1be:	fb02 7101 	mla	r1, r2, r1, r7
 800a1c2:	0c0f      	lsrs	r7, r1, #16
 800a1c4:	0c00      	lsrs	r0, r0, #16
 800a1c6:	fb02 7000 	mla	r0, r2, r0, r7
 800a1ca:	b289      	uxth	r1, r1
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a1d2:	429d      	cmp	r5, r3
 800a1d4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a1d8:	f84c 1b04 	str.w	r1, [ip], #4
 800a1dc:	dcec      	bgt.n	800a1b8 <__multadd+0x12>
 800a1de:	b1d7      	cbz	r7, 800a216 <__multadd+0x70>
 800a1e0:	68a3      	ldr	r3, [r4, #8]
 800a1e2:	42ab      	cmp	r3, r5
 800a1e4:	dc12      	bgt.n	800a20c <__multadd+0x66>
 800a1e6:	6861      	ldr	r1, [r4, #4]
 800a1e8:	4630      	mov	r0, r6
 800a1ea:	3101      	adds	r1, #1
 800a1ec:	f7ff ff90 	bl	800a110 <_Balloc>
 800a1f0:	6922      	ldr	r2, [r4, #16]
 800a1f2:	3202      	adds	r2, #2
 800a1f4:	f104 010c 	add.w	r1, r4, #12
 800a1f8:	4680      	mov	r8, r0
 800a1fa:	0092      	lsls	r2, r2, #2
 800a1fc:	300c      	adds	r0, #12
 800a1fe:	f7fd f8c7 	bl	8007390 <memcpy>
 800a202:	4621      	mov	r1, r4
 800a204:	4630      	mov	r0, r6
 800a206:	f7ff ffb7 	bl	800a178 <_Bfree>
 800a20a:	4644      	mov	r4, r8
 800a20c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a210:	3501      	adds	r5, #1
 800a212:	615f      	str	r7, [r3, #20]
 800a214:	6125      	str	r5, [r4, #16]
 800a216:	4620      	mov	r0, r4
 800a218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a21c <__s2b>:
 800a21c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a220:	460c      	mov	r4, r1
 800a222:	4615      	mov	r5, r2
 800a224:	461f      	mov	r7, r3
 800a226:	2209      	movs	r2, #9
 800a228:	3308      	adds	r3, #8
 800a22a:	4606      	mov	r6, r0
 800a22c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a230:	2100      	movs	r1, #0
 800a232:	2201      	movs	r2, #1
 800a234:	429a      	cmp	r2, r3
 800a236:	db20      	blt.n	800a27a <__s2b+0x5e>
 800a238:	4630      	mov	r0, r6
 800a23a:	f7ff ff69 	bl	800a110 <_Balloc>
 800a23e:	9b08      	ldr	r3, [sp, #32]
 800a240:	6143      	str	r3, [r0, #20]
 800a242:	2d09      	cmp	r5, #9
 800a244:	f04f 0301 	mov.w	r3, #1
 800a248:	6103      	str	r3, [r0, #16]
 800a24a:	dd19      	ble.n	800a280 <__s2b+0x64>
 800a24c:	f104 0809 	add.w	r8, r4, #9
 800a250:	46c1      	mov	r9, r8
 800a252:	442c      	add	r4, r5
 800a254:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a258:	4601      	mov	r1, r0
 800a25a:	3b30      	subs	r3, #48	; 0x30
 800a25c:	220a      	movs	r2, #10
 800a25e:	4630      	mov	r0, r6
 800a260:	f7ff ffa1 	bl	800a1a6 <__multadd>
 800a264:	45a1      	cmp	r9, r4
 800a266:	d1f5      	bne.n	800a254 <__s2b+0x38>
 800a268:	eb08 0405 	add.w	r4, r8, r5
 800a26c:	3c08      	subs	r4, #8
 800a26e:	1b2d      	subs	r5, r5, r4
 800a270:	1963      	adds	r3, r4, r5
 800a272:	42bb      	cmp	r3, r7
 800a274:	db07      	blt.n	800a286 <__s2b+0x6a>
 800a276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a27a:	0052      	lsls	r2, r2, #1
 800a27c:	3101      	adds	r1, #1
 800a27e:	e7d9      	b.n	800a234 <__s2b+0x18>
 800a280:	340a      	adds	r4, #10
 800a282:	2509      	movs	r5, #9
 800a284:	e7f3      	b.n	800a26e <__s2b+0x52>
 800a286:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a28a:	4601      	mov	r1, r0
 800a28c:	3b30      	subs	r3, #48	; 0x30
 800a28e:	220a      	movs	r2, #10
 800a290:	4630      	mov	r0, r6
 800a292:	f7ff ff88 	bl	800a1a6 <__multadd>
 800a296:	e7eb      	b.n	800a270 <__s2b+0x54>

0800a298 <__hi0bits>:
 800a298:	0c02      	lsrs	r2, r0, #16
 800a29a:	0412      	lsls	r2, r2, #16
 800a29c:	4603      	mov	r3, r0
 800a29e:	b9b2      	cbnz	r2, 800a2ce <__hi0bits+0x36>
 800a2a0:	0403      	lsls	r3, r0, #16
 800a2a2:	2010      	movs	r0, #16
 800a2a4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a2a8:	bf04      	itt	eq
 800a2aa:	021b      	lsleq	r3, r3, #8
 800a2ac:	3008      	addeq	r0, #8
 800a2ae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a2b2:	bf04      	itt	eq
 800a2b4:	011b      	lsleq	r3, r3, #4
 800a2b6:	3004      	addeq	r0, #4
 800a2b8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a2bc:	bf04      	itt	eq
 800a2be:	009b      	lsleq	r3, r3, #2
 800a2c0:	3002      	addeq	r0, #2
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	db06      	blt.n	800a2d4 <__hi0bits+0x3c>
 800a2c6:	005b      	lsls	r3, r3, #1
 800a2c8:	d503      	bpl.n	800a2d2 <__hi0bits+0x3a>
 800a2ca:	3001      	adds	r0, #1
 800a2cc:	4770      	bx	lr
 800a2ce:	2000      	movs	r0, #0
 800a2d0:	e7e8      	b.n	800a2a4 <__hi0bits+0xc>
 800a2d2:	2020      	movs	r0, #32
 800a2d4:	4770      	bx	lr

0800a2d6 <__lo0bits>:
 800a2d6:	6803      	ldr	r3, [r0, #0]
 800a2d8:	f013 0207 	ands.w	r2, r3, #7
 800a2dc:	4601      	mov	r1, r0
 800a2de:	d00b      	beq.n	800a2f8 <__lo0bits+0x22>
 800a2e0:	07da      	lsls	r2, r3, #31
 800a2e2:	d423      	bmi.n	800a32c <__lo0bits+0x56>
 800a2e4:	0798      	lsls	r0, r3, #30
 800a2e6:	bf49      	itett	mi
 800a2e8:	085b      	lsrmi	r3, r3, #1
 800a2ea:	089b      	lsrpl	r3, r3, #2
 800a2ec:	2001      	movmi	r0, #1
 800a2ee:	600b      	strmi	r3, [r1, #0]
 800a2f0:	bf5c      	itt	pl
 800a2f2:	600b      	strpl	r3, [r1, #0]
 800a2f4:	2002      	movpl	r0, #2
 800a2f6:	4770      	bx	lr
 800a2f8:	b298      	uxth	r0, r3
 800a2fa:	b9a8      	cbnz	r0, 800a328 <__lo0bits+0x52>
 800a2fc:	0c1b      	lsrs	r3, r3, #16
 800a2fe:	2010      	movs	r0, #16
 800a300:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a304:	bf04      	itt	eq
 800a306:	0a1b      	lsreq	r3, r3, #8
 800a308:	3008      	addeq	r0, #8
 800a30a:	071a      	lsls	r2, r3, #28
 800a30c:	bf04      	itt	eq
 800a30e:	091b      	lsreq	r3, r3, #4
 800a310:	3004      	addeq	r0, #4
 800a312:	079a      	lsls	r2, r3, #30
 800a314:	bf04      	itt	eq
 800a316:	089b      	lsreq	r3, r3, #2
 800a318:	3002      	addeq	r0, #2
 800a31a:	07da      	lsls	r2, r3, #31
 800a31c:	d402      	bmi.n	800a324 <__lo0bits+0x4e>
 800a31e:	085b      	lsrs	r3, r3, #1
 800a320:	d006      	beq.n	800a330 <__lo0bits+0x5a>
 800a322:	3001      	adds	r0, #1
 800a324:	600b      	str	r3, [r1, #0]
 800a326:	4770      	bx	lr
 800a328:	4610      	mov	r0, r2
 800a32a:	e7e9      	b.n	800a300 <__lo0bits+0x2a>
 800a32c:	2000      	movs	r0, #0
 800a32e:	4770      	bx	lr
 800a330:	2020      	movs	r0, #32
 800a332:	4770      	bx	lr

0800a334 <__i2b>:
 800a334:	b510      	push	{r4, lr}
 800a336:	460c      	mov	r4, r1
 800a338:	2101      	movs	r1, #1
 800a33a:	f7ff fee9 	bl	800a110 <_Balloc>
 800a33e:	2201      	movs	r2, #1
 800a340:	6144      	str	r4, [r0, #20]
 800a342:	6102      	str	r2, [r0, #16]
 800a344:	bd10      	pop	{r4, pc}

0800a346 <__multiply>:
 800a346:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a34a:	4614      	mov	r4, r2
 800a34c:	690a      	ldr	r2, [r1, #16]
 800a34e:	6923      	ldr	r3, [r4, #16]
 800a350:	429a      	cmp	r2, r3
 800a352:	bfb8      	it	lt
 800a354:	460b      	movlt	r3, r1
 800a356:	4688      	mov	r8, r1
 800a358:	bfbc      	itt	lt
 800a35a:	46a0      	movlt	r8, r4
 800a35c:	461c      	movlt	r4, r3
 800a35e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a362:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a366:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a36a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a36e:	eb07 0609 	add.w	r6, r7, r9
 800a372:	42b3      	cmp	r3, r6
 800a374:	bfb8      	it	lt
 800a376:	3101      	addlt	r1, #1
 800a378:	f7ff feca 	bl	800a110 <_Balloc>
 800a37c:	f100 0514 	add.w	r5, r0, #20
 800a380:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a384:	462b      	mov	r3, r5
 800a386:	2200      	movs	r2, #0
 800a388:	4573      	cmp	r3, lr
 800a38a:	d316      	bcc.n	800a3ba <__multiply+0x74>
 800a38c:	f104 0214 	add.w	r2, r4, #20
 800a390:	f108 0114 	add.w	r1, r8, #20
 800a394:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a398:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	9b00      	ldr	r3, [sp, #0]
 800a3a0:	9201      	str	r2, [sp, #4]
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d80c      	bhi.n	800a3c0 <__multiply+0x7a>
 800a3a6:	2e00      	cmp	r6, #0
 800a3a8:	dd03      	ble.n	800a3b2 <__multiply+0x6c>
 800a3aa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d05d      	beq.n	800a46e <__multiply+0x128>
 800a3b2:	6106      	str	r6, [r0, #16]
 800a3b4:	b003      	add	sp, #12
 800a3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ba:	f843 2b04 	str.w	r2, [r3], #4
 800a3be:	e7e3      	b.n	800a388 <__multiply+0x42>
 800a3c0:	f8b2 b000 	ldrh.w	fp, [r2]
 800a3c4:	f1bb 0f00 	cmp.w	fp, #0
 800a3c8:	d023      	beq.n	800a412 <__multiply+0xcc>
 800a3ca:	4689      	mov	r9, r1
 800a3cc:	46ac      	mov	ip, r5
 800a3ce:	f04f 0800 	mov.w	r8, #0
 800a3d2:	f859 4b04 	ldr.w	r4, [r9], #4
 800a3d6:	f8dc a000 	ldr.w	sl, [ip]
 800a3da:	b2a3      	uxth	r3, r4
 800a3dc:	fa1f fa8a 	uxth.w	sl, sl
 800a3e0:	fb0b a303 	mla	r3, fp, r3, sl
 800a3e4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a3e8:	f8dc 4000 	ldr.w	r4, [ip]
 800a3ec:	4443      	add	r3, r8
 800a3ee:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a3f2:	fb0b 840a 	mla	r4, fp, sl, r8
 800a3f6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a3fa:	46e2      	mov	sl, ip
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a402:	454f      	cmp	r7, r9
 800a404:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a408:	f84a 3b04 	str.w	r3, [sl], #4
 800a40c:	d82b      	bhi.n	800a466 <__multiply+0x120>
 800a40e:	f8cc 8004 	str.w	r8, [ip, #4]
 800a412:	9b01      	ldr	r3, [sp, #4]
 800a414:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a418:	3204      	adds	r2, #4
 800a41a:	f1ba 0f00 	cmp.w	sl, #0
 800a41e:	d020      	beq.n	800a462 <__multiply+0x11c>
 800a420:	682b      	ldr	r3, [r5, #0]
 800a422:	4689      	mov	r9, r1
 800a424:	46a8      	mov	r8, r5
 800a426:	f04f 0b00 	mov.w	fp, #0
 800a42a:	f8b9 c000 	ldrh.w	ip, [r9]
 800a42e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a432:	fb0a 440c 	mla	r4, sl, ip, r4
 800a436:	445c      	add	r4, fp
 800a438:	46c4      	mov	ip, r8
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a440:	f84c 3b04 	str.w	r3, [ip], #4
 800a444:	f859 3b04 	ldr.w	r3, [r9], #4
 800a448:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a44c:	0c1b      	lsrs	r3, r3, #16
 800a44e:	fb0a b303 	mla	r3, sl, r3, fp
 800a452:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a456:	454f      	cmp	r7, r9
 800a458:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a45c:	d805      	bhi.n	800a46a <__multiply+0x124>
 800a45e:	f8c8 3004 	str.w	r3, [r8, #4]
 800a462:	3504      	adds	r5, #4
 800a464:	e79b      	b.n	800a39e <__multiply+0x58>
 800a466:	46d4      	mov	ip, sl
 800a468:	e7b3      	b.n	800a3d2 <__multiply+0x8c>
 800a46a:	46e0      	mov	r8, ip
 800a46c:	e7dd      	b.n	800a42a <__multiply+0xe4>
 800a46e:	3e01      	subs	r6, #1
 800a470:	e799      	b.n	800a3a6 <__multiply+0x60>
	...

0800a474 <__pow5mult>:
 800a474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a478:	4615      	mov	r5, r2
 800a47a:	f012 0203 	ands.w	r2, r2, #3
 800a47e:	4606      	mov	r6, r0
 800a480:	460f      	mov	r7, r1
 800a482:	d007      	beq.n	800a494 <__pow5mult+0x20>
 800a484:	3a01      	subs	r2, #1
 800a486:	4c21      	ldr	r4, [pc, #132]	; (800a50c <__pow5mult+0x98>)
 800a488:	2300      	movs	r3, #0
 800a48a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a48e:	f7ff fe8a 	bl	800a1a6 <__multadd>
 800a492:	4607      	mov	r7, r0
 800a494:	10ad      	asrs	r5, r5, #2
 800a496:	d035      	beq.n	800a504 <__pow5mult+0x90>
 800a498:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a49a:	b93c      	cbnz	r4, 800a4ac <__pow5mult+0x38>
 800a49c:	2010      	movs	r0, #16
 800a49e:	f7ff fe1d 	bl	800a0dc <malloc>
 800a4a2:	6270      	str	r0, [r6, #36]	; 0x24
 800a4a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4a8:	6004      	str	r4, [r0, #0]
 800a4aa:	60c4      	str	r4, [r0, #12]
 800a4ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a4b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4b4:	b94c      	cbnz	r4, 800a4ca <__pow5mult+0x56>
 800a4b6:	f240 2171 	movw	r1, #625	; 0x271
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	f7ff ff3a 	bl	800a334 <__i2b>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	6003      	str	r3, [r0, #0]
 800a4ca:	f04f 0800 	mov.w	r8, #0
 800a4ce:	07eb      	lsls	r3, r5, #31
 800a4d0:	d50a      	bpl.n	800a4e8 <__pow5mult+0x74>
 800a4d2:	4639      	mov	r1, r7
 800a4d4:	4622      	mov	r2, r4
 800a4d6:	4630      	mov	r0, r6
 800a4d8:	f7ff ff35 	bl	800a346 <__multiply>
 800a4dc:	4639      	mov	r1, r7
 800a4de:	4681      	mov	r9, r0
 800a4e0:	4630      	mov	r0, r6
 800a4e2:	f7ff fe49 	bl	800a178 <_Bfree>
 800a4e6:	464f      	mov	r7, r9
 800a4e8:	106d      	asrs	r5, r5, #1
 800a4ea:	d00b      	beq.n	800a504 <__pow5mult+0x90>
 800a4ec:	6820      	ldr	r0, [r4, #0]
 800a4ee:	b938      	cbnz	r0, 800a500 <__pow5mult+0x8c>
 800a4f0:	4622      	mov	r2, r4
 800a4f2:	4621      	mov	r1, r4
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	f7ff ff26 	bl	800a346 <__multiply>
 800a4fa:	6020      	str	r0, [r4, #0]
 800a4fc:	f8c0 8000 	str.w	r8, [r0]
 800a500:	4604      	mov	r4, r0
 800a502:	e7e4      	b.n	800a4ce <__pow5mult+0x5a>
 800a504:	4638      	mov	r0, r7
 800a506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a50a:	bf00      	nop
 800a50c:	0800b128 	.word	0x0800b128

0800a510 <__lshift>:
 800a510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a514:	460c      	mov	r4, r1
 800a516:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a51a:	6923      	ldr	r3, [r4, #16]
 800a51c:	6849      	ldr	r1, [r1, #4]
 800a51e:	eb0a 0903 	add.w	r9, sl, r3
 800a522:	68a3      	ldr	r3, [r4, #8]
 800a524:	4607      	mov	r7, r0
 800a526:	4616      	mov	r6, r2
 800a528:	f109 0501 	add.w	r5, r9, #1
 800a52c:	42ab      	cmp	r3, r5
 800a52e:	db32      	blt.n	800a596 <__lshift+0x86>
 800a530:	4638      	mov	r0, r7
 800a532:	f7ff fded 	bl	800a110 <_Balloc>
 800a536:	2300      	movs	r3, #0
 800a538:	4680      	mov	r8, r0
 800a53a:	f100 0114 	add.w	r1, r0, #20
 800a53e:	461a      	mov	r2, r3
 800a540:	4553      	cmp	r3, sl
 800a542:	db2b      	blt.n	800a59c <__lshift+0x8c>
 800a544:	6920      	ldr	r0, [r4, #16]
 800a546:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a54a:	f104 0314 	add.w	r3, r4, #20
 800a54e:	f016 021f 	ands.w	r2, r6, #31
 800a552:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a556:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a55a:	d025      	beq.n	800a5a8 <__lshift+0x98>
 800a55c:	f1c2 0e20 	rsb	lr, r2, #32
 800a560:	2000      	movs	r0, #0
 800a562:	681e      	ldr	r6, [r3, #0]
 800a564:	468a      	mov	sl, r1
 800a566:	4096      	lsls	r6, r2
 800a568:	4330      	orrs	r0, r6
 800a56a:	f84a 0b04 	str.w	r0, [sl], #4
 800a56e:	f853 0b04 	ldr.w	r0, [r3], #4
 800a572:	459c      	cmp	ip, r3
 800a574:	fa20 f00e 	lsr.w	r0, r0, lr
 800a578:	d814      	bhi.n	800a5a4 <__lshift+0x94>
 800a57a:	6048      	str	r0, [r1, #4]
 800a57c:	b108      	cbz	r0, 800a582 <__lshift+0x72>
 800a57e:	f109 0502 	add.w	r5, r9, #2
 800a582:	3d01      	subs	r5, #1
 800a584:	4638      	mov	r0, r7
 800a586:	f8c8 5010 	str.w	r5, [r8, #16]
 800a58a:	4621      	mov	r1, r4
 800a58c:	f7ff fdf4 	bl	800a178 <_Bfree>
 800a590:	4640      	mov	r0, r8
 800a592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a596:	3101      	adds	r1, #1
 800a598:	005b      	lsls	r3, r3, #1
 800a59a:	e7c7      	b.n	800a52c <__lshift+0x1c>
 800a59c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	e7cd      	b.n	800a540 <__lshift+0x30>
 800a5a4:	4651      	mov	r1, sl
 800a5a6:	e7dc      	b.n	800a562 <__lshift+0x52>
 800a5a8:	3904      	subs	r1, #4
 800a5aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5ae:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5b2:	459c      	cmp	ip, r3
 800a5b4:	d8f9      	bhi.n	800a5aa <__lshift+0x9a>
 800a5b6:	e7e4      	b.n	800a582 <__lshift+0x72>

0800a5b8 <__mcmp>:
 800a5b8:	6903      	ldr	r3, [r0, #16]
 800a5ba:	690a      	ldr	r2, [r1, #16]
 800a5bc:	1a9b      	subs	r3, r3, r2
 800a5be:	b530      	push	{r4, r5, lr}
 800a5c0:	d10c      	bne.n	800a5dc <__mcmp+0x24>
 800a5c2:	0092      	lsls	r2, r2, #2
 800a5c4:	3014      	adds	r0, #20
 800a5c6:	3114      	adds	r1, #20
 800a5c8:	1884      	adds	r4, r0, r2
 800a5ca:	4411      	add	r1, r2
 800a5cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a5d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a5d4:	4295      	cmp	r5, r2
 800a5d6:	d003      	beq.n	800a5e0 <__mcmp+0x28>
 800a5d8:	d305      	bcc.n	800a5e6 <__mcmp+0x2e>
 800a5da:	2301      	movs	r3, #1
 800a5dc:	4618      	mov	r0, r3
 800a5de:	bd30      	pop	{r4, r5, pc}
 800a5e0:	42a0      	cmp	r0, r4
 800a5e2:	d3f3      	bcc.n	800a5cc <__mcmp+0x14>
 800a5e4:	e7fa      	b.n	800a5dc <__mcmp+0x24>
 800a5e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5ea:	e7f7      	b.n	800a5dc <__mcmp+0x24>

0800a5ec <__mdiff>:
 800a5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f0:	460d      	mov	r5, r1
 800a5f2:	4607      	mov	r7, r0
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	4614      	mov	r4, r2
 800a5fa:	f7ff ffdd 	bl	800a5b8 <__mcmp>
 800a5fe:	1e06      	subs	r6, r0, #0
 800a600:	d108      	bne.n	800a614 <__mdiff+0x28>
 800a602:	4631      	mov	r1, r6
 800a604:	4638      	mov	r0, r7
 800a606:	f7ff fd83 	bl	800a110 <_Balloc>
 800a60a:	2301      	movs	r3, #1
 800a60c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a614:	bfa4      	itt	ge
 800a616:	4623      	movge	r3, r4
 800a618:	462c      	movge	r4, r5
 800a61a:	4638      	mov	r0, r7
 800a61c:	6861      	ldr	r1, [r4, #4]
 800a61e:	bfa6      	itte	ge
 800a620:	461d      	movge	r5, r3
 800a622:	2600      	movge	r6, #0
 800a624:	2601      	movlt	r6, #1
 800a626:	f7ff fd73 	bl	800a110 <_Balloc>
 800a62a:	692b      	ldr	r3, [r5, #16]
 800a62c:	60c6      	str	r6, [r0, #12]
 800a62e:	6926      	ldr	r6, [r4, #16]
 800a630:	f105 0914 	add.w	r9, r5, #20
 800a634:	f104 0214 	add.w	r2, r4, #20
 800a638:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a63c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a640:	f100 0514 	add.w	r5, r0, #20
 800a644:	f04f 0e00 	mov.w	lr, #0
 800a648:	f852 ab04 	ldr.w	sl, [r2], #4
 800a64c:	f859 4b04 	ldr.w	r4, [r9], #4
 800a650:	fa1e f18a 	uxtah	r1, lr, sl
 800a654:	b2a3      	uxth	r3, r4
 800a656:	1ac9      	subs	r1, r1, r3
 800a658:	0c23      	lsrs	r3, r4, #16
 800a65a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a65e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a662:	b289      	uxth	r1, r1
 800a664:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a668:	45c8      	cmp	r8, r9
 800a66a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a66e:	4694      	mov	ip, r2
 800a670:	f845 3b04 	str.w	r3, [r5], #4
 800a674:	d8e8      	bhi.n	800a648 <__mdiff+0x5c>
 800a676:	45bc      	cmp	ip, r7
 800a678:	d304      	bcc.n	800a684 <__mdiff+0x98>
 800a67a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a67e:	b183      	cbz	r3, 800a6a2 <__mdiff+0xb6>
 800a680:	6106      	str	r6, [r0, #16]
 800a682:	e7c5      	b.n	800a610 <__mdiff+0x24>
 800a684:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a688:	fa1e f381 	uxtah	r3, lr, r1
 800a68c:	141a      	asrs	r2, r3, #16
 800a68e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a692:	b29b      	uxth	r3, r3
 800a694:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a698:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a69c:	f845 3b04 	str.w	r3, [r5], #4
 800a6a0:	e7e9      	b.n	800a676 <__mdiff+0x8a>
 800a6a2:	3e01      	subs	r6, #1
 800a6a4:	e7e9      	b.n	800a67a <__mdiff+0x8e>
	...

0800a6a8 <__ulp>:
 800a6a8:	4b12      	ldr	r3, [pc, #72]	; (800a6f4 <__ulp+0x4c>)
 800a6aa:	ee10 2a90 	vmov	r2, s1
 800a6ae:	401a      	ands	r2, r3
 800a6b0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	dd04      	ble.n	800a6c2 <__ulp+0x1a>
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	ec41 0b10 	vmov	d0, r0, r1
 800a6c0:	4770      	bx	lr
 800a6c2:	425b      	negs	r3, r3
 800a6c4:	151b      	asrs	r3, r3, #20
 800a6c6:	2b13      	cmp	r3, #19
 800a6c8:	f04f 0000 	mov.w	r0, #0
 800a6cc:	f04f 0100 	mov.w	r1, #0
 800a6d0:	dc04      	bgt.n	800a6dc <__ulp+0x34>
 800a6d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a6d6:	fa42 f103 	asr.w	r1, r2, r3
 800a6da:	e7ef      	b.n	800a6bc <__ulp+0x14>
 800a6dc:	3b14      	subs	r3, #20
 800a6de:	2b1e      	cmp	r3, #30
 800a6e0:	f04f 0201 	mov.w	r2, #1
 800a6e4:	bfda      	itte	le
 800a6e6:	f1c3 031f 	rsble	r3, r3, #31
 800a6ea:	fa02 f303 	lslle.w	r3, r2, r3
 800a6ee:	4613      	movgt	r3, r2
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	e7e3      	b.n	800a6bc <__ulp+0x14>
 800a6f4:	7ff00000 	.word	0x7ff00000

0800a6f8 <__b2d>:
 800a6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6fa:	6905      	ldr	r5, [r0, #16]
 800a6fc:	f100 0714 	add.w	r7, r0, #20
 800a700:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a704:	1f2e      	subs	r6, r5, #4
 800a706:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a70a:	4620      	mov	r0, r4
 800a70c:	f7ff fdc4 	bl	800a298 <__hi0bits>
 800a710:	f1c0 0320 	rsb	r3, r0, #32
 800a714:	280a      	cmp	r0, #10
 800a716:	600b      	str	r3, [r1, #0]
 800a718:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a790 <__b2d+0x98>
 800a71c:	dc14      	bgt.n	800a748 <__b2d+0x50>
 800a71e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a722:	fa24 f10e 	lsr.w	r1, r4, lr
 800a726:	42b7      	cmp	r7, r6
 800a728:	ea41 030c 	orr.w	r3, r1, ip
 800a72c:	bf34      	ite	cc
 800a72e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a732:	2100      	movcs	r1, #0
 800a734:	3015      	adds	r0, #21
 800a736:	fa04 f000 	lsl.w	r0, r4, r0
 800a73a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a73e:	ea40 0201 	orr.w	r2, r0, r1
 800a742:	ec43 2b10 	vmov	d0, r2, r3
 800a746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a748:	42b7      	cmp	r7, r6
 800a74a:	bf3a      	itte	cc
 800a74c:	f1a5 0608 	subcc.w	r6, r5, #8
 800a750:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a754:	2100      	movcs	r1, #0
 800a756:	380b      	subs	r0, #11
 800a758:	d015      	beq.n	800a786 <__b2d+0x8e>
 800a75a:	4084      	lsls	r4, r0
 800a75c:	f1c0 0520 	rsb	r5, r0, #32
 800a760:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800a764:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800a768:	42be      	cmp	r6, r7
 800a76a:	fa21 fc05 	lsr.w	ip, r1, r5
 800a76e:	ea44 030c 	orr.w	r3, r4, ip
 800a772:	bf8c      	ite	hi
 800a774:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a778:	2400      	movls	r4, #0
 800a77a:	fa01 f000 	lsl.w	r0, r1, r0
 800a77e:	40ec      	lsrs	r4, r5
 800a780:	ea40 0204 	orr.w	r2, r0, r4
 800a784:	e7dd      	b.n	800a742 <__b2d+0x4a>
 800a786:	ea44 030c 	orr.w	r3, r4, ip
 800a78a:	460a      	mov	r2, r1
 800a78c:	e7d9      	b.n	800a742 <__b2d+0x4a>
 800a78e:	bf00      	nop
 800a790:	3ff00000 	.word	0x3ff00000

0800a794 <__d2b>:
 800a794:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a798:	460e      	mov	r6, r1
 800a79a:	2101      	movs	r1, #1
 800a79c:	ec59 8b10 	vmov	r8, r9, d0
 800a7a0:	4615      	mov	r5, r2
 800a7a2:	f7ff fcb5 	bl	800a110 <_Balloc>
 800a7a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a7aa:	4607      	mov	r7, r0
 800a7ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7b0:	bb34      	cbnz	r4, 800a800 <__d2b+0x6c>
 800a7b2:	9301      	str	r3, [sp, #4]
 800a7b4:	f1b8 0300 	subs.w	r3, r8, #0
 800a7b8:	d027      	beq.n	800a80a <__d2b+0x76>
 800a7ba:	a802      	add	r0, sp, #8
 800a7bc:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a7c0:	f7ff fd89 	bl	800a2d6 <__lo0bits>
 800a7c4:	9900      	ldr	r1, [sp, #0]
 800a7c6:	b1f0      	cbz	r0, 800a806 <__d2b+0x72>
 800a7c8:	9a01      	ldr	r2, [sp, #4]
 800a7ca:	f1c0 0320 	rsb	r3, r0, #32
 800a7ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a7d2:	430b      	orrs	r3, r1
 800a7d4:	40c2      	lsrs	r2, r0
 800a7d6:	617b      	str	r3, [r7, #20]
 800a7d8:	9201      	str	r2, [sp, #4]
 800a7da:	9b01      	ldr	r3, [sp, #4]
 800a7dc:	61bb      	str	r3, [r7, #24]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	bf14      	ite	ne
 800a7e2:	2102      	movne	r1, #2
 800a7e4:	2101      	moveq	r1, #1
 800a7e6:	6139      	str	r1, [r7, #16]
 800a7e8:	b1c4      	cbz	r4, 800a81c <__d2b+0x88>
 800a7ea:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a7ee:	4404      	add	r4, r0
 800a7f0:	6034      	str	r4, [r6, #0]
 800a7f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7f6:	6028      	str	r0, [r5, #0]
 800a7f8:	4638      	mov	r0, r7
 800a7fa:	b003      	add	sp, #12
 800a7fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a800:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a804:	e7d5      	b.n	800a7b2 <__d2b+0x1e>
 800a806:	6179      	str	r1, [r7, #20]
 800a808:	e7e7      	b.n	800a7da <__d2b+0x46>
 800a80a:	a801      	add	r0, sp, #4
 800a80c:	f7ff fd63 	bl	800a2d6 <__lo0bits>
 800a810:	9b01      	ldr	r3, [sp, #4]
 800a812:	617b      	str	r3, [r7, #20]
 800a814:	2101      	movs	r1, #1
 800a816:	6139      	str	r1, [r7, #16]
 800a818:	3020      	adds	r0, #32
 800a81a:	e7e5      	b.n	800a7e8 <__d2b+0x54>
 800a81c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a820:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a824:	6030      	str	r0, [r6, #0]
 800a826:	6918      	ldr	r0, [r3, #16]
 800a828:	f7ff fd36 	bl	800a298 <__hi0bits>
 800a82c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a830:	e7e1      	b.n	800a7f6 <__d2b+0x62>

0800a832 <__ratio>:
 800a832:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a836:	4688      	mov	r8, r1
 800a838:	4669      	mov	r1, sp
 800a83a:	4681      	mov	r9, r0
 800a83c:	f7ff ff5c 	bl	800a6f8 <__b2d>
 800a840:	a901      	add	r1, sp, #4
 800a842:	4640      	mov	r0, r8
 800a844:	ec57 6b10 	vmov	r6, r7, d0
 800a848:	f7ff ff56 	bl	800a6f8 <__b2d>
 800a84c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a850:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a854:	eba3 0c02 	sub.w	ip, r3, r2
 800a858:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a85c:	1a9b      	subs	r3, r3, r2
 800a85e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a862:	ec5b ab10 	vmov	sl, fp, d0
 800a866:	2b00      	cmp	r3, #0
 800a868:	bfce      	itee	gt
 800a86a:	463a      	movgt	r2, r7
 800a86c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a870:	465a      	movle	r2, fp
 800a872:	4659      	mov	r1, fp
 800a874:	463d      	mov	r5, r7
 800a876:	bfd4      	ite	le
 800a878:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a87c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800a880:	4630      	mov	r0, r6
 800a882:	ee10 2a10 	vmov	r2, s0
 800a886:	460b      	mov	r3, r1
 800a888:	4629      	mov	r1, r5
 800a88a:	f7f5 ffe7 	bl	800085c <__aeabi_ddiv>
 800a88e:	ec41 0b10 	vmov	d0, r0, r1
 800a892:	b003      	add	sp, #12
 800a894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a898 <__copybits>:
 800a898:	3901      	subs	r1, #1
 800a89a:	b510      	push	{r4, lr}
 800a89c:	1149      	asrs	r1, r1, #5
 800a89e:	6914      	ldr	r4, [r2, #16]
 800a8a0:	3101      	adds	r1, #1
 800a8a2:	f102 0314 	add.w	r3, r2, #20
 800a8a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a8aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a8ae:	42a3      	cmp	r3, r4
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	d303      	bcc.n	800a8bc <__copybits+0x24>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	428a      	cmp	r2, r1
 800a8b8:	d305      	bcc.n	800a8c6 <__copybits+0x2e>
 800a8ba:	bd10      	pop	{r4, pc}
 800a8bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8c0:	f840 2b04 	str.w	r2, [r0], #4
 800a8c4:	e7f3      	b.n	800a8ae <__copybits+0x16>
 800a8c6:	f842 3b04 	str.w	r3, [r2], #4
 800a8ca:	e7f4      	b.n	800a8b6 <__copybits+0x1e>

0800a8cc <__any_on>:
 800a8cc:	f100 0214 	add.w	r2, r0, #20
 800a8d0:	6900      	ldr	r0, [r0, #16]
 800a8d2:	114b      	asrs	r3, r1, #5
 800a8d4:	4298      	cmp	r0, r3
 800a8d6:	b510      	push	{r4, lr}
 800a8d8:	db11      	blt.n	800a8fe <__any_on+0x32>
 800a8da:	dd0a      	ble.n	800a8f2 <__any_on+0x26>
 800a8dc:	f011 011f 	ands.w	r1, r1, #31
 800a8e0:	d007      	beq.n	800a8f2 <__any_on+0x26>
 800a8e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a8e6:	fa24 f001 	lsr.w	r0, r4, r1
 800a8ea:	fa00 f101 	lsl.w	r1, r0, r1
 800a8ee:	428c      	cmp	r4, r1
 800a8f0:	d10b      	bne.n	800a90a <__any_on+0x3e>
 800a8f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d803      	bhi.n	800a902 <__any_on+0x36>
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	bd10      	pop	{r4, pc}
 800a8fe:	4603      	mov	r3, r0
 800a900:	e7f7      	b.n	800a8f2 <__any_on+0x26>
 800a902:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a906:	2900      	cmp	r1, #0
 800a908:	d0f5      	beq.n	800a8f6 <__any_on+0x2a>
 800a90a:	2001      	movs	r0, #1
 800a90c:	e7f6      	b.n	800a8fc <__any_on+0x30>

0800a90e <_calloc_r>:
 800a90e:	b538      	push	{r3, r4, r5, lr}
 800a910:	fb02 f401 	mul.w	r4, r2, r1
 800a914:	4621      	mov	r1, r4
 800a916:	f000 f857 	bl	800a9c8 <_malloc_r>
 800a91a:	4605      	mov	r5, r0
 800a91c:	b118      	cbz	r0, 800a926 <_calloc_r+0x18>
 800a91e:	4622      	mov	r2, r4
 800a920:	2100      	movs	r1, #0
 800a922:	f7fc fd40 	bl	80073a6 <memset>
 800a926:	4628      	mov	r0, r5
 800a928:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a92c <_free_r>:
 800a92c:	b538      	push	{r3, r4, r5, lr}
 800a92e:	4605      	mov	r5, r0
 800a930:	2900      	cmp	r1, #0
 800a932:	d045      	beq.n	800a9c0 <_free_r+0x94>
 800a934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a938:	1f0c      	subs	r4, r1, #4
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	bfb8      	it	lt
 800a93e:	18e4      	addlt	r4, r4, r3
 800a940:	f000 fa36 	bl	800adb0 <__malloc_lock>
 800a944:	4a1f      	ldr	r2, [pc, #124]	; (800a9c4 <_free_r+0x98>)
 800a946:	6813      	ldr	r3, [r2, #0]
 800a948:	4610      	mov	r0, r2
 800a94a:	b933      	cbnz	r3, 800a95a <_free_r+0x2e>
 800a94c:	6063      	str	r3, [r4, #4]
 800a94e:	6014      	str	r4, [r2, #0]
 800a950:	4628      	mov	r0, r5
 800a952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a956:	f000 ba2c 	b.w	800adb2 <__malloc_unlock>
 800a95a:	42a3      	cmp	r3, r4
 800a95c:	d90c      	bls.n	800a978 <_free_r+0x4c>
 800a95e:	6821      	ldr	r1, [r4, #0]
 800a960:	1862      	adds	r2, r4, r1
 800a962:	4293      	cmp	r3, r2
 800a964:	bf04      	itt	eq
 800a966:	681a      	ldreq	r2, [r3, #0]
 800a968:	685b      	ldreq	r3, [r3, #4]
 800a96a:	6063      	str	r3, [r4, #4]
 800a96c:	bf04      	itt	eq
 800a96e:	1852      	addeq	r2, r2, r1
 800a970:	6022      	streq	r2, [r4, #0]
 800a972:	6004      	str	r4, [r0, #0]
 800a974:	e7ec      	b.n	800a950 <_free_r+0x24>
 800a976:	4613      	mov	r3, r2
 800a978:	685a      	ldr	r2, [r3, #4]
 800a97a:	b10a      	cbz	r2, 800a980 <_free_r+0x54>
 800a97c:	42a2      	cmp	r2, r4
 800a97e:	d9fa      	bls.n	800a976 <_free_r+0x4a>
 800a980:	6819      	ldr	r1, [r3, #0]
 800a982:	1858      	adds	r0, r3, r1
 800a984:	42a0      	cmp	r0, r4
 800a986:	d10b      	bne.n	800a9a0 <_free_r+0x74>
 800a988:	6820      	ldr	r0, [r4, #0]
 800a98a:	4401      	add	r1, r0
 800a98c:	1858      	adds	r0, r3, r1
 800a98e:	4282      	cmp	r2, r0
 800a990:	6019      	str	r1, [r3, #0]
 800a992:	d1dd      	bne.n	800a950 <_free_r+0x24>
 800a994:	6810      	ldr	r0, [r2, #0]
 800a996:	6852      	ldr	r2, [r2, #4]
 800a998:	605a      	str	r2, [r3, #4]
 800a99a:	4401      	add	r1, r0
 800a99c:	6019      	str	r1, [r3, #0]
 800a99e:	e7d7      	b.n	800a950 <_free_r+0x24>
 800a9a0:	d902      	bls.n	800a9a8 <_free_r+0x7c>
 800a9a2:	230c      	movs	r3, #12
 800a9a4:	602b      	str	r3, [r5, #0]
 800a9a6:	e7d3      	b.n	800a950 <_free_r+0x24>
 800a9a8:	6820      	ldr	r0, [r4, #0]
 800a9aa:	1821      	adds	r1, r4, r0
 800a9ac:	428a      	cmp	r2, r1
 800a9ae:	bf04      	itt	eq
 800a9b0:	6811      	ldreq	r1, [r2, #0]
 800a9b2:	6852      	ldreq	r2, [r2, #4]
 800a9b4:	6062      	str	r2, [r4, #4]
 800a9b6:	bf04      	itt	eq
 800a9b8:	1809      	addeq	r1, r1, r0
 800a9ba:	6021      	streq	r1, [r4, #0]
 800a9bc:	605c      	str	r4, [r3, #4]
 800a9be:	e7c7      	b.n	800a950 <_free_r+0x24>
 800a9c0:	bd38      	pop	{r3, r4, r5, pc}
 800a9c2:	bf00      	nop
 800a9c4:	20004b2c 	.word	0x20004b2c

0800a9c8 <_malloc_r>:
 800a9c8:	b570      	push	{r4, r5, r6, lr}
 800a9ca:	1ccd      	adds	r5, r1, #3
 800a9cc:	f025 0503 	bic.w	r5, r5, #3
 800a9d0:	3508      	adds	r5, #8
 800a9d2:	2d0c      	cmp	r5, #12
 800a9d4:	bf38      	it	cc
 800a9d6:	250c      	movcc	r5, #12
 800a9d8:	2d00      	cmp	r5, #0
 800a9da:	4606      	mov	r6, r0
 800a9dc:	db01      	blt.n	800a9e2 <_malloc_r+0x1a>
 800a9de:	42a9      	cmp	r1, r5
 800a9e0:	d903      	bls.n	800a9ea <_malloc_r+0x22>
 800a9e2:	230c      	movs	r3, #12
 800a9e4:	6033      	str	r3, [r6, #0]
 800a9e6:	2000      	movs	r0, #0
 800a9e8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ea:	f000 f9e1 	bl	800adb0 <__malloc_lock>
 800a9ee:	4a21      	ldr	r2, [pc, #132]	; (800aa74 <_malloc_r+0xac>)
 800a9f0:	6814      	ldr	r4, [r2, #0]
 800a9f2:	4621      	mov	r1, r4
 800a9f4:	b991      	cbnz	r1, 800aa1c <_malloc_r+0x54>
 800a9f6:	4c20      	ldr	r4, [pc, #128]	; (800aa78 <_malloc_r+0xb0>)
 800a9f8:	6823      	ldr	r3, [r4, #0]
 800a9fa:	b91b      	cbnz	r3, 800aa04 <_malloc_r+0x3c>
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	f000 f98f 	bl	800ad20 <_sbrk_r>
 800aa02:	6020      	str	r0, [r4, #0]
 800aa04:	4629      	mov	r1, r5
 800aa06:	4630      	mov	r0, r6
 800aa08:	f000 f98a 	bl	800ad20 <_sbrk_r>
 800aa0c:	1c43      	adds	r3, r0, #1
 800aa0e:	d124      	bne.n	800aa5a <_malloc_r+0x92>
 800aa10:	230c      	movs	r3, #12
 800aa12:	6033      	str	r3, [r6, #0]
 800aa14:	4630      	mov	r0, r6
 800aa16:	f000 f9cc 	bl	800adb2 <__malloc_unlock>
 800aa1a:	e7e4      	b.n	800a9e6 <_malloc_r+0x1e>
 800aa1c:	680b      	ldr	r3, [r1, #0]
 800aa1e:	1b5b      	subs	r3, r3, r5
 800aa20:	d418      	bmi.n	800aa54 <_malloc_r+0x8c>
 800aa22:	2b0b      	cmp	r3, #11
 800aa24:	d90f      	bls.n	800aa46 <_malloc_r+0x7e>
 800aa26:	600b      	str	r3, [r1, #0]
 800aa28:	50cd      	str	r5, [r1, r3]
 800aa2a:	18cc      	adds	r4, r1, r3
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	f000 f9c0 	bl	800adb2 <__malloc_unlock>
 800aa32:	f104 000b 	add.w	r0, r4, #11
 800aa36:	1d23      	adds	r3, r4, #4
 800aa38:	f020 0007 	bic.w	r0, r0, #7
 800aa3c:	1ac3      	subs	r3, r0, r3
 800aa3e:	d0d3      	beq.n	800a9e8 <_malloc_r+0x20>
 800aa40:	425a      	negs	r2, r3
 800aa42:	50e2      	str	r2, [r4, r3]
 800aa44:	e7d0      	b.n	800a9e8 <_malloc_r+0x20>
 800aa46:	428c      	cmp	r4, r1
 800aa48:	684b      	ldr	r3, [r1, #4]
 800aa4a:	bf16      	itet	ne
 800aa4c:	6063      	strne	r3, [r4, #4]
 800aa4e:	6013      	streq	r3, [r2, #0]
 800aa50:	460c      	movne	r4, r1
 800aa52:	e7eb      	b.n	800aa2c <_malloc_r+0x64>
 800aa54:	460c      	mov	r4, r1
 800aa56:	6849      	ldr	r1, [r1, #4]
 800aa58:	e7cc      	b.n	800a9f4 <_malloc_r+0x2c>
 800aa5a:	1cc4      	adds	r4, r0, #3
 800aa5c:	f024 0403 	bic.w	r4, r4, #3
 800aa60:	42a0      	cmp	r0, r4
 800aa62:	d005      	beq.n	800aa70 <_malloc_r+0xa8>
 800aa64:	1a21      	subs	r1, r4, r0
 800aa66:	4630      	mov	r0, r6
 800aa68:	f000 f95a 	bl	800ad20 <_sbrk_r>
 800aa6c:	3001      	adds	r0, #1
 800aa6e:	d0cf      	beq.n	800aa10 <_malloc_r+0x48>
 800aa70:	6025      	str	r5, [r4, #0]
 800aa72:	e7db      	b.n	800aa2c <_malloc_r+0x64>
 800aa74:	20004b2c 	.word	0x20004b2c
 800aa78:	20004b30 	.word	0x20004b30

0800aa7c <__ssputs_r>:
 800aa7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa80:	688e      	ldr	r6, [r1, #8]
 800aa82:	429e      	cmp	r6, r3
 800aa84:	4682      	mov	sl, r0
 800aa86:	460c      	mov	r4, r1
 800aa88:	4690      	mov	r8, r2
 800aa8a:	4699      	mov	r9, r3
 800aa8c:	d837      	bhi.n	800aafe <__ssputs_r+0x82>
 800aa8e:	898a      	ldrh	r2, [r1, #12]
 800aa90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa94:	d031      	beq.n	800aafa <__ssputs_r+0x7e>
 800aa96:	6825      	ldr	r5, [r4, #0]
 800aa98:	6909      	ldr	r1, [r1, #16]
 800aa9a:	1a6f      	subs	r7, r5, r1
 800aa9c:	6965      	ldr	r5, [r4, #20]
 800aa9e:	2302      	movs	r3, #2
 800aaa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aaa4:	fb95 f5f3 	sdiv	r5, r5, r3
 800aaa8:	f109 0301 	add.w	r3, r9, #1
 800aaac:	443b      	add	r3, r7
 800aaae:	429d      	cmp	r5, r3
 800aab0:	bf38      	it	cc
 800aab2:	461d      	movcc	r5, r3
 800aab4:	0553      	lsls	r3, r2, #21
 800aab6:	d530      	bpl.n	800ab1a <__ssputs_r+0x9e>
 800aab8:	4629      	mov	r1, r5
 800aaba:	f7ff ff85 	bl	800a9c8 <_malloc_r>
 800aabe:	4606      	mov	r6, r0
 800aac0:	b950      	cbnz	r0, 800aad8 <__ssputs_r+0x5c>
 800aac2:	230c      	movs	r3, #12
 800aac4:	f8ca 3000 	str.w	r3, [sl]
 800aac8:	89a3      	ldrh	r3, [r4, #12]
 800aaca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aace:	81a3      	strh	r3, [r4, #12]
 800aad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aad8:	463a      	mov	r2, r7
 800aada:	6921      	ldr	r1, [r4, #16]
 800aadc:	f7fc fc58 	bl	8007390 <memcpy>
 800aae0:	89a3      	ldrh	r3, [r4, #12]
 800aae2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaea:	81a3      	strh	r3, [r4, #12]
 800aaec:	6126      	str	r6, [r4, #16]
 800aaee:	6165      	str	r5, [r4, #20]
 800aaf0:	443e      	add	r6, r7
 800aaf2:	1bed      	subs	r5, r5, r7
 800aaf4:	6026      	str	r6, [r4, #0]
 800aaf6:	60a5      	str	r5, [r4, #8]
 800aaf8:	464e      	mov	r6, r9
 800aafa:	454e      	cmp	r6, r9
 800aafc:	d900      	bls.n	800ab00 <__ssputs_r+0x84>
 800aafe:	464e      	mov	r6, r9
 800ab00:	4632      	mov	r2, r6
 800ab02:	4641      	mov	r1, r8
 800ab04:	6820      	ldr	r0, [r4, #0]
 800ab06:	f000 f93a 	bl	800ad7e <memmove>
 800ab0a:	68a3      	ldr	r3, [r4, #8]
 800ab0c:	1b9b      	subs	r3, r3, r6
 800ab0e:	60a3      	str	r3, [r4, #8]
 800ab10:	6823      	ldr	r3, [r4, #0]
 800ab12:	441e      	add	r6, r3
 800ab14:	6026      	str	r6, [r4, #0]
 800ab16:	2000      	movs	r0, #0
 800ab18:	e7dc      	b.n	800aad4 <__ssputs_r+0x58>
 800ab1a:	462a      	mov	r2, r5
 800ab1c:	f000 f94a 	bl	800adb4 <_realloc_r>
 800ab20:	4606      	mov	r6, r0
 800ab22:	2800      	cmp	r0, #0
 800ab24:	d1e2      	bne.n	800aaec <__ssputs_r+0x70>
 800ab26:	6921      	ldr	r1, [r4, #16]
 800ab28:	4650      	mov	r0, sl
 800ab2a:	f7ff feff 	bl	800a92c <_free_r>
 800ab2e:	e7c8      	b.n	800aac2 <__ssputs_r+0x46>

0800ab30 <_svfiprintf_r>:
 800ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab34:	461d      	mov	r5, r3
 800ab36:	898b      	ldrh	r3, [r1, #12]
 800ab38:	061f      	lsls	r7, r3, #24
 800ab3a:	b09d      	sub	sp, #116	; 0x74
 800ab3c:	4680      	mov	r8, r0
 800ab3e:	460c      	mov	r4, r1
 800ab40:	4616      	mov	r6, r2
 800ab42:	d50f      	bpl.n	800ab64 <_svfiprintf_r+0x34>
 800ab44:	690b      	ldr	r3, [r1, #16]
 800ab46:	b96b      	cbnz	r3, 800ab64 <_svfiprintf_r+0x34>
 800ab48:	2140      	movs	r1, #64	; 0x40
 800ab4a:	f7ff ff3d 	bl	800a9c8 <_malloc_r>
 800ab4e:	6020      	str	r0, [r4, #0]
 800ab50:	6120      	str	r0, [r4, #16]
 800ab52:	b928      	cbnz	r0, 800ab60 <_svfiprintf_r+0x30>
 800ab54:	230c      	movs	r3, #12
 800ab56:	f8c8 3000 	str.w	r3, [r8]
 800ab5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab5e:	e0c8      	b.n	800acf2 <_svfiprintf_r+0x1c2>
 800ab60:	2340      	movs	r3, #64	; 0x40
 800ab62:	6163      	str	r3, [r4, #20]
 800ab64:	2300      	movs	r3, #0
 800ab66:	9309      	str	r3, [sp, #36]	; 0x24
 800ab68:	2320      	movs	r3, #32
 800ab6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab6e:	2330      	movs	r3, #48	; 0x30
 800ab70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab74:	9503      	str	r5, [sp, #12]
 800ab76:	f04f 0b01 	mov.w	fp, #1
 800ab7a:	4637      	mov	r7, r6
 800ab7c:	463d      	mov	r5, r7
 800ab7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ab82:	b10b      	cbz	r3, 800ab88 <_svfiprintf_r+0x58>
 800ab84:	2b25      	cmp	r3, #37	; 0x25
 800ab86:	d13e      	bne.n	800ac06 <_svfiprintf_r+0xd6>
 800ab88:	ebb7 0a06 	subs.w	sl, r7, r6
 800ab8c:	d00b      	beq.n	800aba6 <_svfiprintf_r+0x76>
 800ab8e:	4653      	mov	r3, sl
 800ab90:	4632      	mov	r2, r6
 800ab92:	4621      	mov	r1, r4
 800ab94:	4640      	mov	r0, r8
 800ab96:	f7ff ff71 	bl	800aa7c <__ssputs_r>
 800ab9a:	3001      	adds	r0, #1
 800ab9c:	f000 80a4 	beq.w	800ace8 <_svfiprintf_r+0x1b8>
 800aba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aba2:	4453      	add	r3, sl
 800aba4:	9309      	str	r3, [sp, #36]	; 0x24
 800aba6:	783b      	ldrb	r3, [r7, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	f000 809d 	beq.w	800ace8 <_svfiprintf_r+0x1b8>
 800abae:	2300      	movs	r3, #0
 800abb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abb8:	9304      	str	r3, [sp, #16]
 800abba:	9307      	str	r3, [sp, #28]
 800abbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abc0:	931a      	str	r3, [sp, #104]	; 0x68
 800abc2:	462f      	mov	r7, r5
 800abc4:	2205      	movs	r2, #5
 800abc6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800abca:	4850      	ldr	r0, [pc, #320]	; (800ad0c <_svfiprintf_r+0x1dc>)
 800abcc:	f7f5 fb10 	bl	80001f0 <memchr>
 800abd0:	9b04      	ldr	r3, [sp, #16]
 800abd2:	b9d0      	cbnz	r0, 800ac0a <_svfiprintf_r+0xda>
 800abd4:	06d9      	lsls	r1, r3, #27
 800abd6:	bf44      	itt	mi
 800abd8:	2220      	movmi	r2, #32
 800abda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800abde:	071a      	lsls	r2, r3, #28
 800abe0:	bf44      	itt	mi
 800abe2:	222b      	movmi	r2, #43	; 0x2b
 800abe4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800abe8:	782a      	ldrb	r2, [r5, #0]
 800abea:	2a2a      	cmp	r2, #42	; 0x2a
 800abec:	d015      	beq.n	800ac1a <_svfiprintf_r+0xea>
 800abee:	9a07      	ldr	r2, [sp, #28]
 800abf0:	462f      	mov	r7, r5
 800abf2:	2000      	movs	r0, #0
 800abf4:	250a      	movs	r5, #10
 800abf6:	4639      	mov	r1, r7
 800abf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abfc:	3b30      	subs	r3, #48	; 0x30
 800abfe:	2b09      	cmp	r3, #9
 800ac00:	d94d      	bls.n	800ac9e <_svfiprintf_r+0x16e>
 800ac02:	b1b8      	cbz	r0, 800ac34 <_svfiprintf_r+0x104>
 800ac04:	e00f      	b.n	800ac26 <_svfiprintf_r+0xf6>
 800ac06:	462f      	mov	r7, r5
 800ac08:	e7b8      	b.n	800ab7c <_svfiprintf_r+0x4c>
 800ac0a:	4a40      	ldr	r2, [pc, #256]	; (800ad0c <_svfiprintf_r+0x1dc>)
 800ac0c:	1a80      	subs	r0, r0, r2
 800ac0e:	fa0b f000 	lsl.w	r0, fp, r0
 800ac12:	4318      	orrs	r0, r3
 800ac14:	9004      	str	r0, [sp, #16]
 800ac16:	463d      	mov	r5, r7
 800ac18:	e7d3      	b.n	800abc2 <_svfiprintf_r+0x92>
 800ac1a:	9a03      	ldr	r2, [sp, #12]
 800ac1c:	1d11      	adds	r1, r2, #4
 800ac1e:	6812      	ldr	r2, [r2, #0]
 800ac20:	9103      	str	r1, [sp, #12]
 800ac22:	2a00      	cmp	r2, #0
 800ac24:	db01      	blt.n	800ac2a <_svfiprintf_r+0xfa>
 800ac26:	9207      	str	r2, [sp, #28]
 800ac28:	e004      	b.n	800ac34 <_svfiprintf_r+0x104>
 800ac2a:	4252      	negs	r2, r2
 800ac2c:	f043 0302 	orr.w	r3, r3, #2
 800ac30:	9207      	str	r2, [sp, #28]
 800ac32:	9304      	str	r3, [sp, #16]
 800ac34:	783b      	ldrb	r3, [r7, #0]
 800ac36:	2b2e      	cmp	r3, #46	; 0x2e
 800ac38:	d10c      	bne.n	800ac54 <_svfiprintf_r+0x124>
 800ac3a:	787b      	ldrb	r3, [r7, #1]
 800ac3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ac3e:	d133      	bne.n	800aca8 <_svfiprintf_r+0x178>
 800ac40:	9b03      	ldr	r3, [sp, #12]
 800ac42:	1d1a      	adds	r2, r3, #4
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	9203      	str	r2, [sp, #12]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	bfb8      	it	lt
 800ac4c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ac50:	3702      	adds	r7, #2
 800ac52:	9305      	str	r3, [sp, #20]
 800ac54:	4d2e      	ldr	r5, [pc, #184]	; (800ad10 <_svfiprintf_r+0x1e0>)
 800ac56:	7839      	ldrb	r1, [r7, #0]
 800ac58:	2203      	movs	r2, #3
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	f7f5 fac8 	bl	80001f0 <memchr>
 800ac60:	b138      	cbz	r0, 800ac72 <_svfiprintf_r+0x142>
 800ac62:	2340      	movs	r3, #64	; 0x40
 800ac64:	1b40      	subs	r0, r0, r5
 800ac66:	fa03 f000 	lsl.w	r0, r3, r0
 800ac6a:	9b04      	ldr	r3, [sp, #16]
 800ac6c:	4303      	orrs	r3, r0
 800ac6e:	3701      	adds	r7, #1
 800ac70:	9304      	str	r3, [sp, #16]
 800ac72:	7839      	ldrb	r1, [r7, #0]
 800ac74:	4827      	ldr	r0, [pc, #156]	; (800ad14 <_svfiprintf_r+0x1e4>)
 800ac76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac7a:	2206      	movs	r2, #6
 800ac7c:	1c7e      	adds	r6, r7, #1
 800ac7e:	f7f5 fab7 	bl	80001f0 <memchr>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	d038      	beq.n	800acf8 <_svfiprintf_r+0x1c8>
 800ac86:	4b24      	ldr	r3, [pc, #144]	; (800ad18 <_svfiprintf_r+0x1e8>)
 800ac88:	bb13      	cbnz	r3, 800acd0 <_svfiprintf_r+0x1a0>
 800ac8a:	9b03      	ldr	r3, [sp, #12]
 800ac8c:	3307      	adds	r3, #7
 800ac8e:	f023 0307 	bic.w	r3, r3, #7
 800ac92:	3308      	adds	r3, #8
 800ac94:	9303      	str	r3, [sp, #12]
 800ac96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac98:	444b      	add	r3, r9
 800ac9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ac9c:	e76d      	b.n	800ab7a <_svfiprintf_r+0x4a>
 800ac9e:	fb05 3202 	mla	r2, r5, r2, r3
 800aca2:	2001      	movs	r0, #1
 800aca4:	460f      	mov	r7, r1
 800aca6:	e7a6      	b.n	800abf6 <_svfiprintf_r+0xc6>
 800aca8:	2300      	movs	r3, #0
 800acaa:	3701      	adds	r7, #1
 800acac:	9305      	str	r3, [sp, #20]
 800acae:	4619      	mov	r1, r3
 800acb0:	250a      	movs	r5, #10
 800acb2:	4638      	mov	r0, r7
 800acb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acb8:	3a30      	subs	r2, #48	; 0x30
 800acba:	2a09      	cmp	r2, #9
 800acbc:	d903      	bls.n	800acc6 <_svfiprintf_r+0x196>
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d0c8      	beq.n	800ac54 <_svfiprintf_r+0x124>
 800acc2:	9105      	str	r1, [sp, #20]
 800acc4:	e7c6      	b.n	800ac54 <_svfiprintf_r+0x124>
 800acc6:	fb05 2101 	mla	r1, r5, r1, r2
 800acca:	2301      	movs	r3, #1
 800accc:	4607      	mov	r7, r0
 800acce:	e7f0      	b.n	800acb2 <_svfiprintf_r+0x182>
 800acd0:	ab03      	add	r3, sp, #12
 800acd2:	9300      	str	r3, [sp, #0]
 800acd4:	4622      	mov	r2, r4
 800acd6:	4b11      	ldr	r3, [pc, #68]	; (800ad1c <_svfiprintf_r+0x1ec>)
 800acd8:	a904      	add	r1, sp, #16
 800acda:	4640      	mov	r0, r8
 800acdc:	f7fc fc00 	bl	80074e0 <_printf_float>
 800ace0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800ace4:	4681      	mov	r9, r0
 800ace6:	d1d6      	bne.n	800ac96 <_svfiprintf_r+0x166>
 800ace8:	89a3      	ldrh	r3, [r4, #12]
 800acea:	065b      	lsls	r3, r3, #25
 800acec:	f53f af35 	bmi.w	800ab5a <_svfiprintf_r+0x2a>
 800acf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acf2:	b01d      	add	sp, #116	; 0x74
 800acf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf8:	ab03      	add	r3, sp, #12
 800acfa:	9300      	str	r3, [sp, #0]
 800acfc:	4622      	mov	r2, r4
 800acfe:	4b07      	ldr	r3, [pc, #28]	; (800ad1c <_svfiprintf_r+0x1ec>)
 800ad00:	a904      	add	r1, sp, #16
 800ad02:	4640      	mov	r0, r8
 800ad04:	f7fc fea2 	bl	8007a4c <_printf_i>
 800ad08:	e7ea      	b.n	800ace0 <_svfiprintf_r+0x1b0>
 800ad0a:	bf00      	nop
 800ad0c:	0800b134 	.word	0x0800b134
 800ad10:	0800b13a 	.word	0x0800b13a
 800ad14:	0800b13e 	.word	0x0800b13e
 800ad18:	080074e1 	.word	0x080074e1
 800ad1c:	0800aa7d 	.word	0x0800aa7d

0800ad20 <_sbrk_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	4c06      	ldr	r4, [pc, #24]	; (800ad3c <_sbrk_r+0x1c>)
 800ad24:	2300      	movs	r3, #0
 800ad26:	4605      	mov	r5, r0
 800ad28:	4608      	mov	r0, r1
 800ad2a:	6023      	str	r3, [r4, #0]
 800ad2c:	f7f7 f848 	bl	8001dc0 <_sbrk>
 800ad30:	1c43      	adds	r3, r0, #1
 800ad32:	d102      	bne.n	800ad3a <_sbrk_r+0x1a>
 800ad34:	6823      	ldr	r3, [r4, #0]
 800ad36:	b103      	cbz	r3, 800ad3a <_sbrk_r+0x1a>
 800ad38:	602b      	str	r3, [r5, #0]
 800ad3a:	bd38      	pop	{r3, r4, r5, pc}
 800ad3c:	20004d14 	.word	0x20004d14

0800ad40 <strncmp>:
 800ad40:	b510      	push	{r4, lr}
 800ad42:	b16a      	cbz	r2, 800ad60 <strncmp+0x20>
 800ad44:	3901      	subs	r1, #1
 800ad46:	1884      	adds	r4, r0, r2
 800ad48:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ad4c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d103      	bne.n	800ad5c <strncmp+0x1c>
 800ad54:	42a0      	cmp	r0, r4
 800ad56:	d001      	beq.n	800ad5c <strncmp+0x1c>
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d1f5      	bne.n	800ad48 <strncmp+0x8>
 800ad5c:	1a98      	subs	r0, r3, r2
 800ad5e:	bd10      	pop	{r4, pc}
 800ad60:	4610      	mov	r0, r2
 800ad62:	e7fc      	b.n	800ad5e <strncmp+0x1e>

0800ad64 <__ascii_wctomb>:
 800ad64:	b149      	cbz	r1, 800ad7a <__ascii_wctomb+0x16>
 800ad66:	2aff      	cmp	r2, #255	; 0xff
 800ad68:	bf85      	ittet	hi
 800ad6a:	238a      	movhi	r3, #138	; 0x8a
 800ad6c:	6003      	strhi	r3, [r0, #0]
 800ad6e:	700a      	strbls	r2, [r1, #0]
 800ad70:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ad74:	bf98      	it	ls
 800ad76:	2001      	movls	r0, #1
 800ad78:	4770      	bx	lr
 800ad7a:	4608      	mov	r0, r1
 800ad7c:	4770      	bx	lr

0800ad7e <memmove>:
 800ad7e:	4288      	cmp	r0, r1
 800ad80:	b510      	push	{r4, lr}
 800ad82:	eb01 0302 	add.w	r3, r1, r2
 800ad86:	d807      	bhi.n	800ad98 <memmove+0x1a>
 800ad88:	1e42      	subs	r2, r0, #1
 800ad8a:	4299      	cmp	r1, r3
 800ad8c:	d00a      	beq.n	800ada4 <memmove+0x26>
 800ad8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad92:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ad96:	e7f8      	b.n	800ad8a <memmove+0xc>
 800ad98:	4283      	cmp	r3, r0
 800ad9a:	d9f5      	bls.n	800ad88 <memmove+0xa>
 800ad9c:	1881      	adds	r1, r0, r2
 800ad9e:	1ad2      	subs	r2, r2, r3
 800ada0:	42d3      	cmn	r3, r2
 800ada2:	d100      	bne.n	800ada6 <memmove+0x28>
 800ada4:	bd10      	pop	{r4, pc}
 800ada6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adaa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800adae:	e7f7      	b.n	800ada0 <memmove+0x22>

0800adb0 <__malloc_lock>:
 800adb0:	4770      	bx	lr

0800adb2 <__malloc_unlock>:
 800adb2:	4770      	bx	lr

0800adb4 <_realloc_r>:
 800adb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb6:	4607      	mov	r7, r0
 800adb8:	4614      	mov	r4, r2
 800adba:	460e      	mov	r6, r1
 800adbc:	b921      	cbnz	r1, 800adc8 <_realloc_r+0x14>
 800adbe:	4611      	mov	r1, r2
 800adc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800adc4:	f7ff be00 	b.w	800a9c8 <_malloc_r>
 800adc8:	b922      	cbnz	r2, 800add4 <_realloc_r+0x20>
 800adca:	f7ff fdaf 	bl	800a92c <_free_r>
 800adce:	4625      	mov	r5, r4
 800add0:	4628      	mov	r0, r5
 800add2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800add4:	f000 f814 	bl	800ae00 <_malloc_usable_size_r>
 800add8:	42a0      	cmp	r0, r4
 800adda:	d20f      	bcs.n	800adfc <_realloc_r+0x48>
 800addc:	4621      	mov	r1, r4
 800adde:	4638      	mov	r0, r7
 800ade0:	f7ff fdf2 	bl	800a9c8 <_malloc_r>
 800ade4:	4605      	mov	r5, r0
 800ade6:	2800      	cmp	r0, #0
 800ade8:	d0f2      	beq.n	800add0 <_realloc_r+0x1c>
 800adea:	4631      	mov	r1, r6
 800adec:	4622      	mov	r2, r4
 800adee:	f7fc facf 	bl	8007390 <memcpy>
 800adf2:	4631      	mov	r1, r6
 800adf4:	4638      	mov	r0, r7
 800adf6:	f7ff fd99 	bl	800a92c <_free_r>
 800adfa:	e7e9      	b.n	800add0 <_realloc_r+0x1c>
 800adfc:	4635      	mov	r5, r6
 800adfe:	e7e7      	b.n	800add0 <_realloc_r+0x1c>

0800ae00 <_malloc_usable_size_r>:
 800ae00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae04:	1f18      	subs	r0, r3, #4
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	bfbc      	itt	lt
 800ae0a:	580b      	ldrlt	r3, [r1, r0]
 800ae0c:	18c0      	addlt	r0, r0, r3
 800ae0e:	4770      	bx	lr

0800ae10 <_init>:
 800ae10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae12:	bf00      	nop
 800ae14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae16:	bc08      	pop	{r3}
 800ae18:	469e      	mov	lr, r3
 800ae1a:	4770      	bx	lr

0800ae1c <_fini>:
 800ae1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1e:	bf00      	nop
 800ae20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae22:	bc08      	pop	{r3}
 800ae24:	469e      	mov	lr, r3
 800ae26:	4770      	bx	lr
