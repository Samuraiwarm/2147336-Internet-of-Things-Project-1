
Project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac78  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  0800ae18  0800ae18  0001ae18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b238  0800b238  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b238  0800b238  0001b238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b240  0800b240  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b240  0800b240  0001b240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b244  0800b244  0001b244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b34  200001e4  0800b42c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d18  0800b42c  00024d18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191bb  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000316b  00000000  00000000  000393cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001440  00000000  00000000  0003c540  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d8  00000000  00000000  0003d980  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000178e8  00000000  00000000  0003ec58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ffda  00000000  00000000  00056540  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009acdd  00000000  00000000  0006651a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001011f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006208  00000000  00000000  00101274  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ae00 	.word	0x0800ae00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800ae00 	.word	0x0800ae00

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <DWT_Delay_Init+0x58>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	4a13      	ldr	r2, [pc, #76]	; (8000ff0 <DWT_Delay_Init+0x58>)
 8000fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fa6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <DWT_Delay_Init+0x58>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <DWT_Delay_Init+0x58>)
 8000fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fb2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fba:	f023 0301 	bic.w	r3, r3, #1
 8000fbe:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000fd2:	bf00      	nop
     __ASM volatile ("NOP");
 8000fd4:	bf00      	nop
  __ASM volatile ("NOP");
 8000fd6:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <DWT_Delay_Init+0x5c>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e000      	b.n	8000fe6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000fe4:	2301      	movs	r3, #1
  }
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000edf0 	.word	0xe000edf0
 8000ff4:	e0001000 	.word	0xe0001000

08000ff8 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <delay+0x3c>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001006:	f002 f9f9 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 800100a:	4602      	mov	r2, r0
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <delay+0x40>)
 800100e:	fba3 2302 	umull	r2, r3, r3, r2
 8001012:	0c9b      	lsrs	r3, r3, #18
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	fb02 f303 	mul.w	r3, r2, r3
 800101a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800101c:	bf00      	nop
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <delay+0x3c>)
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	1ad2      	subs	r2, r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	d3f8      	bcc.n	800101e <delay+0x26>
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	e0001000 	.word	0xe0001000
 8001038:	431bde83 	.word	0x431bde83

0800103c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	4619      	mov	r1, r3
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f001 fbe4 	bl	8002838 <HAL_GPIO_Init>
}
 8001070:	bf00      	nop
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4619      	mov	r1, r3
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f001 fbc6 	bl	8002838 <HAL_GPIO_Init>
}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <DHT_Start>:


void DHT_Start (void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80010b8:	f7ff ff6e 	bl	8000f98 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 80010bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c0:	480e      	ldr	r0, [pc, #56]	; (80010fc <DHT_Start+0x48>)
 80010c2:	f7ff ffbb 	bl	800103c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010cc:	480b      	ldr	r0, [pc, #44]	; (80010fc <DHT_Start+0x48>)
 80010ce:	f001 fd4d 	bl	8002b6c <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 80010d2:	f244 6050 	movw	r0, #18000	; 0x4650
 80010d6:	f7ff ff8f 	bl	8000ff8 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <DHT_Start+0x48>)
 80010e2:	f001 fd43 	bl	8002b6c <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 80010e6:	2014      	movs	r0, #20
 80010e8:	f7ff ff86 	bl	8000ff8 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 80010ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <DHT_Start+0x48>)
 80010f2:	f7ff ffc1 	bl	8001078 <Set_Pin_Input>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40020000 	.word	0x40020000

08001100 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	71fb      	strb	r3, [r7, #7]
	delay (40);
 800110a:	2028      	movs	r0, #40	; 0x28
 800110c:	f7ff ff74 	bl	8000ff8 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001114:	4811      	ldr	r0, [pc, #68]	; (800115c <DHT_Check_Response+0x5c>)
 8001116:	f001 fd11 	bl	8002b3c <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10f      	bne.n	8001140 <DHT_Check_Response+0x40>
	{
		delay (80);
 8001120:	2050      	movs	r0, #80	; 0x50
 8001122:	f7ff ff69 	bl	8000ff8 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001126:	f44f 7180 	mov.w	r1, #256	; 0x100
 800112a:	480c      	ldr	r0, [pc, #48]	; (800115c <DHT_Check_Response+0x5c>)
 800112c:	f001 fd06 	bl	8002b3c <HAL_GPIO_ReadPin>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <DHT_Check_Response+0x3c>
 8001136:	2301      	movs	r3, #1
 8001138:	71fb      	strb	r3, [r7, #7]
 800113a:	e001      	b.n	8001140 <DHT_Check_Response+0x40>
		else Response = -1;
 800113c:	23ff      	movs	r3, #255	; 0xff
 800113e:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8001140:	bf00      	nop
 8001142:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <DHT_Check_Response+0x5c>)
 8001148:	f001 fcf8 	bl	8002b3c <HAL_GPIO_ReadPin>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f7      	bne.n	8001142 <DHT_Check_Response+0x42>

	return Response;
 8001152:	79fb      	ldrb	r3, [r7, #7]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40020000 	.word	0x40020000

08001160 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001166:	2300      	movs	r3, #0
 8001168:	71bb      	strb	r3, [r7, #6]
 800116a:	e03a      	b.n	80011e2 <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 800116c:	bf00      	nop
 800116e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001172:	4820      	ldr	r0, [pc, #128]	; (80011f4 <DHT_Read+0x94>)
 8001174:	f001 fce2 	bl	8002b3c <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f7      	beq.n	800116e <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 800117e:	2028      	movs	r0, #40	; 0x28
 8001180:	f7ff ff3a 	bl	8000ff8 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8001184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001188:	481a      	ldr	r0, [pc, #104]	; (80011f4 <DHT_Read+0x94>)
 800118a:	f001 fcd7 	bl	8002b3c <HAL_GPIO_ReadPin>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d10e      	bne.n	80011b2 <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8001194:	79bb      	ldrb	r3, [r7, #6]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2201      	movs	r2, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	b25a      	sxtb	r2, r3
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	4013      	ands	r3, r2
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	e00b      	b.n	80011ca <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	f1c3 0307 	rsb	r3, r3, #7
 80011b8:	2201      	movs	r2, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	b25a      	sxtb	r2, r3
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b25b      	sxtb	r3, r3
 80011c8:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80011ca:	bf00      	nop
 80011cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d0:	4808      	ldr	r0, [pc, #32]	; (80011f4 <DHT_Read+0x94>)
 80011d2:	f001 fcb3 	bl	8002b3c <HAL_GPIO_ReadPin>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f7      	bne.n	80011cc <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 80011dc:	79bb      	ldrb	r3, [r7, #6]
 80011de:	3301      	adds	r3, #1
 80011e0:	71bb      	strb	r3, [r7, #6]
 80011e2:	79bb      	ldrb	r3, [r7, #6]
 80011e4:	2b07      	cmp	r3, #7
 80011e6:	d9c1      	bls.n	800116c <DHT_Read+0xc>
	}
	return i;
 80011e8:	79fb      	ldrb	r3, [r7, #7]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40020000 	.word	0x40020000

080011f8 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001200:	f7ff ff58 	bl	80010b4 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001204:	f7ff ff7c 	bl	8001100 <DHT_Check_Response>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	4b23      	ldr	r3, [pc, #140]	; (800129c <DHT_GetData+0xa4>)
 800120e:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001210:	f7ff ffa6 	bl	8001160 <DHT_Read>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <DHT_GetData+0xa8>)
 800121a:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 800121c:	f7ff ffa0 	bl	8001160 <DHT_Read>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <DHT_GetData+0xac>)
 8001226:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001228:	f7ff ff9a 	bl	8001160 <DHT_Read>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <DHT_GetData+0xb0>)
 8001232:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001234:	f7ff ff94 	bl	8001160 <DHT_Read>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <DHT_GetData+0xb4>)
 800123e:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8001240:	f7ff ff8e 	bl	8001160 <DHT_Read>
 8001244:	4603      	mov	r3, r0
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <DHT_GetData+0xb8>)
 800124a:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <DHT_GetData+0xb8>)
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <DHT_GetData+0xa8>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <DHT_GetData+0xac>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4413      	add	r3, r2
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <DHT_GetData+0xb0>)
 8001260:	7812      	ldrb	r2, [r2, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a11      	ldr	r2, [pc, #68]	; (80012ac <DHT_GetData+0xb4>)
 8001266:	7812      	ldrb	r2, [r2, #0]
 8001268:	4413      	add	r3, r2
 800126a:	4299      	cmp	r1, r3
 800126c:	d111      	bne.n	8001292 <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <DHT_GetData+0xb0>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	ee07 3a90 	vmov	s15, r3
 8001276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <DHT_GetData+0xa8>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000200 	.word	0x20000200
 80012a0:	20004b34 	.word	0x20004b34
 80012a4:	20004b36 	.word	0x20004b36
 80012a8:	20004b35 	.word	0x20004b35
 80012ac:	20004b3a 	.word	0x20004b3a
 80012b0:	20004b38 	.word	0x20004b38

080012b4 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay (uint16_t time)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SetCounter(&htim2, 0);
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <delay+0x2c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GetCounter(&htim2) < time);
 80012c6:	bf00      	nop
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <delay+0x2c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d3f9      	bcc.n	80012c8 <delay+0x14>
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	20004c0c 	.word	0x20004c0c

080012e4 <HCSR04_Read>:
DHT_DataTypedef DHT11_Data;
float Temperature = 0;
float Humidity = 0;

void HCSR04_Read (void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80012e8:	2201      	movs	r2, #1
 80012ea:	2102      	movs	r1, #2
 80012ec:	480a      	ldr	r0, [pc, #40]	; (8001318 <HCSR04_Read+0x34>)
 80012ee:	f001 fc3d 	bl	8002b6c <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 80012f2:	200a      	movs	r0, #10
 80012f4:	f7ff ffde 	bl	80012b4 <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);  // pull the TRIG pin low
 80012f8:	2200      	movs	r2, #0
 80012fa:	2102      	movs	r1, #2
 80012fc:	4806      	ldr	r0, [pc, #24]	; (8001318 <HCSR04_Read+0x34>)
 80012fe:	f001 fc35 	bl	8002b6c <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HCSR04_Read+0x38>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <HCSR04_Read+0x38>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f042 0202 	orr.w	r2, r2, #2
 8001310:	60da      	str	r2, [r3, #12]
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40020000 	.word	0x40020000
 800131c:	20004c0c 	.word	0x20004c0c

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001324:	f000 fdba 	bl	8001e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001328:	f000 f868 	bl	80013fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132c:	f000 f99e 	bl	800166c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001330:	f000 f972 	bl	8001618 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001334:	f000 f91e 	bl	8001574 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001338:	f000 f8ca 	bl	80014d0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800133c:	2100      	movs	r1, #0
 800133e:	481c      	ldr	r0, [pc, #112]	; (80013b0 <main+0x90>)
 8001340:	f002 f946 	bl	80035d0 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001344:	f003 fab6 	bl	80048b4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001348:	4a1a      	ldr	r2, [pc, #104]	; (80013b4 <main+0x94>)
 800134a:	2100      	movs	r1, #0
 800134c:	481a      	ldr	r0, [pc, #104]	; (80013b8 <main+0x98>)
 800134e:	f003 fb1b 	bl	8004988 <osThreadNew>
 8001352:	4602      	mov	r2, r0
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <main+0x9c>)
 8001356:	601a      	str	r2, [r3, #0]

  /* creation of beep */
  beepHandle = osThreadNew(beep_task, NULL, &beep_attributes);
 8001358:	4a19      	ldr	r2, [pc, #100]	; (80013c0 <main+0xa0>)
 800135a:	2100      	movs	r1, #0
 800135c:	4819      	ldr	r0, [pc, #100]	; (80013c4 <main+0xa4>)
 800135e:	f003 fb13 	bl	8004988 <osThreadNew>
 8001362:	4602      	mov	r2, r0
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <main+0xa8>)
 8001366:	601a      	str	r2, [r3, #0]

  /* creation of checkTmp */
  checkTmpHandle = osThreadNew(temp_thread, NULL, &checkTmp_attributes);
 8001368:	4a18      	ldr	r2, [pc, #96]	; (80013cc <main+0xac>)
 800136a:	2100      	movs	r1, #0
 800136c:	4818      	ldr	r0, [pc, #96]	; (80013d0 <main+0xb0>)
 800136e:	f003 fb0b 	bl	8004988 <osThreadNew>
 8001372:	4602      	mov	r2, r0
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <main+0xb4>)
 8001376:	601a      	str	r2, [r3, #0]

  /* creation of threshold_adjus */
  threshold_adjusHandle = osThreadNew(threshold_adjust_thread, NULL, &threshold_adjus_attributes);
 8001378:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <main+0xb8>)
 800137a:	2100      	movs	r1, #0
 800137c:	4817      	ldr	r0, [pc, #92]	; (80013dc <main+0xbc>)
 800137e:	f003 fb03 	bl	8004988 <osThreadNew>
 8001382:	4602      	mov	r2, r0
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <main+0xc0>)
 8001386:	601a      	str	r2, [r3, #0]

  /* creation of ultrasonic */
  ultrasonicHandle = osThreadNew(ultrasonic_thread, NULL, &ultrasonic_attributes);
 8001388:	4a16      	ldr	r2, [pc, #88]	; (80013e4 <main+0xc4>)
 800138a:	2100      	movs	r1, #0
 800138c:	4816      	ldr	r0, [pc, #88]	; (80013e8 <main+0xc8>)
 800138e:	f003 fafb 	bl	8004988 <osThreadNew>
 8001392:	4602      	mov	r2, r0
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <main+0xcc>)
 8001396:	601a      	str	r2, [r3, #0]

  /* creation of debug */
  debugHandle = osThreadNew(debug_task, NULL, &debug_attributes);
 8001398:	4a15      	ldr	r2, [pc, #84]	; (80013f0 <main+0xd0>)
 800139a:	2100      	movs	r1, #0
 800139c:	4815      	ldr	r0, [pc, #84]	; (80013f4 <main+0xd4>)
 800139e:	f003 faf3 	bl	8004988 <osThreadNew>
 80013a2:	4602      	mov	r2, r0
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <main+0xd8>)
 80013a6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013a8:	f003 fab8 	bl	800491c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <main+0x8c>
 80013ae:	bf00      	nop
 80013b0:	20004c0c 	.word	0x20004c0c
 80013b4:	0800ae94 	.word	0x0800ae94
 80013b8:	08001765 	.word	0x08001765
 80013bc:	20004b3c 	.word	0x20004b3c
 80013c0:	0800aeb8 	.word	0x0800aeb8
 80013c4:	080017c9 	.word	0x080017c9
 80013c8:	20004c8c 	.word	0x20004c8c
 80013cc:	0800aedc 	.word	0x0800aedc
 80013d0:	08001839 	.word	0x08001839
 80013d4:	20004c04 	.word	0x20004c04
 80013d8:	0800af00 	.word	0x0800af00
 80013dc:	0800186d 	.word	0x0800186d
 80013e0:	20004b40 	.word	0x20004b40
 80013e4:	0800af24 	.word	0x0800af24
 80013e8:	080018dd 	.word	0x080018dd
 80013ec:	20004c08 	.word	0x20004c08
 80013f0:	0800af48 	.word	0x0800af48
 80013f4:	080018f1 	.word	0x080018f1
 80013f8:	20004b48 	.word	0x20004b48

080013fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b094      	sub	sp, #80	; 0x50
 8001400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001402:	f107 0320 	add.w	r3, r7, #32
 8001406:	2230      	movs	r2, #48	; 0x30
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f005 ffc3 	bl	8007396 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <SystemClock_Config+0xcc>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	4a27      	ldr	r2, [pc, #156]	; (80014c8 <SystemClock_Config+0xcc>)
 800142a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142e:	6413      	str	r3, [r2, #64]	; 0x40
 8001430:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <SystemClock_Config+0xcc>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800143c:	2300      	movs	r3, #0
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <SystemClock_Config+0xd0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a21      	ldr	r2, [pc, #132]	; (80014cc <SystemClock_Config+0xd0>)
 8001446:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <SystemClock_Config+0xd0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001458:	2302      	movs	r3, #2
 800145a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800145c:	2301      	movs	r3, #1
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001460:	2310      	movs	r3, #16
 8001462:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001464:	2302      	movs	r3, #2
 8001466:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001468:	2300      	movs	r3, #0
 800146a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800146c:	2310      	movs	r3, #16
 800146e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001470:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001474:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001476:	2304      	movs	r3, #4
 8001478:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800147a:	2304      	movs	r3, #4
 800147c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	4618      	mov	r0, r3
 8001484:	f001 fb8c 	bl	8002ba0 <HAL_RCC_OscConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800148e:	f000 fa69 	bl	8001964 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001492:	230f      	movs	r3, #15
 8001494:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001496:	2302      	movs	r3, #2
 8001498:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800149e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	2102      	movs	r1, #2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f001 fde6 	bl	8003080 <HAL_RCC_ClockConfig>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014ba:	f000 fa53 	bl	8001964 <Error_Handler>
  }
}
 80014be:	bf00      	nop
 80014c0:	3750      	adds	r7, #80	; 0x50
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40007000 	.word	0x40007000

080014d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014d6:	463b      	mov	r3, r7
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <MX_ADC1_Init+0x98>)
 80014e4:	4a21      	ldr	r2, [pc, #132]	; (800156c <MX_ADC1_Init+0x9c>)
 80014e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014e8:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <MX_ADC1_Init+0x98>)
 80014ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <MX_ADC1_Init+0x98>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <MX_ADC1_Init+0x98>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <MX_ADC1_Init+0x98>)
 80014fe:	2201      	movs	r2, #1
 8001500:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <MX_ADC1_Init+0x98>)
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <MX_ADC1_Init+0x98>)
 800150c:	2200      	movs	r2, #0
 800150e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <MX_ADC1_Init+0x98>)
 8001512:	4a17      	ldr	r2, [pc, #92]	; (8001570 <MX_ADC1_Init+0xa0>)
 8001514:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_ADC1_Init+0x98>)
 8001518:	2200      	movs	r2, #0
 800151a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_ADC1_Init+0x98>)
 800151e:	2201      	movs	r2, #1
 8001520:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_ADC1_Init+0x98>)
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_ADC1_Init+0x98>)
 800152c:	2200      	movs	r2, #0
 800152e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001530:	480d      	ldr	r0, [pc, #52]	; (8001568 <MX_ADC1_Init+0x98>)
 8001532:	f000 fcf5 	bl	8001f20 <HAL_ADC_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800153c:	f000 fa12 	bl	8001964 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001540:	2304      	movs	r3, #4
 8001542:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001544:	2301      	movs	r3, #1
 8001546:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800154c:	463b      	mov	r3, r7
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_ADC1_Init+0x98>)
 8001552:	f000 fe61 	bl	8002218 <HAL_ADC_ConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800155c:	f000 fa02 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20004b50 	.word	0x20004b50
 800156c:	40012000 	.word	0x40012000
 8001570:	0f000001 	.word	0x0f000001

08001574 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001584:	463b      	mov	r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001590:	4b20      	ldr	r3, [pc, #128]	; (8001614 <MX_TIM2_Init+0xa0>)
 8001592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001596:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <MX_TIM2_Init+0xa0>)
 800159a:	2247      	movs	r2, #71	; 0x47
 800159c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159e:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <MX_TIM2_Init+0xa0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80015a4:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <MX_TIM2_Init+0xa0>)
 80015a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <MX_TIM2_Init+0xa0>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <MX_TIM2_Init+0xa0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80015b8:	4816      	ldr	r0, [pc, #88]	; (8001614 <MX_TIM2_Init+0xa0>)
 80015ba:	f001 ffde 	bl	800357a <HAL_TIM_IC_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015c4:	f000 f9ce 	bl	8001964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	4619      	mov	r1, r3
 80015d6:	480f      	ldr	r0, [pc, #60]	; (8001614 <MX_TIM2_Init+0xa0>)
 80015d8:	f002 fc36 	bl	8003e48 <HAL_TIMEx_MasterConfigSynchronization>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80015e2:	f000 f9bf 	bl	8001964 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80015e6:	230a      	movs	r3, #10
 80015e8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015ea:	2301      	movs	r3, #1
 80015ec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015f6:	463b      	mov	r3, r7
 80015f8:	2200      	movs	r2, #0
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_TIM2_Init+0xa0>)
 80015fe:	f002 f957 	bl	80038b0 <HAL_TIM_IC_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001608:	f000 f9ac 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20004c0c 	.word	0x20004c0c

08001618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <MX_USART2_UART_Init+0x50>)
 8001620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800163e:	220c      	movs	r2, #12
 8001640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001650:	f002 fc7c 	bl	8003f4c <HAL_UART_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800165a:	f000 f983 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20004c4c 	.word	0x20004c4c
 8001668:	40004400 	.word	0x40004400

0800166c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b33      	ldr	r3, [pc, #204]	; (8001754 <MX_GPIO_Init+0xe8>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a32      	ldr	r2, [pc, #200]	; (8001754 <MX_GPIO_Init+0xe8>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b30      	ldr	r3, [pc, #192]	; (8001754 <MX_GPIO_Init+0xe8>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b2c      	ldr	r3, [pc, #176]	; (8001754 <MX_GPIO_Init+0xe8>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a2b      	ldr	r2, [pc, #172]	; (8001754 <MX_GPIO_Init+0xe8>)
 80016a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b29      	ldr	r3, [pc, #164]	; (8001754 <MX_GPIO_Init+0xe8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	4b25      	ldr	r3, [pc, #148]	; (8001754 <MX_GPIO_Init+0xe8>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a24      	ldr	r2, [pc, #144]	; (8001754 <MX_GPIO_Init+0xe8>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b22      	ldr	r3, [pc, #136]	; (8001754 <MX_GPIO_Init+0xe8>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <MX_GPIO_Init+0xe8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a1d      	ldr	r2, [pc, #116]	; (8001754 <MX_GPIO_Init+0xe8>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <MX_GPIO_Init+0xe8>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ULTRASONIC_TRIGGER_Pin|LD2_Pin|SPEAKER_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2162      	movs	r1, #98	; 0x62
 80016f6:	4818      	ldr	r0, [pc, #96]	; (8001758 <MX_GPIO_Init+0xec>)
 80016f8:	f001 fa38 	bl	8002b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001702:	4b16      	ldr	r3, [pc, #88]	; (800175c <MX_GPIO_Init+0xf0>)
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	4813      	ldr	r0, [pc, #76]	; (8001760 <MX_GPIO_Init+0xf4>)
 8001712:	f001 f891 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULTRASONIC_TRIGGER_Pin LD2_Pin SPEAKER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin|LD2_Pin|SPEAKER_Pin;
 8001716:	2362      	movs	r3, #98	; 0x62
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	480a      	ldr	r0, [pc, #40]	; (8001758 <MX_GPIO_Init+0xec>)
 800172e:	f001 f883 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001738:	2300      	movs	r3, #0
 800173a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4804      	ldr	r0, [pc, #16]	; (8001758 <MX_GPIO_Init+0xec>)
 8001748:	f001 f876 	bl	8002838 <HAL_GPIO_Init>

}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	; 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40023800 	.word	0x40023800
 8001758:	40020000 	.word	0x40020000
 800175c:	10210000 	.word	0x10210000
 8001760:	40020800 	.word	0x40020800

08001764 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {
	  if (state == 1) {
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <StartDefaultTask+0x5c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d11a      	bne.n	80017aa <StartDefaultTask+0x46>
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET) {
 8001774:	2140      	movs	r1, #64	; 0x40
 8001776:	4813      	ldr	r0, [pc, #76]	; (80017c4 <StartDefaultTask+0x60>)
 8001778:	f001 f9e0 	bl	8002b3c <HAL_GPIO_ReadPin>
 800177c:	4603      	mov	r3, r0
 800177e:	2b01      	cmp	r3, #1
 8001780:	d01c      	beq.n	80017bc <StartDefaultTask+0x58>
			  continue;
		  }
		  osDelay(3000);
 8001782:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001786:	f003 f9a5 	bl	8004ad4 <osDelay>
		  if (state == 0) {
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <StartDefaultTask+0x5c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d105      	bne.n	800179e <StartDefaultTask+0x3a>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	2140      	movs	r1, #64	; 0x40
 8001796:	480b      	ldr	r0, [pc, #44]	; (80017c4 <StartDefaultTask+0x60>)
 8001798:	f001 f9e8 	bl	8002b6c <HAL_GPIO_WritePin>
			  continue;
 800179c:	e00f      	b.n	80017be <StartDefaultTask+0x5a>
		  }
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800179e:	2201      	movs	r2, #1
 80017a0:	2140      	movs	r1, #64	; 0x40
 80017a2:	4808      	ldr	r0, [pc, #32]	; (80017c4 <StartDefaultTask+0x60>)
 80017a4:	f001 f9e2 	bl	8002b6c <HAL_GPIO_WritePin>
 80017a8:	e004      	b.n	80017b4 <StartDefaultTask+0x50>
	  } else {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2140      	movs	r1, #64	; 0x40
 80017ae:	4805      	ldr	r0, [pc, #20]	; (80017c4 <StartDefaultTask+0x60>)
 80017b0:	f001 f9dc 	bl	8002b6c <HAL_GPIO_WritePin>
	  }
	  osDelay(50);
 80017b4:	2032      	movs	r0, #50	; 0x32
 80017b6:	f003 f98d 	bl	8004ad4 <osDelay>
 80017ba:	e7d7      	b.n	800176c <StartDefaultTask+0x8>
			  continue;
 80017bc:	bf00      	nop
	  if (state == 1) {
 80017be:	e7d5      	b.n	800176c <StartDefaultTask+0x8>
 80017c0:	20000214 	.word	0x20000214
 80017c4:	40020000 	.word	0x40020000

080017c8 <beep_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_beep_task */
void beep_task(void *argument)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN beep_task */
  /* Infinite loop */
  for(;;)
  {
	if (Temperature > 28 || Distance == 0) {
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <beep_task+0x5c>)
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 80017da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e2:	dc03      	bgt.n	80017ec <beep_task+0x24>
 80017e4:	4b10      	ldr	r3, [pc, #64]	; (8001828 <beep_task+0x60>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d108      	bne.n	80017fe <beep_task+0x36>
    	state = 0;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <beep_task+0x64>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2140      	movs	r1, #64	; 0x40
 80017f6:	480e      	ldr	r0, [pc, #56]	; (8001830 <beep_task+0x68>)
 80017f8:	f001 f9b8 	bl	8002b6c <HAL_GPIO_WritePin>
		continue;
 80017fc:	e011      	b.n	8001822 <beep_task+0x5a>
	}
    if ( Distance <= threshold + 5) {
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <beep_task+0x60>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <beep_task+0x6c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	3305      	adds	r3, #5
 800180a:	429a      	cmp	r2, r3
 800180c:	dc03      	bgt.n	8001816 <beep_task+0x4e>
    	state = 1;
 800180e:	4b07      	ldr	r3, [pc, #28]	; (800182c <beep_task+0x64>)
 8001810:	2201      	movs	r2, #1
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	e002      	b.n	800181c <beep_task+0x54>
    } else {
    	state = 0;
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <beep_task+0x64>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
    }
    osDelay(50);
 800181c:	2032      	movs	r0, #50	; 0x32
 800181e:	f003 f959 	bl	8004ad4 <osDelay>
	if (Temperature > 28 || Distance == 0) {
 8001822:	e7d5      	b.n	80017d0 <beep_task+0x8>
 8001824:	20000218 	.word	0x20000218
 8001828:	20000211 	.word	0x20000211
 800182c:	20000214 	.word	0x20000214
 8001830:	40020000 	.word	0x40020000
 8001834:	20000000 	.word	0x20000000

08001838 <temp_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_temp_thread */
void temp_thread(void *argument)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temp_thread */
  /* Infinite loop */
  while(1)
  {
	  DHT_GetData(&DHT11_Data);
 8001840:	4807      	ldr	r0, [pc, #28]	; (8001860 <temp_thread+0x28>)
 8001842:	f7ff fcd9 	bl	80011f8 <DHT_GetData>
	  Temperature = DHT11_Data.Temperature;
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <temp_thread+0x28>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a06      	ldr	r2, [pc, #24]	; (8001864 <temp_thread+0x2c>)
 800184c:	6013      	str	r3, [r2, #0]
	  Humidity = DHT11_Data.Humidity;
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <temp_thread+0x28>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <temp_thread+0x30>)
 8001854:	6013      	str	r3, [r2, #0]
	  osDelay(3000);
 8001856:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800185a:	f003 f93b 	bl	8004ad4 <osDelay>
	  DHT_GetData(&DHT11_Data);
 800185e:	e7ef      	b.n	8001840 <temp_thread+0x8>
 8001860:	20004b98 	.word	0x20004b98
 8001864:	20000218 	.word	0x20000218
 8001868:	2000021c 	.word	0x2000021c

0800186c <threshold_adjust_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_threshold_adjust_thread */
void threshold_adjust_thread(void *argument)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN threshold_adjust_thread */
  HAL_ADC_Start(&hadc1);
 8001874:	4815      	ldr	r0, [pc, #84]	; (80018cc <threshold_adjust_thread+0x60>)
 8001876:	f000 fb97 	bl	8001fa8 <HAL_ADC_Start>
  /* Infinite loop */
  while(1)
  {
	 if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 800187a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800187e:	4813      	ldr	r0, [pc, #76]	; (80018cc <threshold_adjust_thread+0x60>)
 8001880:	f000 fc38 	bl	80020f4 <HAL_ADC_PollForConversion>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d11b      	bne.n	80018c2 <threshold_adjust_thread+0x56>
		  int ret = HAL_ADC_GetValue(&hadc1);
 800188a:	4810      	ldr	r0, [pc, #64]	; (80018cc <threshold_adjust_thread+0x60>)
 800188c:	f000 fcb6 	bl	80021fc <HAL_ADC_GetValue>
 8001890:	4603      	mov	r3, r0
 8001892:	60fb      	str	r3, [r7, #12]
		 threshold = (((float) ret/4096) * 200 + 10);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	ee07 3a90 	vmov	s15, r3
 800189a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800189e:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80018d0 <threshold_adjust_thread+0x64>
 80018a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018a6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80018d4 <threshold_adjust_thread+0x68>
 80018aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ba:	ee17 2a90 	vmov	r2, s15
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <threshold_adjust_thread+0x6c>)
 80018c0:	601a      	str	r2, [r3, #0]
	 }
	  osDelay(1000);
 80018c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018c6:	f003 f905 	bl	8004ad4 <osDelay>
	 if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 80018ca:	e7d6      	b.n	800187a <threshold_adjust_thread+0xe>
 80018cc:	20004b50 	.word	0x20004b50
 80018d0:	45800000 	.word	0x45800000
 80018d4:	43480000 	.word	0x43480000
 80018d8:	20000000 	.word	0x20000000

080018dc <ultrasonic_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ultrasonic_thread */
void ultrasonic_thread(void *argument)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ultrasonic_thread */
  /* Infinite loop */
  for(;;)
  {
	HCSR04_Read();
 80018e4:	f7ff fcfe 	bl	80012e4 <HCSR04_Read>
	osDelay(100);
 80018e8:	2064      	movs	r0, #100	; 0x64
 80018ea:	f003 f8f3 	bl	8004ad4 <osDelay>
	HCSR04_Read();
 80018ee:	e7f9      	b.n	80018e4 <ultrasonic_thread+0x8>

080018f0 <debug_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_debug_task */
void debug_task(void *argument)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	  sprintf(buffer, "State: %d, Dist %d, Threshold %d, Tmp %.2f, Hum %.2f \r\n", state, Distance, threshold, Temperature, Humidity);
//	  HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 500);
  	  sprintf(buffer, "Distance: %d, Threshold: %d \r\n", Distance, threshold);
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <debug_task+0x3c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <debug_task+0x40>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	490c      	ldr	r1, [pc, #48]	; (8001934 <debug_task+0x44>)
 8001904:	480c      	ldr	r0, [pc, #48]	; (8001938 <debug_task+0x48>)
 8001906:	f006 fb93 	bl	8008030 <siprintf>
  	  HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 800190a:	480b      	ldr	r0, [pc, #44]	; (8001938 <debug_task+0x48>)
 800190c:	f7fe fc68 	bl	80001e0 <strlen>
 8001910:	4603      	mov	r3, r0
 8001912:	b29a      	uxth	r2, r3
 8001914:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001918:	4907      	ldr	r1, [pc, #28]	; (8001938 <debug_task+0x48>)
 800191a:	4808      	ldr	r0, [pc, #32]	; (800193c <debug_task+0x4c>)
 800191c:	f002 fb63 	bl	8003fe6 <HAL_UART_Transmit>
	  osDelay(2000);
 8001920:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001924:	f003 f8d6 	bl	8004ad4 <osDelay>
  {
 8001928:	e7e6      	b.n	80018f8 <debug_task+0x8>
 800192a:	bf00      	nop
 800192c:	20000211 	.word	0x20000211
 8001930:	20000000 	.word	0x20000000
 8001934:	0800ae5c 	.word	0x0800ae5c
 8001938:	20004ba0 	.word	0x20004ba0
 800193c:	20004c4c 	.word	0x20004c4c

08001940 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d101      	bne.n	8001956 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001952:	f000 fac5 	bl	8001ee0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40010000 	.word	0x40010000

08001964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_MspInit+0x4c>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <HAL_MspInit+0x4c>)
 8001984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001988:	6453      	str	r3, [r2, #68]	; 0x44
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <HAL_MspInit+0x4c>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	603b      	str	r3, [r7, #0]
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_MspInit+0x4c>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <HAL_MspInit+0x4c>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	6413      	str	r3, [r2, #64]	; 0x40
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_MspInit+0x4c>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800

080019c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	; 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a17      	ldr	r2, [pc, #92]	; (8001a40 <HAL_ADC_MspInit+0x7c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d127      	bne.n	8001a36 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <HAL_ADC_MspInit+0x80>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a15      	ldr	r2, [pc, #84]	; (8001a44 <HAL_ADC_MspInit+0x80>)
 80019f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <HAL_ADC_MspInit+0x80>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_ADC_MspInit+0x80>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <HAL_ADC_MspInit+0x80>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_ADC_MspInit+0x80>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = THRESHOLD_POTENTIOMETER_Pin;
 8001a1e:	2310      	movs	r3, #16
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a22:	2303      	movs	r3, #3
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(THRESHOLD_POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4805      	ldr	r0, [pc, #20]	; (8001a48 <HAL_ADC_MspInit+0x84>)
 8001a32:	f000 ff01 	bl	8002838 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a36:	bf00      	nop
 8001a38:	3728      	adds	r7, #40	; 0x28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40012000 	.word	0x40012000
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020000 	.word	0x40020000

08001a4c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a6c:	d133      	bne.n	8001ad6 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <HAL_TIM_IC_MspInit+0x94>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4a1a      	ldr	r2, [pc, #104]	; (8001ae0 <HAL_TIM_IC_MspInit+0x94>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <HAL_TIM_IC_MspInit+0x94>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <HAL_TIM_IC_MspInit+0x94>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a13      	ldr	r2, [pc, #76]	; (8001ae0 <HAL_TIM_IC_MspInit+0x94>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_TIM_IC_MspInit+0x94>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4808      	ldr	r0, [pc, #32]	; (8001ae4 <HAL_TIM_IC_MspInit+0x98>)
 8001ac2:	f000 feb9 	bl	8002838 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	201c      	movs	r0, #28
 8001acc:	f000 fe8a 	bl	80027e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ad0:	201c      	movs	r0, #28
 8001ad2:	f000 fea3 	bl	800281c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ad6:	bf00      	nop
 8001ad8:	3728      	adds	r7, #40	; 0x28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40020000 	.word	0x40020000

08001ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a19      	ldr	r2, [pc, #100]	; (8001b6c <HAL_UART_MspInit+0x84>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d12b      	bne.n	8001b62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <HAL_UART_MspInit+0x88>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	4a17      	ldr	r2, [pc, #92]	; (8001b70 <HAL_UART_MspInit+0x88>)
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <HAL_UART_MspInit+0x88>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <HAL_UART_MspInit+0x88>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <HAL_UART_MspInit+0x88>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <HAL_UART_MspInit+0x88>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b42:	230c      	movs	r3, #12
 8001b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b52:	2307      	movs	r3, #7
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4805      	ldr	r0, [pc, #20]	; (8001b74 <HAL_UART_MspInit+0x8c>)
 8001b5e:	f000 fe6b 	bl	8002838 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b62:	bf00      	nop
 8001b64:	3728      	adds	r7, #40	; 0x28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40004400 	.word	0x40004400
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020000 	.word	0x40020000

08001b78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08c      	sub	sp, #48	; 0x30
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	2019      	movs	r0, #25
 8001b8e:	f000 fe29 	bl	80027e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b92:	2019      	movs	r0, #25
 8001b94:	f000 fe42 	bl	800281c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <HAL_InitTick+0xa0>)
 8001b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba0:	4a1d      	ldr	r2, [pc, #116]	; (8001c18 <HAL_InitTick+0xa0>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <HAL_InitTick+0xa0>)
 8001baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bb4:	f107 0210 	add.w	r2, r7, #16
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f001 fc50 	bl	8003464 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001bc4:	f001 fc3a 	bl	800343c <HAL_RCC_GetPCLK2Freq>
 8001bc8:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bcc:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <HAL_InitTick+0xa4>)
 8001bce:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd2:	0c9b      	lsrs	r3, r3, #18
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <HAL_InitTick+0xa8>)
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <HAL_InitTick+0xac>)
 8001bdc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_InitTick+0xa8>)
 8001be0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001be4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001be6:	4a0e      	ldr	r2, [pc, #56]	; (8001c20 <HAL_InitTick+0xa8>)
 8001be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bea:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <HAL_InitTick+0xa8>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <HAL_InitTick+0xa8>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001bf8:	4809      	ldr	r0, [pc, #36]	; (8001c20 <HAL_InitTick+0xa8>)
 8001bfa:	f001 fc65 	bl	80034c8 <HAL_TIM_Base_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d104      	bne.n	8001c0e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001c04:	4806      	ldr	r0, [pc, #24]	; (8001c20 <HAL_InitTick+0xa8>)
 8001c06:	f001 fc94 	bl	8003532 <HAL_TIM_Base_Start_IT>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	e000      	b.n	8001c10 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3730      	adds	r7, #48	; 0x30
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	431bde83 	.word	0x431bde83
 8001c20:	20004c90 	.word	0x20004c90
 8001c24:	40010000 	.word	0x40010000

08001c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c3a:	e7fe      	b.n	8001c3a <HardFault_Handler+0x4>

08001c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <MemManage_Handler+0x4>

08001c42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <BusFault_Handler+0x4>

08001c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <UsageFault_Handler+0x4>

08001c4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c62:	f001 fd1d 	bl	80036a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20004c90 	.word	0x20004c90

08001c70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b09b      	sub	sp, #108	; 0x6c
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//	if (&htim2.Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
//	{
		 char buffer[100];
		if (Is_First_Captured==0) // if the first value is not captured
 8001c76:	4b48      	ldr	r3, [pc, #288]	; (8001d98 <TIM2_IRQHandler+0x128>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d11a      	bne.n	8001cb4 <TIM2_IRQHandler+0x44>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1); // read the first value
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4846      	ldr	r0, [pc, #280]	; (8001d9c <TIM2_IRQHandler+0x12c>)
 8001c82:	f001 feb1 	bl	80039e8 <HAL_TIM_ReadCapturedValue>
 8001c86:	4602      	mov	r2, r0
 8001c88:	4b45      	ldr	r3, [pc, #276]	; (8001da0 <TIM2_IRQHandler+0x130>)
 8001c8a:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001c8c:	4b42      	ldr	r3, [pc, #264]	; (8001d98 <TIM2_IRQHandler+0x128>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001c92:	4b42      	ldr	r3, [pc, #264]	; (8001d9c <TIM2_IRQHandler+0x12c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6a1a      	ldr	r2, [r3, #32]
 8001c98:	4b40      	ldr	r3, [pc, #256]	; (8001d9c <TIM2_IRQHandler+0x12c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 020a 	bic.w	r2, r2, #10
 8001ca0:	621a      	str	r2, [r3, #32]
 8001ca2:	4b3e      	ldr	r3, [pc, #248]	; (8001d9c <TIM2_IRQHandler+0x12c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6a1a      	ldr	r2, [r3, #32]
 8001ca8:	4b3c      	ldr	r3, [pc, #240]	; (8001d9c <TIM2_IRQHandler+0x12c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0202 	orr.w	r2, r2, #2
 8001cb0:	621a      	str	r2, [r3, #32]
 8001cb2:	e063      	b.n	8001d7c <TIM2_IRQHandler+0x10c>
		}

		else if (Is_First_Captured==1)   // if the first is already captured
 8001cb4:	4b38      	ldr	r3, [pc, #224]	; (8001d98 <TIM2_IRQHandler+0x128>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d15f      	bne.n	8001d7c <TIM2_IRQHandler+0x10c>
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);  // read second value
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4837      	ldr	r0, [pc, #220]	; (8001d9c <TIM2_IRQHandler+0x12c>)
 8001cc0:	f001 fe92 	bl	80039e8 <HAL_TIM_ReadCapturedValue>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b37      	ldr	r3, [pc, #220]	; (8001da4 <TIM2_IRQHandler+0x134>)
 8001cc8:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim2, 0);  // reset the counter
 8001cca:	4b34      	ldr	r3, [pc, #208]	; (8001d9c <TIM2_IRQHandler+0x12c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24

			if (IC_Val2 > IC_Val1)
 8001cd2:	4b34      	ldr	r3, [pc, #208]	; (8001da4 <TIM2_IRQHandler+0x134>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	4b32      	ldr	r3, [pc, #200]	; (8001da0 <TIM2_IRQHandler+0x130>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d907      	bls.n	8001cee <TIM2_IRQHandler+0x7e>
			{
				Difference = IC_Val2-IC_Val1;
 8001cde:	4b31      	ldr	r3, [pc, #196]	; (8001da4 <TIM2_IRQHandler+0x134>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <TIM2_IRQHandler+0x130>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	4a2f      	ldr	r2, [pc, #188]	; (8001da8 <TIM2_IRQHandler+0x138>)
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	e00f      	b.n	8001d0e <TIM2_IRQHandler+0x9e>
			}

			else if (IC_Val1 > IC_Val2)
 8001cee:	4b2c      	ldr	r3, [pc, #176]	; (8001da0 <TIM2_IRQHandler+0x130>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4b2c      	ldr	r3, [pc, #176]	; (8001da4 <TIM2_IRQHandler+0x134>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d909      	bls.n	8001d0e <TIM2_IRQHandler+0x9e>
			{
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <TIM2_IRQHandler+0x134>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4b28      	ldr	r3, [pc, #160]	; (8001da0 <TIM2_IRQHandler+0x130>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001d08:	33ff      	adds	r3, #255	; 0xff
 8001d0a:	4a27      	ldr	r2, [pc, #156]	; (8001da8 <TIM2_IRQHandler+0x138>)
 8001d0c:	6013      	str	r3, [r2, #0]
			}

			Distance = Difference * .034/2;
 8001d0e:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <TIM2_IRQHandler+0x138>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fbfe 	bl	8000514 <__aeabi_ui2d>
 8001d18:	a31d      	add	r3, pc, #116	; (adr r3, 8001d90 <TIM2_IRQHandler+0x120>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f7fe fc73 	bl	8000608 <__aeabi_dmul>
 8001d22:	4603      	mov	r3, r0
 8001d24:	460c      	mov	r4, r1
 8001d26:	4618      	mov	r0, r3
 8001d28:	4621      	mov	r1, r4
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d32:	f7fe fd93 	bl	800085c <__aeabi_ddiv>
 8001d36:	4603      	mov	r3, r0
 8001d38:	460c      	mov	r4, r1
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	f7fe ff3b 	bl	8000bb8 <__aeabi_d2uiz>
 8001d42:	4603      	mov	r3, r0
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4b19      	ldr	r3, [pc, #100]	; (8001dac <TIM2_IRQHandler+0x13c>)
 8001d48:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <TIM2_IRQHandler+0x128>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <TIM2_IRQHandler+0x12c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6a1a      	ldr	r2, [r3, #32]
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <TIM2_IRQHandler+0x12c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 020a 	bic.w	r2, r2, #10
 8001d5e:	621a      	str	r2, [r3, #32]
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <TIM2_IRQHandler+0x12c>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <TIM2_IRQHandler+0x12c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6a12      	ldr	r2, [r2, #32]
 8001d6a:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <TIM2_IRQHandler+0x12c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <TIM2_IRQHandler+0x12c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0202 	bic.w	r2, r2, #2
 8001d7a:	60da      	str	r2, [r3, #12]
		}
//		 sprintf(buffer, "IFC %d Val1 %d Val2 %d \r\n", Is_First_Captured, IC_Val1, IC_Val2);
//		HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
//	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d7c:	4807      	ldr	r0, [pc, #28]	; (8001d9c <TIM2_IRQHandler+0x12c>)
 8001d7e:	f001 fc8f 	bl	80036a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	376c      	adds	r7, #108	; 0x6c
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd90      	pop	{r4, r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	f3af 8000 	nop.w
 8001d90:	b020c49c 	.word	0xb020c49c
 8001d94:	3fa16872 	.word	0x3fa16872
 8001d98:	20000210 	.word	0x20000210
 8001d9c:	20004c0c 	.word	0x20004c0c
 8001da0:	20000204 	.word	0x20000204
 8001da4:	20000208 	.word	0x20000208
 8001da8:	2000020c 	.word	0x2000020c
 8001dac:	20000211 	.word	0x20000211

08001db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db8:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <_sbrk+0x5c>)
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <_sbrk+0x60>)
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d102      	bne.n	8001dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <_sbrk+0x64>)
 8001dce:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <_sbrk+0x68>)
 8001dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <_sbrk+0x64>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d207      	bcs.n	8001df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001de0:	f005 faa4 	bl	800732c <__errno>
 8001de4:	4602      	mov	r2, r0
 8001de6:	230c      	movs	r3, #12
 8001de8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dee:	e009      	b.n	8001e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <_sbrk+0x64>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001df6:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <_sbrk+0x64>)
 8001e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e02:	68fb      	ldr	r3, [r7, #12]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20020000 	.word	0x20020000
 8001e10:	00000400 	.word	0x00000400
 8001e14:	20000220 	.word	0x20000220
 8001e18:	20004d18 	.word	0x20004d18

08001e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <SystemInit+0x28>)
 8001e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e26:	4a07      	ldr	r2, [pc, #28]	; (8001e44 <SystemInit+0x28>)
 8001e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e30:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <SystemInit+0x28>)
 8001e32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e36:	609a      	str	r2, [r3, #8]
#endif
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e4e:	e003      	b.n	8001e58 <LoopCopyDataInit>

08001e50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e56:	3104      	adds	r1, #4

08001e58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e58:	480b      	ldr	r0, [pc, #44]	; (8001e88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e60:	d3f6      	bcc.n	8001e50 <CopyDataInit>
  ldr  r2, =_sbss
 8001e62:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e64:	e002      	b.n	8001e6c <LoopFillZerobss>

08001e66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e68:	f842 3b04 	str.w	r3, [r2], #4

08001e6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e70:	d3f9      	bcc.n	8001e66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e72:	f7ff ffd3 	bl	8001e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e76:	f005 fa5f 	bl	8007338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e7a:	f7ff fa51 	bl	8001320 <main>
  bx  lr    
 8001e7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e80:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e84:	0800b248 	.word	0x0800b248
  ldr  r0, =_sdata
 8001e88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e8c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001e90:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001e94:	20004d18 	.word	0x20004d18

08001e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e98:	e7fe      	b.n	8001e98 <ADC_IRQHandler>
	...

08001e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ea0:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <HAL_Init+0x40>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	; (8001edc <HAL_Init+0x40>)
 8001ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_Init+0x40>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <HAL_Init+0x40>)
 8001eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <HAL_Init+0x40>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a07      	ldr	r2, [pc, #28]	; (8001edc <HAL_Init+0x40>)
 8001ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec4:	2003      	movs	r0, #3
 8001ec6:	f000 fc82 	bl	80027ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f7ff fe54 	bl	8001b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed0:	f7ff fd50 	bl	8001974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023c00 	.word	0x40023c00

08001ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_IncTick+0x20>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_IncTick+0x24>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <HAL_IncTick+0x24>)
 8001ef2:	6013      	str	r3, [r2, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	2000000c 	.word	0x2000000c
 8001f04:	20004cd0 	.word	0x20004cd0

08001f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_GetTick+0x14>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20004cd0 	.word	0x20004cd0

08001f20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e033      	b.n	8001f9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d109      	bne.n	8001f52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff fd40 	bl	80019c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f003 0310 	and.w	r3, r3, #16
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d118      	bne.n	8001f90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f66:	f023 0302 	bic.w	r3, r3, #2
 8001f6a:	f043 0202 	orr.w	r2, r3, #2
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 fa82 	bl	800247c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f023 0303 	bic.w	r3, r3, #3
 8001f86:	f043 0201 	orr.w	r2, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f8e:	e001      	b.n	8001f94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ADC_Start+0x1a>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e08a      	b.n	80020d8 <HAL_ADC_Start+0x130>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d018      	beq.n	800200a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fe8:	4b3e      	ldr	r3, [pc, #248]	; (80020e4 <HAL_ADC_Start+0x13c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a3e      	ldr	r2, [pc, #248]	; (80020e8 <HAL_ADC_Start+0x140>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	0c9a      	lsrs	r2, r3, #18
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4413      	add	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ffc:	e002      	b.n	8002004 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	3b01      	subs	r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f9      	bne.n	8001ffe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b01      	cmp	r3, #1
 8002016:	d15e      	bne.n	80020d6 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002020:	f023 0301 	bic.w	r3, r3, #1
 8002024:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002036:	2b00      	cmp	r3, #0
 8002038:	d007      	beq.n	800204a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002042:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002056:	d106      	bne.n	8002066 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205c:	f023 0206 	bic.w	r2, r3, #6
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	645a      	str	r2, [r3, #68]	; 0x44
 8002064:	e002      	b.n	800206c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002074:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <HAL_ADC_Start+0x144>)
 8002076:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002080:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 031f 	and.w	r3, r3, #31
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10f      	bne.n	80020ae <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d11c      	bne.n	80020d6 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	e013      	b.n	80020d6 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a0f      	ldr	r2, [pc, #60]	; (80020f0 <HAL_ADC_Start+0x148>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d10e      	bne.n	80020d6 <HAL_ADC_Start+0x12e>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d107      	bne.n	80020d6 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020d4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	20000004 	.word	0x20000004
 80020e8:	431bde83 	.word	0x431bde83
 80020ec:	40012300 	.word	0x40012300
 80020f0:	40012000 	.word	0x40012000

080020f4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002110:	d113      	bne.n	800213a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800211c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002120:	d10b      	bne.n	800213a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f043 0220 	orr.w	r2, r3, #32
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e05c      	b.n	80021f4 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800213a:	f7ff fee5 	bl	8001f08 <HAL_GetTick>
 800213e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002140:	e01a      	b.n	8002178 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002148:	d016      	beq.n	8002178 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d007      	beq.n	8002160 <HAL_ADC_PollForConversion+0x6c>
 8002150:	f7ff feda 	bl	8001f08 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d20b      	bcs.n	8002178 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	f043 0204 	orr.w	r2, r3, #4
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e03d      	b.n	80021f4 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b02      	cmp	r3, #2
 8002184:	d1dd      	bne.n	8002142 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f06f 0212 	mvn.w	r2, #18
 800218e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d123      	bne.n	80021f2 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d11f      	bne.n	80021f2 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d006      	beq.n	80021ce <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d111      	bne.n	80021f2 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d105      	bne.n	80021f2 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f043 0201 	orr.w	r2, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x1c>
 8002230:	2302      	movs	r3, #2
 8002232:	e113      	b.n	800245c <HAL_ADC_ConfigChannel+0x244>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b09      	cmp	r3, #9
 8002242:	d925      	bls.n	8002290 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68d9      	ldr	r1, [r3, #12]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	b29b      	uxth	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	4613      	mov	r3, r2
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	4413      	add	r3, r2
 8002258:	3b1e      	subs	r3, #30
 800225a:	2207      	movs	r2, #7
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43da      	mvns	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	400a      	ands	r2, r1
 8002268:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68d9      	ldr	r1, [r3, #12]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	b29b      	uxth	r3, r3
 800227a:	4618      	mov	r0, r3
 800227c:	4603      	mov	r3, r0
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4403      	add	r3, r0
 8002282:	3b1e      	subs	r3, #30
 8002284:	409a      	lsls	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	e022      	b.n	80022d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6919      	ldr	r1, [r3, #16]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	b29b      	uxth	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	4613      	mov	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	2207      	movs	r2, #7
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	400a      	ands	r2, r1
 80022b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6919      	ldr	r1, [r3, #16]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	4618      	mov	r0, r3
 80022c6:	4603      	mov	r3, r0
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4403      	add	r3, r0
 80022cc:	409a      	lsls	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d824      	bhi.n	8002328 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	3b05      	subs	r3, #5
 80022f0:	221f      	movs	r2, #31
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43da      	mvns	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	400a      	ands	r2, r1
 80022fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	4618      	mov	r0, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	3b05      	subs	r3, #5
 800231a:	fa00 f203 	lsl.w	r2, r0, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	635a      	str	r2, [r3, #52]	; 0x34
 8002326:	e04c      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b0c      	cmp	r3, #12
 800232e:	d824      	bhi.n	800237a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	3b23      	subs	r3, #35	; 0x23
 8002342:	221f      	movs	r2, #31
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43da      	mvns	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	400a      	ands	r2, r1
 8002350:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	4618      	mov	r0, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	3b23      	subs	r3, #35	; 0x23
 800236c:	fa00 f203 	lsl.w	r2, r0, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
 8002378:	e023      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	3b41      	subs	r3, #65	; 0x41
 800238c:	221f      	movs	r2, #31
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	400a      	ands	r2, r1
 800239a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	3b41      	subs	r3, #65	; 0x41
 80023b6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023c2:	4b29      	ldr	r3, [pc, #164]	; (8002468 <HAL_ADC_ConfigChannel+0x250>)
 80023c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a28      	ldr	r2, [pc, #160]	; (800246c <HAL_ADC_ConfigChannel+0x254>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d10f      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1d8>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b12      	cmp	r3, #18
 80023d6:	d10b      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a1d      	ldr	r2, [pc, #116]	; (800246c <HAL_ADC_ConfigChannel+0x254>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d12b      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x23a>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <HAL_ADC_ConfigChannel+0x258>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d003      	beq.n	800240c <HAL_ADC_ConfigChannel+0x1f4>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b11      	cmp	r3, #17
 800240a:	d122      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a11      	ldr	r2, [pc, #68]	; (8002470 <HAL_ADC_ConfigChannel+0x258>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d111      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <HAL_ADC_ConfigChannel+0x25c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a11      	ldr	r2, [pc, #68]	; (8002478 <HAL_ADC_ConfigChannel+0x260>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	0c9a      	lsrs	r2, r3, #18
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002444:	e002      	b.n	800244c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	3b01      	subs	r3, #1
 800244a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f9      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	40012300 	.word	0x40012300
 800246c:	40012000 	.word	0x40012000
 8002470:	10000012 	.word	0x10000012
 8002474:	20000004 	.word	0x20000004
 8002478:	431bde83 	.word	0x431bde83

0800247c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002484:	4b79      	ldr	r3, [pc, #484]	; (800266c <ADC_Init+0x1f0>)
 8002486:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	431a      	orrs	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	021a      	lsls	r2, r3, #8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6859      	ldr	r1, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6899      	ldr	r1, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	4a58      	ldr	r2, [pc, #352]	; (8002670 <ADC_Init+0x1f4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d022      	beq.n	800255a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002522:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6899      	ldr	r1, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002544:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6899      	ldr	r1, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	e00f      	b.n	800257a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002568:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002578:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0202 	bic.w	r2, r2, #2
 8002588:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6899      	ldr	r1, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	7e1b      	ldrb	r3, [r3, #24]
 8002594:	005a      	lsls	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01b      	beq.n	80025e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6859      	ldr	r1, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	3b01      	subs	r3, #1
 80025d4:	035a      	lsls	r2, r3, #13
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	e007      	b.n	80025f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	3b01      	subs	r3, #1
 800260c:	051a      	lsls	r2, r3, #20
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002624:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6899      	ldr	r1, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002632:	025a      	lsls	r2, r3, #9
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800264a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6899      	ldr	r1, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	029a      	lsls	r2, r3, #10
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	609a      	str	r2, [r3, #8]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	40012300 	.word	0x40012300
 8002670:	0f000001 	.word	0x0f000001

08002674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002690:	4013      	ands	r3, r2
 8002692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800269c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026a6:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	60d3      	str	r3, [r2, #12]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <__NVIC_GetPriorityGrouping+0x18>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	f003 0307 	and.w	r3, r3, #7
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	db0b      	blt.n	8002702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	4907      	ldr	r1, [pc, #28]	; (8002710 <__NVIC_EnableIRQ+0x38>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	2001      	movs	r0, #1
 80026fa:	fa00 f202 	lsl.w	r2, r0, r2
 80026fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e000e100 	.word	0xe000e100

08002714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	6039      	str	r1, [r7, #0]
 800271e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002724:	2b00      	cmp	r3, #0
 8002726:	db0a      	blt.n	800273e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	b2da      	uxtb	r2, r3
 800272c:	490c      	ldr	r1, [pc, #48]	; (8002760 <__NVIC_SetPriority+0x4c>)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	0112      	lsls	r2, r2, #4
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	440b      	add	r3, r1
 8002738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800273c:	e00a      	b.n	8002754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4908      	ldr	r1, [pc, #32]	; (8002764 <__NVIC_SetPriority+0x50>)
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	3b04      	subs	r3, #4
 800274c:	0112      	lsls	r2, r2, #4
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	440b      	add	r3, r1
 8002752:	761a      	strb	r2, [r3, #24]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	e000e100 	.word	0xe000e100
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002768:	b480      	push	{r7}
 800276a:	b089      	sub	sp, #36	; 0x24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f1c3 0307 	rsb	r3, r3, #7
 8002782:	2b04      	cmp	r3, #4
 8002784:	bf28      	it	cs
 8002786:	2304      	movcs	r3, #4
 8002788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3304      	adds	r3, #4
 800278e:	2b06      	cmp	r3, #6
 8002790:	d902      	bls.n	8002798 <NVIC_EncodePriority+0x30>
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3b03      	subs	r3, #3
 8002796:	e000      	b.n	800279a <NVIC_EncodePriority+0x32>
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800279c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43da      	mvns	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	401a      	ands	r2, r3
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ba:	43d9      	mvns	r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c0:	4313      	orrs	r3, r2
         );
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3724      	adds	r7, #36	; 0x24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff ff4c 	bl	8002674 <__NVIC_SetPriorityGrouping>
}
 80027dc:	bf00      	nop
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027f6:	f7ff ff61 	bl	80026bc <__NVIC_GetPriorityGrouping>
 80027fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	68b9      	ldr	r1, [r7, #8]
 8002800:	6978      	ldr	r0, [r7, #20]
 8002802:	f7ff ffb1 	bl	8002768 <NVIC_EncodePriority>
 8002806:	4602      	mov	r2, r0
 8002808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280c:	4611      	mov	r1, r2
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff ff80 	bl	8002714 <__NVIC_SetPriority>
}
 8002814:	bf00      	nop
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ff54 	bl	80026d8 <__NVIC_EnableIRQ>
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	; 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	e159      	b.n	8002b08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002854:	2201      	movs	r2, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	429a      	cmp	r2, r3
 800286e:	f040 8148 	bne.w	8002b02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d00b      	beq.n	8002892 <HAL_GPIO_Init+0x5a>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d007      	beq.n	8002892 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002886:	2b11      	cmp	r3, #17
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b12      	cmp	r3, #18
 8002890:	d130      	bne.n	80028f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	2203      	movs	r2, #3
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c8:	2201      	movs	r2, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f003 0201 	and.w	r2, r3, #1
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	2203      	movs	r2, #3
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d003      	beq.n	8002934 <HAL_GPIO_Init+0xfc>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b12      	cmp	r3, #18
 8002932:	d123      	bne.n	800297c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	08da      	lsrs	r2, r3, #3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3208      	adds	r2, #8
 800293c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	220f      	movs	r2, #15
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	08da      	lsrs	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3208      	adds	r2, #8
 8002976:	69b9      	ldr	r1, [r7, #24]
 8002978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	2203      	movs	r2, #3
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0203 	and.w	r2, r3, #3
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80a2 	beq.w	8002b02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b56      	ldr	r3, [pc, #344]	; (8002b1c <HAL_GPIO_Init+0x2e4>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	4a55      	ldr	r2, [pc, #340]	; (8002b1c <HAL_GPIO_Init+0x2e4>)
 80029c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029cc:	6453      	str	r3, [r2, #68]	; 0x44
 80029ce:	4b53      	ldr	r3, [pc, #332]	; (8002b1c <HAL_GPIO_Init+0x2e4>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029da:	4a51      	ldr	r2, [pc, #324]	; (8002b20 <HAL_GPIO_Init+0x2e8>)
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	089b      	lsrs	r3, r3, #2
 80029e0:	3302      	adds	r3, #2
 80029e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	220f      	movs	r2, #15
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a48      	ldr	r2, [pc, #288]	; (8002b24 <HAL_GPIO_Init+0x2ec>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d019      	beq.n	8002a3a <HAL_GPIO_Init+0x202>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a47      	ldr	r2, [pc, #284]	; (8002b28 <HAL_GPIO_Init+0x2f0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <HAL_GPIO_Init+0x1fe>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a46      	ldr	r2, [pc, #280]	; (8002b2c <HAL_GPIO_Init+0x2f4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00d      	beq.n	8002a32 <HAL_GPIO_Init+0x1fa>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a45      	ldr	r2, [pc, #276]	; (8002b30 <HAL_GPIO_Init+0x2f8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d007      	beq.n	8002a2e <HAL_GPIO_Init+0x1f6>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a44      	ldr	r2, [pc, #272]	; (8002b34 <HAL_GPIO_Init+0x2fc>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d101      	bne.n	8002a2a <HAL_GPIO_Init+0x1f2>
 8002a26:	2304      	movs	r3, #4
 8002a28:	e008      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a2a:	2307      	movs	r3, #7
 8002a2c:	e006      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e004      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e002      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	f002 0203 	and.w	r2, r2, #3
 8002a42:	0092      	lsls	r2, r2, #2
 8002a44:	4093      	lsls	r3, r2
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a4c:	4934      	ldr	r1, [pc, #208]	; (8002b20 <HAL_GPIO_Init+0x2e8>)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	3302      	adds	r3, #2
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a5a:	4b37      	ldr	r3, [pc, #220]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a7e:	4a2e      	ldr	r2, [pc, #184]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a84:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aa8:	4a23      	ldr	r2, [pc, #140]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aae:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ad2:	4a19      	ldr	r2, [pc, #100]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad8:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002afc:	4a0e      	ldr	r2, [pc, #56]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3301      	adds	r3, #1
 8002b06:	61fb      	str	r3, [r7, #28]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b0f      	cmp	r3, #15
 8002b0c:	f67f aea2 	bls.w	8002854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b10:	bf00      	nop
 8002b12:	3724      	adds	r7, #36	; 0x24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40013800 	.word	0x40013800
 8002b24:	40020000 	.word	0x40020000
 8002b28:	40020400 	.word	0x40020400
 8002b2c:	40020800 	.word	0x40020800
 8002b30:	40020c00 	.word	0x40020c00
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40013c00 	.word	0x40013c00

08002b3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	887b      	ldrh	r3, [r7, #2]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
 8002b58:	e001      	b.n	8002b5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	807b      	strh	r3, [r7, #2]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b7c:	787b      	ldrb	r3, [r7, #1]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b82:	887a      	ldrh	r2, [r7, #2]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b88:	e003      	b.n	8002b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b8a:	887b      	ldrh	r3, [r7, #2]
 8002b8c:	041a      	lsls	r2, r3, #16
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	619a      	str	r2, [r3, #24]
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e25b      	b.n	800306a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d075      	beq.n	8002caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bbe:	4ba3      	ldr	r3, [pc, #652]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d00c      	beq.n	8002be4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bca:	4ba0      	ldr	r3, [pc, #640]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d112      	bne.n	8002bfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bd6:	4b9d      	ldr	r3, [pc, #628]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002be2:	d10b      	bne.n	8002bfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be4:	4b99      	ldr	r3, [pc, #612]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d05b      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x108>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d157      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e236      	b.n	800306a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c04:	d106      	bne.n	8002c14 <HAL_RCC_OscConfig+0x74>
 8002c06:	4b91      	ldr	r3, [pc, #580]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a90      	ldr	r2, [pc, #576]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	e01d      	b.n	8002c50 <HAL_RCC_OscConfig+0xb0>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x98>
 8002c1e:	4b8b      	ldr	r3, [pc, #556]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a8a      	ldr	r2, [pc, #552]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b88      	ldr	r3, [pc, #544]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a87      	ldr	r2, [pc, #540]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e00b      	b.n	8002c50 <HAL_RCC_OscConfig+0xb0>
 8002c38:	4b84      	ldr	r3, [pc, #528]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a83      	ldr	r2, [pc, #524]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	4b81      	ldr	r3, [pc, #516]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a80      	ldr	r2, [pc, #512]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d013      	beq.n	8002c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7ff f956 	bl	8001f08 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c60:	f7ff f952 	bl	8001f08 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	; 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e1fb      	b.n	800306a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	4b76      	ldr	r3, [pc, #472]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0xc0>
 8002c7e:	e014      	b.n	8002caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7ff f942 	bl	8001f08 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c88:	f7ff f93e 	bl	8001f08 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	; 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e1e7      	b.n	800306a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9a:	4b6c      	ldr	r3, [pc, #432]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0xe8>
 8002ca6:	e000      	b.n	8002caa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d063      	beq.n	8002d7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cb6:	4b65      	ldr	r3, [pc, #404]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00b      	beq.n	8002cda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cc2:	4b62      	ldr	r3, [pc, #392]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d11c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cce:	4b5f      	ldr	r3, [pc, #380]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d116      	bne.n	8002d08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cda:	4b5c      	ldr	r3, [pc, #368]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x152>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d001      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e1bb      	b.n	800306a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf2:	4b56      	ldr	r3, [pc, #344]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4952      	ldr	r1, [pc, #328]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d06:	e03a      	b.n	8002d7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d020      	beq.n	8002d52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d10:	4b4f      	ldr	r3, [pc, #316]	; (8002e50 <HAL_RCC_OscConfig+0x2b0>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d16:	f7ff f8f7 	bl	8001f08 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d1e:	f7ff f8f3 	bl	8001f08 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e19c      	b.n	800306a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d30:	4b46      	ldr	r3, [pc, #280]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3c:	4b43      	ldr	r3, [pc, #268]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4940      	ldr	r1, [pc, #256]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	600b      	str	r3, [r1, #0]
 8002d50:	e015      	b.n	8002d7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d52:	4b3f      	ldr	r3, [pc, #252]	; (8002e50 <HAL_RCC_OscConfig+0x2b0>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d58:	f7ff f8d6 	bl	8001f08 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d60:	f7ff f8d2 	bl	8001f08 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e17b      	b.n	800306a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d72:	4b36      	ldr	r3, [pc, #216]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d030      	beq.n	8002dec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d016      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d92:	4b30      	ldr	r3, [pc, #192]	; (8002e54 <HAL_RCC_OscConfig+0x2b4>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d98:	f7ff f8b6 	bl	8001f08 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002da0:	f7ff f8b2 	bl	8001f08 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e15b      	b.n	800306a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db2:	4b26      	ldr	r3, [pc, #152]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x200>
 8002dbe:	e015      	b.n	8002dec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc0:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <HAL_RCC_OscConfig+0x2b4>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc6:	f7ff f89f 	bl	8001f08 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dce:	f7ff f89b 	bl	8001f08 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e144      	b.n	800306a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de0:	4b1a      	ldr	r3, [pc, #104]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1f0      	bne.n	8002dce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80a0 	beq.w	8002f3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dfe:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10f      	bne.n	8002e2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	4a0e      	ldr	r2, [pc, #56]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e18:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1a:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e26:	2301      	movs	r3, #1
 8002e28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_RCC_OscConfig+0x2b8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d121      	bne.n	8002e7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e36:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <HAL_RCC_OscConfig+0x2b8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a07      	ldr	r2, [pc, #28]	; (8002e58 <HAL_RCC_OscConfig+0x2b8>)
 8002e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e42:	f7ff f861 	bl	8001f08 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e48:	e011      	b.n	8002e6e <HAL_RCC_OscConfig+0x2ce>
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	42470000 	.word	0x42470000
 8002e54:	42470e80 	.word	0x42470e80
 8002e58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5c:	f7ff f854 	bl	8001f08 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e0fd      	b.n	800306a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6e:	4b81      	ldr	r3, [pc, #516]	; (8003074 <HAL_RCC_OscConfig+0x4d4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d106      	bne.n	8002e90 <HAL_RCC_OscConfig+0x2f0>
 8002e82:	4b7d      	ldr	r3, [pc, #500]	; (8003078 <HAL_RCC_OscConfig+0x4d8>)
 8002e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e86:	4a7c      	ldr	r2, [pc, #496]	; (8003078 <HAL_RCC_OscConfig+0x4d8>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8e:	e01c      	b.n	8002eca <HAL_RCC_OscConfig+0x32a>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b05      	cmp	r3, #5
 8002e96:	d10c      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x312>
 8002e98:	4b77      	ldr	r3, [pc, #476]	; (8003078 <HAL_RCC_OscConfig+0x4d8>)
 8002e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9c:	4a76      	ldr	r2, [pc, #472]	; (8003078 <HAL_RCC_OscConfig+0x4d8>)
 8002e9e:	f043 0304 	orr.w	r3, r3, #4
 8002ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea4:	4b74      	ldr	r3, [pc, #464]	; (8003078 <HAL_RCC_OscConfig+0x4d8>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	4a73      	ldr	r2, [pc, #460]	; (8003078 <HAL_RCC_OscConfig+0x4d8>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb0:	e00b      	b.n	8002eca <HAL_RCC_OscConfig+0x32a>
 8002eb2:	4b71      	ldr	r3, [pc, #452]	; (8003078 <HAL_RCC_OscConfig+0x4d8>)
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb6:	4a70      	ldr	r2, [pc, #448]	; (8003078 <HAL_RCC_OscConfig+0x4d8>)
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ebe:	4b6e      	ldr	r3, [pc, #440]	; (8003078 <HAL_RCC_OscConfig+0x4d8>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	4a6d      	ldr	r2, [pc, #436]	; (8003078 <HAL_RCC_OscConfig+0x4d8>)
 8002ec4:	f023 0304 	bic.w	r3, r3, #4
 8002ec8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d015      	beq.n	8002efe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed2:	f7ff f819 	bl	8001f08 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eda:	f7ff f815 	bl	8001f08 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e0bc      	b.n	800306a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef0:	4b61      	ldr	r3, [pc, #388]	; (8003078 <HAL_RCC_OscConfig+0x4d8>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0ee      	beq.n	8002eda <HAL_RCC_OscConfig+0x33a>
 8002efc:	e014      	b.n	8002f28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efe:	f7ff f803 	bl	8001f08 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f04:	e00a      	b.n	8002f1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f06:	f7fe ffff 	bl	8001f08 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e0a6      	b.n	800306a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f1c:	4b56      	ldr	r3, [pc, #344]	; (8003078 <HAL_RCC_OscConfig+0x4d8>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1ee      	bne.n	8002f06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d105      	bne.n	8002f3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2e:	4b52      	ldr	r3, [pc, #328]	; (8003078 <HAL_RCC_OscConfig+0x4d8>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	4a51      	ldr	r2, [pc, #324]	; (8003078 <HAL_RCC_OscConfig+0x4d8>)
 8002f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8092 	beq.w	8003068 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f44:	4b4c      	ldr	r3, [pc, #304]	; (8003078 <HAL_RCC_OscConfig+0x4d8>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 030c 	and.w	r3, r3, #12
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d05c      	beq.n	800300a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d141      	bne.n	8002fdc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f58:	4b48      	ldr	r3, [pc, #288]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5e:	f7fe ffd3 	bl	8001f08 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f66:	f7fe ffcf 	bl	8001f08 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e078      	b.n	800306a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f78:	4b3f      	ldr	r3, [pc, #252]	; (8003078 <HAL_RCC_OscConfig+0x4d8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1f0      	bne.n	8002f66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69da      	ldr	r2, [r3, #28]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	019b      	lsls	r3, r3, #6
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	085b      	lsrs	r3, r3, #1
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	041b      	lsls	r3, r3, #16
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	061b      	lsls	r3, r3, #24
 8002fa8:	4933      	ldr	r1, [pc, #204]	; (8003078 <HAL_RCC_OscConfig+0x4d8>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fae:	4b33      	ldr	r3, [pc, #204]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7fe ffa8 	bl	8001f08 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7fe ffa4 	bl	8001f08 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e04d      	b.n	800306a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fce:	4b2a      	ldr	r3, [pc, #168]	; (8003078 <HAL_RCC_OscConfig+0x4d8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x41c>
 8002fda:	e045      	b.n	8003068 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fdc:	4b27      	ldr	r3, [pc, #156]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe2:	f7fe ff91 	bl	8001f08 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fea:	f7fe ff8d 	bl	8001f08 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e036      	b.n	800306a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffc:	4b1e      	ldr	r3, [pc, #120]	; (8003078 <HAL_RCC_OscConfig+0x4d8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f0      	bne.n	8002fea <HAL_RCC_OscConfig+0x44a>
 8003008:	e02e      	b.n	8003068 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e029      	b.n	800306a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003016:	4b18      	ldr	r3, [pc, #96]	; (8003078 <HAL_RCC_OscConfig+0x4d8>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	429a      	cmp	r2, r3
 8003028:	d11c      	bne.n	8003064 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d115      	bne.n	8003064 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800303e:	4013      	ands	r3, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003044:	4293      	cmp	r3, r2
 8003046:	d10d      	bne.n	8003064 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003052:	429a      	cmp	r2, r3
 8003054:	d106      	bne.n	8003064 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40007000 	.word	0x40007000
 8003078:	40023800 	.word	0x40023800
 800307c:	42470060 	.word	0x42470060

08003080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0cc      	b.n	800322e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003094:	4b68      	ldr	r3, [pc, #416]	; (8003238 <HAL_RCC_ClockConfig+0x1b8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d90c      	bls.n	80030bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b65      	ldr	r3, [pc, #404]	; (8003238 <HAL_RCC_ClockConfig+0x1b8>)
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030aa:	4b63      	ldr	r3, [pc, #396]	; (8003238 <HAL_RCC_ClockConfig+0x1b8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0b8      	b.n	800322e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d020      	beq.n	800310a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d4:	4b59      	ldr	r3, [pc, #356]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	4a58      	ldr	r2, [pc, #352]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030ec:	4b53      	ldr	r3, [pc, #332]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	4a52      	ldr	r2, [pc, #328]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f8:	4b50      	ldr	r3, [pc, #320]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	494d      	ldr	r1, [pc, #308]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	4313      	orrs	r3, r2
 8003108:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d044      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d107      	bne.n	800312e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311e:	4b47      	ldr	r3, [pc, #284]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d119      	bne.n	800315e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e07f      	b.n	800322e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d003      	beq.n	800313e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800313a:	2b03      	cmp	r3, #3
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800313e:	4b3f      	ldr	r3, [pc, #252]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d109      	bne.n	800315e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e06f      	b.n	800322e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314e:	4b3b      	ldr	r3, [pc, #236]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e067      	b.n	800322e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800315e:	4b37      	ldr	r3, [pc, #220]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f023 0203 	bic.w	r2, r3, #3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	4934      	ldr	r1, [pc, #208]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	4313      	orrs	r3, r2
 800316e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003170:	f7fe feca 	bl	8001f08 <HAL_GetTick>
 8003174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003176:	e00a      	b.n	800318e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003178:	f7fe fec6 	bl	8001f08 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	f241 3288 	movw	r2, #5000	; 0x1388
 8003186:	4293      	cmp	r3, r2
 8003188:	d901      	bls.n	800318e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e04f      	b.n	800322e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318e:	4b2b      	ldr	r3, [pc, #172]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 020c 	and.w	r2, r3, #12
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	429a      	cmp	r2, r3
 800319e:	d1eb      	bne.n	8003178 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031a0:	4b25      	ldr	r3, [pc, #148]	; (8003238 <HAL_RCC_ClockConfig+0x1b8>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d20c      	bcs.n	80031c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ae:	4b22      	ldr	r3, [pc, #136]	; (8003238 <HAL_RCC_ClockConfig+0x1b8>)
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b6:	4b20      	ldr	r3, [pc, #128]	; (8003238 <HAL_RCC_ClockConfig+0x1b8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e032      	b.n	800322e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d008      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d4:	4b19      	ldr	r3, [pc, #100]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	4916      	ldr	r1, [pc, #88]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d009      	beq.n	8003206 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031f2:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	490e      	ldr	r1, [pc, #56]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003206:	f000 f821 	bl	800324c <HAL_RCC_GetSysClockFreq>
 800320a:	4601      	mov	r1, r0
 800320c:	4b0b      	ldr	r3, [pc, #44]	; (800323c <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	091b      	lsrs	r3, r3, #4
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <HAL_RCC_ClockConfig+0x1c0>)
 8003218:	5cd3      	ldrb	r3, [r2, r3]
 800321a:	fa21 f303 	lsr.w	r3, r1, r3
 800321e:	4a09      	ldr	r2, [pc, #36]	; (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 8003220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <HAL_RCC_ClockConfig+0x1c8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fca6 	bl	8001b78 <HAL_InitTick>

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40023c00 	.word	0x40023c00
 800323c:	40023800 	.word	0x40023800
 8003240:	0800af6c 	.word	0x0800af6c
 8003244:	20000004 	.word	0x20000004
 8003248:	20000008 	.word	0x20000008

0800324c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800324c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	607b      	str	r3, [r7, #4]
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	2300      	movs	r3, #0
 800325c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003262:	4b63      	ldr	r3, [pc, #396]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 030c 	and.w	r3, r3, #12
 800326a:	2b04      	cmp	r3, #4
 800326c:	d007      	beq.n	800327e <HAL_RCC_GetSysClockFreq+0x32>
 800326e:	2b08      	cmp	r3, #8
 8003270:	d008      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x38>
 8003272:	2b00      	cmp	r3, #0
 8003274:	f040 80b4 	bne.w	80033e0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003278:	4b5e      	ldr	r3, [pc, #376]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800327a:	60bb      	str	r3, [r7, #8]
       break;
 800327c:	e0b3      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800327e:	4b5e      	ldr	r3, [pc, #376]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003280:	60bb      	str	r3, [r7, #8]
      break;
 8003282:	e0b0      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003284:	4b5a      	ldr	r3, [pc, #360]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800328c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800328e:	4b58      	ldr	r3, [pc, #352]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d04a      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329a:	4b55      	ldr	r3, [pc, #340]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	099b      	lsrs	r3, r3, #6
 80032a0:	f04f 0400 	mov.w	r4, #0
 80032a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	ea03 0501 	and.w	r5, r3, r1
 80032b0:	ea04 0602 	and.w	r6, r4, r2
 80032b4:	4629      	mov	r1, r5
 80032b6:	4632      	mov	r2, r6
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	f04f 0400 	mov.w	r4, #0
 80032c0:	0154      	lsls	r4, r2, #5
 80032c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032c6:	014b      	lsls	r3, r1, #5
 80032c8:	4619      	mov	r1, r3
 80032ca:	4622      	mov	r2, r4
 80032cc:	1b49      	subs	r1, r1, r5
 80032ce:	eb62 0206 	sbc.w	r2, r2, r6
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	f04f 0400 	mov.w	r4, #0
 80032da:	0194      	lsls	r4, r2, #6
 80032dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032e0:	018b      	lsls	r3, r1, #6
 80032e2:	1a5b      	subs	r3, r3, r1
 80032e4:	eb64 0402 	sbc.w	r4, r4, r2
 80032e8:	f04f 0100 	mov.w	r1, #0
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	00e2      	lsls	r2, r4, #3
 80032f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032f6:	00d9      	lsls	r1, r3, #3
 80032f8:	460b      	mov	r3, r1
 80032fa:	4614      	mov	r4, r2
 80032fc:	195b      	adds	r3, r3, r5
 80032fe:	eb44 0406 	adc.w	r4, r4, r6
 8003302:	f04f 0100 	mov.w	r1, #0
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	0262      	lsls	r2, r4, #9
 800330c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003310:	0259      	lsls	r1, r3, #9
 8003312:	460b      	mov	r3, r1
 8003314:	4614      	mov	r4, r2
 8003316:	4618      	mov	r0, r3
 8003318:	4621      	mov	r1, r4
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f04f 0400 	mov.w	r4, #0
 8003320:	461a      	mov	r2, r3
 8003322:	4623      	mov	r3, r4
 8003324:	f7fd fcb8 	bl	8000c98 <__aeabi_uldivmod>
 8003328:	4603      	mov	r3, r0
 800332a:	460c      	mov	r4, r1
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	e049      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003330:	4b2f      	ldr	r3, [pc, #188]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	099b      	lsrs	r3, r3, #6
 8003336:	f04f 0400 	mov.w	r4, #0
 800333a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	ea03 0501 	and.w	r5, r3, r1
 8003346:	ea04 0602 	and.w	r6, r4, r2
 800334a:	4629      	mov	r1, r5
 800334c:	4632      	mov	r2, r6
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	f04f 0400 	mov.w	r4, #0
 8003356:	0154      	lsls	r4, r2, #5
 8003358:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800335c:	014b      	lsls	r3, r1, #5
 800335e:	4619      	mov	r1, r3
 8003360:	4622      	mov	r2, r4
 8003362:	1b49      	subs	r1, r1, r5
 8003364:	eb62 0206 	sbc.w	r2, r2, r6
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	f04f 0400 	mov.w	r4, #0
 8003370:	0194      	lsls	r4, r2, #6
 8003372:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003376:	018b      	lsls	r3, r1, #6
 8003378:	1a5b      	subs	r3, r3, r1
 800337a:	eb64 0402 	sbc.w	r4, r4, r2
 800337e:	f04f 0100 	mov.w	r1, #0
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	00e2      	lsls	r2, r4, #3
 8003388:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800338c:	00d9      	lsls	r1, r3, #3
 800338e:	460b      	mov	r3, r1
 8003390:	4614      	mov	r4, r2
 8003392:	195b      	adds	r3, r3, r5
 8003394:	eb44 0406 	adc.w	r4, r4, r6
 8003398:	f04f 0100 	mov.w	r1, #0
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	02a2      	lsls	r2, r4, #10
 80033a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80033a6:	0299      	lsls	r1, r3, #10
 80033a8:	460b      	mov	r3, r1
 80033aa:	4614      	mov	r4, r2
 80033ac:	4618      	mov	r0, r3
 80033ae:	4621      	mov	r1, r4
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f04f 0400 	mov.w	r4, #0
 80033b6:	461a      	mov	r2, r3
 80033b8:	4623      	mov	r3, r4
 80033ba:	f7fd fc6d 	bl	8000c98 <__aeabi_uldivmod>
 80033be:	4603      	mov	r3, r0
 80033c0:	460c      	mov	r4, r1
 80033c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033c4:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	0c1b      	lsrs	r3, r3, #16
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	3301      	adds	r3, #1
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033dc:	60bb      	str	r3, [r7, #8]
      break;
 80033de:	e002      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80033e2:	60bb      	str	r3, [r7, #8]
      break;
 80033e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033e6:	68bb      	ldr	r3, [r7, #8]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033f0:	40023800 	.word	0x40023800
 80033f4:	00f42400 	.word	0x00f42400
 80033f8:	007a1200 	.word	0x007a1200

080033fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003400:	4b03      	ldr	r3, [pc, #12]	; (8003410 <HAL_RCC_GetHCLKFreq+0x14>)
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	20000004 	.word	0x20000004

08003414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003418:	f7ff fff0 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 800341c:	4601      	mov	r1, r0
 800341e:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	0a9b      	lsrs	r3, r3, #10
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	4a03      	ldr	r2, [pc, #12]	; (8003438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800342a:	5cd3      	ldrb	r3, [r2, r3]
 800342c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003430:	4618      	mov	r0, r3
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40023800 	.word	0x40023800
 8003438:	0800af7c 	.word	0x0800af7c

0800343c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003440:	f7ff ffdc 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 8003444:	4601      	mov	r1, r0
 8003446:	4b05      	ldr	r3, [pc, #20]	; (800345c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	0b5b      	lsrs	r3, r3, #13
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	4a03      	ldr	r2, [pc, #12]	; (8003460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003452:	5cd3      	ldrb	r3, [r2, r3]
 8003454:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003458:	4618      	mov	r0, r3
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40023800 	.word	0x40023800
 8003460:	0800af7c 	.word	0x0800af7c

08003464 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	220f      	movs	r2, #15
 8003472:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003474:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <HAL_RCC_GetClockConfig+0x5c>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 0203 	and.w	r2, r3, #3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003480:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <HAL_RCC_GetClockConfig+0x5c>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <HAL_RCC_GetClockConfig+0x5c>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003498:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <HAL_RCC_GetClockConfig+0x5c>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	08db      	lsrs	r3, r3, #3
 800349e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034a6:	4b07      	ldr	r3, [pc, #28]	; (80034c4 <HAL_RCC_GetClockConfig+0x60>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 020f 	and.w	r2, r3, #15
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	601a      	str	r2, [r3, #0]
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40023800 	.word	0x40023800
 80034c4:	40023c00 	.word	0x40023c00

080034c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e01d      	b.n	8003516 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f815 	bl	800351e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	4619      	mov	r1, r3
 8003506:	4610      	mov	r0, r2
 8003508:	f000 fada 	bl	8003ac0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003532:	b480      	push	{r7}
 8003534:	b085      	sub	sp, #20
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f042 0201 	orr.w	r2, r2, #1
 8003548:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2b06      	cmp	r3, #6
 800355a:	d007      	beq.n	800356c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e01d      	b.n	80035c8 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d106      	bne.n	80035a6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7fe fa53 	bl	8001a4c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2202      	movs	r2, #2
 80035aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3304      	adds	r3, #4
 80035b6:	4619      	mov	r1, r3
 80035b8:	4610      	mov	r0, r2
 80035ba:	f000 fa81 	bl	8003ac0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b0c      	cmp	r3, #12
 80035de:	d841      	bhi.n	8003664 <HAL_TIM_IC_Start_IT+0x94>
 80035e0:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <HAL_TIM_IC_Start_IT+0x18>)
 80035e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e6:	bf00      	nop
 80035e8:	0800361d 	.word	0x0800361d
 80035ec:	08003665 	.word	0x08003665
 80035f0:	08003665 	.word	0x08003665
 80035f4:	08003665 	.word	0x08003665
 80035f8:	0800362f 	.word	0x0800362f
 80035fc:	08003665 	.word	0x08003665
 8003600:	08003665 	.word	0x08003665
 8003604:	08003665 	.word	0x08003665
 8003608:	08003641 	.word	0x08003641
 800360c:	08003665 	.word	0x08003665
 8003610:	08003665 	.word	0x08003665
 8003614:	08003665 	.word	0x08003665
 8003618:	08003653 	.word	0x08003653
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0202 	orr.w	r2, r2, #2
 800362a:	60da      	str	r2, [r3, #12]
      break;
 800362c:	e01b      	b.n	8003666 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0204 	orr.w	r2, r2, #4
 800363c:	60da      	str	r2, [r3, #12]
      break;
 800363e:	e012      	b.n	8003666 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0208 	orr.w	r2, r2, #8
 800364e:	60da      	str	r2, [r3, #12]
      break;
 8003650:	e009      	b.n	8003666 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0210 	orr.w	r2, r2, #16
 8003660:	60da      	str	r2, [r3, #12]
      break;
 8003662:	e000      	b.n	8003666 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8003664:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2201      	movs	r2, #1
 800366c:	6839      	ldr	r1, [r7, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fbc4 	bl	8003dfc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b06      	cmp	r3, #6
 8003684:	d007      	beq.n	8003696 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0201 	orr.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d122      	bne.n	80036fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d11b      	bne.n	80036fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0202 	mvn.w	r2, #2
 80036cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f9ce 	bl	8003a84 <HAL_TIM_IC_CaptureCallback>
 80036e8:	e005      	b.n	80036f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f9c0 	bl	8003a70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f9d1 	bl	8003a98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b04      	cmp	r3, #4
 8003708:	d122      	bne.n	8003750 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b04      	cmp	r3, #4
 8003716:	d11b      	bne.n	8003750 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0204 	mvn.w	r2, #4
 8003720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2202      	movs	r2, #2
 8003726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f9a4 	bl	8003a84 <HAL_TIM_IC_CaptureCallback>
 800373c:	e005      	b.n	800374a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f996 	bl	8003a70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f9a7 	bl	8003a98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b08      	cmp	r3, #8
 800375c:	d122      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	2b08      	cmp	r3, #8
 800376a:	d11b      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f06f 0208 	mvn.w	r2, #8
 8003774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2204      	movs	r2, #4
 800377a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f97a 	bl	8003a84 <HAL_TIM_IC_CaptureCallback>
 8003790:	e005      	b.n	800379e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f96c 	bl	8003a70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f97d 	bl	8003a98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	2b10      	cmp	r3, #16
 80037b0:	d122      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	2b10      	cmp	r3, #16
 80037be:	d11b      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f06f 0210 	mvn.w	r2, #16
 80037c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2208      	movs	r2, #8
 80037ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f950 	bl	8003a84 <HAL_TIM_IC_CaptureCallback>
 80037e4:	e005      	b.n	80037f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f942 	bl	8003a70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f953 	bl	8003a98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b01      	cmp	r3, #1
 8003804:	d10e      	bne.n	8003824 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b01      	cmp	r3, #1
 8003812:	d107      	bne.n	8003824 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f06f 0201 	mvn.w	r2, #1
 800381c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fe f88e 	bl	8001940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382e:	2b80      	cmp	r3, #128	; 0x80
 8003830:	d10e      	bne.n	8003850 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383c:	2b80      	cmp	r3, #128	; 0x80
 800383e:	d107      	bne.n	8003850 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fb74 	bl	8003f38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	2b40      	cmp	r3, #64	; 0x40
 800385c:	d10e      	bne.n	800387c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003868:	2b40      	cmp	r3, #64	; 0x40
 800386a:	d107      	bne.n	800387c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f918 	bl	8003aac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b20      	cmp	r3, #32
 8003888:	d10e      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b20      	cmp	r3, #32
 8003896:	d107      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0220 	mvn.w	r2, #32
 80038a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fb3e 	bl	8003f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038a8:	bf00      	nop
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_TIM_IC_ConfigChannel+0x1a>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e08a      	b.n	80039e0 <HAL_TIM_IC_ConfigChannel+0x130>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2202      	movs	r2, #2
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d11b      	bne.n	8003918 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	6819      	ldr	r1, [r3, #0]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f000 f966 	bl	8003bc0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 020c 	bic.w	r2, r2, #12
 8003902:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6999      	ldr	r1, [r3, #24]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	619a      	str	r2, [r3, #24]
 8003916:	e05a      	b.n	80039ce <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b04      	cmp	r3, #4
 800391c:	d11c      	bne.n	8003958 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	6819      	ldr	r1, [r3, #0]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f000 f9af 	bl	8003c90 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699a      	ldr	r2, [r3, #24]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003940:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6999      	ldr	r1, [r3, #24]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	021a      	lsls	r2, r3, #8
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	619a      	str	r2, [r3, #24]
 8003956:	e03a      	b.n	80039ce <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b08      	cmp	r3, #8
 800395c:	d11b      	bne.n	8003996 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	6819      	ldr	r1, [r3, #0]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f000 f9cc 	bl	8003d0a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69da      	ldr	r2, [r3, #28]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 020c 	bic.w	r2, r2, #12
 8003980:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69d9      	ldr	r1, [r3, #28]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	61da      	str	r2, [r3, #28]
 8003994:	e01b      	b.n	80039ce <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	6819      	ldr	r1, [r3, #0]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f000 f9ec 	bl	8003d82 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69da      	ldr	r2, [r3, #28]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039b8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69d9      	ldr	r1, [r3, #28]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	021a      	lsls	r2, r3, #8
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b0c      	cmp	r3, #12
 80039fa:	d831      	bhi.n	8003a60 <HAL_TIM_ReadCapturedValue+0x78>
 80039fc:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <HAL_TIM_ReadCapturedValue+0x1c>)
 80039fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a02:	bf00      	nop
 8003a04:	08003a39 	.word	0x08003a39
 8003a08:	08003a61 	.word	0x08003a61
 8003a0c:	08003a61 	.word	0x08003a61
 8003a10:	08003a61 	.word	0x08003a61
 8003a14:	08003a43 	.word	0x08003a43
 8003a18:	08003a61 	.word	0x08003a61
 8003a1c:	08003a61 	.word	0x08003a61
 8003a20:	08003a61 	.word	0x08003a61
 8003a24:	08003a4d 	.word	0x08003a4d
 8003a28:	08003a61 	.word	0x08003a61
 8003a2c:	08003a61 	.word	0x08003a61
 8003a30:	08003a61 	.word	0x08003a61
 8003a34:	08003a57 	.word	0x08003a57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3e:	60fb      	str	r3, [r7, #12]

      break;
 8003a40:	e00f      	b.n	8003a62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	60fb      	str	r3, [r7, #12]

      break;
 8003a4a:	e00a      	b.n	8003a62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a52:	60fb      	str	r3, [r7, #12]

      break;
 8003a54:	e005      	b.n	8003a62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	60fb      	str	r3, [r7, #12]

      break;
 8003a5e:	e000      	b.n	8003a62 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003a60:	bf00      	nop
  }

  return tmpreg;
 8003a62:	68fb      	ldr	r3, [r7, #12]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a34      	ldr	r2, [pc, #208]	; (8003ba4 <TIM_Base_SetConfig+0xe4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00f      	beq.n	8003af8 <TIM_Base_SetConfig+0x38>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ade:	d00b      	beq.n	8003af8 <TIM_Base_SetConfig+0x38>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a31      	ldr	r2, [pc, #196]	; (8003ba8 <TIM_Base_SetConfig+0xe8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d007      	beq.n	8003af8 <TIM_Base_SetConfig+0x38>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a30      	ldr	r2, [pc, #192]	; (8003bac <TIM_Base_SetConfig+0xec>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d003      	beq.n	8003af8 <TIM_Base_SetConfig+0x38>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a2f      	ldr	r2, [pc, #188]	; (8003bb0 <TIM_Base_SetConfig+0xf0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d108      	bne.n	8003b0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a25      	ldr	r2, [pc, #148]	; (8003ba4 <TIM_Base_SetConfig+0xe4>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d01b      	beq.n	8003b4a <TIM_Base_SetConfig+0x8a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b18:	d017      	beq.n	8003b4a <TIM_Base_SetConfig+0x8a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a22      	ldr	r2, [pc, #136]	; (8003ba8 <TIM_Base_SetConfig+0xe8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d013      	beq.n	8003b4a <TIM_Base_SetConfig+0x8a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a21      	ldr	r2, [pc, #132]	; (8003bac <TIM_Base_SetConfig+0xec>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00f      	beq.n	8003b4a <TIM_Base_SetConfig+0x8a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a20      	ldr	r2, [pc, #128]	; (8003bb0 <TIM_Base_SetConfig+0xf0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00b      	beq.n	8003b4a <TIM_Base_SetConfig+0x8a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a1f      	ldr	r2, [pc, #124]	; (8003bb4 <TIM_Base_SetConfig+0xf4>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d007      	beq.n	8003b4a <TIM_Base_SetConfig+0x8a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a1e      	ldr	r2, [pc, #120]	; (8003bb8 <TIM_Base_SetConfig+0xf8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d003      	beq.n	8003b4a <TIM_Base_SetConfig+0x8a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a1d      	ldr	r2, [pc, #116]	; (8003bbc <TIM_Base_SetConfig+0xfc>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d108      	bne.n	8003b5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a08      	ldr	r2, [pc, #32]	; (8003ba4 <TIM_Base_SetConfig+0xe4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d103      	bne.n	8003b90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	615a      	str	r2, [r3, #20]
}
 8003b96:	bf00      	nop
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40010000 	.word	0x40010000
 8003ba8:	40000400 	.word	0x40000400
 8003bac:	40000800 	.word	0x40000800
 8003bb0:	40000c00 	.word	0x40000c00
 8003bb4:	40014000 	.word	0x40014000
 8003bb8:	40014400 	.word	0x40014400
 8003bbc:	40014800 	.word	0x40014800

08003bc0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
 8003bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	f023 0201 	bic.w	r2, r3, #1
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4a24      	ldr	r2, [pc, #144]	; (8003c7c <TIM_TI1_SetConfig+0xbc>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d013      	beq.n	8003c16 <TIM_TI1_SetConfig+0x56>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf4:	d00f      	beq.n	8003c16 <TIM_TI1_SetConfig+0x56>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4a21      	ldr	r2, [pc, #132]	; (8003c80 <TIM_TI1_SetConfig+0xc0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00b      	beq.n	8003c16 <TIM_TI1_SetConfig+0x56>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4a20      	ldr	r2, [pc, #128]	; (8003c84 <TIM_TI1_SetConfig+0xc4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d007      	beq.n	8003c16 <TIM_TI1_SetConfig+0x56>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4a1f      	ldr	r2, [pc, #124]	; (8003c88 <TIM_TI1_SetConfig+0xc8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d003      	beq.n	8003c16 <TIM_TI1_SetConfig+0x56>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4a1e      	ldr	r2, [pc, #120]	; (8003c8c <TIM_TI1_SetConfig+0xcc>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d101      	bne.n	8003c1a <TIM_TI1_SetConfig+0x5a>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <TIM_TI1_SetConfig+0x5c>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f023 0303 	bic.w	r3, r3, #3
 8003c26:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	e003      	b.n	8003c3a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f023 030a 	bic.w	r3, r3, #10
 8003c54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f003 030a 	and.w	r3, r3, #10
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	621a      	str	r2, [r3, #32]
}
 8003c6e:	bf00      	nop
 8003c70:	371c      	adds	r7, #28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40010000 	.word	0x40010000
 8003c80:	40000400 	.word	0x40000400
 8003c84:	40000800 	.word	0x40000800
 8003c88:	40000c00 	.word	0x40000c00
 8003c8c:	40014000 	.word	0x40014000

08003c90 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	f023 0210 	bic.w	r2, r3, #16
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	031b      	lsls	r3, r3, #12
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ce2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	621a      	str	r2, [r3, #32]
}
 8003cfe:	bf00      	nop
 8003d00:	371c      	adds	r7, #28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b087      	sub	sp, #28
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	607a      	str	r2, [r7, #4]
 8003d16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f023 0303 	bic.w	r3, r3, #3
 8003d36:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d46:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003d5a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	021b      	lsls	r3, r3, #8
 8003d60:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	621a      	str	r2, [r3, #32]
}
 8003d76:	bf00      	nop
 8003d78:	371c      	adds	r7, #28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b087      	sub	sp, #28
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	607a      	str	r2, [r7, #4]
 8003d8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	021b      	lsls	r3, r3, #8
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	031b      	lsls	r3, r3, #12
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003dd4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	031b      	lsls	r3, r3, #12
 8003dda:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	621a      	str	r2, [r3, #32]
}
 8003df0:	bf00      	nop
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f003 031f 	and.w	r3, r3, #31
 8003e0e:	2201      	movs	r2, #1
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a1a      	ldr	r2, [r3, #32]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	401a      	ands	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a1a      	ldr	r2, [r3, #32]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	fa01 f303 	lsl.w	r3, r1, r3
 8003e34:	431a      	orrs	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	621a      	str	r2, [r3, #32]
}
 8003e3a:	bf00      	nop
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
	...

08003e48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e050      	b.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1c      	ldr	r2, [pc, #112]	; (8003f10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d018      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eac:	d013      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a18      	ldr	r2, [pc, #96]	; (8003f14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00e      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a16      	ldr	r2, [pc, #88]	; (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d009      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a15      	ldr	r2, [pc, #84]	; (8003f1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d004      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a13      	ldr	r2, [pc, #76]	; (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d10c      	bne.n	8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003edc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40010000 	.word	0x40010000
 8003f14:	40000400 	.word	0x40000400
 8003f18:	40000800 	.word	0x40000800
 8003f1c:	40000c00 	.word	0x40000c00
 8003f20:	40014000 	.word	0x40014000

08003f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e03f      	b.n	8003fde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7fd fdb8 	bl	8001ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2224      	movs	r2, #36	; 0x24
 8003f7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f90b 	bl	80041ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695a      	ldr	r2, [r3, #20]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b088      	sub	sp, #32
 8003fea:	af02      	add	r7, sp, #8
 8003fec:	60f8      	str	r0, [r7, #12]
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	603b      	str	r3, [r7, #0]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b20      	cmp	r3, #32
 8004004:	f040 8083 	bne.w	800410e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <HAL_UART_Transmit+0x2e>
 800400e:	88fb      	ldrh	r3, [r7, #6]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e07b      	b.n	8004110 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_UART_Transmit+0x40>
 8004022:	2302      	movs	r3, #2
 8004024:	e074      	b.n	8004110 <HAL_UART_Transmit+0x12a>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2221      	movs	r2, #33	; 0x21
 8004038:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800403c:	f7fd ff64 	bl	8001f08 <HAL_GetTick>
 8004040:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	88fa      	ldrh	r2, [r7, #6]
 8004046:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	88fa      	ldrh	r2, [r7, #6]
 800404c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004056:	e042      	b.n	80040de <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406e:	d122      	bne.n	80040b6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2200      	movs	r2, #0
 8004078:	2180      	movs	r1, #128	; 0x80
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f84c 	bl	8004118 <UART_WaitOnFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e042      	b.n	8004110 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800409c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d103      	bne.n	80040ae <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	3302      	adds	r3, #2
 80040aa:	60bb      	str	r3, [r7, #8]
 80040ac:	e017      	b.n	80040de <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	3301      	adds	r3, #1
 80040b2:	60bb      	str	r3, [r7, #8]
 80040b4:	e013      	b.n	80040de <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2200      	movs	r2, #0
 80040be:	2180      	movs	r1, #128	; 0x80
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f829 	bl	8004118 <UART_WaitOnFlagUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e01f      	b.n	8004110 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	60ba      	str	r2, [r7, #8]
 80040d6:	781a      	ldrb	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1b7      	bne.n	8004058 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2200      	movs	r2, #0
 80040f0:	2140      	movs	r1, #64	; 0x40
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 f810 	bl	8004118 <UART_WaitOnFlagUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e006      	b.n	8004110 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	e000      	b.n	8004110 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800410e:	2302      	movs	r3, #2
  }
}
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	4613      	mov	r3, r2
 8004126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004128:	e02c      	b.n	8004184 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004130:	d028      	beq.n	8004184 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d007      	beq.n	8004148 <UART_WaitOnFlagUntilTimeout+0x30>
 8004138:	f7fd fee6 	bl	8001f08 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	429a      	cmp	r2, r3
 8004146:	d21d      	bcs.n	8004184 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004156:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695a      	ldr	r2, [r3, #20]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0201 	bic.w	r2, r2, #1
 8004166:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e00f      	b.n	80041a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	4013      	ands	r3, r2
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	429a      	cmp	r2, r3
 8004192:	bf0c      	ite	eq
 8004194:	2301      	moveq	r3, #1
 8004196:	2300      	movne	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	461a      	mov	r2, r3
 800419c:	79fb      	ldrb	r3, [r7, #7]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d0c3      	beq.n	800412a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b0:	b085      	sub	sp, #20
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80041ee:	f023 030c 	bic.w	r3, r3, #12
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6812      	ldr	r2, [r2, #0]
 80041f6:	68f9      	ldr	r1, [r7, #12]
 80041f8:	430b      	orrs	r3, r1
 80041fa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800421a:	f040 818b 	bne.w	8004534 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4ac1      	ldr	r2, [pc, #772]	; (8004528 <UART_SetConfig+0x37c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d005      	beq.n	8004234 <UART_SetConfig+0x88>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4abf      	ldr	r2, [pc, #764]	; (800452c <UART_SetConfig+0x380>)
 800422e:	4293      	cmp	r3, r2
 8004230:	f040 80bd 	bne.w	80043ae <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004234:	f7ff f902 	bl	800343c <HAL_RCC_GetPCLK2Freq>
 8004238:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	461d      	mov	r5, r3
 800423e:	f04f 0600 	mov.w	r6, #0
 8004242:	46a8      	mov	r8, r5
 8004244:	46b1      	mov	r9, r6
 8004246:	eb18 0308 	adds.w	r3, r8, r8
 800424a:	eb49 0409 	adc.w	r4, r9, r9
 800424e:	4698      	mov	r8, r3
 8004250:	46a1      	mov	r9, r4
 8004252:	eb18 0805 	adds.w	r8, r8, r5
 8004256:	eb49 0906 	adc.w	r9, r9, r6
 800425a:	f04f 0100 	mov.w	r1, #0
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004266:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800426a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800426e:	4688      	mov	r8, r1
 8004270:	4691      	mov	r9, r2
 8004272:	eb18 0005 	adds.w	r0, r8, r5
 8004276:	eb49 0106 	adc.w	r1, r9, r6
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	461d      	mov	r5, r3
 8004280:	f04f 0600 	mov.w	r6, #0
 8004284:	196b      	adds	r3, r5, r5
 8004286:	eb46 0406 	adc.w	r4, r6, r6
 800428a:	461a      	mov	r2, r3
 800428c:	4623      	mov	r3, r4
 800428e:	f7fc fd03 	bl	8000c98 <__aeabi_uldivmod>
 8004292:	4603      	mov	r3, r0
 8004294:	460c      	mov	r4, r1
 8004296:	461a      	mov	r2, r3
 8004298:	4ba5      	ldr	r3, [pc, #660]	; (8004530 <UART_SetConfig+0x384>)
 800429a:	fba3 2302 	umull	r2, r3, r3, r2
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	461d      	mov	r5, r3
 80042a8:	f04f 0600 	mov.w	r6, #0
 80042ac:	46a9      	mov	r9, r5
 80042ae:	46b2      	mov	sl, r6
 80042b0:	eb19 0309 	adds.w	r3, r9, r9
 80042b4:	eb4a 040a 	adc.w	r4, sl, sl
 80042b8:	4699      	mov	r9, r3
 80042ba:	46a2      	mov	sl, r4
 80042bc:	eb19 0905 	adds.w	r9, r9, r5
 80042c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80042c4:	f04f 0100 	mov.w	r1, #0
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042d8:	4689      	mov	r9, r1
 80042da:	4692      	mov	sl, r2
 80042dc:	eb19 0005 	adds.w	r0, r9, r5
 80042e0:	eb4a 0106 	adc.w	r1, sl, r6
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	461d      	mov	r5, r3
 80042ea:	f04f 0600 	mov.w	r6, #0
 80042ee:	196b      	adds	r3, r5, r5
 80042f0:	eb46 0406 	adc.w	r4, r6, r6
 80042f4:	461a      	mov	r2, r3
 80042f6:	4623      	mov	r3, r4
 80042f8:	f7fc fcce 	bl	8000c98 <__aeabi_uldivmod>
 80042fc:	4603      	mov	r3, r0
 80042fe:	460c      	mov	r4, r1
 8004300:	461a      	mov	r2, r3
 8004302:	4b8b      	ldr	r3, [pc, #556]	; (8004530 <UART_SetConfig+0x384>)
 8004304:	fba3 1302 	umull	r1, r3, r3, r2
 8004308:	095b      	lsrs	r3, r3, #5
 800430a:	2164      	movs	r1, #100	; 0x64
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	3332      	adds	r3, #50	; 0x32
 8004316:	4a86      	ldr	r2, [pc, #536]	; (8004530 <UART_SetConfig+0x384>)
 8004318:	fba2 2303 	umull	r2, r3, r2, r3
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004324:	4498      	add	r8, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	461d      	mov	r5, r3
 800432a:	f04f 0600 	mov.w	r6, #0
 800432e:	46a9      	mov	r9, r5
 8004330:	46b2      	mov	sl, r6
 8004332:	eb19 0309 	adds.w	r3, r9, r9
 8004336:	eb4a 040a 	adc.w	r4, sl, sl
 800433a:	4699      	mov	r9, r3
 800433c:	46a2      	mov	sl, r4
 800433e:	eb19 0905 	adds.w	r9, r9, r5
 8004342:	eb4a 0a06 	adc.w	sl, sl, r6
 8004346:	f04f 0100 	mov.w	r1, #0
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004352:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004356:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800435a:	4689      	mov	r9, r1
 800435c:	4692      	mov	sl, r2
 800435e:	eb19 0005 	adds.w	r0, r9, r5
 8004362:	eb4a 0106 	adc.w	r1, sl, r6
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	461d      	mov	r5, r3
 800436c:	f04f 0600 	mov.w	r6, #0
 8004370:	196b      	adds	r3, r5, r5
 8004372:	eb46 0406 	adc.w	r4, r6, r6
 8004376:	461a      	mov	r2, r3
 8004378:	4623      	mov	r3, r4
 800437a:	f7fc fc8d 	bl	8000c98 <__aeabi_uldivmod>
 800437e:	4603      	mov	r3, r0
 8004380:	460c      	mov	r4, r1
 8004382:	461a      	mov	r2, r3
 8004384:	4b6a      	ldr	r3, [pc, #424]	; (8004530 <UART_SetConfig+0x384>)
 8004386:	fba3 1302 	umull	r1, r3, r3, r2
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	2164      	movs	r1, #100	; 0x64
 800438e:	fb01 f303 	mul.w	r3, r1, r3
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	3332      	adds	r3, #50	; 0x32
 8004398:	4a65      	ldr	r2, [pc, #404]	; (8004530 <UART_SetConfig+0x384>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	f003 0207 	and.w	r2, r3, #7
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4442      	add	r2, r8
 80043aa:	609a      	str	r2, [r3, #8]
 80043ac:	e26f      	b.n	800488e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043ae:	f7ff f831 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 80043b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	461d      	mov	r5, r3
 80043b8:	f04f 0600 	mov.w	r6, #0
 80043bc:	46a8      	mov	r8, r5
 80043be:	46b1      	mov	r9, r6
 80043c0:	eb18 0308 	adds.w	r3, r8, r8
 80043c4:	eb49 0409 	adc.w	r4, r9, r9
 80043c8:	4698      	mov	r8, r3
 80043ca:	46a1      	mov	r9, r4
 80043cc:	eb18 0805 	adds.w	r8, r8, r5
 80043d0:	eb49 0906 	adc.w	r9, r9, r6
 80043d4:	f04f 0100 	mov.w	r1, #0
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043e8:	4688      	mov	r8, r1
 80043ea:	4691      	mov	r9, r2
 80043ec:	eb18 0005 	adds.w	r0, r8, r5
 80043f0:	eb49 0106 	adc.w	r1, r9, r6
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	461d      	mov	r5, r3
 80043fa:	f04f 0600 	mov.w	r6, #0
 80043fe:	196b      	adds	r3, r5, r5
 8004400:	eb46 0406 	adc.w	r4, r6, r6
 8004404:	461a      	mov	r2, r3
 8004406:	4623      	mov	r3, r4
 8004408:	f7fc fc46 	bl	8000c98 <__aeabi_uldivmod>
 800440c:	4603      	mov	r3, r0
 800440e:	460c      	mov	r4, r1
 8004410:	461a      	mov	r2, r3
 8004412:	4b47      	ldr	r3, [pc, #284]	; (8004530 <UART_SetConfig+0x384>)
 8004414:	fba3 2302 	umull	r2, r3, r3, r2
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	461d      	mov	r5, r3
 8004422:	f04f 0600 	mov.w	r6, #0
 8004426:	46a9      	mov	r9, r5
 8004428:	46b2      	mov	sl, r6
 800442a:	eb19 0309 	adds.w	r3, r9, r9
 800442e:	eb4a 040a 	adc.w	r4, sl, sl
 8004432:	4699      	mov	r9, r3
 8004434:	46a2      	mov	sl, r4
 8004436:	eb19 0905 	adds.w	r9, r9, r5
 800443a:	eb4a 0a06 	adc.w	sl, sl, r6
 800443e:	f04f 0100 	mov.w	r1, #0
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800444a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800444e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004452:	4689      	mov	r9, r1
 8004454:	4692      	mov	sl, r2
 8004456:	eb19 0005 	adds.w	r0, r9, r5
 800445a:	eb4a 0106 	adc.w	r1, sl, r6
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	461d      	mov	r5, r3
 8004464:	f04f 0600 	mov.w	r6, #0
 8004468:	196b      	adds	r3, r5, r5
 800446a:	eb46 0406 	adc.w	r4, r6, r6
 800446e:	461a      	mov	r2, r3
 8004470:	4623      	mov	r3, r4
 8004472:	f7fc fc11 	bl	8000c98 <__aeabi_uldivmod>
 8004476:	4603      	mov	r3, r0
 8004478:	460c      	mov	r4, r1
 800447a:	461a      	mov	r2, r3
 800447c:	4b2c      	ldr	r3, [pc, #176]	; (8004530 <UART_SetConfig+0x384>)
 800447e:	fba3 1302 	umull	r1, r3, r3, r2
 8004482:	095b      	lsrs	r3, r3, #5
 8004484:	2164      	movs	r1, #100	; 0x64
 8004486:	fb01 f303 	mul.w	r3, r1, r3
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	3332      	adds	r3, #50	; 0x32
 8004490:	4a27      	ldr	r2, [pc, #156]	; (8004530 <UART_SetConfig+0x384>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800449e:	4498      	add	r8, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	461d      	mov	r5, r3
 80044a4:	f04f 0600 	mov.w	r6, #0
 80044a8:	46a9      	mov	r9, r5
 80044aa:	46b2      	mov	sl, r6
 80044ac:	eb19 0309 	adds.w	r3, r9, r9
 80044b0:	eb4a 040a 	adc.w	r4, sl, sl
 80044b4:	4699      	mov	r9, r3
 80044b6:	46a2      	mov	sl, r4
 80044b8:	eb19 0905 	adds.w	r9, r9, r5
 80044bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80044c0:	f04f 0100 	mov.w	r1, #0
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044d4:	4689      	mov	r9, r1
 80044d6:	4692      	mov	sl, r2
 80044d8:	eb19 0005 	adds.w	r0, r9, r5
 80044dc:	eb4a 0106 	adc.w	r1, sl, r6
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	461d      	mov	r5, r3
 80044e6:	f04f 0600 	mov.w	r6, #0
 80044ea:	196b      	adds	r3, r5, r5
 80044ec:	eb46 0406 	adc.w	r4, r6, r6
 80044f0:	461a      	mov	r2, r3
 80044f2:	4623      	mov	r3, r4
 80044f4:	f7fc fbd0 	bl	8000c98 <__aeabi_uldivmod>
 80044f8:	4603      	mov	r3, r0
 80044fa:	460c      	mov	r4, r1
 80044fc:	461a      	mov	r2, r3
 80044fe:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <UART_SetConfig+0x384>)
 8004500:	fba3 1302 	umull	r1, r3, r3, r2
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	2164      	movs	r1, #100	; 0x64
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	3332      	adds	r3, #50	; 0x32
 8004512:	4a07      	ldr	r2, [pc, #28]	; (8004530 <UART_SetConfig+0x384>)
 8004514:	fba2 2303 	umull	r2, r3, r2, r3
 8004518:	095b      	lsrs	r3, r3, #5
 800451a:	f003 0207 	and.w	r2, r3, #7
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4442      	add	r2, r8
 8004524:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004526:	e1b2      	b.n	800488e <UART_SetConfig+0x6e2>
 8004528:	40011000 	.word	0x40011000
 800452c:	40011400 	.word	0x40011400
 8004530:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4ad7      	ldr	r2, [pc, #860]	; (8004898 <UART_SetConfig+0x6ec>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d005      	beq.n	800454a <UART_SetConfig+0x39e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4ad6      	ldr	r2, [pc, #856]	; (800489c <UART_SetConfig+0x6f0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	f040 80d1 	bne.w	80046ec <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800454a:	f7fe ff77 	bl	800343c <HAL_RCC_GetPCLK2Freq>
 800454e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	469a      	mov	sl, r3
 8004554:	f04f 0b00 	mov.w	fp, #0
 8004558:	46d0      	mov	r8, sl
 800455a:	46d9      	mov	r9, fp
 800455c:	eb18 0308 	adds.w	r3, r8, r8
 8004560:	eb49 0409 	adc.w	r4, r9, r9
 8004564:	4698      	mov	r8, r3
 8004566:	46a1      	mov	r9, r4
 8004568:	eb18 080a 	adds.w	r8, r8, sl
 800456c:	eb49 090b 	adc.w	r9, r9, fp
 8004570:	f04f 0100 	mov.w	r1, #0
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800457c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004580:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004584:	4688      	mov	r8, r1
 8004586:	4691      	mov	r9, r2
 8004588:	eb1a 0508 	adds.w	r5, sl, r8
 800458c:	eb4b 0609 	adc.w	r6, fp, r9
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	4619      	mov	r1, r3
 8004596:	f04f 0200 	mov.w	r2, #0
 800459a:	f04f 0300 	mov.w	r3, #0
 800459e:	f04f 0400 	mov.w	r4, #0
 80045a2:	0094      	lsls	r4, r2, #2
 80045a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045a8:	008b      	lsls	r3, r1, #2
 80045aa:	461a      	mov	r2, r3
 80045ac:	4623      	mov	r3, r4
 80045ae:	4628      	mov	r0, r5
 80045b0:	4631      	mov	r1, r6
 80045b2:	f7fc fb71 	bl	8000c98 <__aeabi_uldivmod>
 80045b6:	4603      	mov	r3, r0
 80045b8:	460c      	mov	r4, r1
 80045ba:	461a      	mov	r2, r3
 80045bc:	4bb8      	ldr	r3, [pc, #736]	; (80048a0 <UART_SetConfig+0x6f4>)
 80045be:	fba3 2302 	umull	r2, r3, r3, r2
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	469b      	mov	fp, r3
 80045cc:	f04f 0c00 	mov.w	ip, #0
 80045d0:	46d9      	mov	r9, fp
 80045d2:	46e2      	mov	sl, ip
 80045d4:	eb19 0309 	adds.w	r3, r9, r9
 80045d8:	eb4a 040a 	adc.w	r4, sl, sl
 80045dc:	4699      	mov	r9, r3
 80045de:	46a2      	mov	sl, r4
 80045e0:	eb19 090b 	adds.w	r9, r9, fp
 80045e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045e8:	f04f 0100 	mov.w	r1, #0
 80045ec:	f04f 0200 	mov.w	r2, #0
 80045f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045fc:	4689      	mov	r9, r1
 80045fe:	4692      	mov	sl, r2
 8004600:	eb1b 0509 	adds.w	r5, fp, r9
 8004604:	eb4c 060a 	adc.w	r6, ip, sl
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	4619      	mov	r1, r3
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	f04f 0400 	mov.w	r4, #0
 800461a:	0094      	lsls	r4, r2, #2
 800461c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004620:	008b      	lsls	r3, r1, #2
 8004622:	461a      	mov	r2, r3
 8004624:	4623      	mov	r3, r4
 8004626:	4628      	mov	r0, r5
 8004628:	4631      	mov	r1, r6
 800462a:	f7fc fb35 	bl	8000c98 <__aeabi_uldivmod>
 800462e:	4603      	mov	r3, r0
 8004630:	460c      	mov	r4, r1
 8004632:	461a      	mov	r2, r3
 8004634:	4b9a      	ldr	r3, [pc, #616]	; (80048a0 <UART_SetConfig+0x6f4>)
 8004636:	fba3 1302 	umull	r1, r3, r3, r2
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	2164      	movs	r1, #100	; 0x64
 800463e:	fb01 f303 	mul.w	r3, r1, r3
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	3332      	adds	r3, #50	; 0x32
 8004648:	4a95      	ldr	r2, [pc, #596]	; (80048a0 <UART_SetConfig+0x6f4>)
 800464a:	fba2 2303 	umull	r2, r3, r2, r3
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004654:	4498      	add	r8, r3
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	469b      	mov	fp, r3
 800465a:	f04f 0c00 	mov.w	ip, #0
 800465e:	46d9      	mov	r9, fp
 8004660:	46e2      	mov	sl, ip
 8004662:	eb19 0309 	adds.w	r3, r9, r9
 8004666:	eb4a 040a 	adc.w	r4, sl, sl
 800466a:	4699      	mov	r9, r3
 800466c:	46a2      	mov	sl, r4
 800466e:	eb19 090b 	adds.w	r9, r9, fp
 8004672:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004676:	f04f 0100 	mov.w	r1, #0
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004682:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004686:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800468a:	4689      	mov	r9, r1
 800468c:	4692      	mov	sl, r2
 800468e:	eb1b 0509 	adds.w	r5, fp, r9
 8004692:	eb4c 060a 	adc.w	r6, ip, sl
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	4619      	mov	r1, r3
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	f04f 0400 	mov.w	r4, #0
 80046a8:	0094      	lsls	r4, r2, #2
 80046aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046ae:	008b      	lsls	r3, r1, #2
 80046b0:	461a      	mov	r2, r3
 80046b2:	4623      	mov	r3, r4
 80046b4:	4628      	mov	r0, r5
 80046b6:	4631      	mov	r1, r6
 80046b8:	f7fc faee 	bl	8000c98 <__aeabi_uldivmod>
 80046bc:	4603      	mov	r3, r0
 80046be:	460c      	mov	r4, r1
 80046c0:	461a      	mov	r2, r3
 80046c2:	4b77      	ldr	r3, [pc, #476]	; (80048a0 <UART_SetConfig+0x6f4>)
 80046c4:	fba3 1302 	umull	r1, r3, r3, r2
 80046c8:	095b      	lsrs	r3, r3, #5
 80046ca:	2164      	movs	r1, #100	; 0x64
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	3332      	adds	r3, #50	; 0x32
 80046d6:	4a72      	ldr	r2, [pc, #456]	; (80048a0 <UART_SetConfig+0x6f4>)
 80046d8:	fba2 2303 	umull	r2, r3, r2, r3
 80046dc:	095b      	lsrs	r3, r3, #5
 80046de:	f003 020f 	and.w	r2, r3, #15
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4442      	add	r2, r8
 80046e8:	609a      	str	r2, [r3, #8]
 80046ea:	e0d0      	b.n	800488e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80046ec:	f7fe fe92 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 80046f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	469a      	mov	sl, r3
 80046f6:	f04f 0b00 	mov.w	fp, #0
 80046fa:	46d0      	mov	r8, sl
 80046fc:	46d9      	mov	r9, fp
 80046fe:	eb18 0308 	adds.w	r3, r8, r8
 8004702:	eb49 0409 	adc.w	r4, r9, r9
 8004706:	4698      	mov	r8, r3
 8004708:	46a1      	mov	r9, r4
 800470a:	eb18 080a 	adds.w	r8, r8, sl
 800470e:	eb49 090b 	adc.w	r9, r9, fp
 8004712:	f04f 0100 	mov.w	r1, #0
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800471e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004722:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004726:	4688      	mov	r8, r1
 8004728:	4691      	mov	r9, r2
 800472a:	eb1a 0508 	adds.w	r5, sl, r8
 800472e:	eb4b 0609 	adc.w	r6, fp, r9
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4619      	mov	r1, r3
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	f04f 0400 	mov.w	r4, #0
 8004744:	0094      	lsls	r4, r2, #2
 8004746:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800474a:	008b      	lsls	r3, r1, #2
 800474c:	461a      	mov	r2, r3
 800474e:	4623      	mov	r3, r4
 8004750:	4628      	mov	r0, r5
 8004752:	4631      	mov	r1, r6
 8004754:	f7fc faa0 	bl	8000c98 <__aeabi_uldivmod>
 8004758:	4603      	mov	r3, r0
 800475a:	460c      	mov	r4, r1
 800475c:	461a      	mov	r2, r3
 800475e:	4b50      	ldr	r3, [pc, #320]	; (80048a0 <UART_SetConfig+0x6f4>)
 8004760:	fba3 2302 	umull	r2, r3, r3, r2
 8004764:	095b      	lsrs	r3, r3, #5
 8004766:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	469b      	mov	fp, r3
 800476e:	f04f 0c00 	mov.w	ip, #0
 8004772:	46d9      	mov	r9, fp
 8004774:	46e2      	mov	sl, ip
 8004776:	eb19 0309 	adds.w	r3, r9, r9
 800477a:	eb4a 040a 	adc.w	r4, sl, sl
 800477e:	4699      	mov	r9, r3
 8004780:	46a2      	mov	sl, r4
 8004782:	eb19 090b 	adds.w	r9, r9, fp
 8004786:	eb4a 0a0c 	adc.w	sl, sl, ip
 800478a:	f04f 0100 	mov.w	r1, #0
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004796:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800479a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800479e:	4689      	mov	r9, r1
 80047a0:	4692      	mov	sl, r2
 80047a2:	eb1b 0509 	adds.w	r5, fp, r9
 80047a6:	eb4c 060a 	adc.w	r6, ip, sl
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	4619      	mov	r1, r3
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	f04f 0400 	mov.w	r4, #0
 80047bc:	0094      	lsls	r4, r2, #2
 80047be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047c2:	008b      	lsls	r3, r1, #2
 80047c4:	461a      	mov	r2, r3
 80047c6:	4623      	mov	r3, r4
 80047c8:	4628      	mov	r0, r5
 80047ca:	4631      	mov	r1, r6
 80047cc:	f7fc fa64 	bl	8000c98 <__aeabi_uldivmod>
 80047d0:	4603      	mov	r3, r0
 80047d2:	460c      	mov	r4, r1
 80047d4:	461a      	mov	r2, r3
 80047d6:	4b32      	ldr	r3, [pc, #200]	; (80048a0 <UART_SetConfig+0x6f4>)
 80047d8:	fba3 1302 	umull	r1, r3, r3, r2
 80047dc:	095b      	lsrs	r3, r3, #5
 80047de:	2164      	movs	r1, #100	; 0x64
 80047e0:	fb01 f303 	mul.w	r3, r1, r3
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	3332      	adds	r3, #50	; 0x32
 80047ea:	4a2d      	ldr	r2, [pc, #180]	; (80048a0 <UART_SetConfig+0x6f4>)
 80047ec:	fba2 2303 	umull	r2, r3, r2, r3
 80047f0:	095b      	lsrs	r3, r3, #5
 80047f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f6:	4498      	add	r8, r3
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	469b      	mov	fp, r3
 80047fc:	f04f 0c00 	mov.w	ip, #0
 8004800:	46d9      	mov	r9, fp
 8004802:	46e2      	mov	sl, ip
 8004804:	eb19 0309 	adds.w	r3, r9, r9
 8004808:	eb4a 040a 	adc.w	r4, sl, sl
 800480c:	4699      	mov	r9, r3
 800480e:	46a2      	mov	sl, r4
 8004810:	eb19 090b 	adds.w	r9, r9, fp
 8004814:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004818:	f04f 0100 	mov.w	r1, #0
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004824:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004828:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800482c:	4689      	mov	r9, r1
 800482e:	4692      	mov	sl, r2
 8004830:	eb1b 0509 	adds.w	r5, fp, r9
 8004834:	eb4c 060a 	adc.w	r6, ip, sl
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	4619      	mov	r1, r3
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	f04f 0400 	mov.w	r4, #0
 800484a:	0094      	lsls	r4, r2, #2
 800484c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004850:	008b      	lsls	r3, r1, #2
 8004852:	461a      	mov	r2, r3
 8004854:	4623      	mov	r3, r4
 8004856:	4628      	mov	r0, r5
 8004858:	4631      	mov	r1, r6
 800485a:	f7fc fa1d 	bl	8000c98 <__aeabi_uldivmod>
 800485e:	4603      	mov	r3, r0
 8004860:	460c      	mov	r4, r1
 8004862:	461a      	mov	r2, r3
 8004864:	4b0e      	ldr	r3, [pc, #56]	; (80048a0 <UART_SetConfig+0x6f4>)
 8004866:	fba3 1302 	umull	r1, r3, r3, r2
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	2164      	movs	r1, #100	; 0x64
 800486e:	fb01 f303 	mul.w	r3, r1, r3
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	3332      	adds	r3, #50	; 0x32
 8004878:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <UART_SetConfig+0x6f4>)
 800487a:	fba2 2303 	umull	r2, r3, r2, r3
 800487e:	095b      	lsrs	r3, r3, #5
 8004880:	f003 020f 	and.w	r2, r3, #15
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4442      	add	r2, r8
 800488a:	609a      	str	r2, [r3, #8]
}
 800488c:	e7ff      	b.n	800488e <UART_SetConfig+0x6e2>
 800488e:	bf00      	nop
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004898:	40011000 	.word	0x40011000
 800489c:	40011400 	.word	0x40011400
 80048a0:	51eb851f 	.word	0x51eb851f

080048a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80048a8:	bf00      	nop
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048ba:	f3ef 8305 	mrs	r3, IPSR
 80048be:	60bb      	str	r3, [r7, #8]
  return(result);
 80048c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10f      	bne.n	80048e6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c6:	f3ef 8310 	mrs	r3, PRIMASK
 80048ca:	607b      	str	r3, [r7, #4]
  return(result);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d105      	bne.n	80048de <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048d2:	f3ef 8311 	mrs	r3, BASEPRI
 80048d6:	603b      	str	r3, [r7, #0]
  return(result);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d007      	beq.n	80048ee <osKernelInitialize+0x3a>
 80048de:	4b0e      	ldr	r3, [pc, #56]	; (8004918 <osKernelInitialize+0x64>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d103      	bne.n	80048ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80048e6:	f06f 0305 	mvn.w	r3, #5
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	e00c      	b.n	8004908 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80048ee:	4b0a      	ldr	r3, [pc, #40]	; (8004918 <osKernelInitialize+0x64>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d105      	bne.n	8004902 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80048f6:	4b08      	ldr	r3, [pc, #32]	; (8004918 <osKernelInitialize+0x64>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	e002      	b.n	8004908 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004906:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004908:	68fb      	ldr	r3, [r7, #12]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	20000224 	.word	0x20000224

0800491c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004922:	f3ef 8305 	mrs	r3, IPSR
 8004926:	60bb      	str	r3, [r7, #8]
  return(result);
 8004928:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10f      	bne.n	800494e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800492e:	f3ef 8310 	mrs	r3, PRIMASK
 8004932:	607b      	str	r3, [r7, #4]
  return(result);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d105      	bne.n	8004946 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800493a:	f3ef 8311 	mrs	r3, BASEPRI
 800493e:	603b      	str	r3, [r7, #0]
  return(result);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d007      	beq.n	8004956 <osKernelStart+0x3a>
 8004946:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <osKernelStart+0x68>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d103      	bne.n	8004956 <osKernelStart+0x3a>
    stat = osErrorISR;
 800494e:	f06f 0305 	mvn.w	r3, #5
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	e010      	b.n	8004978 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <osKernelStart+0x68>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d109      	bne.n	8004972 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800495e:	f7ff ffa1 	bl	80048a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004962:	4b08      	ldr	r3, [pc, #32]	; (8004984 <osKernelStart+0x68>)
 8004964:	2202      	movs	r2, #2
 8004966:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004968:	f001 f870 	bl	8005a4c <vTaskStartScheduler>
      stat = osOK;
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	e002      	b.n	8004978 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004976:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004978:	68fb      	ldr	r3, [r7, #12]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000224 	.word	0x20000224

08004988 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004988:	b580      	push	{r7, lr}
 800498a:	b090      	sub	sp, #64	; 0x40
 800498c:	af04      	add	r7, sp, #16
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004994:	2300      	movs	r3, #0
 8004996:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004998:	f3ef 8305 	mrs	r3, IPSR
 800499c:	61fb      	str	r3, [r7, #28]
  return(result);
 800499e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f040 808f 	bne.w	8004ac4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049a6:	f3ef 8310 	mrs	r3, PRIMASK
 80049aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d105      	bne.n	80049be <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049b2:	f3ef 8311 	mrs	r3, BASEPRI
 80049b6:	617b      	str	r3, [r7, #20]
  return(result);
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <osThreadNew+0x3e>
 80049be:	4b44      	ldr	r3, [pc, #272]	; (8004ad0 <osThreadNew+0x148>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d07e      	beq.n	8004ac4 <osThreadNew+0x13c>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d07b      	beq.n	8004ac4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80049cc:	2380      	movs	r3, #128	; 0x80
 80049ce:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80049d0:	2318      	movs	r3, #24
 80049d2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80049d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049dc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d045      	beq.n	8004a70 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <osThreadNew+0x6a>
        name = attr->name;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d008      	beq.n	8004a18 <osThreadNew+0x90>
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	2b38      	cmp	r3, #56	; 0x38
 8004a0a:	d805      	bhi.n	8004a18 <osThreadNew+0x90>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <osThreadNew+0x94>
        return (NULL);
 8004a18:	2300      	movs	r3, #0
 8004a1a:	e054      	b.n	8004ac6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	089b      	lsrs	r3, r3, #2
 8004a2a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00e      	beq.n	8004a52 <osThreadNew+0xca>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	2b5b      	cmp	r3, #91	; 0x5b
 8004a3a:	d90a      	bls.n	8004a52 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d006      	beq.n	8004a52 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <osThreadNew+0xca>
        mem = 1;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	623b      	str	r3, [r7, #32]
 8004a50:	e010      	b.n	8004a74 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10c      	bne.n	8004a74 <osThreadNew+0xec>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d108      	bne.n	8004a74 <osThreadNew+0xec>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d104      	bne.n	8004a74 <osThreadNew+0xec>
          mem = 0;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	623b      	str	r3, [r7, #32]
 8004a6e:	e001      	b.n	8004a74 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d110      	bne.n	8004a9c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a82:	9202      	str	r2, [sp, #8]
 8004a84:	9301      	str	r3, [sp, #4]
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 fe09 	bl	80056a8 <xTaskCreateStatic>
 8004a96:	4603      	mov	r3, r0
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	e013      	b.n	8004ac4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d110      	bne.n	8004ac4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	f107 0310 	add.w	r3, r7, #16
 8004aaa:	9301      	str	r3, [sp, #4]
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 fe51 	bl	800575c <xTaskCreate>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d001      	beq.n	8004ac4 <osThreadNew+0x13c>
          hTask = NULL;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004ac4:	693b      	ldr	r3, [r7, #16]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3730      	adds	r7, #48	; 0x30
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000224 	.word	0x20000224

08004ad4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004adc:	f3ef 8305 	mrs	r3, IPSR
 8004ae0:	613b      	str	r3, [r7, #16]
  return(result);
 8004ae2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10f      	bne.n	8004b08 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8004aec:	60fb      	str	r3, [r7, #12]
  return(result);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d105      	bne.n	8004b00 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004af4:	f3ef 8311 	mrs	r3, BASEPRI
 8004af8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d007      	beq.n	8004b10 <osDelay+0x3c>
 8004b00:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <osDelay+0x58>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d103      	bne.n	8004b10 <osDelay+0x3c>
    stat = osErrorISR;
 8004b08:	f06f 0305 	mvn.w	r3, #5
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	e007      	b.n	8004b20 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 ff62 	bl	80059e4 <vTaskDelay>
    }
  }

  return (stat);
 8004b20:	697b      	ldr	r3, [r7, #20]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20000224 	.word	0x20000224

08004b30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4a07      	ldr	r2, [pc, #28]	; (8004b5c <vApplicationGetIdleTaskMemory+0x2c>)
 8004b40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	4a06      	ldr	r2, [pc, #24]	; (8004b60 <vApplicationGetIdleTaskMemory+0x30>)
 8004b46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2280      	movs	r2, #128	; 0x80
 8004b4c:	601a      	str	r2, [r3, #0]
}
 8004b4e:	bf00      	nop
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	20000228 	.word	0x20000228
 8004b60:	20000284 	.word	0x20000284

08004b64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4a07      	ldr	r2, [pc, #28]	; (8004b90 <vApplicationGetTimerTaskMemory+0x2c>)
 8004b74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	4a06      	ldr	r2, [pc, #24]	; (8004b94 <vApplicationGetTimerTaskMemory+0x30>)
 8004b7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b82:	601a      	str	r2, [r3, #0]
}
 8004b84:	bf00      	nop
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	20000484 	.word	0x20000484
 8004b94:	200004e0 	.word	0x200004e0

08004b98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f103 0208 	add.w	r2, r3, #8
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f103 0208 	add.w	r2, r3, #8
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f103 0208 	add.w	r2, r3, #8
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b085      	sub	sp, #20
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	601a      	str	r2, [r3, #0]
}
 8004c2e:	bf00      	nop
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b085      	sub	sp, #20
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c50:	d103      	bne.n	8004c5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	e00c      	b.n	8004c74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	3308      	adds	r3, #8
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	e002      	b.n	8004c68 <vListInsert+0x2e>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d2f6      	bcs.n	8004c62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	601a      	str	r2, [r3, #0]
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6892      	ldr	r2, [r2, #8]
 8004cc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6852      	ldr	r2, [r2, #4]
 8004ccc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d103      	bne.n	8004ce0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	1e5a      	subs	r2, r3, #1
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d109      	bne.n	8004d28 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	60bb      	str	r3, [r7, #8]
 8004d26:	e7fe      	b.n	8004d26 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004d28:	f002 f810 	bl	8006d4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d34:	68f9      	ldr	r1, [r7, #12]
 8004d36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d38:	fb01 f303 	mul.w	r3, r1, r3
 8004d3c:	441a      	add	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	68f9      	ldr	r1, [r7, #12]
 8004d5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d5e:	fb01 f303 	mul.w	r3, r1, r3
 8004d62:	441a      	add	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	22ff      	movs	r2, #255	; 0xff
 8004d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	22ff      	movs	r2, #255	; 0xff
 8004d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d114      	bne.n	8004da8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d01a      	beq.n	8004dbc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	3310      	adds	r3, #16
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f001 f8de 	bl	8005f4c <xTaskRemoveFromEventList>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d012      	beq.n	8004dbc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d96:	4b0d      	ldr	r3, [pc, #52]	; (8004dcc <xQueueGenericReset+0xcc>)
 8004d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	e009      	b.n	8004dbc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	3310      	adds	r3, #16
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff fef3 	bl	8004b98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	3324      	adds	r3, #36	; 0x24
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff feee 	bl	8004b98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004dbc:	f001 fff4 	bl	8006da8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004dc0:	2301      	movs	r3, #1
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	e000ed04 	.word	0xe000ed04

08004dd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08e      	sub	sp, #56	; 0x38
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d109      	bne.n	8004df8 <xQueueGenericCreateStatic+0x28>
 8004de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004df6:	e7fe      	b.n	8004df6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d109      	bne.n	8004e12 <xQueueGenericCreateStatic+0x42>
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e10:	e7fe      	b.n	8004e10 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <xQueueGenericCreateStatic+0x4e>
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <xQueueGenericCreateStatic+0x52>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <xQueueGenericCreateStatic+0x54>
 8004e22:	2300      	movs	r3, #0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d109      	bne.n	8004e3c <xQueueGenericCreateStatic+0x6c>
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	623b      	str	r3, [r7, #32]
 8004e3a:	e7fe      	b.n	8004e3a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d102      	bne.n	8004e48 <xQueueGenericCreateStatic+0x78>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <xQueueGenericCreateStatic+0x7c>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e000      	b.n	8004e4e <xQueueGenericCreateStatic+0x7e>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d109      	bne.n	8004e66 <xQueueGenericCreateStatic+0x96>
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	e7fe      	b.n	8004e64 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e66:	2350      	movs	r3, #80	; 0x50
 8004e68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2b50      	cmp	r3, #80	; 0x50
 8004e6e:	d009      	beq.n	8004e84 <xQueueGenericCreateStatic+0xb4>
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	61bb      	str	r3, [r7, #24]
 8004e82:	e7fe      	b.n	8004e82 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e84:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00d      	beq.n	8004eac <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e98:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f805 	bl	8004eb6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3730      	adds	r7, #48	; 0x30
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b084      	sub	sp, #16
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	60f8      	str	r0, [r7, #12]
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	607a      	str	r2, [r7, #4]
 8004ec2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d103      	bne.n	8004ed2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	e002      	b.n	8004ed8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	69b8      	ldr	r0, [r7, #24]
 8004ee8:	f7ff ff0a 	bl	8004d00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	78fa      	ldrb	r2, [r7, #3]
 8004ef0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ef4:	bf00      	nop
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08e      	sub	sp, #56	; 0x38
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d109      	bne.n	8004f2c <xQueueGenericSend+0x30>
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f2a:	e7fe      	b.n	8004f2a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d103      	bne.n	8004f3a <xQueueGenericSend+0x3e>
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <xQueueGenericSend+0x42>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <xQueueGenericSend+0x44>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d109      	bne.n	8004f58 <xQueueGenericSend+0x5c>
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
 8004f56:	e7fe      	b.n	8004f56 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d103      	bne.n	8004f66 <xQueueGenericSend+0x6a>
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d101      	bne.n	8004f6a <xQueueGenericSend+0x6e>
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <xQueueGenericSend+0x70>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d109      	bne.n	8004f84 <xQueueGenericSend+0x88>
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	623b      	str	r3, [r7, #32]
 8004f82:	e7fe      	b.n	8004f82 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f84:	f001 f998 	bl	80062b8 <xTaskGetSchedulerState>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d102      	bne.n	8004f94 <xQueueGenericSend+0x98>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <xQueueGenericSend+0x9c>
 8004f94:	2301      	movs	r3, #1
 8004f96:	e000      	b.n	8004f9a <xQueueGenericSend+0x9e>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d109      	bne.n	8004fb2 <xQueueGenericSend+0xb6>
 8004f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	61fb      	str	r3, [r7, #28]
 8004fb0:	e7fe      	b.n	8004fb0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fb2:	f001 fecb 	bl	8006d4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d302      	bcc.n	8004fc8 <xQueueGenericSend+0xcc>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d129      	bne.n	800501c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fce:	f000 f9ff 	bl	80053d0 <prvCopyDataToQueue>
 8004fd2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d010      	beq.n	8004ffe <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	3324      	adds	r3, #36	; 0x24
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 ffb3 	bl	8005f4c <xTaskRemoveFromEventList>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d013      	beq.n	8005014 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004fec:	4b3f      	ldr	r3, [pc, #252]	; (80050ec <xQueueGenericSend+0x1f0>)
 8004fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	e00a      	b.n	8005014 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	2b00      	cmp	r3, #0
 8005002:	d007      	beq.n	8005014 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005004:	4b39      	ldr	r3, [pc, #228]	; (80050ec <xQueueGenericSend+0x1f0>)
 8005006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005014:	f001 fec8 	bl	8006da8 <vPortExitCritical>
				return pdPASS;
 8005018:	2301      	movs	r3, #1
 800501a:	e063      	b.n	80050e4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d103      	bne.n	800502a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005022:	f001 fec1 	bl	8006da8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005026:	2300      	movs	r3, #0
 8005028:	e05c      	b.n	80050e4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800502a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800502c:	2b00      	cmp	r3, #0
 800502e:	d106      	bne.n	800503e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005030:	f107 0314 	add.w	r3, r7, #20
 8005034:	4618      	mov	r0, r3
 8005036:	f000 ffeb 	bl	8006010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800503a:	2301      	movs	r3, #1
 800503c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800503e:	f001 feb3 	bl	8006da8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005042:	f000 fd67 	bl	8005b14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005046:	f001 fe81 	bl	8006d4c <vPortEnterCritical>
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005050:	b25b      	sxtb	r3, r3
 8005052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005056:	d103      	bne.n	8005060 <xQueueGenericSend+0x164>
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005062:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005066:	b25b      	sxtb	r3, r3
 8005068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800506c:	d103      	bne.n	8005076 <xQueueGenericSend+0x17a>
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005076:	f001 fe97 	bl	8006da8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800507a:	1d3a      	adds	r2, r7, #4
 800507c:	f107 0314 	add.w	r3, r7, #20
 8005080:	4611      	mov	r1, r2
 8005082:	4618      	mov	r0, r3
 8005084:	f000 ffda 	bl	800603c <xTaskCheckForTimeOut>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d124      	bne.n	80050d8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800508e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005090:	f000 fa96 	bl	80055c0 <prvIsQueueFull>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d018      	beq.n	80050cc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	3310      	adds	r3, #16
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	4611      	mov	r1, r2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 ff04 	bl	8005eb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80050a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050aa:	f000 fa21 	bl	80054f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80050ae:	f000 fd3f 	bl	8005b30 <xTaskResumeAll>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f47f af7c 	bne.w	8004fb2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80050ba:	4b0c      	ldr	r3, [pc, #48]	; (80050ec <xQueueGenericSend+0x1f0>)
 80050bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	e772      	b.n	8004fb2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80050cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050ce:	f000 fa0f 	bl	80054f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050d2:	f000 fd2d 	bl	8005b30 <xTaskResumeAll>
 80050d6:	e76c      	b.n	8004fb2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80050d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050da:	f000 fa09 	bl	80054f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050de:	f000 fd27 	bl	8005b30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3738      	adds	r7, #56	; 0x38
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	e000ed04 	.word	0xe000ed04

080050f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08e      	sub	sp, #56	; 0x38
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005104:	2b00      	cmp	r3, #0
 8005106:	d109      	bne.n	800511c <xQueueGenericSendFromISR+0x2c>
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
 800511a:	e7fe      	b.n	800511a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d103      	bne.n	800512a <xQueueGenericSendFromISR+0x3a>
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <xQueueGenericSendFromISR+0x3e>
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <xQueueGenericSendFromISR+0x40>
 800512e:	2300      	movs	r3, #0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d109      	bne.n	8005148 <xQueueGenericSendFromISR+0x58>
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	623b      	str	r3, [r7, #32]
 8005146:	e7fe      	b.n	8005146 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d103      	bne.n	8005156 <xQueueGenericSendFromISR+0x66>
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <xQueueGenericSendFromISR+0x6a>
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <xQueueGenericSendFromISR+0x6c>
 800515a:	2300      	movs	r3, #0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d109      	bne.n	8005174 <xQueueGenericSendFromISR+0x84>
 8005160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005164:	f383 8811 	msr	BASEPRI, r3
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	61fb      	str	r3, [r7, #28]
 8005172:	e7fe      	b.n	8005172 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005174:	f001 fec6 	bl	8006f04 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005178:	f3ef 8211 	mrs	r2, BASEPRI
 800517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	61ba      	str	r2, [r7, #24]
 800518e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005190:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519c:	429a      	cmp	r2, r3
 800519e:	d302      	bcc.n	80051a6 <xQueueGenericSendFromISR+0xb6>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d12c      	bne.n	8005200 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	68b9      	ldr	r1, [r7, #8]
 80051b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051b6:	f000 f90b 	bl	80053d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80051ba:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80051be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051c2:	d112      	bne.n	80051ea <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d016      	beq.n	80051fa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	3324      	adds	r3, #36	; 0x24
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 febb 	bl	8005f4c <xTaskRemoveFromEventList>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00e      	beq.n	80051fa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00b      	beq.n	80051fa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	e007      	b.n	80051fa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051ee:	3301      	adds	r3, #1
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	b25a      	sxtb	r2, r3
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80051fa:	2301      	movs	r3, #1
 80051fc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80051fe:	e001      	b.n	8005204 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005200:	2300      	movs	r3, #0
 8005202:	637b      	str	r3, [r7, #52]	; 0x34
 8005204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005206:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800520e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005210:	4618      	mov	r0, r3
 8005212:	3738      	adds	r7, #56	; 0x38
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08c      	sub	sp, #48	; 0x30
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005224:	2300      	movs	r3, #0
 8005226:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	2b00      	cmp	r3, #0
 8005230:	d109      	bne.n	8005246 <xQueueReceive+0x2e>
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	623b      	str	r3, [r7, #32]
 8005244:	e7fe      	b.n	8005244 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d103      	bne.n	8005254 <xQueueReceive+0x3c>
 800524c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <xQueueReceive+0x40>
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <xQueueReceive+0x42>
 8005258:	2300      	movs	r3, #0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d109      	bne.n	8005272 <xQueueReceive+0x5a>
 800525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	61fb      	str	r3, [r7, #28]
 8005270:	e7fe      	b.n	8005270 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005272:	f001 f821 	bl	80062b8 <xTaskGetSchedulerState>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d102      	bne.n	8005282 <xQueueReceive+0x6a>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <xQueueReceive+0x6e>
 8005282:	2301      	movs	r3, #1
 8005284:	e000      	b.n	8005288 <xQueueReceive+0x70>
 8005286:	2300      	movs	r3, #0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d109      	bne.n	80052a0 <xQueueReceive+0x88>
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	61bb      	str	r3, [r7, #24]
 800529e:	e7fe      	b.n	800529e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052a0:	f001 fd54 	bl	8006d4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d01f      	beq.n	80052f0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052b4:	f000 f8f6 	bl	80054a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	1e5a      	subs	r2, r3, #1
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00f      	beq.n	80052e8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ca:	3310      	adds	r3, #16
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 fe3d 	bl	8005f4c <xTaskRemoveFromEventList>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d007      	beq.n	80052e8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052d8:	4b3c      	ldr	r3, [pc, #240]	; (80053cc <xQueueReceive+0x1b4>)
 80052da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052e8:	f001 fd5e 	bl	8006da8 <vPortExitCritical>
				return pdPASS;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e069      	b.n	80053c4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d103      	bne.n	80052fe <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052f6:	f001 fd57 	bl	8006da8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052fa:	2300      	movs	r3, #0
 80052fc:	e062      	b.n	80053c4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005300:	2b00      	cmp	r3, #0
 8005302:	d106      	bne.n	8005312 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005304:	f107 0310 	add.w	r3, r7, #16
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fe81 	bl	8006010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800530e:	2301      	movs	r3, #1
 8005310:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005312:	f001 fd49 	bl	8006da8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005316:	f000 fbfd 	bl	8005b14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800531a:	f001 fd17 	bl	8006d4c <vPortEnterCritical>
 800531e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005324:	b25b      	sxtb	r3, r3
 8005326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800532a:	d103      	bne.n	8005334 <xQueueReceive+0x11c>
 800532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800533a:	b25b      	sxtb	r3, r3
 800533c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005340:	d103      	bne.n	800534a <xQueueReceive+0x132>
 8005342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800534a:	f001 fd2d 	bl	8006da8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800534e:	1d3a      	adds	r2, r7, #4
 8005350:	f107 0310 	add.w	r3, r7, #16
 8005354:	4611      	mov	r1, r2
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fe70 	bl	800603c <xTaskCheckForTimeOut>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d123      	bne.n	80053aa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005364:	f000 f916 	bl	8005594 <prvIsQueueEmpty>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d017      	beq.n	800539e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	3324      	adds	r3, #36	; 0x24
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	4611      	mov	r1, r2
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fd9a 	bl	8005eb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800537c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800537e:	f000 f8b7 	bl	80054f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005382:	f000 fbd5 	bl	8005b30 <xTaskResumeAll>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d189      	bne.n	80052a0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800538c:	4b0f      	ldr	r3, [pc, #60]	; (80053cc <xQueueReceive+0x1b4>)
 800538e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	e780      	b.n	80052a0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800539e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053a0:	f000 f8a6 	bl	80054f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053a4:	f000 fbc4 	bl	8005b30 <xTaskResumeAll>
 80053a8:	e77a      	b.n	80052a0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80053aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053ac:	f000 f8a0 	bl	80054f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053b0:	f000 fbbe 	bl	8005b30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053b6:	f000 f8ed 	bl	8005594 <prvIsQueueEmpty>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f43f af6f 	beq.w	80052a0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3730      	adds	r7, #48	; 0x30
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	e000ed04 	.word	0xe000ed04

080053d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80053dc:	2300      	movs	r3, #0
 80053de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10d      	bne.n	800540a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d14d      	bne.n	8005492 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 ff7a 	bl	80062f4 <xTaskPriorityDisinherit>
 8005400:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	609a      	str	r2, [r3, #8]
 8005408:	e043      	b.n	8005492 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d119      	bne.n	8005444 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6858      	ldr	r0, [r3, #4]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	461a      	mov	r2, r3
 800541a:	68b9      	ldr	r1, [r7, #8]
 800541c:	f001 ffb0 	bl	8007380 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	441a      	add	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	429a      	cmp	r2, r3
 8005438:	d32b      	bcc.n	8005492 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	605a      	str	r2, [r3, #4]
 8005442:	e026      	b.n	8005492 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	68d8      	ldr	r0, [r3, #12]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544c:	461a      	mov	r2, r3
 800544e:	68b9      	ldr	r1, [r7, #8]
 8005450:	f001 ff96 	bl	8007380 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	425b      	negs	r3, r3
 800545e:	441a      	add	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	429a      	cmp	r2, r3
 800546e:	d207      	bcs.n	8005480 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	425b      	negs	r3, r3
 800547a:	441a      	add	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b02      	cmp	r3, #2
 8005484:	d105      	bne.n	8005492 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	3b01      	subs	r3, #1
 8005490:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800549a:	697b      	ldr	r3, [r7, #20]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d018      	beq.n	80054e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	441a      	add	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d303      	bcc.n	80054d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68d9      	ldr	r1, [r3, #12]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	461a      	mov	r2, r3
 80054e2:	6838      	ldr	r0, [r7, #0]
 80054e4:	f001 ff4c 	bl	8007380 <memcpy>
	}
}
 80054e8:	bf00      	nop
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054f8:	f001 fc28 	bl	8006d4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005502:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005504:	e011      	b.n	800552a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	2b00      	cmp	r3, #0
 800550c:	d012      	beq.n	8005534 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3324      	adds	r3, #36	; 0x24
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fd1a 	bl	8005f4c <xTaskRemoveFromEventList>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800551e:	f000 fded 	bl	80060fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005522:	7bfb      	ldrb	r3, [r7, #15]
 8005524:	3b01      	subs	r3, #1
 8005526:	b2db      	uxtb	r3, r3
 8005528:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800552a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800552e:	2b00      	cmp	r3, #0
 8005530:	dce9      	bgt.n	8005506 <prvUnlockQueue+0x16>
 8005532:	e000      	b.n	8005536 <prvUnlockQueue+0x46>
					break;
 8005534:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	22ff      	movs	r2, #255	; 0xff
 800553a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800553e:	f001 fc33 	bl	8006da8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005542:	f001 fc03 	bl	8006d4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800554c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800554e:	e011      	b.n	8005574 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d012      	beq.n	800557e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3310      	adds	r3, #16
 800555c:	4618      	mov	r0, r3
 800555e:	f000 fcf5 	bl	8005f4c <xTaskRemoveFromEventList>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005568:	f000 fdc8 	bl	80060fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800556c:	7bbb      	ldrb	r3, [r7, #14]
 800556e:	3b01      	subs	r3, #1
 8005570:	b2db      	uxtb	r3, r3
 8005572:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005578:	2b00      	cmp	r3, #0
 800557a:	dce9      	bgt.n	8005550 <prvUnlockQueue+0x60>
 800557c:	e000      	b.n	8005580 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800557e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	22ff      	movs	r2, #255	; 0xff
 8005584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005588:	f001 fc0e 	bl	8006da8 <vPortExitCritical>
}
 800558c:	bf00      	nop
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800559c:	f001 fbd6 	bl	8006d4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d102      	bne.n	80055ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80055a8:	2301      	movs	r3, #1
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	e001      	b.n	80055b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80055ae:	2300      	movs	r3, #0
 80055b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055b2:	f001 fbf9 	bl	8006da8 <vPortExitCritical>

	return xReturn;
 80055b6:	68fb      	ldr	r3, [r7, #12]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055c8:	f001 fbc0 	bl	8006d4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d102      	bne.n	80055de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80055d8:	2301      	movs	r3, #1
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	e001      	b.n	80055e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055e2:	f001 fbe1 	bl	8006da8 <vPortExitCritical>

	return xReturn;
 80055e6:	68fb      	ldr	r3, [r7, #12]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055fa:	2300      	movs	r3, #0
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	e014      	b.n	800562a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005600:	4a0e      	ldr	r2, [pc, #56]	; (800563c <vQueueAddToRegistry+0x4c>)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10b      	bne.n	8005624 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800560c:	490b      	ldr	r1, [pc, #44]	; (800563c <vQueueAddToRegistry+0x4c>)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005616:	4a09      	ldr	r2, [pc, #36]	; (800563c <vQueueAddToRegistry+0x4c>)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	4413      	add	r3, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005622:	e005      	b.n	8005630 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	3301      	adds	r3, #1
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b07      	cmp	r3, #7
 800562e:	d9e7      	bls.n	8005600 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005630:	bf00      	nop
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	20004cd4 	.word	0x20004cd4

08005640 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005650:	f001 fb7c 	bl	8006d4c <vPortEnterCritical>
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800565a:	b25b      	sxtb	r3, r3
 800565c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005660:	d103      	bne.n	800566a <vQueueWaitForMessageRestricted+0x2a>
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005670:	b25b      	sxtb	r3, r3
 8005672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005676:	d103      	bne.n	8005680 <vQueueWaitForMessageRestricted+0x40>
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005680:	f001 fb92 	bl	8006da8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005688:	2b00      	cmp	r3, #0
 800568a:	d106      	bne.n	800569a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	3324      	adds	r3, #36	; 0x24
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	68b9      	ldr	r1, [r7, #8]
 8005694:	4618      	mov	r0, r3
 8005696:	f000 fc2f 	bl	8005ef8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800569a:	6978      	ldr	r0, [r7, #20]
 800569c:	f7ff ff28 	bl	80054f0 <prvUnlockQueue>
	}
 80056a0:	bf00      	nop
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08e      	sub	sp, #56	; 0x38
 80056ac:	af04      	add	r7, sp, #16
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80056b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d109      	bne.n	80056d0 <xTaskCreateStatic+0x28>
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	623b      	str	r3, [r7, #32]
 80056ce:	e7fe      	b.n	80056ce <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d109      	bne.n	80056ea <xTaskCreateStatic+0x42>
 80056d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	61fb      	str	r3, [r7, #28]
 80056e8:	e7fe      	b.n	80056e8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056ea:	235c      	movs	r3, #92	; 0x5c
 80056ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	2b5c      	cmp	r3, #92	; 0x5c
 80056f2:	d009      	beq.n	8005708 <xTaskCreateStatic+0x60>
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	61bb      	str	r3, [r7, #24]
 8005706:	e7fe      	b.n	8005706 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005708:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800570a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570c:	2b00      	cmp	r3, #0
 800570e:	d01e      	beq.n	800574e <xTaskCreateStatic+0xa6>
 8005710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005712:	2b00      	cmp	r3, #0
 8005714:	d01b      	beq.n	800574e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005718:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800571e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	2202      	movs	r2, #2
 8005724:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005728:	2300      	movs	r3, #0
 800572a:	9303      	str	r3, [sp, #12]
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	9302      	str	r3, [sp, #8]
 8005730:	f107 0314 	add.w	r3, r7, #20
 8005734:	9301      	str	r3, [sp, #4]
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	68b9      	ldr	r1, [r7, #8]
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 f850 	bl	80057e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005746:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005748:	f000 f8dc 	bl	8005904 <prvAddNewTaskToReadyList>
 800574c:	e001      	b.n	8005752 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005752:	697b      	ldr	r3, [r7, #20]
	}
 8005754:	4618      	mov	r0, r3
 8005756:	3728      	adds	r7, #40	; 0x28
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800575c:	b580      	push	{r7, lr}
 800575e:	b08c      	sub	sp, #48	; 0x30
 8005760:	af04      	add	r7, sp, #16
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	603b      	str	r3, [r7, #0]
 8005768:	4613      	mov	r3, r2
 800576a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800576c:	88fb      	ldrh	r3, [r7, #6]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4618      	mov	r0, r3
 8005772:	f001 fc05 	bl	8006f80 <pvPortMalloc>
 8005776:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00e      	beq.n	800579c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800577e:	205c      	movs	r0, #92	; 0x5c
 8005780:	f001 fbfe 	bl	8006f80 <pvPortMalloc>
 8005784:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	631a      	str	r2, [r3, #48]	; 0x30
 8005792:	e005      	b.n	80057a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005794:	6978      	ldr	r0, [r7, #20]
 8005796:	f001 fcb5 	bl	8007104 <vPortFree>
 800579a:	e001      	b.n	80057a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800579c:	2300      	movs	r3, #0
 800579e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d017      	beq.n	80057d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057ae:	88fa      	ldrh	r2, [r7, #6]
 80057b0:	2300      	movs	r3, #0
 80057b2:	9303      	str	r3, [sp, #12]
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	9302      	str	r3, [sp, #8]
 80057b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ba:	9301      	str	r3, [sp, #4]
 80057bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	68b9      	ldr	r1, [r7, #8]
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 f80e 	bl	80057e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057ca:	69f8      	ldr	r0, [r7, #28]
 80057cc:	f000 f89a 	bl	8005904 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057d0:	2301      	movs	r3, #1
 80057d2:	61bb      	str	r3, [r7, #24]
 80057d4:	e002      	b.n	80057dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057dc:	69bb      	ldr	r3, [r7, #24]
	}
 80057de:	4618      	mov	r0, r3
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b088      	sub	sp, #32
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	60f8      	str	r0, [r7, #12]
 80057ee:	60b9      	str	r1, [r7, #8]
 80057f0:	607a      	str	r2, [r7, #4]
 80057f2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	461a      	mov	r2, r3
 80057fe:	21a5      	movs	r1, #165	; 0xa5
 8005800:	f001 fdc9 	bl	8007396 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800580e:	3b01      	subs	r3, #1
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	f023 0307 	bic.w	r3, r3, #7
 800581c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	f003 0307 	and.w	r3, r3, #7
 8005824:	2b00      	cmp	r3, #0
 8005826:	d009      	beq.n	800583c <prvInitialiseNewTask+0x56>
 8005828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	617b      	str	r3, [r7, #20]
 800583a:	e7fe      	b.n	800583a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d01f      	beq.n	8005882 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005842:	2300      	movs	r3, #0
 8005844:	61fb      	str	r3, [r7, #28]
 8005846:	e012      	b.n	800586e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	4413      	add	r3, r2
 800584e:	7819      	ldrb	r1, [r3, #0]
 8005850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	4413      	add	r3, r2
 8005856:	3334      	adds	r3, #52	; 0x34
 8005858:	460a      	mov	r2, r1
 800585a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	4413      	add	r3, r2
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d006      	beq.n	8005876 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	3301      	adds	r3, #1
 800586c:	61fb      	str	r3, [r7, #28]
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	2b0f      	cmp	r3, #15
 8005872:	d9e9      	bls.n	8005848 <prvInitialiseNewTask+0x62>
 8005874:	e000      	b.n	8005878 <prvInitialiseNewTask+0x92>
			{
				break;
 8005876:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005880:	e003      	b.n	800588a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800588a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588c:	2b37      	cmp	r3, #55	; 0x37
 800588e:	d901      	bls.n	8005894 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005890:	2337      	movs	r3, #55	; 0x37
 8005892:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005898:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800589e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80058a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a2:	2200      	movs	r2, #0
 80058a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	3304      	adds	r3, #4
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff f994 	bl	8004bd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	3318      	adds	r3, #24
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7ff f98f 	bl	8004bd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	2200      	movs	r2, #0
 80058d4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	68f9      	ldr	r1, [r7, #12]
 80058e2:	69b8      	ldr	r0, [r7, #24]
 80058e4:	f001 f90c 	bl	8006b00 <pxPortInitialiseStack>
 80058e8:	4602      	mov	r2, r0
 80058ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058fa:	bf00      	nop
 80058fc:	3720      	adds	r7, #32
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800590c:	f001 fa1e 	bl	8006d4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005910:	4b2d      	ldr	r3, [pc, #180]	; (80059c8 <prvAddNewTaskToReadyList+0xc4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3301      	adds	r3, #1
 8005916:	4a2c      	ldr	r2, [pc, #176]	; (80059c8 <prvAddNewTaskToReadyList+0xc4>)
 8005918:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800591a:	4b2c      	ldr	r3, [pc, #176]	; (80059cc <prvAddNewTaskToReadyList+0xc8>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d109      	bne.n	8005936 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005922:	4a2a      	ldr	r2, [pc, #168]	; (80059cc <prvAddNewTaskToReadyList+0xc8>)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005928:	4b27      	ldr	r3, [pc, #156]	; (80059c8 <prvAddNewTaskToReadyList+0xc4>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d110      	bne.n	8005952 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005930:	f000 fc08 	bl	8006144 <prvInitialiseTaskLists>
 8005934:	e00d      	b.n	8005952 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005936:	4b26      	ldr	r3, [pc, #152]	; (80059d0 <prvAddNewTaskToReadyList+0xcc>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d109      	bne.n	8005952 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800593e:	4b23      	ldr	r3, [pc, #140]	; (80059cc <prvAddNewTaskToReadyList+0xc8>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	429a      	cmp	r2, r3
 800594a:	d802      	bhi.n	8005952 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800594c:	4a1f      	ldr	r2, [pc, #124]	; (80059cc <prvAddNewTaskToReadyList+0xc8>)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005952:	4b20      	ldr	r3, [pc, #128]	; (80059d4 <prvAddNewTaskToReadyList+0xd0>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3301      	adds	r3, #1
 8005958:	4a1e      	ldr	r2, [pc, #120]	; (80059d4 <prvAddNewTaskToReadyList+0xd0>)
 800595a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800595c:	4b1d      	ldr	r3, [pc, #116]	; (80059d4 <prvAddNewTaskToReadyList+0xd0>)
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005968:	4b1b      	ldr	r3, [pc, #108]	; (80059d8 <prvAddNewTaskToReadyList+0xd4>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	429a      	cmp	r2, r3
 800596e:	d903      	bls.n	8005978 <prvAddNewTaskToReadyList+0x74>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005974:	4a18      	ldr	r2, [pc, #96]	; (80059d8 <prvAddNewTaskToReadyList+0xd4>)
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597c:	4613      	mov	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4a15      	ldr	r2, [pc, #84]	; (80059dc <prvAddNewTaskToReadyList+0xd8>)
 8005986:	441a      	add	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3304      	adds	r3, #4
 800598c:	4619      	mov	r1, r3
 800598e:	4610      	mov	r0, r2
 8005990:	f7ff f92f 	bl	8004bf2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005994:	f001 fa08 	bl	8006da8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005998:	4b0d      	ldr	r3, [pc, #52]	; (80059d0 <prvAddNewTaskToReadyList+0xcc>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00e      	beq.n	80059be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059a0:	4b0a      	ldr	r3, [pc, #40]	; (80059cc <prvAddNewTaskToReadyList+0xc8>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d207      	bcs.n	80059be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80059ae:	4b0c      	ldr	r3, [pc, #48]	; (80059e0 <prvAddNewTaskToReadyList+0xdc>)
 80059b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059be:	bf00      	nop
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	20000db4 	.word	0x20000db4
 80059cc:	200008e0 	.word	0x200008e0
 80059d0:	20000dc0 	.word	0x20000dc0
 80059d4:	20000dd0 	.word	0x20000dd0
 80059d8:	20000dbc 	.word	0x20000dbc
 80059dc:	200008e4 	.word	0x200008e4
 80059e0:	e000ed04 	.word	0xe000ed04

080059e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d016      	beq.n	8005a24 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059f6:	4b13      	ldr	r3, [pc, #76]	; (8005a44 <vTaskDelay+0x60>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d009      	beq.n	8005a12 <vTaskDelay+0x2e>
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	60bb      	str	r3, [r7, #8]
 8005a10:	e7fe      	b.n	8005a10 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005a12:	f000 f87f 	bl	8005b14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a16:	2100      	movs	r1, #0
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fcd7 	bl	80063cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a1e:	f000 f887 	bl	8005b30 <xTaskResumeAll>
 8005a22:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d107      	bne.n	8005a3a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005a2a:	4b07      	ldr	r3, [pc, #28]	; (8005a48 <vTaskDelay+0x64>)
 8005a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a3a:	bf00      	nop
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20000ddc 	.word	0x20000ddc
 8005a48:	e000ed04 	.word	0xe000ed04

08005a4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08a      	sub	sp, #40	; 0x28
 8005a50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a52:	2300      	movs	r3, #0
 8005a54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a5a:	463a      	mov	r2, r7
 8005a5c:	1d39      	adds	r1, r7, #4
 8005a5e:	f107 0308 	add.w	r3, r7, #8
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7ff f864 	bl	8004b30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a68:	6839      	ldr	r1, [r7, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	9202      	str	r2, [sp, #8]
 8005a70:	9301      	str	r3, [sp, #4]
 8005a72:	2300      	movs	r3, #0
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	2300      	movs	r3, #0
 8005a78:	460a      	mov	r2, r1
 8005a7a:	4920      	ldr	r1, [pc, #128]	; (8005afc <vTaskStartScheduler+0xb0>)
 8005a7c:	4820      	ldr	r0, [pc, #128]	; (8005b00 <vTaskStartScheduler+0xb4>)
 8005a7e:	f7ff fe13 	bl	80056a8 <xTaskCreateStatic>
 8005a82:	4602      	mov	r2, r0
 8005a84:	4b1f      	ldr	r3, [pc, #124]	; (8005b04 <vTaskStartScheduler+0xb8>)
 8005a86:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a88:	4b1e      	ldr	r3, [pc, #120]	; (8005b04 <vTaskStartScheduler+0xb8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a90:	2301      	movs	r3, #1
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	e001      	b.n	8005a9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d102      	bne.n	8005aa6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005aa0:	f000 fce8 	bl	8006474 <xTimerCreateTimerTask>
 8005aa4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d115      	bne.n	8005ad8 <vTaskStartScheduler+0x8c>
 8005aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab0:	f383 8811 	msr	BASEPRI, r3
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005abe:	4b12      	ldr	r3, [pc, #72]	; (8005b08 <vTaskStartScheduler+0xbc>)
 8005ac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ac4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ac6:	4b11      	ldr	r3, [pc, #68]	; (8005b0c <vTaskStartScheduler+0xc0>)
 8005ac8:	2201      	movs	r2, #1
 8005aca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005acc:	4b10      	ldr	r3, [pc, #64]	; (8005b10 <vTaskStartScheduler+0xc4>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ad2:	f001 f89d 	bl	8006c10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ad6:	e00d      	b.n	8005af4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ade:	d109      	bne.n	8005af4 <vTaskStartScheduler+0xa8>
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	e7fe      	b.n	8005af2 <vTaskStartScheduler+0xa6>
}
 8005af4:	bf00      	nop
 8005af6:	3718      	adds	r7, #24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	0800ae7c 	.word	0x0800ae7c
 8005b00:	08006115 	.word	0x08006115
 8005b04:	20000dd8 	.word	0x20000dd8
 8005b08:	20000dd4 	.word	0x20000dd4
 8005b0c:	20000dc0 	.word	0x20000dc0
 8005b10:	20000db8 	.word	0x20000db8

08005b14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005b18:	4b04      	ldr	r3, [pc, #16]	; (8005b2c <vTaskSuspendAll+0x18>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	4a03      	ldr	r2, [pc, #12]	; (8005b2c <vTaskSuspendAll+0x18>)
 8005b20:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005b22:	bf00      	nop
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	20000ddc 	.word	0x20000ddc

08005b30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b3e:	4b41      	ldr	r3, [pc, #260]	; (8005c44 <xTaskResumeAll+0x114>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d109      	bne.n	8005b5a <xTaskResumeAll+0x2a>
 8005b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	e7fe      	b.n	8005b58 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b5a:	f001 f8f7 	bl	8006d4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b5e:	4b39      	ldr	r3, [pc, #228]	; (8005c44 <xTaskResumeAll+0x114>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	4a37      	ldr	r2, [pc, #220]	; (8005c44 <xTaskResumeAll+0x114>)
 8005b66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b68:	4b36      	ldr	r3, [pc, #216]	; (8005c44 <xTaskResumeAll+0x114>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d162      	bne.n	8005c36 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b70:	4b35      	ldr	r3, [pc, #212]	; (8005c48 <xTaskResumeAll+0x118>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d05e      	beq.n	8005c36 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b78:	e02f      	b.n	8005bda <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b7a:	4b34      	ldr	r3, [pc, #208]	; (8005c4c <xTaskResumeAll+0x11c>)
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3318      	adds	r3, #24
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff f890 	bl	8004cac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	3304      	adds	r3, #4
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7ff f88b 	bl	8004cac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9a:	4b2d      	ldr	r3, [pc, #180]	; (8005c50 <xTaskResumeAll+0x120>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d903      	bls.n	8005baa <xTaskResumeAll+0x7a>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba6:	4a2a      	ldr	r2, [pc, #168]	; (8005c50 <xTaskResumeAll+0x120>)
 8005ba8:	6013      	str	r3, [r2, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4a27      	ldr	r2, [pc, #156]	; (8005c54 <xTaskResumeAll+0x124>)
 8005bb8:	441a      	add	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	f7ff f816 	bl	8004bf2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bca:	4b23      	ldr	r3, [pc, #140]	; (8005c58 <xTaskResumeAll+0x128>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d302      	bcc.n	8005bda <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005bd4:	4b21      	ldr	r3, [pc, #132]	; (8005c5c <xTaskResumeAll+0x12c>)
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bda:	4b1c      	ldr	r3, [pc, #112]	; (8005c4c <xTaskResumeAll+0x11c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1cb      	bne.n	8005b7a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005be8:	f000 fb46 	bl	8006278 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005bec:	4b1c      	ldr	r3, [pc, #112]	; (8005c60 <xTaskResumeAll+0x130>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d010      	beq.n	8005c1a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005bf8:	f000 f846 	bl	8005c88 <xTaskIncrementTick>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005c02:	4b16      	ldr	r3, [pc, #88]	; (8005c5c <xTaskResumeAll+0x12c>)
 8005c04:	2201      	movs	r2, #1
 8005c06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1f1      	bne.n	8005bf8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005c14:	4b12      	ldr	r3, [pc, #72]	; (8005c60 <xTaskResumeAll+0x130>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c1a:	4b10      	ldr	r3, [pc, #64]	; (8005c5c <xTaskResumeAll+0x12c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d009      	beq.n	8005c36 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c22:	2301      	movs	r3, #1
 8005c24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c26:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <xTaskResumeAll+0x134>)
 8005c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c36:	f001 f8b7 	bl	8006da8 <vPortExitCritical>

	return xAlreadyYielded;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	20000ddc 	.word	0x20000ddc
 8005c48:	20000db4 	.word	0x20000db4
 8005c4c:	20000d74 	.word	0x20000d74
 8005c50:	20000dbc 	.word	0x20000dbc
 8005c54:	200008e4 	.word	0x200008e4
 8005c58:	200008e0 	.word	0x200008e0
 8005c5c:	20000dc8 	.word	0x20000dc8
 8005c60:	20000dc4 	.word	0x20000dc4
 8005c64:	e000ed04 	.word	0xe000ed04

08005c68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c6e:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <xTaskGetTickCount+0x1c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c74:	687b      	ldr	r3, [r7, #4]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	20000db8 	.word	0x20000db8

08005c88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c92:	4b4e      	ldr	r3, [pc, #312]	; (8005dcc <xTaskIncrementTick+0x144>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f040 8088 	bne.w	8005dac <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c9c:	4b4c      	ldr	r3, [pc, #304]	; (8005dd0 <xTaskIncrementTick+0x148>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ca4:	4a4a      	ldr	r2, [pc, #296]	; (8005dd0 <xTaskIncrementTick+0x148>)
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d11f      	bne.n	8005cf0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cb0:	4b48      	ldr	r3, [pc, #288]	; (8005dd4 <xTaskIncrementTick+0x14c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d009      	beq.n	8005cce <xTaskIncrementTick+0x46>
 8005cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	603b      	str	r3, [r7, #0]
 8005ccc:	e7fe      	b.n	8005ccc <xTaskIncrementTick+0x44>
 8005cce:	4b41      	ldr	r3, [pc, #260]	; (8005dd4 <xTaskIncrementTick+0x14c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	4b40      	ldr	r3, [pc, #256]	; (8005dd8 <xTaskIncrementTick+0x150>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a3e      	ldr	r2, [pc, #248]	; (8005dd4 <xTaskIncrementTick+0x14c>)
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	4a3e      	ldr	r2, [pc, #248]	; (8005dd8 <xTaskIncrementTick+0x150>)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6013      	str	r3, [r2, #0]
 8005ce2:	4b3e      	ldr	r3, [pc, #248]	; (8005ddc <xTaskIncrementTick+0x154>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	4a3c      	ldr	r2, [pc, #240]	; (8005ddc <xTaskIncrementTick+0x154>)
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	f000 fac4 	bl	8006278 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cf0:	4b3b      	ldr	r3, [pc, #236]	; (8005de0 <xTaskIncrementTick+0x158>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d349      	bcc.n	8005d8e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cfa:	4b36      	ldr	r3, [pc, #216]	; (8005dd4 <xTaskIncrementTick+0x14c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d104      	bne.n	8005d0e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d04:	4b36      	ldr	r3, [pc, #216]	; (8005de0 <xTaskIncrementTick+0x158>)
 8005d06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d0a:	601a      	str	r2, [r3, #0]
					break;
 8005d0c:	e03f      	b.n	8005d8e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d0e:	4b31      	ldr	r3, [pc, #196]	; (8005dd4 <xTaskIncrementTick+0x14c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d203      	bcs.n	8005d2e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d26:	4a2e      	ldr	r2, [pc, #184]	; (8005de0 <xTaskIncrementTick+0x158>)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d2c:	e02f      	b.n	8005d8e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	3304      	adds	r3, #4
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fe ffba 	bl	8004cac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d004      	beq.n	8005d4a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	3318      	adds	r3, #24
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7fe ffb1 	bl	8004cac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4e:	4b25      	ldr	r3, [pc, #148]	; (8005de4 <xTaskIncrementTick+0x15c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d903      	bls.n	8005d5e <xTaskIncrementTick+0xd6>
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5a:	4a22      	ldr	r2, [pc, #136]	; (8005de4 <xTaskIncrementTick+0x15c>)
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d62:	4613      	mov	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4a1f      	ldr	r2, [pc, #124]	; (8005de8 <xTaskIncrementTick+0x160>)
 8005d6c:	441a      	add	r2, r3
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	3304      	adds	r3, #4
 8005d72:	4619      	mov	r1, r3
 8005d74:	4610      	mov	r0, r2
 8005d76:	f7fe ff3c 	bl	8004bf2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d7e:	4b1b      	ldr	r3, [pc, #108]	; (8005dec <xTaskIncrementTick+0x164>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d3b8      	bcc.n	8005cfa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d8c:	e7b5      	b.n	8005cfa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d8e:	4b17      	ldr	r3, [pc, #92]	; (8005dec <xTaskIncrementTick+0x164>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d94:	4914      	ldr	r1, [pc, #80]	; (8005de8 <xTaskIncrementTick+0x160>)
 8005d96:	4613      	mov	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	440b      	add	r3, r1
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d907      	bls.n	8005db6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005da6:	2301      	movs	r3, #1
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	e004      	b.n	8005db6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005dac:	4b10      	ldr	r3, [pc, #64]	; (8005df0 <xTaskIncrementTick+0x168>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3301      	adds	r3, #1
 8005db2:	4a0f      	ldr	r2, [pc, #60]	; (8005df0 <xTaskIncrementTick+0x168>)
 8005db4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005db6:	4b0f      	ldr	r3, [pc, #60]	; (8005df4 <xTaskIncrementTick+0x16c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005dc2:	697b      	ldr	r3, [r7, #20]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3718      	adds	r7, #24
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	20000ddc 	.word	0x20000ddc
 8005dd0:	20000db8 	.word	0x20000db8
 8005dd4:	20000d6c 	.word	0x20000d6c
 8005dd8:	20000d70 	.word	0x20000d70
 8005ddc:	20000dcc 	.word	0x20000dcc
 8005de0:	20000dd4 	.word	0x20000dd4
 8005de4:	20000dbc 	.word	0x20000dbc
 8005de8:	200008e4 	.word	0x200008e4
 8005dec:	200008e0 	.word	0x200008e0
 8005df0:	20000dc4 	.word	0x20000dc4
 8005df4:	20000dc8 	.word	0x20000dc8

08005df8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005dfe:	4b27      	ldr	r3, [pc, #156]	; (8005e9c <vTaskSwitchContext+0xa4>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e06:	4b26      	ldr	r3, [pc, #152]	; (8005ea0 <vTaskSwitchContext+0xa8>)
 8005e08:	2201      	movs	r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e0c:	e040      	b.n	8005e90 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005e0e:	4b24      	ldr	r3, [pc, #144]	; (8005ea0 <vTaskSwitchContext+0xa8>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e14:	4b23      	ldr	r3, [pc, #140]	; (8005ea4 <vTaskSwitchContext+0xac>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	e00f      	b.n	8005e3c <vTaskSwitchContext+0x44>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d109      	bne.n	8005e36 <vTaskSwitchContext+0x3e>
 8005e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e26:	f383 8811 	msr	BASEPRI, r3
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	607b      	str	r3, [r7, #4]
 8005e34:	e7fe      	b.n	8005e34 <vTaskSwitchContext+0x3c>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	491a      	ldr	r1, [pc, #104]	; (8005ea8 <vTaskSwitchContext+0xb0>)
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	440b      	add	r3, r1
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d0e5      	beq.n	8005e1c <vTaskSwitchContext+0x24>
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4613      	mov	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4a13      	ldr	r2, [pc, #76]	; (8005ea8 <vTaskSwitchContext+0xb0>)
 8005e5c:	4413      	add	r3, r2
 8005e5e:	60bb      	str	r3, [r7, #8]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	605a      	str	r2, [r3, #4]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	3308      	adds	r3, #8
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d104      	bne.n	8005e80 <vTaskSwitchContext+0x88>
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	605a      	str	r2, [r3, #4]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	4a09      	ldr	r2, [pc, #36]	; (8005eac <vTaskSwitchContext+0xb4>)
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	4a06      	ldr	r2, [pc, #24]	; (8005ea4 <vTaskSwitchContext+0xac>)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6013      	str	r3, [r2, #0]
}
 8005e90:	bf00      	nop
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	20000ddc 	.word	0x20000ddc
 8005ea0:	20000dc8 	.word	0x20000dc8
 8005ea4:	20000dbc 	.word	0x20000dbc
 8005ea8:	200008e4 	.word	0x200008e4
 8005eac:	200008e0 	.word	0x200008e0

08005eb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d109      	bne.n	8005ed4 <vTaskPlaceOnEventList+0x24>
 8005ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	e7fe      	b.n	8005ed2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ed4:	4b07      	ldr	r3, [pc, #28]	; (8005ef4 <vTaskPlaceOnEventList+0x44>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3318      	adds	r3, #24
 8005eda:	4619      	mov	r1, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7fe feac 	bl	8004c3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	6838      	ldr	r0, [r7, #0]
 8005ee6:	f000 fa71 	bl	80063cc <prvAddCurrentTaskToDelayedList>
}
 8005eea:	bf00      	nop
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	200008e0 	.word	0x200008e0

08005ef8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d109      	bne.n	8005f1e <vTaskPlaceOnEventListRestricted+0x26>
 8005f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	e7fe      	b.n	8005f1c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f1e:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <vTaskPlaceOnEventListRestricted+0x50>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3318      	adds	r3, #24
 8005f24:	4619      	mov	r1, r3
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f7fe fe63 	bl	8004bf2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f36:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	68b8      	ldr	r0, [r7, #8]
 8005f3c:	f000 fa46 	bl	80063cc <prvAddCurrentTaskToDelayedList>
	}
 8005f40:	bf00      	nop
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	200008e0 	.word	0x200008e0

08005f4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d109      	bne.n	8005f76 <xTaskRemoveFromEventList+0x2a>
 8005f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	e7fe      	b.n	8005f74 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	3318      	adds	r3, #24
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fe fe96 	bl	8004cac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f80:	4b1d      	ldr	r3, [pc, #116]	; (8005ff8 <xTaskRemoveFromEventList+0xac>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d11d      	bne.n	8005fc4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fe fe8d 	bl	8004cac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f96:	4b19      	ldr	r3, [pc, #100]	; (8005ffc <xTaskRemoveFromEventList+0xb0>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d903      	bls.n	8005fa6 <xTaskRemoveFromEventList+0x5a>
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa2:	4a16      	ldr	r2, [pc, #88]	; (8005ffc <xTaskRemoveFromEventList+0xb0>)
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005faa:	4613      	mov	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4a13      	ldr	r2, [pc, #76]	; (8006000 <xTaskRemoveFromEventList+0xb4>)
 8005fb4:	441a      	add	r2, r3
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	f7fe fe18 	bl	8004bf2 <vListInsertEnd>
 8005fc2:	e005      	b.n	8005fd0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	3318      	adds	r3, #24
 8005fc8:	4619      	mov	r1, r3
 8005fca:	480e      	ldr	r0, [pc, #56]	; (8006004 <xTaskRemoveFromEventList+0xb8>)
 8005fcc:	f7fe fe11 	bl	8004bf2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd4:	4b0c      	ldr	r3, [pc, #48]	; (8006008 <xTaskRemoveFromEventList+0xbc>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d905      	bls.n	8005fea <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005fe2:	4b0a      	ldr	r3, [pc, #40]	; (800600c <xTaskRemoveFromEventList+0xc0>)
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	e001      	b.n	8005fee <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005fee:	697b      	ldr	r3, [r7, #20]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	20000ddc 	.word	0x20000ddc
 8005ffc:	20000dbc 	.word	0x20000dbc
 8006000:	200008e4 	.word	0x200008e4
 8006004:	20000d74 	.word	0x20000d74
 8006008:	200008e0 	.word	0x200008e0
 800600c:	20000dc8 	.word	0x20000dc8

08006010 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006018:	4b06      	ldr	r3, [pc, #24]	; (8006034 <vTaskInternalSetTimeOutState+0x24>)
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006020:	4b05      	ldr	r3, [pc, #20]	; (8006038 <vTaskInternalSetTimeOutState+0x28>)
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	605a      	str	r2, [r3, #4]
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	20000dcc 	.word	0x20000dcc
 8006038:	20000db8 	.word	0x20000db8

0800603c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d109      	bne.n	8006060 <xTaskCheckForTimeOut+0x24>
 800604c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	613b      	str	r3, [r7, #16]
 800605e:	e7fe      	b.n	800605e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d109      	bne.n	800607a <xTaskCheckForTimeOut+0x3e>
 8006066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	60fb      	str	r3, [r7, #12]
 8006078:	e7fe      	b.n	8006078 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800607a:	f000 fe67 	bl	8006d4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800607e:	4b1d      	ldr	r3, [pc, #116]	; (80060f4 <xTaskCheckForTimeOut+0xb8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006096:	d102      	bne.n	800609e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006098:	2300      	movs	r3, #0
 800609a:	61fb      	str	r3, [r7, #28]
 800609c:	e023      	b.n	80060e6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	4b15      	ldr	r3, [pc, #84]	; (80060f8 <xTaskCheckForTimeOut+0xbc>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d007      	beq.n	80060ba <xTaskCheckForTimeOut+0x7e>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d302      	bcc.n	80060ba <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80060b4:	2301      	movs	r3, #1
 80060b6:	61fb      	str	r3, [r7, #28]
 80060b8:	e015      	b.n	80060e6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d20b      	bcs.n	80060dc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	1ad2      	subs	r2, r2, r3
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7ff ff9d 	bl	8006010 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060d6:	2300      	movs	r3, #0
 80060d8:	61fb      	str	r3, [r7, #28]
 80060da:	e004      	b.n	80060e6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2200      	movs	r2, #0
 80060e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060e2:	2301      	movs	r3, #1
 80060e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060e6:	f000 fe5f 	bl	8006da8 <vPortExitCritical>

	return xReturn;
 80060ea:	69fb      	ldr	r3, [r7, #28]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3720      	adds	r7, #32
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	20000db8 	.word	0x20000db8
 80060f8:	20000dcc 	.word	0x20000dcc

080060fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060fc:	b480      	push	{r7}
 80060fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006100:	4b03      	ldr	r3, [pc, #12]	; (8006110 <vTaskMissedYield+0x14>)
 8006102:	2201      	movs	r2, #1
 8006104:	601a      	str	r2, [r3, #0]
}
 8006106:	bf00      	nop
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	20000dc8 	.word	0x20000dc8

08006114 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800611c:	f000 f852 	bl	80061c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006120:	4b06      	ldr	r3, [pc, #24]	; (800613c <prvIdleTask+0x28>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d9f9      	bls.n	800611c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006128:	4b05      	ldr	r3, [pc, #20]	; (8006140 <prvIdleTask+0x2c>)
 800612a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006138:	e7f0      	b.n	800611c <prvIdleTask+0x8>
 800613a:	bf00      	nop
 800613c:	200008e4 	.word	0x200008e4
 8006140:	e000ed04 	.word	0xe000ed04

08006144 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800614a:	2300      	movs	r3, #0
 800614c:	607b      	str	r3, [r7, #4]
 800614e:	e00c      	b.n	800616a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	4613      	mov	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4a12      	ldr	r2, [pc, #72]	; (80061a4 <prvInitialiseTaskLists+0x60>)
 800615c:	4413      	add	r3, r2
 800615e:	4618      	mov	r0, r3
 8006160:	f7fe fd1a 	bl	8004b98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3301      	adds	r3, #1
 8006168:	607b      	str	r3, [r7, #4]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b37      	cmp	r3, #55	; 0x37
 800616e:	d9ef      	bls.n	8006150 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006170:	480d      	ldr	r0, [pc, #52]	; (80061a8 <prvInitialiseTaskLists+0x64>)
 8006172:	f7fe fd11 	bl	8004b98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006176:	480d      	ldr	r0, [pc, #52]	; (80061ac <prvInitialiseTaskLists+0x68>)
 8006178:	f7fe fd0e 	bl	8004b98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800617c:	480c      	ldr	r0, [pc, #48]	; (80061b0 <prvInitialiseTaskLists+0x6c>)
 800617e:	f7fe fd0b 	bl	8004b98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006182:	480c      	ldr	r0, [pc, #48]	; (80061b4 <prvInitialiseTaskLists+0x70>)
 8006184:	f7fe fd08 	bl	8004b98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006188:	480b      	ldr	r0, [pc, #44]	; (80061b8 <prvInitialiseTaskLists+0x74>)
 800618a:	f7fe fd05 	bl	8004b98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800618e:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <prvInitialiseTaskLists+0x78>)
 8006190:	4a05      	ldr	r2, [pc, #20]	; (80061a8 <prvInitialiseTaskLists+0x64>)
 8006192:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006194:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <prvInitialiseTaskLists+0x7c>)
 8006196:	4a05      	ldr	r2, [pc, #20]	; (80061ac <prvInitialiseTaskLists+0x68>)
 8006198:	601a      	str	r2, [r3, #0]
}
 800619a:	bf00      	nop
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	200008e4 	.word	0x200008e4
 80061a8:	20000d44 	.word	0x20000d44
 80061ac:	20000d58 	.word	0x20000d58
 80061b0:	20000d74 	.word	0x20000d74
 80061b4:	20000d88 	.word	0x20000d88
 80061b8:	20000da0 	.word	0x20000da0
 80061bc:	20000d6c 	.word	0x20000d6c
 80061c0:	20000d70 	.word	0x20000d70

080061c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061ca:	e019      	b.n	8006200 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061cc:	f000 fdbe 	bl	8006d4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d0:	4b0f      	ldr	r3, [pc, #60]	; (8006210 <prvCheckTasksWaitingTermination+0x4c>)
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3304      	adds	r3, #4
 80061dc:	4618      	mov	r0, r3
 80061de:	f7fe fd65 	bl	8004cac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061e2:	4b0c      	ldr	r3, [pc, #48]	; (8006214 <prvCheckTasksWaitingTermination+0x50>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	4a0a      	ldr	r2, [pc, #40]	; (8006214 <prvCheckTasksWaitingTermination+0x50>)
 80061ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061ec:	4b0a      	ldr	r3, [pc, #40]	; (8006218 <prvCheckTasksWaitingTermination+0x54>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	4a09      	ldr	r2, [pc, #36]	; (8006218 <prvCheckTasksWaitingTermination+0x54>)
 80061f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061f6:	f000 fdd7 	bl	8006da8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f80e 	bl	800621c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006200:	4b05      	ldr	r3, [pc, #20]	; (8006218 <prvCheckTasksWaitingTermination+0x54>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e1      	bne.n	80061cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006208:	bf00      	nop
 800620a:	3708      	adds	r7, #8
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	20000d88 	.word	0x20000d88
 8006214:	20000db4 	.word	0x20000db4
 8006218:	20000d9c 	.word	0x20000d9c

0800621c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800622a:	2b00      	cmp	r3, #0
 800622c:	d108      	bne.n	8006240 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006232:	4618      	mov	r0, r3
 8006234:	f000 ff66 	bl	8007104 <vPortFree>
				vPortFree( pxTCB );
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 ff63 	bl	8007104 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800623e:	e017      	b.n	8006270 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006246:	2b01      	cmp	r3, #1
 8006248:	d103      	bne.n	8006252 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 ff5a 	bl	8007104 <vPortFree>
	}
 8006250:	e00e      	b.n	8006270 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006258:	2b02      	cmp	r3, #2
 800625a:	d009      	beq.n	8006270 <prvDeleteTCB+0x54>
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	e7fe      	b.n	800626e <prvDeleteTCB+0x52>
	}
 8006270:	bf00      	nop
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800627e:	4b0c      	ldr	r3, [pc, #48]	; (80062b0 <prvResetNextTaskUnblockTime+0x38>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d104      	bne.n	8006292 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006288:	4b0a      	ldr	r3, [pc, #40]	; (80062b4 <prvResetNextTaskUnblockTime+0x3c>)
 800628a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800628e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006290:	e008      	b.n	80062a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006292:	4b07      	ldr	r3, [pc, #28]	; (80062b0 <prvResetNextTaskUnblockTime+0x38>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	4a04      	ldr	r2, [pc, #16]	; (80062b4 <prvResetNextTaskUnblockTime+0x3c>)
 80062a2:	6013      	str	r3, [r2, #0]
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	20000d6c 	.word	0x20000d6c
 80062b4:	20000dd4 	.word	0x20000dd4

080062b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062be:	4b0b      	ldr	r3, [pc, #44]	; (80062ec <xTaskGetSchedulerState+0x34>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d102      	bne.n	80062cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062c6:	2301      	movs	r3, #1
 80062c8:	607b      	str	r3, [r7, #4]
 80062ca:	e008      	b.n	80062de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062cc:	4b08      	ldr	r3, [pc, #32]	; (80062f0 <xTaskGetSchedulerState+0x38>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d102      	bne.n	80062da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062d4:	2302      	movs	r3, #2
 80062d6:	607b      	str	r3, [r7, #4]
 80062d8:	e001      	b.n	80062de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062da:	2300      	movs	r3, #0
 80062dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062de:	687b      	ldr	r3, [r7, #4]
	}
 80062e0:	4618      	mov	r0, r3
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	20000dc0 	.word	0x20000dc0
 80062f0:	20000ddc 	.word	0x20000ddc

080062f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006300:	2300      	movs	r3, #0
 8006302:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d054      	beq.n	80063b4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800630a:	4b2d      	ldr	r3, [pc, #180]	; (80063c0 <xTaskPriorityDisinherit+0xcc>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	429a      	cmp	r2, r3
 8006312:	d009      	beq.n	8006328 <xTaskPriorityDisinherit+0x34>
 8006314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	60fb      	str	r3, [r7, #12]
 8006326:	e7fe      	b.n	8006326 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632c:	2b00      	cmp	r3, #0
 800632e:	d109      	bne.n	8006344 <xTaskPriorityDisinherit+0x50>
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	60bb      	str	r3, [r7, #8]
 8006342:	e7fe      	b.n	8006342 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006348:	1e5a      	subs	r2, r3, #1
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006356:	429a      	cmp	r2, r3
 8006358:	d02c      	beq.n	80063b4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800635e:	2b00      	cmp	r3, #0
 8006360:	d128      	bne.n	80063b4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	3304      	adds	r3, #4
 8006366:	4618      	mov	r0, r3
 8006368:	f7fe fca0 	bl	8004cac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006378:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006384:	4b0f      	ldr	r3, [pc, #60]	; (80063c4 <xTaskPriorityDisinherit+0xd0>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	429a      	cmp	r2, r3
 800638a:	d903      	bls.n	8006394 <xTaskPriorityDisinherit+0xa0>
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	4a0c      	ldr	r2, [pc, #48]	; (80063c4 <xTaskPriorityDisinherit+0xd0>)
 8006392:	6013      	str	r3, [r2, #0]
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4a09      	ldr	r2, [pc, #36]	; (80063c8 <xTaskPriorityDisinherit+0xd4>)
 80063a2:	441a      	add	r2, r3
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	3304      	adds	r3, #4
 80063a8:	4619      	mov	r1, r3
 80063aa:	4610      	mov	r0, r2
 80063ac:	f7fe fc21 	bl	8004bf2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80063b0:	2301      	movs	r3, #1
 80063b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063b4:	697b      	ldr	r3, [r7, #20]
	}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	200008e0 	.word	0x200008e0
 80063c4:	20000dbc 	.word	0x20000dbc
 80063c8:	200008e4 	.word	0x200008e4

080063cc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063d6:	4b21      	ldr	r3, [pc, #132]	; (800645c <prvAddCurrentTaskToDelayedList+0x90>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063dc:	4b20      	ldr	r3, [pc, #128]	; (8006460 <prvAddCurrentTaskToDelayedList+0x94>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3304      	adds	r3, #4
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fe fc62 	bl	8004cac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063ee:	d10a      	bne.n	8006406 <prvAddCurrentTaskToDelayedList+0x3a>
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d007      	beq.n	8006406 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063f6:	4b1a      	ldr	r3, [pc, #104]	; (8006460 <prvAddCurrentTaskToDelayedList+0x94>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3304      	adds	r3, #4
 80063fc:	4619      	mov	r1, r3
 80063fe:	4819      	ldr	r0, [pc, #100]	; (8006464 <prvAddCurrentTaskToDelayedList+0x98>)
 8006400:	f7fe fbf7 	bl	8004bf2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006404:	e026      	b.n	8006454 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4413      	add	r3, r2
 800640c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800640e:	4b14      	ldr	r3, [pc, #80]	; (8006460 <prvAddCurrentTaskToDelayedList+0x94>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	429a      	cmp	r2, r3
 800641c:	d209      	bcs.n	8006432 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800641e:	4b12      	ldr	r3, [pc, #72]	; (8006468 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	4b0f      	ldr	r3, [pc, #60]	; (8006460 <prvAddCurrentTaskToDelayedList+0x94>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3304      	adds	r3, #4
 8006428:	4619      	mov	r1, r3
 800642a:	4610      	mov	r0, r2
 800642c:	f7fe fc05 	bl	8004c3a <vListInsert>
}
 8006430:	e010      	b.n	8006454 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006432:	4b0e      	ldr	r3, [pc, #56]	; (800646c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <prvAddCurrentTaskToDelayedList+0x94>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3304      	adds	r3, #4
 800643c:	4619      	mov	r1, r3
 800643e:	4610      	mov	r0, r2
 8006440:	f7fe fbfb 	bl	8004c3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006444:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	429a      	cmp	r2, r3
 800644c:	d202      	bcs.n	8006454 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800644e:	4a08      	ldr	r2, [pc, #32]	; (8006470 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	6013      	str	r3, [r2, #0]
}
 8006454:	bf00      	nop
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	20000db8 	.word	0x20000db8
 8006460:	200008e0 	.word	0x200008e0
 8006464:	20000da0 	.word	0x20000da0
 8006468:	20000d70 	.word	0x20000d70
 800646c:	20000d6c 	.word	0x20000d6c
 8006470:	20000dd4 	.word	0x20000dd4

08006474 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b08a      	sub	sp, #40	; 0x28
 8006478:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800647a:	2300      	movs	r3, #0
 800647c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800647e:	f000 faff 	bl	8006a80 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006482:	4b1c      	ldr	r3, [pc, #112]	; (80064f4 <xTimerCreateTimerTask+0x80>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d021      	beq.n	80064ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800648e:	2300      	movs	r3, #0
 8006490:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006492:	1d3a      	adds	r2, r7, #4
 8006494:	f107 0108 	add.w	r1, r7, #8
 8006498:	f107 030c 	add.w	r3, r7, #12
 800649c:	4618      	mov	r0, r3
 800649e:	f7fe fb61 	bl	8004b64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	9202      	str	r2, [sp, #8]
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	2302      	movs	r3, #2
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	2300      	movs	r3, #0
 80064b2:	460a      	mov	r2, r1
 80064b4:	4910      	ldr	r1, [pc, #64]	; (80064f8 <xTimerCreateTimerTask+0x84>)
 80064b6:	4811      	ldr	r0, [pc, #68]	; (80064fc <xTimerCreateTimerTask+0x88>)
 80064b8:	f7ff f8f6 	bl	80056a8 <xTaskCreateStatic>
 80064bc:	4602      	mov	r2, r0
 80064be:	4b10      	ldr	r3, [pc, #64]	; (8006500 <xTimerCreateTimerTask+0x8c>)
 80064c0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80064c2:	4b0f      	ldr	r3, [pc, #60]	; (8006500 <xTimerCreateTimerTask+0x8c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80064ca:	2301      	movs	r3, #1
 80064cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d109      	bne.n	80064e8 <xTimerCreateTimerTask+0x74>
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	613b      	str	r3, [r7, #16]
 80064e6:	e7fe      	b.n	80064e6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80064e8:	697b      	ldr	r3, [r7, #20]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	20000e10 	.word	0x20000e10
 80064f8:	0800ae84 	.word	0x0800ae84
 80064fc:	08006635 	.word	0x08006635
 8006500:	20000e14 	.word	0x20000e14

08006504 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08a      	sub	sp, #40	; 0x28
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006512:	2300      	movs	r3, #0
 8006514:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d109      	bne.n	8006530 <xTimerGenericCommand+0x2c>
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	623b      	str	r3, [r7, #32]
 800652e:	e7fe      	b.n	800652e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006530:	4b19      	ldr	r3, [pc, #100]	; (8006598 <xTimerGenericCommand+0x94>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d02a      	beq.n	800658e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	2b05      	cmp	r3, #5
 8006548:	dc18      	bgt.n	800657c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800654a:	f7ff feb5 	bl	80062b8 <xTaskGetSchedulerState>
 800654e:	4603      	mov	r3, r0
 8006550:	2b02      	cmp	r3, #2
 8006552:	d109      	bne.n	8006568 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006554:	4b10      	ldr	r3, [pc, #64]	; (8006598 <xTimerGenericCommand+0x94>)
 8006556:	6818      	ldr	r0, [r3, #0]
 8006558:	f107 0110 	add.w	r1, r7, #16
 800655c:	2300      	movs	r3, #0
 800655e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006560:	f7fe fccc 	bl	8004efc <xQueueGenericSend>
 8006564:	6278      	str	r0, [r7, #36]	; 0x24
 8006566:	e012      	b.n	800658e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006568:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <xTimerGenericCommand+0x94>)
 800656a:	6818      	ldr	r0, [r3, #0]
 800656c:	f107 0110 	add.w	r1, r7, #16
 8006570:	2300      	movs	r3, #0
 8006572:	2200      	movs	r2, #0
 8006574:	f7fe fcc2 	bl	8004efc <xQueueGenericSend>
 8006578:	6278      	str	r0, [r7, #36]	; 0x24
 800657a:	e008      	b.n	800658e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800657c:	4b06      	ldr	r3, [pc, #24]	; (8006598 <xTimerGenericCommand+0x94>)
 800657e:	6818      	ldr	r0, [r3, #0]
 8006580:	f107 0110 	add.w	r1, r7, #16
 8006584:	2300      	movs	r3, #0
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	f7fe fdb2 	bl	80050f0 <xQueueGenericSendFromISR>
 800658c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006590:	4618      	mov	r0, r3
 8006592:	3728      	adds	r7, #40	; 0x28
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	20000e10 	.word	0x20000e10

0800659c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b088      	sub	sp, #32
 80065a0:	af02      	add	r7, sp, #8
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065a6:	4b22      	ldr	r3, [pc, #136]	; (8006630 <prvProcessExpiredTimer+0x94>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	3304      	adds	r3, #4
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fe fb79 	bl	8004cac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d021      	beq.n	800660c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	699a      	ldr	r2, [r3, #24]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	18d1      	adds	r1, r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	6978      	ldr	r0, [r7, #20]
 80065d6:	f000 f8d1 	bl	800677c <prvInsertTimerInActiveList>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01e      	beq.n	800661e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065e0:	2300      	movs	r3, #0
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	2300      	movs	r3, #0
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	2100      	movs	r1, #0
 80065ea:	6978      	ldr	r0, [r7, #20]
 80065ec:	f7ff ff8a 	bl	8006504 <xTimerGenericCommand>
 80065f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d112      	bne.n	800661e <prvProcessExpiredTimer+0x82>
 80065f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	e7fe      	b.n	800660a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006612:	f023 0301 	bic.w	r3, r3, #1
 8006616:	b2da      	uxtb	r2, r3
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	6978      	ldr	r0, [r7, #20]
 8006624:	4798      	blx	r3
}
 8006626:	bf00      	nop
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20000e08 	.word	0x20000e08

08006634 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800663c:	f107 0308 	add.w	r3, r7, #8
 8006640:	4618      	mov	r0, r3
 8006642:	f000 f857 	bl	80066f4 <prvGetNextExpireTime>
 8006646:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	4619      	mov	r1, r3
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f803 	bl	8006658 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006652:	f000 f8d5 	bl	8006800 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006656:	e7f1      	b.n	800663c <prvTimerTask+0x8>

08006658 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006662:	f7ff fa57 	bl	8005b14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006666:	f107 0308 	add.w	r3, r7, #8
 800666a:	4618      	mov	r0, r3
 800666c:	f000 f866 	bl	800673c <prvSampleTimeNow>
 8006670:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d130      	bne.n	80066da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10a      	bne.n	8006694 <prvProcessTimerOrBlockTask+0x3c>
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	429a      	cmp	r2, r3
 8006684:	d806      	bhi.n	8006694 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006686:	f7ff fa53 	bl	8005b30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800668a:	68f9      	ldr	r1, [r7, #12]
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff ff85 	bl	800659c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006692:	e024      	b.n	80066de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d008      	beq.n	80066ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800669a:	4b13      	ldr	r3, [pc, #76]	; (80066e8 <prvProcessTimerOrBlockTask+0x90>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <prvProcessTimerOrBlockTask+0x50>
 80066a4:	2301      	movs	r3, #1
 80066a6:	e000      	b.n	80066aa <prvProcessTimerOrBlockTask+0x52>
 80066a8:	2300      	movs	r3, #0
 80066aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80066ac:	4b0f      	ldr	r3, [pc, #60]	; (80066ec <prvProcessTimerOrBlockTask+0x94>)
 80066ae:	6818      	ldr	r0, [r3, #0]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	4619      	mov	r1, r3
 80066ba:	f7fe ffc1 	bl	8005640 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80066be:	f7ff fa37 	bl	8005b30 <xTaskResumeAll>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80066c8:	4b09      	ldr	r3, [pc, #36]	; (80066f0 <prvProcessTimerOrBlockTask+0x98>)
 80066ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	f3bf 8f6f 	isb	sy
}
 80066d8:	e001      	b.n	80066de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80066da:	f7ff fa29 	bl	8005b30 <xTaskResumeAll>
}
 80066de:	bf00      	nop
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	20000e0c 	.word	0x20000e0c
 80066ec:	20000e10 	.word	0x20000e10
 80066f0:	e000ed04 	.word	0xe000ed04

080066f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80066fc:	4b0e      	ldr	r3, [pc, #56]	; (8006738 <prvGetNextExpireTime+0x44>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <prvGetNextExpireTime+0x16>
 8006706:	2201      	movs	r2, #1
 8006708:	e000      	b.n	800670c <prvGetNextExpireTime+0x18>
 800670a:	2200      	movs	r2, #0
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d105      	bne.n	8006724 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006718:	4b07      	ldr	r3, [pc, #28]	; (8006738 <prvGetNextExpireTime+0x44>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	e001      	b.n	8006728 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006728:	68fb      	ldr	r3, [r7, #12]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	20000e08 	.word	0x20000e08

0800673c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006744:	f7ff fa90 	bl	8005c68 <xTaskGetTickCount>
 8006748:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800674a:	4b0b      	ldr	r3, [pc, #44]	; (8006778 <prvSampleTimeNow+0x3c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	429a      	cmp	r2, r3
 8006752:	d205      	bcs.n	8006760 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006754:	f000 f930 	bl	80069b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	e002      	b.n	8006766 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006766:	4a04      	ldr	r2, [pc, #16]	; (8006778 <prvSampleTimeNow+0x3c>)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800676c:	68fb      	ldr	r3, [r7, #12]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	20000e18 	.word	0x20000e18

0800677c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800678a:	2300      	movs	r3, #0
 800678c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d812      	bhi.n	80067c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	1ad2      	subs	r2, r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d302      	bcc.n	80067b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80067b0:	2301      	movs	r3, #1
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	e01b      	b.n	80067ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80067b6:	4b10      	ldr	r3, [pc, #64]	; (80067f8 <prvInsertTimerInActiveList+0x7c>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	3304      	adds	r3, #4
 80067be:	4619      	mov	r1, r3
 80067c0:	4610      	mov	r0, r2
 80067c2:	f7fe fa3a 	bl	8004c3a <vListInsert>
 80067c6:	e012      	b.n	80067ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d206      	bcs.n	80067de <prvInsertTimerInActiveList+0x62>
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d302      	bcc.n	80067de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80067d8:	2301      	movs	r3, #1
 80067da:	617b      	str	r3, [r7, #20]
 80067dc:	e007      	b.n	80067ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067de:	4b07      	ldr	r3, [pc, #28]	; (80067fc <prvInsertTimerInActiveList+0x80>)
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3304      	adds	r3, #4
 80067e6:	4619      	mov	r1, r3
 80067e8:	4610      	mov	r0, r2
 80067ea:	f7fe fa26 	bl	8004c3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80067ee:	697b      	ldr	r3, [r7, #20]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	20000e0c 	.word	0x20000e0c
 80067fc:	20000e08 	.word	0x20000e08

08006800 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b08e      	sub	sp, #56	; 0x38
 8006804:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006806:	e0c6      	b.n	8006996 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	da17      	bge.n	800683e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800680e:	1d3b      	adds	r3, r7, #4
 8006810:	3304      	adds	r3, #4
 8006812:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006816:	2b00      	cmp	r3, #0
 8006818:	d109      	bne.n	800682e <prvProcessReceivedCommands+0x2e>
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	61fb      	str	r3, [r7, #28]
 800682c:	e7fe      	b.n	800682c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800682e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006834:	6850      	ldr	r0, [r2, #4]
 8006836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006838:	6892      	ldr	r2, [r2, #8]
 800683a:	4611      	mov	r1, r2
 800683c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	f2c0 80a7 	blt.w	8006994 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d004      	beq.n	800685c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006854:	3304      	adds	r3, #4
 8006856:	4618      	mov	r0, r3
 8006858:	f7fe fa28 	bl	8004cac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800685c:	463b      	mov	r3, r7
 800685e:	4618      	mov	r0, r3
 8006860:	f7ff ff6c 	bl	800673c <prvSampleTimeNow>
 8006864:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b09      	cmp	r3, #9
 800686a:	f200 8094 	bhi.w	8006996 <prvProcessReceivedCommands+0x196>
 800686e:	a201      	add	r2, pc, #4	; (adr r2, 8006874 <prvProcessReceivedCommands+0x74>)
 8006870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006874:	0800689d 	.word	0x0800689d
 8006878:	0800689d 	.word	0x0800689d
 800687c:	0800689d 	.word	0x0800689d
 8006880:	0800690f 	.word	0x0800690f
 8006884:	08006923 	.word	0x08006923
 8006888:	0800696b 	.word	0x0800696b
 800688c:	0800689d 	.word	0x0800689d
 8006890:	0800689d 	.word	0x0800689d
 8006894:	0800690f 	.word	0x0800690f
 8006898:	08006923 	.word	0x08006923
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800689c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068a2:	f043 0301 	orr.w	r3, r3, #1
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	18d1      	adds	r1, r2, r3
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068bc:	f7ff ff5e 	bl	800677c <prvInsertTimerInActiveList>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d067      	beq.n	8006996 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d05c      	beq.n	8006996 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	441a      	add	r2, r3
 80068e4:	2300      	movs	r3, #0
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	2300      	movs	r3, #0
 80068ea:	2100      	movs	r1, #0
 80068ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ee:	f7ff fe09 	bl	8006504 <xTimerGenericCommand>
 80068f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d14d      	bne.n	8006996 <prvProcessReceivedCommands+0x196>
 80068fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	61bb      	str	r3, [r7, #24]
 800690c:	e7fe      	b.n	800690c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800690e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006914:	f023 0301 	bic.w	r3, r3, #1
 8006918:	b2da      	uxtb	r2, r3
 800691a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006920:	e039      	b.n	8006996 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006928:	f043 0301 	orr.w	r3, r3, #1
 800692c:	b2da      	uxtb	r2, r3
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800693a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d109      	bne.n	8006956 <prvProcessReceivedCommands+0x156>
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	e7fe      	b.n	8006954 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006958:	699a      	ldr	r2, [r3, #24]
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	18d1      	adds	r1, r2, r3
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006964:	f7ff ff0a 	bl	800677c <prvInsertTimerInActiveList>
					break;
 8006968:	e015      	b.n	8006996 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800696a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	2b00      	cmp	r3, #0
 8006976:	d103      	bne.n	8006980 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800697a:	f000 fbc3 	bl	8007104 <vPortFree>
 800697e:	e00a      	b.n	8006996 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006986:	f023 0301 	bic.w	r3, r3, #1
 800698a:	b2da      	uxtb	r2, r3
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006992:	e000      	b.n	8006996 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006994:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006996:	4b07      	ldr	r3, [pc, #28]	; (80069b4 <prvProcessReceivedCommands+0x1b4>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	1d39      	adds	r1, r7, #4
 800699c:	2200      	movs	r2, #0
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fe fc3a 	bl	8005218 <xQueueReceive>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f47f af2e 	bne.w	8006808 <prvProcessReceivedCommands+0x8>
	}
}
 80069ac:	bf00      	nop
 80069ae:	3730      	adds	r7, #48	; 0x30
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	20000e10 	.word	0x20000e10

080069b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b088      	sub	sp, #32
 80069bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069be:	e047      	b.n	8006a50 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069c0:	4b2d      	ldr	r3, [pc, #180]	; (8006a78 <prvSwitchTimerLists+0xc0>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ca:	4b2b      	ldr	r3, [pc, #172]	; (8006a78 <prvSwitchTimerLists+0xc0>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3304      	adds	r3, #4
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fe f967 	bl	8004cac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069ec:	f003 0304 	and.w	r3, r3, #4
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d02d      	beq.n	8006a50 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	4413      	add	r3, r2
 80069fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d90e      	bls.n	8006a24 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a12:	4b19      	ldr	r3, [pc, #100]	; (8006a78 <prvSwitchTimerLists+0xc0>)
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	f7fe f90c 	bl	8004c3a <vListInsert>
 8006a22:	e015      	b.n	8006a50 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a24:	2300      	movs	r3, #0
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	2300      	movs	r3, #0
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f7ff fd68 	bl	8006504 <xTimerGenericCommand>
 8006a34:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d109      	bne.n	8006a50 <prvSwitchTimerLists+0x98>
 8006a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	603b      	str	r3, [r7, #0]
 8006a4e:	e7fe      	b.n	8006a4e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a50:	4b09      	ldr	r3, [pc, #36]	; (8006a78 <prvSwitchTimerLists+0xc0>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1b2      	bne.n	80069c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a5a:	4b07      	ldr	r3, [pc, #28]	; (8006a78 <prvSwitchTimerLists+0xc0>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a60:	4b06      	ldr	r3, [pc, #24]	; (8006a7c <prvSwitchTimerLists+0xc4>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a04      	ldr	r2, [pc, #16]	; (8006a78 <prvSwitchTimerLists+0xc0>)
 8006a66:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a68:	4a04      	ldr	r2, [pc, #16]	; (8006a7c <prvSwitchTimerLists+0xc4>)
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	6013      	str	r3, [r2, #0]
}
 8006a6e:	bf00      	nop
 8006a70:	3718      	adds	r7, #24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20000e08 	.word	0x20000e08
 8006a7c:	20000e0c 	.word	0x20000e0c

08006a80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a86:	f000 f961 	bl	8006d4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a8a:	4b15      	ldr	r3, [pc, #84]	; (8006ae0 <prvCheckForValidListAndQueue+0x60>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d120      	bne.n	8006ad4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006a92:	4814      	ldr	r0, [pc, #80]	; (8006ae4 <prvCheckForValidListAndQueue+0x64>)
 8006a94:	f7fe f880 	bl	8004b98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006a98:	4813      	ldr	r0, [pc, #76]	; (8006ae8 <prvCheckForValidListAndQueue+0x68>)
 8006a9a:	f7fe f87d 	bl	8004b98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006a9e:	4b13      	ldr	r3, [pc, #76]	; (8006aec <prvCheckForValidListAndQueue+0x6c>)
 8006aa0:	4a10      	ldr	r2, [pc, #64]	; (8006ae4 <prvCheckForValidListAndQueue+0x64>)
 8006aa2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006aa4:	4b12      	ldr	r3, [pc, #72]	; (8006af0 <prvCheckForValidListAndQueue+0x70>)
 8006aa6:	4a10      	ldr	r2, [pc, #64]	; (8006ae8 <prvCheckForValidListAndQueue+0x68>)
 8006aa8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006aaa:	2300      	movs	r3, #0
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	4b11      	ldr	r3, [pc, #68]	; (8006af4 <prvCheckForValidListAndQueue+0x74>)
 8006ab0:	4a11      	ldr	r2, [pc, #68]	; (8006af8 <prvCheckForValidListAndQueue+0x78>)
 8006ab2:	2110      	movs	r1, #16
 8006ab4:	200a      	movs	r0, #10
 8006ab6:	f7fe f98b 	bl	8004dd0 <xQueueGenericCreateStatic>
 8006aba:	4602      	mov	r2, r0
 8006abc:	4b08      	ldr	r3, [pc, #32]	; (8006ae0 <prvCheckForValidListAndQueue+0x60>)
 8006abe:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ac0:	4b07      	ldr	r3, [pc, #28]	; (8006ae0 <prvCheckForValidListAndQueue+0x60>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d005      	beq.n	8006ad4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ac8:	4b05      	ldr	r3, [pc, #20]	; (8006ae0 <prvCheckForValidListAndQueue+0x60>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	490b      	ldr	r1, [pc, #44]	; (8006afc <prvCheckForValidListAndQueue+0x7c>)
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fe fd8e 	bl	80055f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ad4:	f000 f968 	bl	8006da8 <vPortExitCritical>
}
 8006ad8:	bf00      	nop
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	20000e10 	.word	0x20000e10
 8006ae4:	20000de0 	.word	0x20000de0
 8006ae8:	20000df4 	.word	0x20000df4
 8006aec:	20000e08 	.word	0x20000e08
 8006af0:	20000e0c 	.word	0x20000e0c
 8006af4:	20000ebc 	.word	0x20000ebc
 8006af8:	20000e1c 	.word	0x20000e1c
 8006afc:	0800ae8c 	.word	0x0800ae8c

08006b00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	3b04      	subs	r3, #4
 8006b10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3b04      	subs	r3, #4
 8006b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	f023 0201 	bic.w	r2, r3, #1
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	3b04      	subs	r3, #4
 8006b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b30:	4a0c      	ldr	r2, [pc, #48]	; (8006b64 <pxPortInitialiseStack+0x64>)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3b14      	subs	r3, #20
 8006b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3b04      	subs	r3, #4
 8006b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f06f 0202 	mvn.w	r2, #2
 8006b4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	3b20      	subs	r3, #32
 8006b54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b56:	68fb      	ldr	r3, [r7, #12]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	08006b69 	.word	0x08006b69

08006b68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b72:	4b11      	ldr	r3, [pc, #68]	; (8006bb8 <prvTaskExitError+0x50>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b7a:	d009      	beq.n	8006b90 <prvTaskExitError+0x28>
 8006b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	60fb      	str	r3, [r7, #12]
 8006b8e:	e7fe      	b.n	8006b8e <prvTaskExitError+0x26>
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ba2:	bf00      	nop
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d0fc      	beq.n	8006ba4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006baa:	bf00      	nop
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	20000010 	.word	0x20000010
 8006bbc:	00000000 	.word	0x00000000

08006bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006bc0:	4b07      	ldr	r3, [pc, #28]	; (8006be0 <pxCurrentTCBConst2>)
 8006bc2:	6819      	ldr	r1, [r3, #0]
 8006bc4:	6808      	ldr	r0, [r1, #0]
 8006bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bca:	f380 8809 	msr	PSP, r0
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f04f 0000 	mov.w	r0, #0
 8006bd6:	f380 8811 	msr	BASEPRI, r0
 8006bda:	4770      	bx	lr
 8006bdc:	f3af 8000 	nop.w

08006be0 <pxCurrentTCBConst2>:
 8006be0:	200008e0 	.word	0x200008e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006be4:	bf00      	nop
 8006be6:	bf00      	nop

08006be8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006be8:	4808      	ldr	r0, [pc, #32]	; (8006c0c <prvPortStartFirstTask+0x24>)
 8006bea:	6800      	ldr	r0, [r0, #0]
 8006bec:	6800      	ldr	r0, [r0, #0]
 8006bee:	f380 8808 	msr	MSP, r0
 8006bf2:	f04f 0000 	mov.w	r0, #0
 8006bf6:	f380 8814 	msr	CONTROL, r0
 8006bfa:	b662      	cpsie	i
 8006bfc:	b661      	cpsie	f
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	df00      	svc	0
 8006c08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c0a:	bf00      	nop
 8006c0c:	e000ed08 	.word	0xe000ed08

08006c10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c16:	4b44      	ldr	r3, [pc, #272]	; (8006d28 <xPortStartScheduler+0x118>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a44      	ldr	r2, [pc, #272]	; (8006d2c <xPortStartScheduler+0x11c>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d109      	bne.n	8006c34 <xPortStartScheduler+0x24>
 8006c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	613b      	str	r3, [r7, #16]
 8006c32:	e7fe      	b.n	8006c32 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c34:	4b3c      	ldr	r3, [pc, #240]	; (8006d28 <xPortStartScheduler+0x118>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a3d      	ldr	r2, [pc, #244]	; (8006d30 <xPortStartScheduler+0x120>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d109      	bne.n	8006c52 <xPortStartScheduler+0x42>
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	e7fe      	b.n	8006c50 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c52:	4b38      	ldr	r3, [pc, #224]	; (8006d34 <xPortStartScheduler+0x124>)
 8006c54:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	22ff      	movs	r2, #255	; 0xff
 8006c62:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	4b30      	ldr	r3, [pc, #192]	; (8006d38 <xPortStartScheduler+0x128>)
 8006c78:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c7a:	4b30      	ldr	r3, [pc, #192]	; (8006d3c <xPortStartScheduler+0x12c>)
 8006c7c:	2207      	movs	r2, #7
 8006c7e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c80:	e009      	b.n	8006c96 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006c82:	4b2e      	ldr	r3, [pc, #184]	; (8006d3c <xPortStartScheduler+0x12c>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	4a2c      	ldr	r2, [pc, #176]	; (8006d3c <xPortStartScheduler+0x12c>)
 8006c8a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c8c:	78fb      	ldrb	r3, [r7, #3]
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c96:	78fb      	ldrb	r3, [r7, #3]
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c9e:	2b80      	cmp	r3, #128	; 0x80
 8006ca0:	d0ef      	beq.n	8006c82 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ca2:	4b26      	ldr	r3, [pc, #152]	; (8006d3c <xPortStartScheduler+0x12c>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f1c3 0307 	rsb	r3, r3, #7
 8006caa:	2b04      	cmp	r3, #4
 8006cac:	d009      	beq.n	8006cc2 <xPortStartScheduler+0xb2>
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	60bb      	str	r3, [r7, #8]
 8006cc0:	e7fe      	b.n	8006cc0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006cc2:	4b1e      	ldr	r3, [pc, #120]	; (8006d3c <xPortStartScheduler+0x12c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	021b      	lsls	r3, r3, #8
 8006cc8:	4a1c      	ldr	r2, [pc, #112]	; (8006d3c <xPortStartScheduler+0x12c>)
 8006cca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ccc:	4b1b      	ldr	r3, [pc, #108]	; (8006d3c <xPortStartScheduler+0x12c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cd4:	4a19      	ldr	r2, [pc, #100]	; (8006d3c <xPortStartScheduler+0x12c>)
 8006cd6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ce0:	4b17      	ldr	r3, [pc, #92]	; (8006d40 <xPortStartScheduler+0x130>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a16      	ldr	r2, [pc, #88]	; (8006d40 <xPortStartScheduler+0x130>)
 8006ce6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006cea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006cec:	4b14      	ldr	r3, [pc, #80]	; (8006d40 <xPortStartScheduler+0x130>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a13      	ldr	r2, [pc, #76]	; (8006d40 <xPortStartScheduler+0x130>)
 8006cf2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006cf6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006cf8:	f000 f8d6 	bl	8006ea8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006cfc:	4b11      	ldr	r3, [pc, #68]	; (8006d44 <xPortStartScheduler+0x134>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d02:	f000 f8f5 	bl	8006ef0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d06:	4b10      	ldr	r3, [pc, #64]	; (8006d48 <xPortStartScheduler+0x138>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a0f      	ldr	r2, [pc, #60]	; (8006d48 <xPortStartScheduler+0x138>)
 8006d0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d12:	f7ff ff69 	bl	8006be8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d16:	f7ff f86f 	bl	8005df8 <vTaskSwitchContext>
	prvTaskExitError();
 8006d1a:	f7ff ff25 	bl	8006b68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3718      	adds	r7, #24
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	e000ed00 	.word	0xe000ed00
 8006d2c:	410fc271 	.word	0x410fc271
 8006d30:	410fc270 	.word	0x410fc270
 8006d34:	e000e400 	.word	0xe000e400
 8006d38:	20000f0c 	.word	0x20000f0c
 8006d3c:	20000f10 	.word	0x20000f10
 8006d40:	e000ed20 	.word	0xe000ed20
 8006d44:	20000010 	.word	0x20000010
 8006d48:	e000ef34 	.word	0xe000ef34

08006d4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d64:	4b0e      	ldr	r3, [pc, #56]	; (8006da0 <vPortEnterCritical+0x54>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	4a0d      	ldr	r2, [pc, #52]	; (8006da0 <vPortEnterCritical+0x54>)
 8006d6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d6e:	4b0c      	ldr	r3, [pc, #48]	; (8006da0 <vPortEnterCritical+0x54>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d10e      	bne.n	8006d94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d76:	4b0b      	ldr	r3, [pc, #44]	; (8006da4 <vPortEnterCritical+0x58>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d009      	beq.n	8006d94 <vPortEnterCritical+0x48>
 8006d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	603b      	str	r3, [r7, #0]
 8006d92:	e7fe      	b.n	8006d92 <vPortEnterCritical+0x46>
	}
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	20000010 	.word	0x20000010
 8006da4:	e000ed04 	.word	0xe000ed04

08006da8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006dae:	4b11      	ldr	r3, [pc, #68]	; (8006df4 <vPortExitCritical+0x4c>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d109      	bne.n	8006dca <vPortExitCritical+0x22>
 8006db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dba:	f383 8811 	msr	BASEPRI, r3
 8006dbe:	f3bf 8f6f 	isb	sy
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	607b      	str	r3, [r7, #4]
 8006dc8:	e7fe      	b.n	8006dc8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006dca:	4b0a      	ldr	r3, [pc, #40]	; (8006df4 <vPortExitCritical+0x4c>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	4a08      	ldr	r2, [pc, #32]	; (8006df4 <vPortExitCritical+0x4c>)
 8006dd2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006dd4:	4b07      	ldr	r3, [pc, #28]	; (8006df4 <vPortExitCritical+0x4c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d104      	bne.n	8006de6 <vPortExitCritical+0x3e>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	20000010 	.word	0x20000010
	...

08006e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e00:	f3ef 8009 	mrs	r0, PSP
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	4b15      	ldr	r3, [pc, #84]	; (8006e60 <pxCurrentTCBConst>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	f01e 0f10 	tst.w	lr, #16
 8006e10:	bf08      	it	eq
 8006e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1a:	6010      	str	r0, [r2, #0]
 8006e1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e24:	f380 8811 	msr	BASEPRI, r0
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f7fe ffe2 	bl	8005df8 <vTaskSwitchContext>
 8006e34:	f04f 0000 	mov.w	r0, #0
 8006e38:	f380 8811 	msr	BASEPRI, r0
 8006e3c:	bc09      	pop	{r0, r3}
 8006e3e:	6819      	ldr	r1, [r3, #0]
 8006e40:	6808      	ldr	r0, [r1, #0]
 8006e42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e46:	f01e 0f10 	tst.w	lr, #16
 8006e4a:	bf08      	it	eq
 8006e4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e50:	f380 8809 	msr	PSP, r0
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	f3af 8000 	nop.w

08006e60 <pxCurrentTCBConst>:
 8006e60:	200008e0 	.word	0x200008e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e64:	bf00      	nop
 8006e66:	bf00      	nop

08006e68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e80:	f7fe ff02 	bl	8005c88 <xTaskIncrementTick>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e8a:	4b06      	ldr	r3, [pc, #24]	; (8006ea4 <SysTick_Handler+0x3c>)
 8006e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	2300      	movs	r3, #0
 8006e94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e9c:	bf00      	nop
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	e000ed04 	.word	0xe000ed04

08006ea8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006eac:	4b0b      	ldr	r3, [pc, #44]	; (8006edc <vPortSetupTimerInterrupt+0x34>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006eb2:	4b0b      	ldr	r3, [pc, #44]	; (8006ee0 <vPortSetupTimerInterrupt+0x38>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006eb8:	4b0a      	ldr	r3, [pc, #40]	; (8006ee4 <vPortSetupTimerInterrupt+0x3c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a0a      	ldr	r2, [pc, #40]	; (8006ee8 <vPortSetupTimerInterrupt+0x40>)
 8006ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec2:	099b      	lsrs	r3, r3, #6
 8006ec4:	4a09      	ldr	r2, [pc, #36]	; (8006eec <vPortSetupTimerInterrupt+0x44>)
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006eca:	4b04      	ldr	r3, [pc, #16]	; (8006edc <vPortSetupTimerInterrupt+0x34>)
 8006ecc:	2207      	movs	r2, #7
 8006ece:	601a      	str	r2, [r3, #0]
}
 8006ed0:	bf00      	nop
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	e000e010 	.word	0xe000e010
 8006ee0:	e000e018 	.word	0xe000e018
 8006ee4:	20000004 	.word	0x20000004
 8006ee8:	10624dd3 	.word	0x10624dd3
 8006eec:	e000e014 	.word	0xe000e014

08006ef0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ef0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f00 <vPortEnableVFP+0x10>
 8006ef4:	6801      	ldr	r1, [r0, #0]
 8006ef6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006efa:	6001      	str	r1, [r0, #0]
 8006efc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006efe:	bf00      	nop
 8006f00:	e000ed88 	.word	0xe000ed88

08006f04 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f0a:	f3ef 8305 	mrs	r3, IPSR
 8006f0e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2b0f      	cmp	r3, #15
 8006f14:	d913      	bls.n	8006f3e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f16:	4a16      	ldr	r2, [pc, #88]	; (8006f70 <vPortValidateInterruptPriority+0x6c>)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f20:	4b14      	ldr	r3, [pc, #80]	; (8006f74 <vPortValidateInterruptPriority+0x70>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	7afa      	ldrb	r2, [r7, #11]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d209      	bcs.n	8006f3e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2e:	f383 8811 	msr	BASEPRI, r3
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	607b      	str	r3, [r7, #4]
 8006f3c:	e7fe      	b.n	8006f3c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f3e:	4b0e      	ldr	r3, [pc, #56]	; (8006f78 <vPortValidateInterruptPriority+0x74>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f46:	4b0d      	ldr	r3, [pc, #52]	; (8006f7c <vPortValidateInterruptPriority+0x78>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d909      	bls.n	8006f62 <vPortValidateInterruptPriority+0x5e>
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	603b      	str	r3, [r7, #0]
 8006f60:	e7fe      	b.n	8006f60 <vPortValidateInterruptPriority+0x5c>
	}
 8006f62:	bf00      	nop
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	e000e3f0 	.word	0xe000e3f0
 8006f74:	20000f0c 	.word	0x20000f0c
 8006f78:	e000ed0c 	.word	0xe000ed0c
 8006f7c:	20000f10 	.word	0x20000f10

08006f80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08a      	sub	sp, #40	; 0x28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f8c:	f7fe fdc2 	bl	8005b14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f90:	4b57      	ldr	r3, [pc, #348]	; (80070f0 <pvPortMalloc+0x170>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f98:	f000 f90c 	bl	80071b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f9c:	4b55      	ldr	r3, [pc, #340]	; (80070f4 <pvPortMalloc+0x174>)
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f040 808c 	bne.w	80070c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d01c      	beq.n	8006fea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006fb0:	2208      	movs	r2, #8
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f003 0307 	and.w	r3, r3, #7
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d013      	beq.n	8006fea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f023 0307 	bic.w	r3, r3, #7
 8006fc8:	3308      	adds	r3, #8
 8006fca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f003 0307 	and.w	r3, r3, #7
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d009      	beq.n	8006fea <pvPortMalloc+0x6a>
 8006fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	e7fe      	b.n	8006fe8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d068      	beq.n	80070c2 <pvPortMalloc+0x142>
 8006ff0:	4b41      	ldr	r3, [pc, #260]	; (80070f8 <pvPortMalloc+0x178>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d863      	bhi.n	80070c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ffa:	4b40      	ldr	r3, [pc, #256]	; (80070fc <pvPortMalloc+0x17c>)
 8006ffc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ffe:	4b3f      	ldr	r3, [pc, #252]	; (80070fc <pvPortMalloc+0x17c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007004:	e004      	b.n	8007010 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	429a      	cmp	r2, r3
 8007018:	d903      	bls.n	8007022 <pvPortMalloc+0xa2>
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1f1      	bne.n	8007006 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007022:	4b33      	ldr	r3, [pc, #204]	; (80070f0 <pvPortMalloc+0x170>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007028:	429a      	cmp	r2, r3
 800702a:	d04a      	beq.n	80070c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2208      	movs	r2, #8
 8007032:	4413      	add	r3, r2
 8007034:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	1ad2      	subs	r2, r2, r3
 8007046:	2308      	movs	r3, #8
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	429a      	cmp	r2, r3
 800704c:	d91e      	bls.n	800708c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800704e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4413      	add	r3, r2
 8007054:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	f003 0307 	and.w	r3, r3, #7
 800705c:	2b00      	cmp	r3, #0
 800705e:	d009      	beq.n	8007074 <pvPortMalloc+0xf4>
 8007060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	613b      	str	r3, [r7, #16]
 8007072:	e7fe      	b.n	8007072 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	1ad2      	subs	r2, r2, r3
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007086:	69b8      	ldr	r0, [r7, #24]
 8007088:	f000 f8f6 	bl	8007278 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800708c:	4b1a      	ldr	r3, [pc, #104]	; (80070f8 <pvPortMalloc+0x178>)
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	4a18      	ldr	r2, [pc, #96]	; (80070f8 <pvPortMalloc+0x178>)
 8007098:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800709a:	4b17      	ldr	r3, [pc, #92]	; (80070f8 <pvPortMalloc+0x178>)
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	4b18      	ldr	r3, [pc, #96]	; (8007100 <pvPortMalloc+0x180>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d203      	bcs.n	80070ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070a6:	4b14      	ldr	r3, [pc, #80]	; (80070f8 <pvPortMalloc+0x178>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a15      	ldr	r2, [pc, #84]	; (8007100 <pvPortMalloc+0x180>)
 80070ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	4b10      	ldr	r3, [pc, #64]	; (80070f4 <pvPortMalloc+0x174>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	431a      	orrs	r2, r3
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070be:	2200      	movs	r2, #0
 80070c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80070c2:	f7fe fd35 	bl	8005b30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	f003 0307 	and.w	r3, r3, #7
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d009      	beq.n	80070e4 <pvPortMalloc+0x164>
 80070d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	e7fe      	b.n	80070e2 <pvPortMalloc+0x162>
	return pvReturn;
 80070e4:	69fb      	ldr	r3, [r7, #28]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3728      	adds	r7, #40	; 0x28
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20004b1c 	.word	0x20004b1c
 80070f4:	20004b28 	.word	0x20004b28
 80070f8:	20004b20 	.word	0x20004b20
 80070fc:	20004b14 	.word	0x20004b14
 8007100:	20004b24 	.word	0x20004b24

08007104 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d046      	beq.n	80071a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007116:	2308      	movs	r3, #8
 8007118:	425b      	negs	r3, r3
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	4413      	add	r3, r2
 800711e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	4b20      	ldr	r3, [pc, #128]	; (80071ac <vPortFree+0xa8>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4013      	ands	r3, r2
 800712e:	2b00      	cmp	r3, #0
 8007130:	d109      	bne.n	8007146 <vPortFree+0x42>
 8007132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	e7fe      	b.n	8007144 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d009      	beq.n	8007162 <vPortFree+0x5e>
 800714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	60bb      	str	r3, [r7, #8]
 8007160:	e7fe      	b.n	8007160 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	4b11      	ldr	r3, [pc, #68]	; (80071ac <vPortFree+0xa8>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4013      	ands	r3, r2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d019      	beq.n	80071a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d115      	bne.n	80071a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	4b0b      	ldr	r3, [pc, #44]	; (80071ac <vPortFree+0xa8>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	43db      	mvns	r3, r3
 8007182:	401a      	ands	r2, r3
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007188:	f7fe fcc4 	bl	8005b14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	4b07      	ldr	r3, [pc, #28]	; (80071b0 <vPortFree+0xac>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4413      	add	r3, r2
 8007196:	4a06      	ldr	r2, [pc, #24]	; (80071b0 <vPortFree+0xac>)
 8007198:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800719a:	6938      	ldr	r0, [r7, #16]
 800719c:	f000 f86c 	bl	8007278 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80071a0:	f7fe fcc6 	bl	8005b30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071a4:	bf00      	nop
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	20004b28 	.word	0x20004b28
 80071b0:	20004b20 	.word	0x20004b20

080071b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80071be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071c0:	4b27      	ldr	r3, [pc, #156]	; (8007260 <prvHeapInit+0xac>)
 80071c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f003 0307 	and.w	r3, r3, #7
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00c      	beq.n	80071e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3307      	adds	r3, #7
 80071d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 0307 	bic.w	r3, r3, #7
 80071da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	4a1f      	ldr	r2, [pc, #124]	; (8007260 <prvHeapInit+0xac>)
 80071e4:	4413      	add	r3, r2
 80071e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80071ec:	4a1d      	ldr	r2, [pc, #116]	; (8007264 <prvHeapInit+0xb0>)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80071f2:	4b1c      	ldr	r3, [pc, #112]	; (8007264 <prvHeapInit+0xb0>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	4413      	add	r3, r2
 80071fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007200:	2208      	movs	r2, #8
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	1a9b      	subs	r3, r3, r2
 8007206:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f023 0307 	bic.w	r3, r3, #7
 800720e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	4a15      	ldr	r2, [pc, #84]	; (8007268 <prvHeapInit+0xb4>)
 8007214:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007216:	4b14      	ldr	r3, [pc, #80]	; (8007268 <prvHeapInit+0xb4>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2200      	movs	r2, #0
 800721c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800721e:	4b12      	ldr	r3, [pc, #72]	; (8007268 <prvHeapInit+0xb4>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2200      	movs	r2, #0
 8007224:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	1ad2      	subs	r2, r2, r3
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007234:	4b0c      	ldr	r3, [pc, #48]	; (8007268 <prvHeapInit+0xb4>)
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	4a0a      	ldr	r2, [pc, #40]	; (800726c <prvHeapInit+0xb8>)
 8007242:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	4a09      	ldr	r2, [pc, #36]	; (8007270 <prvHeapInit+0xbc>)
 800724a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800724c:	4b09      	ldr	r3, [pc, #36]	; (8007274 <prvHeapInit+0xc0>)
 800724e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007252:	601a      	str	r2, [r3, #0]
}
 8007254:	bf00      	nop
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	20000f14 	.word	0x20000f14
 8007264:	20004b14 	.word	0x20004b14
 8007268:	20004b1c 	.word	0x20004b1c
 800726c:	20004b24 	.word	0x20004b24
 8007270:	20004b20 	.word	0x20004b20
 8007274:	20004b28 	.word	0x20004b28

08007278 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007280:	4b28      	ldr	r3, [pc, #160]	; (8007324 <prvInsertBlockIntoFreeList+0xac>)
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	e002      	b.n	800728c <prvInsertBlockIntoFreeList+0x14>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	60fb      	str	r3, [r7, #12]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	429a      	cmp	r2, r3
 8007294:	d8f7      	bhi.n	8007286 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	4413      	add	r3, r2
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d108      	bne.n	80072ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	441a      	add	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	441a      	add	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d118      	bne.n	8007300 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	4b15      	ldr	r3, [pc, #84]	; (8007328 <prvInsertBlockIntoFreeList+0xb0>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d00d      	beq.n	80072f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685a      	ldr	r2, [r3, #4]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	441a      	add	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	e008      	b.n	8007308 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80072f6:	4b0c      	ldr	r3, [pc, #48]	; (8007328 <prvInsertBlockIntoFreeList+0xb0>)
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	e003      	b.n	8007308 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	429a      	cmp	r2, r3
 800730e:	d002      	beq.n	8007316 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007316:	bf00      	nop
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	20004b14 	.word	0x20004b14
 8007328:	20004b1c 	.word	0x20004b1c

0800732c <__errno>:
 800732c:	4b01      	ldr	r3, [pc, #4]	; (8007334 <__errno+0x8>)
 800732e:	6818      	ldr	r0, [r3, #0]
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	20000014 	.word	0x20000014

08007338 <__libc_init_array>:
 8007338:	b570      	push	{r4, r5, r6, lr}
 800733a:	4e0d      	ldr	r6, [pc, #52]	; (8007370 <__libc_init_array+0x38>)
 800733c:	4c0d      	ldr	r4, [pc, #52]	; (8007374 <__libc_init_array+0x3c>)
 800733e:	1ba4      	subs	r4, r4, r6
 8007340:	10a4      	asrs	r4, r4, #2
 8007342:	2500      	movs	r5, #0
 8007344:	42a5      	cmp	r5, r4
 8007346:	d109      	bne.n	800735c <__libc_init_array+0x24>
 8007348:	4e0b      	ldr	r6, [pc, #44]	; (8007378 <__libc_init_array+0x40>)
 800734a:	4c0c      	ldr	r4, [pc, #48]	; (800737c <__libc_init_array+0x44>)
 800734c:	f003 fd58 	bl	800ae00 <_init>
 8007350:	1ba4      	subs	r4, r4, r6
 8007352:	10a4      	asrs	r4, r4, #2
 8007354:	2500      	movs	r5, #0
 8007356:	42a5      	cmp	r5, r4
 8007358:	d105      	bne.n	8007366 <__libc_init_array+0x2e>
 800735a:	bd70      	pop	{r4, r5, r6, pc}
 800735c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007360:	4798      	blx	r3
 8007362:	3501      	adds	r5, #1
 8007364:	e7ee      	b.n	8007344 <__libc_init_array+0xc>
 8007366:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800736a:	4798      	blx	r3
 800736c:	3501      	adds	r5, #1
 800736e:	e7f2      	b.n	8007356 <__libc_init_array+0x1e>
 8007370:	0800b240 	.word	0x0800b240
 8007374:	0800b240 	.word	0x0800b240
 8007378:	0800b240 	.word	0x0800b240
 800737c:	0800b244 	.word	0x0800b244

08007380 <memcpy>:
 8007380:	b510      	push	{r4, lr}
 8007382:	1e43      	subs	r3, r0, #1
 8007384:	440a      	add	r2, r1
 8007386:	4291      	cmp	r1, r2
 8007388:	d100      	bne.n	800738c <memcpy+0xc>
 800738a:	bd10      	pop	{r4, pc}
 800738c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007390:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007394:	e7f7      	b.n	8007386 <memcpy+0x6>

08007396 <memset>:
 8007396:	4402      	add	r2, r0
 8007398:	4603      	mov	r3, r0
 800739a:	4293      	cmp	r3, r2
 800739c:	d100      	bne.n	80073a0 <memset+0xa>
 800739e:	4770      	bx	lr
 80073a0:	f803 1b01 	strb.w	r1, [r3], #1
 80073a4:	e7f9      	b.n	800739a <memset+0x4>

080073a6 <__cvt>:
 80073a6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073aa:	ec55 4b10 	vmov	r4, r5, d0
 80073ae:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80073b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80073b4:	2d00      	cmp	r5, #0
 80073b6:	460e      	mov	r6, r1
 80073b8:	4691      	mov	r9, r2
 80073ba:	4619      	mov	r1, r3
 80073bc:	bfb8      	it	lt
 80073be:	4622      	movlt	r2, r4
 80073c0:	462b      	mov	r3, r5
 80073c2:	f027 0720 	bic.w	r7, r7, #32
 80073c6:	bfbb      	ittet	lt
 80073c8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80073cc:	461d      	movlt	r5, r3
 80073ce:	2300      	movge	r3, #0
 80073d0:	232d      	movlt	r3, #45	; 0x2d
 80073d2:	bfb8      	it	lt
 80073d4:	4614      	movlt	r4, r2
 80073d6:	2f46      	cmp	r7, #70	; 0x46
 80073d8:	700b      	strb	r3, [r1, #0]
 80073da:	d004      	beq.n	80073e6 <__cvt+0x40>
 80073dc:	2f45      	cmp	r7, #69	; 0x45
 80073de:	d100      	bne.n	80073e2 <__cvt+0x3c>
 80073e0:	3601      	adds	r6, #1
 80073e2:	2102      	movs	r1, #2
 80073e4:	e000      	b.n	80073e8 <__cvt+0x42>
 80073e6:	2103      	movs	r1, #3
 80073e8:	ab03      	add	r3, sp, #12
 80073ea:	9301      	str	r3, [sp, #4]
 80073ec:	ab02      	add	r3, sp, #8
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	4632      	mov	r2, r6
 80073f2:	4653      	mov	r3, sl
 80073f4:	ec45 4b10 	vmov	d0, r4, r5
 80073f8:	f001 fd76 	bl	8008ee8 <_dtoa_r>
 80073fc:	2f47      	cmp	r7, #71	; 0x47
 80073fe:	4680      	mov	r8, r0
 8007400:	d102      	bne.n	8007408 <__cvt+0x62>
 8007402:	f019 0f01 	tst.w	r9, #1
 8007406:	d026      	beq.n	8007456 <__cvt+0xb0>
 8007408:	2f46      	cmp	r7, #70	; 0x46
 800740a:	eb08 0906 	add.w	r9, r8, r6
 800740e:	d111      	bne.n	8007434 <__cvt+0x8e>
 8007410:	f898 3000 	ldrb.w	r3, [r8]
 8007414:	2b30      	cmp	r3, #48	; 0x30
 8007416:	d10a      	bne.n	800742e <__cvt+0x88>
 8007418:	2200      	movs	r2, #0
 800741a:	2300      	movs	r3, #0
 800741c:	4620      	mov	r0, r4
 800741e:	4629      	mov	r1, r5
 8007420:	f7f9 fb5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007424:	b918      	cbnz	r0, 800742e <__cvt+0x88>
 8007426:	f1c6 0601 	rsb	r6, r6, #1
 800742a:	f8ca 6000 	str.w	r6, [sl]
 800742e:	f8da 3000 	ldr.w	r3, [sl]
 8007432:	4499      	add	r9, r3
 8007434:	2200      	movs	r2, #0
 8007436:	2300      	movs	r3, #0
 8007438:	4620      	mov	r0, r4
 800743a:	4629      	mov	r1, r5
 800743c:	f7f9 fb4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007440:	b938      	cbnz	r0, 8007452 <__cvt+0xac>
 8007442:	2230      	movs	r2, #48	; 0x30
 8007444:	9b03      	ldr	r3, [sp, #12]
 8007446:	454b      	cmp	r3, r9
 8007448:	d205      	bcs.n	8007456 <__cvt+0xb0>
 800744a:	1c59      	adds	r1, r3, #1
 800744c:	9103      	str	r1, [sp, #12]
 800744e:	701a      	strb	r2, [r3, #0]
 8007450:	e7f8      	b.n	8007444 <__cvt+0x9e>
 8007452:	f8cd 900c 	str.w	r9, [sp, #12]
 8007456:	9b03      	ldr	r3, [sp, #12]
 8007458:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800745a:	eba3 0308 	sub.w	r3, r3, r8
 800745e:	4640      	mov	r0, r8
 8007460:	6013      	str	r3, [r2, #0]
 8007462:	b004      	add	sp, #16
 8007464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007468 <__exponent>:
 8007468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800746a:	2900      	cmp	r1, #0
 800746c:	4604      	mov	r4, r0
 800746e:	bfba      	itte	lt
 8007470:	4249      	neglt	r1, r1
 8007472:	232d      	movlt	r3, #45	; 0x2d
 8007474:	232b      	movge	r3, #43	; 0x2b
 8007476:	2909      	cmp	r1, #9
 8007478:	f804 2b02 	strb.w	r2, [r4], #2
 800747c:	7043      	strb	r3, [r0, #1]
 800747e:	dd20      	ble.n	80074c2 <__exponent+0x5a>
 8007480:	f10d 0307 	add.w	r3, sp, #7
 8007484:	461f      	mov	r7, r3
 8007486:	260a      	movs	r6, #10
 8007488:	fb91 f5f6 	sdiv	r5, r1, r6
 800748c:	fb06 1115 	mls	r1, r6, r5, r1
 8007490:	3130      	adds	r1, #48	; 0x30
 8007492:	2d09      	cmp	r5, #9
 8007494:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007498:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800749c:	4629      	mov	r1, r5
 800749e:	dc09      	bgt.n	80074b4 <__exponent+0x4c>
 80074a0:	3130      	adds	r1, #48	; 0x30
 80074a2:	3b02      	subs	r3, #2
 80074a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80074a8:	42bb      	cmp	r3, r7
 80074aa:	4622      	mov	r2, r4
 80074ac:	d304      	bcc.n	80074b8 <__exponent+0x50>
 80074ae:	1a10      	subs	r0, r2, r0
 80074b0:	b003      	add	sp, #12
 80074b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074b4:	4613      	mov	r3, r2
 80074b6:	e7e7      	b.n	8007488 <__exponent+0x20>
 80074b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074bc:	f804 2b01 	strb.w	r2, [r4], #1
 80074c0:	e7f2      	b.n	80074a8 <__exponent+0x40>
 80074c2:	2330      	movs	r3, #48	; 0x30
 80074c4:	4419      	add	r1, r3
 80074c6:	7083      	strb	r3, [r0, #2]
 80074c8:	1d02      	adds	r2, r0, #4
 80074ca:	70c1      	strb	r1, [r0, #3]
 80074cc:	e7ef      	b.n	80074ae <__exponent+0x46>
	...

080074d0 <_printf_float>:
 80074d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d4:	b08d      	sub	sp, #52	; 0x34
 80074d6:	460c      	mov	r4, r1
 80074d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80074dc:	4616      	mov	r6, r2
 80074de:	461f      	mov	r7, r3
 80074e0:	4605      	mov	r5, r0
 80074e2:	f002 fde5 	bl	800a0b0 <_localeconv_r>
 80074e6:	6803      	ldr	r3, [r0, #0]
 80074e8:	9304      	str	r3, [sp, #16]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7f8 fe78 	bl	80001e0 <strlen>
 80074f0:	2300      	movs	r3, #0
 80074f2:	930a      	str	r3, [sp, #40]	; 0x28
 80074f4:	f8d8 3000 	ldr.w	r3, [r8]
 80074f8:	9005      	str	r0, [sp, #20]
 80074fa:	3307      	adds	r3, #7
 80074fc:	f023 0307 	bic.w	r3, r3, #7
 8007500:	f103 0208 	add.w	r2, r3, #8
 8007504:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007508:	f8d4 b000 	ldr.w	fp, [r4]
 800750c:	f8c8 2000 	str.w	r2, [r8]
 8007510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007514:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007518:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800751c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007520:	9307      	str	r3, [sp, #28]
 8007522:	f8cd 8018 	str.w	r8, [sp, #24]
 8007526:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800752a:	4ba7      	ldr	r3, [pc, #668]	; (80077c8 <_printf_float+0x2f8>)
 800752c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007530:	f7f9 fb04 	bl	8000b3c <__aeabi_dcmpun>
 8007534:	bb70      	cbnz	r0, 8007594 <_printf_float+0xc4>
 8007536:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800753a:	4ba3      	ldr	r3, [pc, #652]	; (80077c8 <_printf_float+0x2f8>)
 800753c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007540:	f7f9 fade 	bl	8000b00 <__aeabi_dcmple>
 8007544:	bb30      	cbnz	r0, 8007594 <_printf_float+0xc4>
 8007546:	2200      	movs	r2, #0
 8007548:	2300      	movs	r3, #0
 800754a:	4640      	mov	r0, r8
 800754c:	4649      	mov	r1, r9
 800754e:	f7f9 facd 	bl	8000aec <__aeabi_dcmplt>
 8007552:	b110      	cbz	r0, 800755a <_printf_float+0x8a>
 8007554:	232d      	movs	r3, #45	; 0x2d
 8007556:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800755a:	4a9c      	ldr	r2, [pc, #624]	; (80077cc <_printf_float+0x2fc>)
 800755c:	4b9c      	ldr	r3, [pc, #624]	; (80077d0 <_printf_float+0x300>)
 800755e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007562:	bf8c      	ite	hi
 8007564:	4690      	movhi	r8, r2
 8007566:	4698      	movls	r8, r3
 8007568:	2303      	movs	r3, #3
 800756a:	f02b 0204 	bic.w	r2, fp, #4
 800756e:	6123      	str	r3, [r4, #16]
 8007570:	6022      	str	r2, [r4, #0]
 8007572:	f04f 0900 	mov.w	r9, #0
 8007576:	9700      	str	r7, [sp, #0]
 8007578:	4633      	mov	r3, r6
 800757a:	aa0b      	add	r2, sp, #44	; 0x2c
 800757c:	4621      	mov	r1, r4
 800757e:	4628      	mov	r0, r5
 8007580:	f000 f9e6 	bl	8007950 <_printf_common>
 8007584:	3001      	adds	r0, #1
 8007586:	f040 808d 	bne.w	80076a4 <_printf_float+0x1d4>
 800758a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800758e:	b00d      	add	sp, #52	; 0x34
 8007590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007594:	4642      	mov	r2, r8
 8007596:	464b      	mov	r3, r9
 8007598:	4640      	mov	r0, r8
 800759a:	4649      	mov	r1, r9
 800759c:	f7f9 face 	bl	8000b3c <__aeabi_dcmpun>
 80075a0:	b110      	cbz	r0, 80075a8 <_printf_float+0xd8>
 80075a2:	4a8c      	ldr	r2, [pc, #560]	; (80077d4 <_printf_float+0x304>)
 80075a4:	4b8c      	ldr	r3, [pc, #560]	; (80077d8 <_printf_float+0x308>)
 80075a6:	e7da      	b.n	800755e <_printf_float+0x8e>
 80075a8:	6861      	ldr	r1, [r4, #4]
 80075aa:	1c4b      	adds	r3, r1, #1
 80075ac:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80075b0:	a80a      	add	r0, sp, #40	; 0x28
 80075b2:	d13e      	bne.n	8007632 <_printf_float+0x162>
 80075b4:	2306      	movs	r3, #6
 80075b6:	6063      	str	r3, [r4, #4]
 80075b8:	2300      	movs	r3, #0
 80075ba:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80075be:	ab09      	add	r3, sp, #36	; 0x24
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	ec49 8b10 	vmov	d0, r8, r9
 80075c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80075ca:	6022      	str	r2, [r4, #0]
 80075cc:	f8cd a004 	str.w	sl, [sp, #4]
 80075d0:	6861      	ldr	r1, [r4, #4]
 80075d2:	4628      	mov	r0, r5
 80075d4:	f7ff fee7 	bl	80073a6 <__cvt>
 80075d8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80075dc:	2b47      	cmp	r3, #71	; 0x47
 80075de:	4680      	mov	r8, r0
 80075e0:	d109      	bne.n	80075f6 <_printf_float+0x126>
 80075e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e4:	1cd8      	adds	r0, r3, #3
 80075e6:	db02      	blt.n	80075ee <_printf_float+0x11e>
 80075e8:	6862      	ldr	r2, [r4, #4]
 80075ea:	4293      	cmp	r3, r2
 80075ec:	dd47      	ble.n	800767e <_printf_float+0x1ae>
 80075ee:	f1aa 0a02 	sub.w	sl, sl, #2
 80075f2:	fa5f fa8a 	uxtb.w	sl, sl
 80075f6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80075fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075fc:	d824      	bhi.n	8007648 <_printf_float+0x178>
 80075fe:	3901      	subs	r1, #1
 8007600:	4652      	mov	r2, sl
 8007602:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007606:	9109      	str	r1, [sp, #36]	; 0x24
 8007608:	f7ff ff2e 	bl	8007468 <__exponent>
 800760c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800760e:	1813      	adds	r3, r2, r0
 8007610:	2a01      	cmp	r2, #1
 8007612:	4681      	mov	r9, r0
 8007614:	6123      	str	r3, [r4, #16]
 8007616:	dc02      	bgt.n	800761e <_printf_float+0x14e>
 8007618:	6822      	ldr	r2, [r4, #0]
 800761a:	07d1      	lsls	r1, r2, #31
 800761c:	d501      	bpl.n	8007622 <_printf_float+0x152>
 800761e:	3301      	adds	r3, #1
 8007620:	6123      	str	r3, [r4, #16]
 8007622:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007626:	2b00      	cmp	r3, #0
 8007628:	d0a5      	beq.n	8007576 <_printf_float+0xa6>
 800762a:	232d      	movs	r3, #45	; 0x2d
 800762c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007630:	e7a1      	b.n	8007576 <_printf_float+0xa6>
 8007632:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007636:	f000 8177 	beq.w	8007928 <_printf_float+0x458>
 800763a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800763e:	d1bb      	bne.n	80075b8 <_printf_float+0xe8>
 8007640:	2900      	cmp	r1, #0
 8007642:	d1b9      	bne.n	80075b8 <_printf_float+0xe8>
 8007644:	2301      	movs	r3, #1
 8007646:	e7b6      	b.n	80075b6 <_printf_float+0xe6>
 8007648:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800764c:	d119      	bne.n	8007682 <_printf_float+0x1b2>
 800764e:	2900      	cmp	r1, #0
 8007650:	6863      	ldr	r3, [r4, #4]
 8007652:	dd0c      	ble.n	800766e <_printf_float+0x19e>
 8007654:	6121      	str	r1, [r4, #16]
 8007656:	b913      	cbnz	r3, 800765e <_printf_float+0x18e>
 8007658:	6822      	ldr	r2, [r4, #0]
 800765a:	07d2      	lsls	r2, r2, #31
 800765c:	d502      	bpl.n	8007664 <_printf_float+0x194>
 800765e:	3301      	adds	r3, #1
 8007660:	440b      	add	r3, r1
 8007662:	6123      	str	r3, [r4, #16]
 8007664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007666:	65a3      	str	r3, [r4, #88]	; 0x58
 8007668:	f04f 0900 	mov.w	r9, #0
 800766c:	e7d9      	b.n	8007622 <_printf_float+0x152>
 800766e:	b913      	cbnz	r3, 8007676 <_printf_float+0x1a6>
 8007670:	6822      	ldr	r2, [r4, #0]
 8007672:	07d0      	lsls	r0, r2, #31
 8007674:	d501      	bpl.n	800767a <_printf_float+0x1aa>
 8007676:	3302      	adds	r3, #2
 8007678:	e7f3      	b.n	8007662 <_printf_float+0x192>
 800767a:	2301      	movs	r3, #1
 800767c:	e7f1      	b.n	8007662 <_printf_float+0x192>
 800767e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007682:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007686:	4293      	cmp	r3, r2
 8007688:	db05      	blt.n	8007696 <_printf_float+0x1c6>
 800768a:	6822      	ldr	r2, [r4, #0]
 800768c:	6123      	str	r3, [r4, #16]
 800768e:	07d1      	lsls	r1, r2, #31
 8007690:	d5e8      	bpl.n	8007664 <_printf_float+0x194>
 8007692:	3301      	adds	r3, #1
 8007694:	e7e5      	b.n	8007662 <_printf_float+0x192>
 8007696:	2b00      	cmp	r3, #0
 8007698:	bfd4      	ite	le
 800769a:	f1c3 0302 	rsble	r3, r3, #2
 800769e:	2301      	movgt	r3, #1
 80076a0:	4413      	add	r3, r2
 80076a2:	e7de      	b.n	8007662 <_printf_float+0x192>
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	055a      	lsls	r2, r3, #21
 80076a8:	d407      	bmi.n	80076ba <_printf_float+0x1ea>
 80076aa:	6923      	ldr	r3, [r4, #16]
 80076ac:	4642      	mov	r2, r8
 80076ae:	4631      	mov	r1, r6
 80076b0:	4628      	mov	r0, r5
 80076b2:	47b8      	blx	r7
 80076b4:	3001      	adds	r0, #1
 80076b6:	d12b      	bne.n	8007710 <_printf_float+0x240>
 80076b8:	e767      	b.n	800758a <_printf_float+0xba>
 80076ba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80076be:	f240 80dc 	bls.w	800787a <_printf_float+0x3aa>
 80076c2:	2200      	movs	r2, #0
 80076c4:	2300      	movs	r3, #0
 80076c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076ca:	f7f9 fa05 	bl	8000ad8 <__aeabi_dcmpeq>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	d033      	beq.n	800773a <_printf_float+0x26a>
 80076d2:	2301      	movs	r3, #1
 80076d4:	4a41      	ldr	r2, [pc, #260]	; (80077dc <_printf_float+0x30c>)
 80076d6:	4631      	mov	r1, r6
 80076d8:	4628      	mov	r0, r5
 80076da:	47b8      	blx	r7
 80076dc:	3001      	adds	r0, #1
 80076de:	f43f af54 	beq.w	800758a <_printf_float+0xba>
 80076e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076e6:	429a      	cmp	r2, r3
 80076e8:	db02      	blt.n	80076f0 <_printf_float+0x220>
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	07d8      	lsls	r0, r3, #31
 80076ee:	d50f      	bpl.n	8007710 <_printf_float+0x240>
 80076f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076f4:	4631      	mov	r1, r6
 80076f6:	4628      	mov	r0, r5
 80076f8:	47b8      	blx	r7
 80076fa:	3001      	adds	r0, #1
 80076fc:	f43f af45 	beq.w	800758a <_printf_float+0xba>
 8007700:	f04f 0800 	mov.w	r8, #0
 8007704:	f104 091a 	add.w	r9, r4, #26
 8007708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800770a:	3b01      	subs	r3, #1
 800770c:	4543      	cmp	r3, r8
 800770e:	dc09      	bgt.n	8007724 <_printf_float+0x254>
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	079b      	lsls	r3, r3, #30
 8007714:	f100 8103 	bmi.w	800791e <_printf_float+0x44e>
 8007718:	68e0      	ldr	r0, [r4, #12]
 800771a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800771c:	4298      	cmp	r0, r3
 800771e:	bfb8      	it	lt
 8007720:	4618      	movlt	r0, r3
 8007722:	e734      	b.n	800758e <_printf_float+0xbe>
 8007724:	2301      	movs	r3, #1
 8007726:	464a      	mov	r2, r9
 8007728:	4631      	mov	r1, r6
 800772a:	4628      	mov	r0, r5
 800772c:	47b8      	blx	r7
 800772e:	3001      	adds	r0, #1
 8007730:	f43f af2b 	beq.w	800758a <_printf_float+0xba>
 8007734:	f108 0801 	add.w	r8, r8, #1
 8007738:	e7e6      	b.n	8007708 <_printf_float+0x238>
 800773a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800773c:	2b00      	cmp	r3, #0
 800773e:	dc2b      	bgt.n	8007798 <_printf_float+0x2c8>
 8007740:	2301      	movs	r3, #1
 8007742:	4a26      	ldr	r2, [pc, #152]	; (80077dc <_printf_float+0x30c>)
 8007744:	4631      	mov	r1, r6
 8007746:	4628      	mov	r0, r5
 8007748:	47b8      	blx	r7
 800774a:	3001      	adds	r0, #1
 800774c:	f43f af1d 	beq.w	800758a <_printf_float+0xba>
 8007750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007752:	b923      	cbnz	r3, 800775e <_printf_float+0x28e>
 8007754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007756:	b913      	cbnz	r3, 800775e <_printf_float+0x28e>
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	07d9      	lsls	r1, r3, #31
 800775c:	d5d8      	bpl.n	8007710 <_printf_float+0x240>
 800775e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007762:	4631      	mov	r1, r6
 8007764:	4628      	mov	r0, r5
 8007766:	47b8      	blx	r7
 8007768:	3001      	adds	r0, #1
 800776a:	f43f af0e 	beq.w	800758a <_printf_float+0xba>
 800776e:	f04f 0900 	mov.w	r9, #0
 8007772:	f104 0a1a 	add.w	sl, r4, #26
 8007776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007778:	425b      	negs	r3, r3
 800777a:	454b      	cmp	r3, r9
 800777c:	dc01      	bgt.n	8007782 <_printf_float+0x2b2>
 800777e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007780:	e794      	b.n	80076ac <_printf_float+0x1dc>
 8007782:	2301      	movs	r3, #1
 8007784:	4652      	mov	r2, sl
 8007786:	4631      	mov	r1, r6
 8007788:	4628      	mov	r0, r5
 800778a:	47b8      	blx	r7
 800778c:	3001      	adds	r0, #1
 800778e:	f43f aefc 	beq.w	800758a <_printf_float+0xba>
 8007792:	f109 0901 	add.w	r9, r9, #1
 8007796:	e7ee      	b.n	8007776 <_printf_float+0x2a6>
 8007798:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800779a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800779c:	429a      	cmp	r2, r3
 800779e:	bfa8      	it	ge
 80077a0:	461a      	movge	r2, r3
 80077a2:	2a00      	cmp	r2, #0
 80077a4:	4691      	mov	r9, r2
 80077a6:	dd07      	ble.n	80077b8 <_printf_float+0x2e8>
 80077a8:	4613      	mov	r3, r2
 80077aa:	4631      	mov	r1, r6
 80077ac:	4642      	mov	r2, r8
 80077ae:	4628      	mov	r0, r5
 80077b0:	47b8      	blx	r7
 80077b2:	3001      	adds	r0, #1
 80077b4:	f43f aee9 	beq.w	800758a <_printf_float+0xba>
 80077b8:	f104 031a 	add.w	r3, r4, #26
 80077bc:	f04f 0b00 	mov.w	fp, #0
 80077c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077c4:	9306      	str	r3, [sp, #24]
 80077c6:	e015      	b.n	80077f4 <_printf_float+0x324>
 80077c8:	7fefffff 	.word	0x7fefffff
 80077cc:	0800af88 	.word	0x0800af88
 80077d0:	0800af84 	.word	0x0800af84
 80077d4:	0800af90 	.word	0x0800af90
 80077d8:	0800af8c 	.word	0x0800af8c
 80077dc:	0800af94 	.word	0x0800af94
 80077e0:	2301      	movs	r3, #1
 80077e2:	9a06      	ldr	r2, [sp, #24]
 80077e4:	4631      	mov	r1, r6
 80077e6:	4628      	mov	r0, r5
 80077e8:	47b8      	blx	r7
 80077ea:	3001      	adds	r0, #1
 80077ec:	f43f aecd 	beq.w	800758a <_printf_float+0xba>
 80077f0:	f10b 0b01 	add.w	fp, fp, #1
 80077f4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80077f8:	ebaa 0309 	sub.w	r3, sl, r9
 80077fc:	455b      	cmp	r3, fp
 80077fe:	dcef      	bgt.n	80077e0 <_printf_float+0x310>
 8007800:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007804:	429a      	cmp	r2, r3
 8007806:	44d0      	add	r8, sl
 8007808:	db15      	blt.n	8007836 <_printf_float+0x366>
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	07da      	lsls	r2, r3, #31
 800780e:	d412      	bmi.n	8007836 <_printf_float+0x366>
 8007810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007812:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007814:	eba3 020a 	sub.w	r2, r3, sl
 8007818:	eba3 0a01 	sub.w	sl, r3, r1
 800781c:	4592      	cmp	sl, r2
 800781e:	bfa8      	it	ge
 8007820:	4692      	movge	sl, r2
 8007822:	f1ba 0f00 	cmp.w	sl, #0
 8007826:	dc0e      	bgt.n	8007846 <_printf_float+0x376>
 8007828:	f04f 0800 	mov.w	r8, #0
 800782c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007830:	f104 091a 	add.w	r9, r4, #26
 8007834:	e019      	b.n	800786a <_printf_float+0x39a>
 8007836:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800783a:	4631      	mov	r1, r6
 800783c:	4628      	mov	r0, r5
 800783e:	47b8      	blx	r7
 8007840:	3001      	adds	r0, #1
 8007842:	d1e5      	bne.n	8007810 <_printf_float+0x340>
 8007844:	e6a1      	b.n	800758a <_printf_float+0xba>
 8007846:	4653      	mov	r3, sl
 8007848:	4642      	mov	r2, r8
 800784a:	4631      	mov	r1, r6
 800784c:	4628      	mov	r0, r5
 800784e:	47b8      	blx	r7
 8007850:	3001      	adds	r0, #1
 8007852:	d1e9      	bne.n	8007828 <_printf_float+0x358>
 8007854:	e699      	b.n	800758a <_printf_float+0xba>
 8007856:	2301      	movs	r3, #1
 8007858:	464a      	mov	r2, r9
 800785a:	4631      	mov	r1, r6
 800785c:	4628      	mov	r0, r5
 800785e:	47b8      	blx	r7
 8007860:	3001      	adds	r0, #1
 8007862:	f43f ae92 	beq.w	800758a <_printf_float+0xba>
 8007866:	f108 0801 	add.w	r8, r8, #1
 800786a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800786e:	1a9b      	subs	r3, r3, r2
 8007870:	eba3 030a 	sub.w	r3, r3, sl
 8007874:	4543      	cmp	r3, r8
 8007876:	dcee      	bgt.n	8007856 <_printf_float+0x386>
 8007878:	e74a      	b.n	8007710 <_printf_float+0x240>
 800787a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800787c:	2a01      	cmp	r2, #1
 800787e:	dc01      	bgt.n	8007884 <_printf_float+0x3b4>
 8007880:	07db      	lsls	r3, r3, #31
 8007882:	d53a      	bpl.n	80078fa <_printf_float+0x42a>
 8007884:	2301      	movs	r3, #1
 8007886:	4642      	mov	r2, r8
 8007888:	4631      	mov	r1, r6
 800788a:	4628      	mov	r0, r5
 800788c:	47b8      	blx	r7
 800788e:	3001      	adds	r0, #1
 8007890:	f43f ae7b 	beq.w	800758a <_printf_float+0xba>
 8007894:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007898:	4631      	mov	r1, r6
 800789a:	4628      	mov	r0, r5
 800789c:	47b8      	blx	r7
 800789e:	3001      	adds	r0, #1
 80078a0:	f108 0801 	add.w	r8, r8, #1
 80078a4:	f43f ae71 	beq.w	800758a <_printf_float+0xba>
 80078a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078aa:	2200      	movs	r2, #0
 80078ac:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80078b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078b4:	2300      	movs	r3, #0
 80078b6:	f7f9 f90f 	bl	8000ad8 <__aeabi_dcmpeq>
 80078ba:	b9c8      	cbnz	r0, 80078f0 <_printf_float+0x420>
 80078bc:	4653      	mov	r3, sl
 80078be:	4642      	mov	r2, r8
 80078c0:	4631      	mov	r1, r6
 80078c2:	4628      	mov	r0, r5
 80078c4:	47b8      	blx	r7
 80078c6:	3001      	adds	r0, #1
 80078c8:	d10e      	bne.n	80078e8 <_printf_float+0x418>
 80078ca:	e65e      	b.n	800758a <_printf_float+0xba>
 80078cc:	2301      	movs	r3, #1
 80078ce:	4652      	mov	r2, sl
 80078d0:	4631      	mov	r1, r6
 80078d2:	4628      	mov	r0, r5
 80078d4:	47b8      	blx	r7
 80078d6:	3001      	adds	r0, #1
 80078d8:	f43f ae57 	beq.w	800758a <_printf_float+0xba>
 80078dc:	f108 0801 	add.w	r8, r8, #1
 80078e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078e2:	3b01      	subs	r3, #1
 80078e4:	4543      	cmp	r3, r8
 80078e6:	dcf1      	bgt.n	80078cc <_printf_float+0x3fc>
 80078e8:	464b      	mov	r3, r9
 80078ea:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80078ee:	e6de      	b.n	80076ae <_printf_float+0x1de>
 80078f0:	f04f 0800 	mov.w	r8, #0
 80078f4:	f104 0a1a 	add.w	sl, r4, #26
 80078f8:	e7f2      	b.n	80078e0 <_printf_float+0x410>
 80078fa:	2301      	movs	r3, #1
 80078fc:	e7df      	b.n	80078be <_printf_float+0x3ee>
 80078fe:	2301      	movs	r3, #1
 8007900:	464a      	mov	r2, r9
 8007902:	4631      	mov	r1, r6
 8007904:	4628      	mov	r0, r5
 8007906:	47b8      	blx	r7
 8007908:	3001      	adds	r0, #1
 800790a:	f43f ae3e 	beq.w	800758a <_printf_float+0xba>
 800790e:	f108 0801 	add.w	r8, r8, #1
 8007912:	68e3      	ldr	r3, [r4, #12]
 8007914:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007916:	1a9b      	subs	r3, r3, r2
 8007918:	4543      	cmp	r3, r8
 800791a:	dcf0      	bgt.n	80078fe <_printf_float+0x42e>
 800791c:	e6fc      	b.n	8007718 <_printf_float+0x248>
 800791e:	f04f 0800 	mov.w	r8, #0
 8007922:	f104 0919 	add.w	r9, r4, #25
 8007926:	e7f4      	b.n	8007912 <_printf_float+0x442>
 8007928:	2900      	cmp	r1, #0
 800792a:	f43f ae8b 	beq.w	8007644 <_printf_float+0x174>
 800792e:	2300      	movs	r3, #0
 8007930:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007934:	ab09      	add	r3, sp, #36	; 0x24
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	ec49 8b10 	vmov	d0, r8, r9
 800793c:	6022      	str	r2, [r4, #0]
 800793e:	f8cd a004 	str.w	sl, [sp, #4]
 8007942:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007946:	4628      	mov	r0, r5
 8007948:	f7ff fd2d 	bl	80073a6 <__cvt>
 800794c:	4680      	mov	r8, r0
 800794e:	e648      	b.n	80075e2 <_printf_float+0x112>

08007950 <_printf_common>:
 8007950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007954:	4691      	mov	r9, r2
 8007956:	461f      	mov	r7, r3
 8007958:	688a      	ldr	r2, [r1, #8]
 800795a:	690b      	ldr	r3, [r1, #16]
 800795c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007960:	4293      	cmp	r3, r2
 8007962:	bfb8      	it	lt
 8007964:	4613      	movlt	r3, r2
 8007966:	f8c9 3000 	str.w	r3, [r9]
 800796a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800796e:	4606      	mov	r6, r0
 8007970:	460c      	mov	r4, r1
 8007972:	b112      	cbz	r2, 800797a <_printf_common+0x2a>
 8007974:	3301      	adds	r3, #1
 8007976:	f8c9 3000 	str.w	r3, [r9]
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	0699      	lsls	r1, r3, #26
 800797e:	bf42      	ittt	mi
 8007980:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007984:	3302      	addmi	r3, #2
 8007986:	f8c9 3000 	strmi.w	r3, [r9]
 800798a:	6825      	ldr	r5, [r4, #0]
 800798c:	f015 0506 	ands.w	r5, r5, #6
 8007990:	d107      	bne.n	80079a2 <_printf_common+0x52>
 8007992:	f104 0a19 	add.w	sl, r4, #25
 8007996:	68e3      	ldr	r3, [r4, #12]
 8007998:	f8d9 2000 	ldr.w	r2, [r9]
 800799c:	1a9b      	subs	r3, r3, r2
 800799e:	42ab      	cmp	r3, r5
 80079a0:	dc28      	bgt.n	80079f4 <_printf_common+0xa4>
 80079a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80079a6:	6822      	ldr	r2, [r4, #0]
 80079a8:	3300      	adds	r3, #0
 80079aa:	bf18      	it	ne
 80079ac:	2301      	movne	r3, #1
 80079ae:	0692      	lsls	r2, r2, #26
 80079b0:	d42d      	bmi.n	8007a0e <_printf_common+0xbe>
 80079b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079b6:	4639      	mov	r1, r7
 80079b8:	4630      	mov	r0, r6
 80079ba:	47c0      	blx	r8
 80079bc:	3001      	adds	r0, #1
 80079be:	d020      	beq.n	8007a02 <_printf_common+0xb2>
 80079c0:	6823      	ldr	r3, [r4, #0]
 80079c2:	68e5      	ldr	r5, [r4, #12]
 80079c4:	f8d9 2000 	ldr.w	r2, [r9]
 80079c8:	f003 0306 	and.w	r3, r3, #6
 80079cc:	2b04      	cmp	r3, #4
 80079ce:	bf08      	it	eq
 80079d0:	1aad      	subeq	r5, r5, r2
 80079d2:	68a3      	ldr	r3, [r4, #8]
 80079d4:	6922      	ldr	r2, [r4, #16]
 80079d6:	bf0c      	ite	eq
 80079d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079dc:	2500      	movne	r5, #0
 80079de:	4293      	cmp	r3, r2
 80079e0:	bfc4      	itt	gt
 80079e2:	1a9b      	subgt	r3, r3, r2
 80079e4:	18ed      	addgt	r5, r5, r3
 80079e6:	f04f 0900 	mov.w	r9, #0
 80079ea:	341a      	adds	r4, #26
 80079ec:	454d      	cmp	r5, r9
 80079ee:	d11a      	bne.n	8007a26 <_printf_common+0xd6>
 80079f0:	2000      	movs	r0, #0
 80079f2:	e008      	b.n	8007a06 <_printf_common+0xb6>
 80079f4:	2301      	movs	r3, #1
 80079f6:	4652      	mov	r2, sl
 80079f8:	4639      	mov	r1, r7
 80079fa:	4630      	mov	r0, r6
 80079fc:	47c0      	blx	r8
 80079fe:	3001      	adds	r0, #1
 8007a00:	d103      	bne.n	8007a0a <_printf_common+0xba>
 8007a02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a0a:	3501      	adds	r5, #1
 8007a0c:	e7c3      	b.n	8007996 <_printf_common+0x46>
 8007a0e:	18e1      	adds	r1, r4, r3
 8007a10:	1c5a      	adds	r2, r3, #1
 8007a12:	2030      	movs	r0, #48	; 0x30
 8007a14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a18:	4422      	add	r2, r4
 8007a1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a22:	3302      	adds	r3, #2
 8007a24:	e7c5      	b.n	80079b2 <_printf_common+0x62>
 8007a26:	2301      	movs	r3, #1
 8007a28:	4622      	mov	r2, r4
 8007a2a:	4639      	mov	r1, r7
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	47c0      	blx	r8
 8007a30:	3001      	adds	r0, #1
 8007a32:	d0e6      	beq.n	8007a02 <_printf_common+0xb2>
 8007a34:	f109 0901 	add.w	r9, r9, #1
 8007a38:	e7d8      	b.n	80079ec <_printf_common+0x9c>
	...

08007a3c <_printf_i>:
 8007a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a40:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007a44:	460c      	mov	r4, r1
 8007a46:	7e09      	ldrb	r1, [r1, #24]
 8007a48:	b085      	sub	sp, #20
 8007a4a:	296e      	cmp	r1, #110	; 0x6e
 8007a4c:	4617      	mov	r7, r2
 8007a4e:	4606      	mov	r6, r0
 8007a50:	4698      	mov	r8, r3
 8007a52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a54:	f000 80b3 	beq.w	8007bbe <_printf_i+0x182>
 8007a58:	d822      	bhi.n	8007aa0 <_printf_i+0x64>
 8007a5a:	2963      	cmp	r1, #99	; 0x63
 8007a5c:	d036      	beq.n	8007acc <_printf_i+0x90>
 8007a5e:	d80a      	bhi.n	8007a76 <_printf_i+0x3a>
 8007a60:	2900      	cmp	r1, #0
 8007a62:	f000 80b9 	beq.w	8007bd8 <_printf_i+0x19c>
 8007a66:	2958      	cmp	r1, #88	; 0x58
 8007a68:	f000 8083 	beq.w	8007b72 <_printf_i+0x136>
 8007a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a70:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007a74:	e032      	b.n	8007adc <_printf_i+0xa0>
 8007a76:	2964      	cmp	r1, #100	; 0x64
 8007a78:	d001      	beq.n	8007a7e <_printf_i+0x42>
 8007a7a:	2969      	cmp	r1, #105	; 0x69
 8007a7c:	d1f6      	bne.n	8007a6c <_printf_i+0x30>
 8007a7e:	6820      	ldr	r0, [r4, #0]
 8007a80:	6813      	ldr	r3, [r2, #0]
 8007a82:	0605      	lsls	r5, r0, #24
 8007a84:	f103 0104 	add.w	r1, r3, #4
 8007a88:	d52a      	bpl.n	8007ae0 <_printf_i+0xa4>
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6011      	str	r1, [r2, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	da03      	bge.n	8007a9a <_printf_i+0x5e>
 8007a92:	222d      	movs	r2, #45	; 0x2d
 8007a94:	425b      	negs	r3, r3
 8007a96:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007a9a:	486f      	ldr	r0, [pc, #444]	; (8007c58 <_printf_i+0x21c>)
 8007a9c:	220a      	movs	r2, #10
 8007a9e:	e039      	b.n	8007b14 <_printf_i+0xd8>
 8007aa0:	2973      	cmp	r1, #115	; 0x73
 8007aa2:	f000 809d 	beq.w	8007be0 <_printf_i+0x1a4>
 8007aa6:	d808      	bhi.n	8007aba <_printf_i+0x7e>
 8007aa8:	296f      	cmp	r1, #111	; 0x6f
 8007aaa:	d020      	beq.n	8007aee <_printf_i+0xb2>
 8007aac:	2970      	cmp	r1, #112	; 0x70
 8007aae:	d1dd      	bne.n	8007a6c <_printf_i+0x30>
 8007ab0:	6823      	ldr	r3, [r4, #0]
 8007ab2:	f043 0320 	orr.w	r3, r3, #32
 8007ab6:	6023      	str	r3, [r4, #0]
 8007ab8:	e003      	b.n	8007ac2 <_printf_i+0x86>
 8007aba:	2975      	cmp	r1, #117	; 0x75
 8007abc:	d017      	beq.n	8007aee <_printf_i+0xb2>
 8007abe:	2978      	cmp	r1, #120	; 0x78
 8007ac0:	d1d4      	bne.n	8007a6c <_printf_i+0x30>
 8007ac2:	2378      	movs	r3, #120	; 0x78
 8007ac4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ac8:	4864      	ldr	r0, [pc, #400]	; (8007c5c <_printf_i+0x220>)
 8007aca:	e055      	b.n	8007b78 <_printf_i+0x13c>
 8007acc:	6813      	ldr	r3, [r2, #0]
 8007ace:	1d19      	adds	r1, r3, #4
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6011      	str	r1, [r2, #0]
 8007ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ad8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007adc:	2301      	movs	r3, #1
 8007ade:	e08c      	b.n	8007bfa <_printf_i+0x1be>
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	6011      	str	r1, [r2, #0]
 8007ae4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ae8:	bf18      	it	ne
 8007aea:	b21b      	sxthne	r3, r3
 8007aec:	e7cf      	b.n	8007a8e <_printf_i+0x52>
 8007aee:	6813      	ldr	r3, [r2, #0]
 8007af0:	6825      	ldr	r5, [r4, #0]
 8007af2:	1d18      	adds	r0, r3, #4
 8007af4:	6010      	str	r0, [r2, #0]
 8007af6:	0628      	lsls	r0, r5, #24
 8007af8:	d501      	bpl.n	8007afe <_printf_i+0xc2>
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	e002      	b.n	8007b04 <_printf_i+0xc8>
 8007afe:	0668      	lsls	r0, r5, #25
 8007b00:	d5fb      	bpl.n	8007afa <_printf_i+0xbe>
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	4854      	ldr	r0, [pc, #336]	; (8007c58 <_printf_i+0x21c>)
 8007b06:	296f      	cmp	r1, #111	; 0x6f
 8007b08:	bf14      	ite	ne
 8007b0a:	220a      	movne	r2, #10
 8007b0c:	2208      	moveq	r2, #8
 8007b0e:	2100      	movs	r1, #0
 8007b10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b14:	6865      	ldr	r5, [r4, #4]
 8007b16:	60a5      	str	r5, [r4, #8]
 8007b18:	2d00      	cmp	r5, #0
 8007b1a:	f2c0 8095 	blt.w	8007c48 <_printf_i+0x20c>
 8007b1e:	6821      	ldr	r1, [r4, #0]
 8007b20:	f021 0104 	bic.w	r1, r1, #4
 8007b24:	6021      	str	r1, [r4, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d13d      	bne.n	8007ba6 <_printf_i+0x16a>
 8007b2a:	2d00      	cmp	r5, #0
 8007b2c:	f040 808e 	bne.w	8007c4c <_printf_i+0x210>
 8007b30:	4665      	mov	r5, ip
 8007b32:	2a08      	cmp	r2, #8
 8007b34:	d10b      	bne.n	8007b4e <_printf_i+0x112>
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	07db      	lsls	r3, r3, #31
 8007b3a:	d508      	bpl.n	8007b4e <_printf_i+0x112>
 8007b3c:	6923      	ldr	r3, [r4, #16]
 8007b3e:	6862      	ldr	r2, [r4, #4]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	bfde      	ittt	le
 8007b44:	2330      	movle	r3, #48	; 0x30
 8007b46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b4a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007b4e:	ebac 0305 	sub.w	r3, ip, r5
 8007b52:	6123      	str	r3, [r4, #16]
 8007b54:	f8cd 8000 	str.w	r8, [sp]
 8007b58:	463b      	mov	r3, r7
 8007b5a:	aa03      	add	r2, sp, #12
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f7ff fef6 	bl	8007950 <_printf_common>
 8007b64:	3001      	adds	r0, #1
 8007b66:	d14d      	bne.n	8007c04 <_printf_i+0x1c8>
 8007b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b6c:	b005      	add	sp, #20
 8007b6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b72:	4839      	ldr	r0, [pc, #228]	; (8007c58 <_printf_i+0x21c>)
 8007b74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007b78:	6813      	ldr	r3, [r2, #0]
 8007b7a:	6821      	ldr	r1, [r4, #0]
 8007b7c:	1d1d      	adds	r5, r3, #4
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6015      	str	r5, [r2, #0]
 8007b82:	060a      	lsls	r2, r1, #24
 8007b84:	d50b      	bpl.n	8007b9e <_printf_i+0x162>
 8007b86:	07ca      	lsls	r2, r1, #31
 8007b88:	bf44      	itt	mi
 8007b8a:	f041 0120 	orrmi.w	r1, r1, #32
 8007b8e:	6021      	strmi	r1, [r4, #0]
 8007b90:	b91b      	cbnz	r3, 8007b9a <_printf_i+0x15e>
 8007b92:	6822      	ldr	r2, [r4, #0]
 8007b94:	f022 0220 	bic.w	r2, r2, #32
 8007b98:	6022      	str	r2, [r4, #0]
 8007b9a:	2210      	movs	r2, #16
 8007b9c:	e7b7      	b.n	8007b0e <_printf_i+0xd2>
 8007b9e:	064d      	lsls	r5, r1, #25
 8007ba0:	bf48      	it	mi
 8007ba2:	b29b      	uxthmi	r3, r3
 8007ba4:	e7ef      	b.n	8007b86 <_printf_i+0x14a>
 8007ba6:	4665      	mov	r5, ip
 8007ba8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bac:	fb02 3311 	mls	r3, r2, r1, r3
 8007bb0:	5cc3      	ldrb	r3, [r0, r3]
 8007bb2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	2900      	cmp	r1, #0
 8007bba:	d1f5      	bne.n	8007ba8 <_printf_i+0x16c>
 8007bbc:	e7b9      	b.n	8007b32 <_printf_i+0xf6>
 8007bbe:	6813      	ldr	r3, [r2, #0]
 8007bc0:	6825      	ldr	r5, [r4, #0]
 8007bc2:	6961      	ldr	r1, [r4, #20]
 8007bc4:	1d18      	adds	r0, r3, #4
 8007bc6:	6010      	str	r0, [r2, #0]
 8007bc8:	0628      	lsls	r0, r5, #24
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	d501      	bpl.n	8007bd2 <_printf_i+0x196>
 8007bce:	6019      	str	r1, [r3, #0]
 8007bd0:	e002      	b.n	8007bd8 <_printf_i+0x19c>
 8007bd2:	066a      	lsls	r2, r5, #25
 8007bd4:	d5fb      	bpl.n	8007bce <_printf_i+0x192>
 8007bd6:	8019      	strh	r1, [r3, #0]
 8007bd8:	2300      	movs	r3, #0
 8007bda:	6123      	str	r3, [r4, #16]
 8007bdc:	4665      	mov	r5, ip
 8007bde:	e7b9      	b.n	8007b54 <_printf_i+0x118>
 8007be0:	6813      	ldr	r3, [r2, #0]
 8007be2:	1d19      	adds	r1, r3, #4
 8007be4:	6011      	str	r1, [r2, #0]
 8007be6:	681d      	ldr	r5, [r3, #0]
 8007be8:	6862      	ldr	r2, [r4, #4]
 8007bea:	2100      	movs	r1, #0
 8007bec:	4628      	mov	r0, r5
 8007bee:	f7f8 faff 	bl	80001f0 <memchr>
 8007bf2:	b108      	cbz	r0, 8007bf8 <_printf_i+0x1bc>
 8007bf4:	1b40      	subs	r0, r0, r5
 8007bf6:	6060      	str	r0, [r4, #4]
 8007bf8:	6863      	ldr	r3, [r4, #4]
 8007bfa:	6123      	str	r3, [r4, #16]
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c02:	e7a7      	b.n	8007b54 <_printf_i+0x118>
 8007c04:	6923      	ldr	r3, [r4, #16]
 8007c06:	462a      	mov	r2, r5
 8007c08:	4639      	mov	r1, r7
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	47c0      	blx	r8
 8007c0e:	3001      	adds	r0, #1
 8007c10:	d0aa      	beq.n	8007b68 <_printf_i+0x12c>
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	079b      	lsls	r3, r3, #30
 8007c16:	d413      	bmi.n	8007c40 <_printf_i+0x204>
 8007c18:	68e0      	ldr	r0, [r4, #12]
 8007c1a:	9b03      	ldr	r3, [sp, #12]
 8007c1c:	4298      	cmp	r0, r3
 8007c1e:	bfb8      	it	lt
 8007c20:	4618      	movlt	r0, r3
 8007c22:	e7a3      	b.n	8007b6c <_printf_i+0x130>
 8007c24:	2301      	movs	r3, #1
 8007c26:	464a      	mov	r2, r9
 8007c28:	4639      	mov	r1, r7
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	47c0      	blx	r8
 8007c2e:	3001      	adds	r0, #1
 8007c30:	d09a      	beq.n	8007b68 <_printf_i+0x12c>
 8007c32:	3501      	adds	r5, #1
 8007c34:	68e3      	ldr	r3, [r4, #12]
 8007c36:	9a03      	ldr	r2, [sp, #12]
 8007c38:	1a9b      	subs	r3, r3, r2
 8007c3a:	42ab      	cmp	r3, r5
 8007c3c:	dcf2      	bgt.n	8007c24 <_printf_i+0x1e8>
 8007c3e:	e7eb      	b.n	8007c18 <_printf_i+0x1dc>
 8007c40:	2500      	movs	r5, #0
 8007c42:	f104 0919 	add.w	r9, r4, #25
 8007c46:	e7f5      	b.n	8007c34 <_printf_i+0x1f8>
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1ac      	bne.n	8007ba6 <_printf_i+0x16a>
 8007c4c:	7803      	ldrb	r3, [r0, #0]
 8007c4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c56:	e76c      	b.n	8007b32 <_printf_i+0xf6>
 8007c58:	0800af96 	.word	0x0800af96
 8007c5c:	0800afa7 	.word	0x0800afa7

08007c60 <_scanf_float>:
 8007c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c64:	469a      	mov	sl, r3
 8007c66:	688b      	ldr	r3, [r1, #8]
 8007c68:	4616      	mov	r6, r2
 8007c6a:	1e5a      	subs	r2, r3, #1
 8007c6c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007c70:	b087      	sub	sp, #28
 8007c72:	bf83      	ittte	hi
 8007c74:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007c78:	189b      	addhi	r3, r3, r2
 8007c7a:	9301      	strhi	r3, [sp, #4]
 8007c7c:	2300      	movls	r3, #0
 8007c7e:	bf86      	itte	hi
 8007c80:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007c84:	608b      	strhi	r3, [r1, #8]
 8007c86:	9301      	strls	r3, [sp, #4]
 8007c88:	680b      	ldr	r3, [r1, #0]
 8007c8a:	4688      	mov	r8, r1
 8007c8c:	f04f 0b00 	mov.w	fp, #0
 8007c90:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007c94:	f848 3b1c 	str.w	r3, [r8], #28
 8007c98:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8007c9c:	4607      	mov	r7, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	4645      	mov	r5, r8
 8007ca2:	465a      	mov	r2, fp
 8007ca4:	46d9      	mov	r9, fp
 8007ca6:	f8cd b008 	str.w	fp, [sp, #8]
 8007caa:	68a1      	ldr	r1, [r4, #8]
 8007cac:	b181      	cbz	r1, 8007cd0 <_scanf_float+0x70>
 8007cae:	6833      	ldr	r3, [r6, #0]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	2b49      	cmp	r3, #73	; 0x49
 8007cb4:	d071      	beq.n	8007d9a <_scanf_float+0x13a>
 8007cb6:	d84d      	bhi.n	8007d54 <_scanf_float+0xf4>
 8007cb8:	2b39      	cmp	r3, #57	; 0x39
 8007cba:	d840      	bhi.n	8007d3e <_scanf_float+0xde>
 8007cbc:	2b31      	cmp	r3, #49	; 0x31
 8007cbe:	f080 8088 	bcs.w	8007dd2 <_scanf_float+0x172>
 8007cc2:	2b2d      	cmp	r3, #45	; 0x2d
 8007cc4:	f000 8090 	beq.w	8007de8 <_scanf_float+0x188>
 8007cc8:	d815      	bhi.n	8007cf6 <_scanf_float+0x96>
 8007cca:	2b2b      	cmp	r3, #43	; 0x2b
 8007ccc:	f000 808c 	beq.w	8007de8 <_scanf_float+0x188>
 8007cd0:	f1b9 0f00 	cmp.w	r9, #0
 8007cd4:	d003      	beq.n	8007cde <_scanf_float+0x7e>
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	3a01      	subs	r2, #1
 8007ce0:	2a01      	cmp	r2, #1
 8007ce2:	f200 80ea 	bhi.w	8007eba <_scanf_float+0x25a>
 8007ce6:	4545      	cmp	r5, r8
 8007ce8:	f200 80dc 	bhi.w	8007ea4 <_scanf_float+0x244>
 8007cec:	2601      	movs	r6, #1
 8007cee:	4630      	mov	r0, r6
 8007cf0:	b007      	add	sp, #28
 8007cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf6:	2b2e      	cmp	r3, #46	; 0x2e
 8007cf8:	f000 809f 	beq.w	8007e3a <_scanf_float+0x1da>
 8007cfc:	2b30      	cmp	r3, #48	; 0x30
 8007cfe:	d1e7      	bne.n	8007cd0 <_scanf_float+0x70>
 8007d00:	6820      	ldr	r0, [r4, #0]
 8007d02:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007d06:	d064      	beq.n	8007dd2 <_scanf_float+0x172>
 8007d08:	9b01      	ldr	r3, [sp, #4]
 8007d0a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8007d0e:	6020      	str	r0, [r4, #0]
 8007d10:	f109 0901 	add.w	r9, r9, #1
 8007d14:	b11b      	cbz	r3, 8007d1e <_scanf_float+0xbe>
 8007d16:	3b01      	subs	r3, #1
 8007d18:	3101      	adds	r1, #1
 8007d1a:	9301      	str	r3, [sp, #4]
 8007d1c:	60a1      	str	r1, [r4, #8]
 8007d1e:	68a3      	ldr	r3, [r4, #8]
 8007d20:	3b01      	subs	r3, #1
 8007d22:	60a3      	str	r3, [r4, #8]
 8007d24:	6923      	ldr	r3, [r4, #16]
 8007d26:	3301      	adds	r3, #1
 8007d28:	6123      	str	r3, [r4, #16]
 8007d2a:	6873      	ldr	r3, [r6, #4]
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	6073      	str	r3, [r6, #4]
 8007d32:	f340 80ac 	ble.w	8007e8e <_scanf_float+0x22e>
 8007d36:	6833      	ldr	r3, [r6, #0]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	6033      	str	r3, [r6, #0]
 8007d3c:	e7b5      	b.n	8007caa <_scanf_float+0x4a>
 8007d3e:	2b45      	cmp	r3, #69	; 0x45
 8007d40:	f000 8085 	beq.w	8007e4e <_scanf_float+0x1ee>
 8007d44:	2b46      	cmp	r3, #70	; 0x46
 8007d46:	d06a      	beq.n	8007e1e <_scanf_float+0x1be>
 8007d48:	2b41      	cmp	r3, #65	; 0x41
 8007d4a:	d1c1      	bne.n	8007cd0 <_scanf_float+0x70>
 8007d4c:	2a01      	cmp	r2, #1
 8007d4e:	d1bf      	bne.n	8007cd0 <_scanf_float+0x70>
 8007d50:	2202      	movs	r2, #2
 8007d52:	e046      	b.n	8007de2 <_scanf_float+0x182>
 8007d54:	2b65      	cmp	r3, #101	; 0x65
 8007d56:	d07a      	beq.n	8007e4e <_scanf_float+0x1ee>
 8007d58:	d818      	bhi.n	8007d8c <_scanf_float+0x12c>
 8007d5a:	2b54      	cmp	r3, #84	; 0x54
 8007d5c:	d066      	beq.n	8007e2c <_scanf_float+0x1cc>
 8007d5e:	d811      	bhi.n	8007d84 <_scanf_float+0x124>
 8007d60:	2b4e      	cmp	r3, #78	; 0x4e
 8007d62:	d1b5      	bne.n	8007cd0 <_scanf_float+0x70>
 8007d64:	2a00      	cmp	r2, #0
 8007d66:	d146      	bne.n	8007df6 <_scanf_float+0x196>
 8007d68:	f1b9 0f00 	cmp.w	r9, #0
 8007d6c:	d145      	bne.n	8007dfa <_scanf_float+0x19a>
 8007d6e:	6821      	ldr	r1, [r4, #0]
 8007d70:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007d74:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007d78:	d13f      	bne.n	8007dfa <_scanf_float+0x19a>
 8007d7a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007d7e:	6021      	str	r1, [r4, #0]
 8007d80:	2201      	movs	r2, #1
 8007d82:	e02e      	b.n	8007de2 <_scanf_float+0x182>
 8007d84:	2b59      	cmp	r3, #89	; 0x59
 8007d86:	d01e      	beq.n	8007dc6 <_scanf_float+0x166>
 8007d88:	2b61      	cmp	r3, #97	; 0x61
 8007d8a:	e7de      	b.n	8007d4a <_scanf_float+0xea>
 8007d8c:	2b6e      	cmp	r3, #110	; 0x6e
 8007d8e:	d0e9      	beq.n	8007d64 <_scanf_float+0x104>
 8007d90:	d815      	bhi.n	8007dbe <_scanf_float+0x15e>
 8007d92:	2b66      	cmp	r3, #102	; 0x66
 8007d94:	d043      	beq.n	8007e1e <_scanf_float+0x1be>
 8007d96:	2b69      	cmp	r3, #105	; 0x69
 8007d98:	d19a      	bne.n	8007cd0 <_scanf_float+0x70>
 8007d9a:	f1bb 0f00 	cmp.w	fp, #0
 8007d9e:	d138      	bne.n	8007e12 <_scanf_float+0x1b2>
 8007da0:	f1b9 0f00 	cmp.w	r9, #0
 8007da4:	d197      	bne.n	8007cd6 <_scanf_float+0x76>
 8007da6:	6821      	ldr	r1, [r4, #0]
 8007da8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007dac:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007db0:	d195      	bne.n	8007cde <_scanf_float+0x7e>
 8007db2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007db6:	6021      	str	r1, [r4, #0]
 8007db8:	f04f 0b01 	mov.w	fp, #1
 8007dbc:	e011      	b.n	8007de2 <_scanf_float+0x182>
 8007dbe:	2b74      	cmp	r3, #116	; 0x74
 8007dc0:	d034      	beq.n	8007e2c <_scanf_float+0x1cc>
 8007dc2:	2b79      	cmp	r3, #121	; 0x79
 8007dc4:	d184      	bne.n	8007cd0 <_scanf_float+0x70>
 8007dc6:	f1bb 0f07 	cmp.w	fp, #7
 8007dca:	d181      	bne.n	8007cd0 <_scanf_float+0x70>
 8007dcc:	f04f 0b08 	mov.w	fp, #8
 8007dd0:	e007      	b.n	8007de2 <_scanf_float+0x182>
 8007dd2:	eb12 0f0b 	cmn.w	r2, fp
 8007dd6:	f47f af7b 	bne.w	8007cd0 <_scanf_float+0x70>
 8007dda:	6821      	ldr	r1, [r4, #0]
 8007ddc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8007de0:	6021      	str	r1, [r4, #0]
 8007de2:	702b      	strb	r3, [r5, #0]
 8007de4:	3501      	adds	r5, #1
 8007de6:	e79a      	b.n	8007d1e <_scanf_float+0xbe>
 8007de8:	6821      	ldr	r1, [r4, #0]
 8007dea:	0608      	lsls	r0, r1, #24
 8007dec:	f57f af70 	bpl.w	8007cd0 <_scanf_float+0x70>
 8007df0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007df4:	e7f4      	b.n	8007de0 <_scanf_float+0x180>
 8007df6:	2a02      	cmp	r2, #2
 8007df8:	d047      	beq.n	8007e8a <_scanf_float+0x22a>
 8007dfa:	f1bb 0f01 	cmp.w	fp, #1
 8007dfe:	d003      	beq.n	8007e08 <_scanf_float+0x1a8>
 8007e00:	f1bb 0f04 	cmp.w	fp, #4
 8007e04:	f47f af64 	bne.w	8007cd0 <_scanf_float+0x70>
 8007e08:	f10b 0b01 	add.w	fp, fp, #1
 8007e0c:	fa5f fb8b 	uxtb.w	fp, fp
 8007e10:	e7e7      	b.n	8007de2 <_scanf_float+0x182>
 8007e12:	f1bb 0f03 	cmp.w	fp, #3
 8007e16:	d0f7      	beq.n	8007e08 <_scanf_float+0x1a8>
 8007e18:	f1bb 0f05 	cmp.w	fp, #5
 8007e1c:	e7f2      	b.n	8007e04 <_scanf_float+0x1a4>
 8007e1e:	f1bb 0f02 	cmp.w	fp, #2
 8007e22:	f47f af55 	bne.w	8007cd0 <_scanf_float+0x70>
 8007e26:	f04f 0b03 	mov.w	fp, #3
 8007e2a:	e7da      	b.n	8007de2 <_scanf_float+0x182>
 8007e2c:	f1bb 0f06 	cmp.w	fp, #6
 8007e30:	f47f af4e 	bne.w	8007cd0 <_scanf_float+0x70>
 8007e34:	f04f 0b07 	mov.w	fp, #7
 8007e38:	e7d3      	b.n	8007de2 <_scanf_float+0x182>
 8007e3a:	6821      	ldr	r1, [r4, #0]
 8007e3c:	0588      	lsls	r0, r1, #22
 8007e3e:	f57f af47 	bpl.w	8007cd0 <_scanf_float+0x70>
 8007e42:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8007e46:	6021      	str	r1, [r4, #0]
 8007e48:	f8cd 9008 	str.w	r9, [sp, #8]
 8007e4c:	e7c9      	b.n	8007de2 <_scanf_float+0x182>
 8007e4e:	6821      	ldr	r1, [r4, #0]
 8007e50:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8007e54:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007e58:	d006      	beq.n	8007e68 <_scanf_float+0x208>
 8007e5a:	0548      	lsls	r0, r1, #21
 8007e5c:	f57f af38 	bpl.w	8007cd0 <_scanf_float+0x70>
 8007e60:	f1b9 0f00 	cmp.w	r9, #0
 8007e64:	f43f af3b 	beq.w	8007cde <_scanf_float+0x7e>
 8007e68:	0588      	lsls	r0, r1, #22
 8007e6a:	bf58      	it	pl
 8007e6c:	9802      	ldrpl	r0, [sp, #8]
 8007e6e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007e72:	bf58      	it	pl
 8007e74:	eba9 0000 	subpl.w	r0, r9, r0
 8007e78:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8007e7c:	bf58      	it	pl
 8007e7e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8007e82:	6021      	str	r1, [r4, #0]
 8007e84:	f04f 0900 	mov.w	r9, #0
 8007e88:	e7ab      	b.n	8007de2 <_scanf_float+0x182>
 8007e8a:	2203      	movs	r2, #3
 8007e8c:	e7a9      	b.n	8007de2 <_scanf_float+0x182>
 8007e8e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007e92:	9205      	str	r2, [sp, #20]
 8007e94:	4631      	mov	r1, r6
 8007e96:	4638      	mov	r0, r7
 8007e98:	4798      	blx	r3
 8007e9a:	9a05      	ldr	r2, [sp, #20]
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	f43f af04 	beq.w	8007caa <_scanf_float+0x4a>
 8007ea2:	e715      	b.n	8007cd0 <_scanf_float+0x70>
 8007ea4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ea8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007eac:	4632      	mov	r2, r6
 8007eae:	4638      	mov	r0, r7
 8007eb0:	4798      	blx	r3
 8007eb2:	6923      	ldr	r3, [r4, #16]
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	6123      	str	r3, [r4, #16]
 8007eb8:	e715      	b.n	8007ce6 <_scanf_float+0x86>
 8007eba:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8007ebe:	2b06      	cmp	r3, #6
 8007ec0:	d80a      	bhi.n	8007ed8 <_scanf_float+0x278>
 8007ec2:	f1bb 0f02 	cmp.w	fp, #2
 8007ec6:	d968      	bls.n	8007f9a <_scanf_float+0x33a>
 8007ec8:	f1ab 0b03 	sub.w	fp, fp, #3
 8007ecc:	fa5f fb8b 	uxtb.w	fp, fp
 8007ed0:	eba5 0b0b 	sub.w	fp, r5, fp
 8007ed4:	455d      	cmp	r5, fp
 8007ed6:	d14b      	bne.n	8007f70 <_scanf_float+0x310>
 8007ed8:	6823      	ldr	r3, [r4, #0]
 8007eda:	05da      	lsls	r2, r3, #23
 8007edc:	d51f      	bpl.n	8007f1e <_scanf_float+0x2be>
 8007ede:	055b      	lsls	r3, r3, #21
 8007ee0:	d468      	bmi.n	8007fb4 <_scanf_float+0x354>
 8007ee2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007ee6:	6923      	ldr	r3, [r4, #16]
 8007ee8:	2965      	cmp	r1, #101	; 0x65
 8007eea:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007eee:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8007ef2:	6123      	str	r3, [r4, #16]
 8007ef4:	d00d      	beq.n	8007f12 <_scanf_float+0x2b2>
 8007ef6:	2945      	cmp	r1, #69	; 0x45
 8007ef8:	d00b      	beq.n	8007f12 <_scanf_float+0x2b2>
 8007efa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007efe:	4632      	mov	r2, r6
 8007f00:	4638      	mov	r0, r7
 8007f02:	4798      	blx	r3
 8007f04:	6923      	ldr	r3, [r4, #16]
 8007f06:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	f1a5 0b02 	sub.w	fp, r5, #2
 8007f10:	6123      	str	r3, [r4, #16]
 8007f12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f16:	4632      	mov	r2, r6
 8007f18:	4638      	mov	r0, r7
 8007f1a:	4798      	blx	r3
 8007f1c:	465d      	mov	r5, fp
 8007f1e:	6826      	ldr	r6, [r4, #0]
 8007f20:	f016 0610 	ands.w	r6, r6, #16
 8007f24:	d17a      	bne.n	800801c <_scanf_float+0x3bc>
 8007f26:	702e      	strb	r6, [r5, #0]
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f32:	d142      	bne.n	8007fba <_scanf_float+0x35a>
 8007f34:	9b02      	ldr	r3, [sp, #8]
 8007f36:	eba9 0303 	sub.w	r3, r9, r3
 8007f3a:	425a      	negs	r2, r3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d149      	bne.n	8007fd4 <_scanf_float+0x374>
 8007f40:	2200      	movs	r2, #0
 8007f42:	4641      	mov	r1, r8
 8007f44:	4638      	mov	r0, r7
 8007f46:	f000 fea3 	bl	8008c90 <_strtod_r>
 8007f4a:	6825      	ldr	r5, [r4, #0]
 8007f4c:	f8da 3000 	ldr.w	r3, [sl]
 8007f50:	f015 0f02 	tst.w	r5, #2
 8007f54:	f103 0204 	add.w	r2, r3, #4
 8007f58:	ec59 8b10 	vmov	r8, r9, d0
 8007f5c:	f8ca 2000 	str.w	r2, [sl]
 8007f60:	d043      	beq.n	8007fea <_scanf_float+0x38a>
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	e9c3 8900 	strd	r8, r9, [r3]
 8007f68:	68e3      	ldr	r3, [r4, #12]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	60e3      	str	r3, [r4, #12]
 8007f6e:	e6be      	b.n	8007cee <_scanf_float+0x8e>
 8007f70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f74:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007f78:	4632      	mov	r2, r6
 8007f7a:	4638      	mov	r0, r7
 8007f7c:	4798      	blx	r3
 8007f7e:	6923      	ldr	r3, [r4, #16]
 8007f80:	3b01      	subs	r3, #1
 8007f82:	6123      	str	r3, [r4, #16]
 8007f84:	e7a6      	b.n	8007ed4 <_scanf_float+0x274>
 8007f86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f8a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007f8e:	4632      	mov	r2, r6
 8007f90:	4638      	mov	r0, r7
 8007f92:	4798      	blx	r3
 8007f94:	6923      	ldr	r3, [r4, #16]
 8007f96:	3b01      	subs	r3, #1
 8007f98:	6123      	str	r3, [r4, #16]
 8007f9a:	4545      	cmp	r5, r8
 8007f9c:	d8f3      	bhi.n	8007f86 <_scanf_float+0x326>
 8007f9e:	e6a5      	b.n	8007cec <_scanf_float+0x8c>
 8007fa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fa4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007fa8:	4632      	mov	r2, r6
 8007faa:	4638      	mov	r0, r7
 8007fac:	4798      	blx	r3
 8007fae:	6923      	ldr	r3, [r4, #16]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	6123      	str	r3, [r4, #16]
 8007fb4:	4545      	cmp	r5, r8
 8007fb6:	d8f3      	bhi.n	8007fa0 <_scanf_float+0x340>
 8007fb8:	e698      	b.n	8007cec <_scanf_float+0x8c>
 8007fba:	9b03      	ldr	r3, [sp, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d0bf      	beq.n	8007f40 <_scanf_float+0x2e0>
 8007fc0:	9904      	ldr	r1, [sp, #16]
 8007fc2:	230a      	movs	r3, #10
 8007fc4:	4632      	mov	r2, r6
 8007fc6:	3101      	adds	r1, #1
 8007fc8:	4638      	mov	r0, r7
 8007fca:	f000 feed 	bl	8008da8 <_strtol_r>
 8007fce:	9b03      	ldr	r3, [sp, #12]
 8007fd0:	9d04      	ldr	r5, [sp, #16]
 8007fd2:	1ac2      	subs	r2, r0, r3
 8007fd4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007fd8:	429d      	cmp	r5, r3
 8007fda:	bf28      	it	cs
 8007fdc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8007fe0:	490f      	ldr	r1, [pc, #60]	; (8008020 <_scanf_float+0x3c0>)
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	f000 f824 	bl	8008030 <siprintf>
 8007fe8:	e7aa      	b.n	8007f40 <_scanf_float+0x2e0>
 8007fea:	f015 0504 	ands.w	r5, r5, #4
 8007fee:	d1b8      	bne.n	8007f62 <_scanf_float+0x302>
 8007ff0:	681f      	ldr	r7, [r3, #0]
 8007ff2:	ee10 2a10 	vmov	r2, s0
 8007ff6:	464b      	mov	r3, r9
 8007ff8:	ee10 0a10 	vmov	r0, s0
 8007ffc:	4649      	mov	r1, r9
 8007ffe:	f7f8 fd9d 	bl	8000b3c <__aeabi_dcmpun>
 8008002:	b128      	cbz	r0, 8008010 <_scanf_float+0x3b0>
 8008004:	4628      	mov	r0, r5
 8008006:	f000 f80d 	bl	8008024 <nanf>
 800800a:	ed87 0a00 	vstr	s0, [r7]
 800800e:	e7ab      	b.n	8007f68 <_scanf_float+0x308>
 8008010:	4640      	mov	r0, r8
 8008012:	4649      	mov	r1, r9
 8008014:	f7f8 fdf0 	bl	8000bf8 <__aeabi_d2f>
 8008018:	6038      	str	r0, [r7, #0]
 800801a:	e7a5      	b.n	8007f68 <_scanf_float+0x308>
 800801c:	2600      	movs	r6, #0
 800801e:	e666      	b.n	8007cee <_scanf_float+0x8e>
 8008020:	0800afb8 	.word	0x0800afb8

08008024 <nanf>:
 8008024:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800802c <nanf+0x8>
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	7fc00000 	.word	0x7fc00000

08008030 <siprintf>:
 8008030:	b40e      	push	{r1, r2, r3}
 8008032:	b500      	push	{lr}
 8008034:	b09c      	sub	sp, #112	; 0x70
 8008036:	ab1d      	add	r3, sp, #116	; 0x74
 8008038:	9002      	str	r0, [sp, #8]
 800803a:	9006      	str	r0, [sp, #24]
 800803c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008040:	4809      	ldr	r0, [pc, #36]	; (8008068 <siprintf+0x38>)
 8008042:	9107      	str	r1, [sp, #28]
 8008044:	9104      	str	r1, [sp, #16]
 8008046:	4909      	ldr	r1, [pc, #36]	; (800806c <siprintf+0x3c>)
 8008048:	f853 2b04 	ldr.w	r2, [r3], #4
 800804c:	9105      	str	r1, [sp, #20]
 800804e:	6800      	ldr	r0, [r0, #0]
 8008050:	9301      	str	r3, [sp, #4]
 8008052:	a902      	add	r1, sp, #8
 8008054:	f002 fd64 	bl	800ab20 <_svfiprintf_r>
 8008058:	9b02      	ldr	r3, [sp, #8]
 800805a:	2200      	movs	r2, #0
 800805c:	701a      	strb	r2, [r3, #0]
 800805e:	b01c      	add	sp, #112	; 0x70
 8008060:	f85d eb04 	ldr.w	lr, [sp], #4
 8008064:	b003      	add	sp, #12
 8008066:	4770      	bx	lr
 8008068:	20000014 	.word	0x20000014
 800806c:	ffff0208 	.word	0xffff0208

08008070 <sulp>:
 8008070:	b570      	push	{r4, r5, r6, lr}
 8008072:	4604      	mov	r4, r0
 8008074:	460d      	mov	r5, r1
 8008076:	ec45 4b10 	vmov	d0, r4, r5
 800807a:	4616      	mov	r6, r2
 800807c:	f002 fb0c 	bl	800a698 <__ulp>
 8008080:	ec51 0b10 	vmov	r0, r1, d0
 8008084:	b17e      	cbz	r6, 80080a6 <sulp+0x36>
 8008086:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800808a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800808e:	2b00      	cmp	r3, #0
 8008090:	dd09      	ble.n	80080a6 <sulp+0x36>
 8008092:	051b      	lsls	r3, r3, #20
 8008094:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008098:	2400      	movs	r4, #0
 800809a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800809e:	4622      	mov	r2, r4
 80080a0:	462b      	mov	r3, r5
 80080a2:	f7f8 fab1 	bl	8000608 <__aeabi_dmul>
 80080a6:	bd70      	pop	{r4, r5, r6, pc}

080080a8 <_strtod_l>:
 80080a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ac:	461f      	mov	r7, r3
 80080ae:	b0a1      	sub	sp, #132	; 0x84
 80080b0:	2300      	movs	r3, #0
 80080b2:	4681      	mov	r9, r0
 80080b4:	4638      	mov	r0, r7
 80080b6:	460e      	mov	r6, r1
 80080b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80080ba:	931c      	str	r3, [sp, #112]	; 0x70
 80080bc:	f001 fff5 	bl	800a0aa <__localeconv_l>
 80080c0:	4680      	mov	r8, r0
 80080c2:	6800      	ldr	r0, [r0, #0]
 80080c4:	f7f8 f88c 	bl	80001e0 <strlen>
 80080c8:	f04f 0a00 	mov.w	sl, #0
 80080cc:	4604      	mov	r4, r0
 80080ce:	f04f 0b00 	mov.w	fp, #0
 80080d2:	961b      	str	r6, [sp, #108]	; 0x6c
 80080d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080d6:	781a      	ldrb	r2, [r3, #0]
 80080d8:	2a0d      	cmp	r2, #13
 80080da:	d832      	bhi.n	8008142 <_strtod_l+0x9a>
 80080dc:	2a09      	cmp	r2, #9
 80080de:	d236      	bcs.n	800814e <_strtod_l+0xa6>
 80080e0:	2a00      	cmp	r2, #0
 80080e2:	d03e      	beq.n	8008162 <_strtod_l+0xba>
 80080e4:	2300      	movs	r3, #0
 80080e6:	930d      	str	r3, [sp, #52]	; 0x34
 80080e8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80080ea:	782b      	ldrb	r3, [r5, #0]
 80080ec:	2b30      	cmp	r3, #48	; 0x30
 80080ee:	f040 80ac 	bne.w	800824a <_strtod_l+0x1a2>
 80080f2:	786b      	ldrb	r3, [r5, #1]
 80080f4:	2b58      	cmp	r3, #88	; 0x58
 80080f6:	d001      	beq.n	80080fc <_strtod_l+0x54>
 80080f8:	2b78      	cmp	r3, #120	; 0x78
 80080fa:	d167      	bne.n	80081cc <_strtod_l+0x124>
 80080fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080fe:	9301      	str	r3, [sp, #4]
 8008100:	ab1c      	add	r3, sp, #112	; 0x70
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	9702      	str	r7, [sp, #8]
 8008106:	ab1d      	add	r3, sp, #116	; 0x74
 8008108:	4a88      	ldr	r2, [pc, #544]	; (800832c <_strtod_l+0x284>)
 800810a:	a91b      	add	r1, sp, #108	; 0x6c
 800810c:	4648      	mov	r0, r9
 800810e:	f001 fcf2 	bl	8009af6 <__gethex>
 8008112:	f010 0407 	ands.w	r4, r0, #7
 8008116:	4606      	mov	r6, r0
 8008118:	d005      	beq.n	8008126 <_strtod_l+0x7e>
 800811a:	2c06      	cmp	r4, #6
 800811c:	d12b      	bne.n	8008176 <_strtod_l+0xce>
 800811e:	3501      	adds	r5, #1
 8008120:	2300      	movs	r3, #0
 8008122:	951b      	str	r5, [sp, #108]	; 0x6c
 8008124:	930d      	str	r3, [sp, #52]	; 0x34
 8008126:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008128:	2b00      	cmp	r3, #0
 800812a:	f040 859a 	bne.w	8008c62 <_strtod_l+0xbba>
 800812e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008130:	b1e3      	cbz	r3, 800816c <_strtod_l+0xc4>
 8008132:	4652      	mov	r2, sl
 8008134:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008138:	ec43 2b10 	vmov	d0, r2, r3
 800813c:	b021      	add	sp, #132	; 0x84
 800813e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008142:	2a2b      	cmp	r2, #43	; 0x2b
 8008144:	d015      	beq.n	8008172 <_strtod_l+0xca>
 8008146:	2a2d      	cmp	r2, #45	; 0x2d
 8008148:	d004      	beq.n	8008154 <_strtod_l+0xac>
 800814a:	2a20      	cmp	r2, #32
 800814c:	d1ca      	bne.n	80080e4 <_strtod_l+0x3c>
 800814e:	3301      	adds	r3, #1
 8008150:	931b      	str	r3, [sp, #108]	; 0x6c
 8008152:	e7bf      	b.n	80080d4 <_strtod_l+0x2c>
 8008154:	2201      	movs	r2, #1
 8008156:	920d      	str	r2, [sp, #52]	; 0x34
 8008158:	1c5a      	adds	r2, r3, #1
 800815a:	921b      	str	r2, [sp, #108]	; 0x6c
 800815c:	785b      	ldrb	r3, [r3, #1]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1c2      	bne.n	80080e8 <_strtod_l+0x40>
 8008162:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008164:	961b      	str	r6, [sp, #108]	; 0x6c
 8008166:	2b00      	cmp	r3, #0
 8008168:	f040 8579 	bne.w	8008c5e <_strtod_l+0xbb6>
 800816c:	4652      	mov	r2, sl
 800816e:	465b      	mov	r3, fp
 8008170:	e7e2      	b.n	8008138 <_strtod_l+0x90>
 8008172:	2200      	movs	r2, #0
 8008174:	e7ef      	b.n	8008156 <_strtod_l+0xae>
 8008176:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008178:	b13a      	cbz	r2, 800818a <_strtod_l+0xe2>
 800817a:	2135      	movs	r1, #53	; 0x35
 800817c:	a81e      	add	r0, sp, #120	; 0x78
 800817e:	f002 fb83 	bl	800a888 <__copybits>
 8008182:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008184:	4648      	mov	r0, r9
 8008186:	f001 ffef 	bl	800a168 <_Bfree>
 800818a:	3c01      	subs	r4, #1
 800818c:	2c04      	cmp	r4, #4
 800818e:	d806      	bhi.n	800819e <_strtod_l+0xf6>
 8008190:	e8df f004 	tbb	[pc, r4]
 8008194:	1714030a 	.word	0x1714030a
 8008198:	0a          	.byte	0x0a
 8008199:	00          	.byte	0x00
 800819a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800819e:	0730      	lsls	r0, r6, #28
 80081a0:	d5c1      	bpl.n	8008126 <_strtod_l+0x7e>
 80081a2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80081a6:	e7be      	b.n	8008126 <_strtod_l+0x7e>
 80081a8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80081ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80081ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80081b2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80081b6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80081ba:	e7f0      	b.n	800819e <_strtod_l+0xf6>
 80081bc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008330 <_strtod_l+0x288>
 80081c0:	e7ed      	b.n	800819e <_strtod_l+0xf6>
 80081c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80081c6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80081ca:	e7e8      	b.n	800819e <_strtod_l+0xf6>
 80081cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081ce:	1c5a      	adds	r2, r3, #1
 80081d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80081d2:	785b      	ldrb	r3, [r3, #1]
 80081d4:	2b30      	cmp	r3, #48	; 0x30
 80081d6:	d0f9      	beq.n	80081cc <_strtod_l+0x124>
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d0a4      	beq.n	8008126 <_strtod_l+0x7e>
 80081dc:	2301      	movs	r3, #1
 80081de:	2500      	movs	r5, #0
 80081e0:	9306      	str	r3, [sp, #24]
 80081e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081e4:	9308      	str	r3, [sp, #32]
 80081e6:	9507      	str	r5, [sp, #28]
 80081e8:	9505      	str	r5, [sp, #20]
 80081ea:	220a      	movs	r2, #10
 80081ec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80081ee:	7807      	ldrb	r7, [r0, #0]
 80081f0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80081f4:	b2d9      	uxtb	r1, r3
 80081f6:	2909      	cmp	r1, #9
 80081f8:	d929      	bls.n	800824e <_strtod_l+0x1a6>
 80081fa:	4622      	mov	r2, r4
 80081fc:	f8d8 1000 	ldr.w	r1, [r8]
 8008200:	f002 fd96 	bl	800ad30 <strncmp>
 8008204:	2800      	cmp	r0, #0
 8008206:	d031      	beq.n	800826c <_strtod_l+0x1c4>
 8008208:	2000      	movs	r0, #0
 800820a:	9c05      	ldr	r4, [sp, #20]
 800820c:	9004      	str	r0, [sp, #16]
 800820e:	463b      	mov	r3, r7
 8008210:	4602      	mov	r2, r0
 8008212:	2b65      	cmp	r3, #101	; 0x65
 8008214:	d001      	beq.n	800821a <_strtod_l+0x172>
 8008216:	2b45      	cmp	r3, #69	; 0x45
 8008218:	d114      	bne.n	8008244 <_strtod_l+0x19c>
 800821a:	b924      	cbnz	r4, 8008226 <_strtod_l+0x17e>
 800821c:	b910      	cbnz	r0, 8008224 <_strtod_l+0x17c>
 800821e:	9b06      	ldr	r3, [sp, #24]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d09e      	beq.n	8008162 <_strtod_l+0xba>
 8008224:	2400      	movs	r4, #0
 8008226:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008228:	1c73      	adds	r3, r6, #1
 800822a:	931b      	str	r3, [sp, #108]	; 0x6c
 800822c:	7873      	ldrb	r3, [r6, #1]
 800822e:	2b2b      	cmp	r3, #43	; 0x2b
 8008230:	d078      	beq.n	8008324 <_strtod_l+0x27c>
 8008232:	2b2d      	cmp	r3, #45	; 0x2d
 8008234:	d070      	beq.n	8008318 <_strtod_l+0x270>
 8008236:	f04f 0c00 	mov.w	ip, #0
 800823a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800823e:	2f09      	cmp	r7, #9
 8008240:	d97c      	bls.n	800833c <_strtod_l+0x294>
 8008242:	961b      	str	r6, [sp, #108]	; 0x6c
 8008244:	f04f 0e00 	mov.w	lr, #0
 8008248:	e09a      	b.n	8008380 <_strtod_l+0x2d8>
 800824a:	2300      	movs	r3, #0
 800824c:	e7c7      	b.n	80081de <_strtod_l+0x136>
 800824e:	9905      	ldr	r1, [sp, #20]
 8008250:	2908      	cmp	r1, #8
 8008252:	bfdd      	ittte	le
 8008254:	9907      	ldrle	r1, [sp, #28]
 8008256:	fb02 3301 	mlale	r3, r2, r1, r3
 800825a:	9307      	strle	r3, [sp, #28]
 800825c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008260:	9b05      	ldr	r3, [sp, #20]
 8008262:	3001      	adds	r0, #1
 8008264:	3301      	adds	r3, #1
 8008266:	9305      	str	r3, [sp, #20]
 8008268:	901b      	str	r0, [sp, #108]	; 0x6c
 800826a:	e7bf      	b.n	80081ec <_strtod_l+0x144>
 800826c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800826e:	191a      	adds	r2, r3, r4
 8008270:	921b      	str	r2, [sp, #108]	; 0x6c
 8008272:	9a05      	ldr	r2, [sp, #20]
 8008274:	5d1b      	ldrb	r3, [r3, r4]
 8008276:	2a00      	cmp	r2, #0
 8008278:	d037      	beq.n	80082ea <_strtod_l+0x242>
 800827a:	9c05      	ldr	r4, [sp, #20]
 800827c:	4602      	mov	r2, r0
 800827e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008282:	2909      	cmp	r1, #9
 8008284:	d913      	bls.n	80082ae <_strtod_l+0x206>
 8008286:	2101      	movs	r1, #1
 8008288:	9104      	str	r1, [sp, #16]
 800828a:	e7c2      	b.n	8008212 <_strtod_l+0x16a>
 800828c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800828e:	1c5a      	adds	r2, r3, #1
 8008290:	921b      	str	r2, [sp, #108]	; 0x6c
 8008292:	785b      	ldrb	r3, [r3, #1]
 8008294:	3001      	adds	r0, #1
 8008296:	2b30      	cmp	r3, #48	; 0x30
 8008298:	d0f8      	beq.n	800828c <_strtod_l+0x1e4>
 800829a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800829e:	2a08      	cmp	r2, #8
 80082a0:	f200 84e4 	bhi.w	8008c6c <_strtod_l+0xbc4>
 80082a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80082a6:	9208      	str	r2, [sp, #32]
 80082a8:	4602      	mov	r2, r0
 80082aa:	2000      	movs	r0, #0
 80082ac:	4604      	mov	r4, r0
 80082ae:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80082b2:	f100 0101 	add.w	r1, r0, #1
 80082b6:	d012      	beq.n	80082de <_strtod_l+0x236>
 80082b8:	440a      	add	r2, r1
 80082ba:	eb00 0c04 	add.w	ip, r0, r4
 80082be:	4621      	mov	r1, r4
 80082c0:	270a      	movs	r7, #10
 80082c2:	458c      	cmp	ip, r1
 80082c4:	d113      	bne.n	80082ee <_strtod_l+0x246>
 80082c6:	1821      	adds	r1, r4, r0
 80082c8:	2908      	cmp	r1, #8
 80082ca:	f104 0401 	add.w	r4, r4, #1
 80082ce:	4404      	add	r4, r0
 80082d0:	dc19      	bgt.n	8008306 <_strtod_l+0x25e>
 80082d2:	9b07      	ldr	r3, [sp, #28]
 80082d4:	210a      	movs	r1, #10
 80082d6:	fb01 e303 	mla	r3, r1, r3, lr
 80082da:	9307      	str	r3, [sp, #28]
 80082dc:	2100      	movs	r1, #0
 80082de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082e0:	1c58      	adds	r0, r3, #1
 80082e2:	901b      	str	r0, [sp, #108]	; 0x6c
 80082e4:	785b      	ldrb	r3, [r3, #1]
 80082e6:	4608      	mov	r0, r1
 80082e8:	e7c9      	b.n	800827e <_strtod_l+0x1d6>
 80082ea:	9805      	ldr	r0, [sp, #20]
 80082ec:	e7d3      	b.n	8008296 <_strtod_l+0x1ee>
 80082ee:	2908      	cmp	r1, #8
 80082f0:	f101 0101 	add.w	r1, r1, #1
 80082f4:	dc03      	bgt.n	80082fe <_strtod_l+0x256>
 80082f6:	9b07      	ldr	r3, [sp, #28]
 80082f8:	437b      	muls	r3, r7
 80082fa:	9307      	str	r3, [sp, #28]
 80082fc:	e7e1      	b.n	80082c2 <_strtod_l+0x21a>
 80082fe:	2910      	cmp	r1, #16
 8008300:	bfd8      	it	le
 8008302:	437d      	mulle	r5, r7
 8008304:	e7dd      	b.n	80082c2 <_strtod_l+0x21a>
 8008306:	2c10      	cmp	r4, #16
 8008308:	bfdc      	itt	le
 800830a:	210a      	movle	r1, #10
 800830c:	fb01 e505 	mlale	r5, r1, r5, lr
 8008310:	e7e4      	b.n	80082dc <_strtod_l+0x234>
 8008312:	2301      	movs	r3, #1
 8008314:	9304      	str	r3, [sp, #16]
 8008316:	e781      	b.n	800821c <_strtod_l+0x174>
 8008318:	f04f 0c01 	mov.w	ip, #1
 800831c:	1cb3      	adds	r3, r6, #2
 800831e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008320:	78b3      	ldrb	r3, [r6, #2]
 8008322:	e78a      	b.n	800823a <_strtod_l+0x192>
 8008324:	f04f 0c00 	mov.w	ip, #0
 8008328:	e7f8      	b.n	800831c <_strtod_l+0x274>
 800832a:	bf00      	nop
 800832c:	0800afc0 	.word	0x0800afc0
 8008330:	7ff00000 	.word	0x7ff00000
 8008334:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008336:	1c5f      	adds	r7, r3, #1
 8008338:	971b      	str	r7, [sp, #108]	; 0x6c
 800833a:	785b      	ldrb	r3, [r3, #1]
 800833c:	2b30      	cmp	r3, #48	; 0x30
 800833e:	d0f9      	beq.n	8008334 <_strtod_l+0x28c>
 8008340:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8008344:	2f08      	cmp	r7, #8
 8008346:	f63f af7d 	bhi.w	8008244 <_strtod_l+0x19c>
 800834a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800834e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008350:	930a      	str	r3, [sp, #40]	; 0x28
 8008352:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008354:	1c5f      	adds	r7, r3, #1
 8008356:	971b      	str	r7, [sp, #108]	; 0x6c
 8008358:	785b      	ldrb	r3, [r3, #1]
 800835a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800835e:	f1b8 0f09 	cmp.w	r8, #9
 8008362:	d937      	bls.n	80083d4 <_strtod_l+0x32c>
 8008364:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008366:	1a7f      	subs	r7, r7, r1
 8008368:	2f08      	cmp	r7, #8
 800836a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800836e:	dc37      	bgt.n	80083e0 <_strtod_l+0x338>
 8008370:	45be      	cmp	lr, r7
 8008372:	bfa8      	it	ge
 8008374:	46be      	movge	lr, r7
 8008376:	f1bc 0f00 	cmp.w	ip, #0
 800837a:	d001      	beq.n	8008380 <_strtod_l+0x2d8>
 800837c:	f1ce 0e00 	rsb	lr, lr, #0
 8008380:	2c00      	cmp	r4, #0
 8008382:	d151      	bne.n	8008428 <_strtod_l+0x380>
 8008384:	2800      	cmp	r0, #0
 8008386:	f47f aece 	bne.w	8008126 <_strtod_l+0x7e>
 800838a:	9a06      	ldr	r2, [sp, #24]
 800838c:	2a00      	cmp	r2, #0
 800838e:	f47f aeca 	bne.w	8008126 <_strtod_l+0x7e>
 8008392:	9a04      	ldr	r2, [sp, #16]
 8008394:	2a00      	cmp	r2, #0
 8008396:	f47f aee4 	bne.w	8008162 <_strtod_l+0xba>
 800839a:	2b4e      	cmp	r3, #78	; 0x4e
 800839c:	d027      	beq.n	80083ee <_strtod_l+0x346>
 800839e:	dc21      	bgt.n	80083e4 <_strtod_l+0x33c>
 80083a0:	2b49      	cmp	r3, #73	; 0x49
 80083a2:	f47f aede 	bne.w	8008162 <_strtod_l+0xba>
 80083a6:	49a0      	ldr	r1, [pc, #640]	; (8008628 <_strtod_l+0x580>)
 80083a8:	a81b      	add	r0, sp, #108	; 0x6c
 80083aa:	f001 fdd7 	bl	8009f5c <__match>
 80083ae:	2800      	cmp	r0, #0
 80083b0:	f43f aed7 	beq.w	8008162 <_strtod_l+0xba>
 80083b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083b6:	499d      	ldr	r1, [pc, #628]	; (800862c <_strtod_l+0x584>)
 80083b8:	3b01      	subs	r3, #1
 80083ba:	a81b      	add	r0, sp, #108	; 0x6c
 80083bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80083be:	f001 fdcd 	bl	8009f5c <__match>
 80083c2:	b910      	cbnz	r0, 80083ca <_strtod_l+0x322>
 80083c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083c6:	3301      	adds	r3, #1
 80083c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80083ca:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008640 <_strtod_l+0x598>
 80083ce:	f04f 0a00 	mov.w	sl, #0
 80083d2:	e6a8      	b.n	8008126 <_strtod_l+0x7e>
 80083d4:	210a      	movs	r1, #10
 80083d6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80083da:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80083de:	e7b8      	b.n	8008352 <_strtod_l+0x2aa>
 80083e0:	46be      	mov	lr, r7
 80083e2:	e7c8      	b.n	8008376 <_strtod_l+0x2ce>
 80083e4:	2b69      	cmp	r3, #105	; 0x69
 80083e6:	d0de      	beq.n	80083a6 <_strtod_l+0x2fe>
 80083e8:	2b6e      	cmp	r3, #110	; 0x6e
 80083ea:	f47f aeba 	bne.w	8008162 <_strtod_l+0xba>
 80083ee:	4990      	ldr	r1, [pc, #576]	; (8008630 <_strtod_l+0x588>)
 80083f0:	a81b      	add	r0, sp, #108	; 0x6c
 80083f2:	f001 fdb3 	bl	8009f5c <__match>
 80083f6:	2800      	cmp	r0, #0
 80083f8:	f43f aeb3 	beq.w	8008162 <_strtod_l+0xba>
 80083fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	2b28      	cmp	r3, #40	; 0x28
 8008402:	d10e      	bne.n	8008422 <_strtod_l+0x37a>
 8008404:	aa1e      	add	r2, sp, #120	; 0x78
 8008406:	498b      	ldr	r1, [pc, #556]	; (8008634 <_strtod_l+0x58c>)
 8008408:	a81b      	add	r0, sp, #108	; 0x6c
 800840a:	f001 fdbb 	bl	8009f84 <__hexnan>
 800840e:	2805      	cmp	r0, #5
 8008410:	d107      	bne.n	8008422 <_strtod_l+0x37a>
 8008412:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008414:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008418:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800841c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008420:	e681      	b.n	8008126 <_strtod_l+0x7e>
 8008422:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008648 <_strtod_l+0x5a0>
 8008426:	e7d2      	b.n	80083ce <_strtod_l+0x326>
 8008428:	ebae 0302 	sub.w	r3, lr, r2
 800842c:	9306      	str	r3, [sp, #24]
 800842e:	9b05      	ldr	r3, [sp, #20]
 8008430:	9807      	ldr	r0, [sp, #28]
 8008432:	2b00      	cmp	r3, #0
 8008434:	bf08      	it	eq
 8008436:	4623      	moveq	r3, r4
 8008438:	2c10      	cmp	r4, #16
 800843a:	9305      	str	r3, [sp, #20]
 800843c:	46a0      	mov	r8, r4
 800843e:	bfa8      	it	ge
 8008440:	f04f 0810 	movge.w	r8, #16
 8008444:	f7f8 f866 	bl	8000514 <__aeabi_ui2d>
 8008448:	2c09      	cmp	r4, #9
 800844a:	4682      	mov	sl, r0
 800844c:	468b      	mov	fp, r1
 800844e:	dc13      	bgt.n	8008478 <_strtod_l+0x3d0>
 8008450:	9b06      	ldr	r3, [sp, #24]
 8008452:	2b00      	cmp	r3, #0
 8008454:	f43f ae67 	beq.w	8008126 <_strtod_l+0x7e>
 8008458:	9b06      	ldr	r3, [sp, #24]
 800845a:	dd7a      	ble.n	8008552 <_strtod_l+0x4aa>
 800845c:	2b16      	cmp	r3, #22
 800845e:	dc61      	bgt.n	8008524 <_strtod_l+0x47c>
 8008460:	4a75      	ldr	r2, [pc, #468]	; (8008638 <_strtod_l+0x590>)
 8008462:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008466:	e9de 0100 	ldrd	r0, r1, [lr]
 800846a:	4652      	mov	r2, sl
 800846c:	465b      	mov	r3, fp
 800846e:	f7f8 f8cb 	bl	8000608 <__aeabi_dmul>
 8008472:	4682      	mov	sl, r0
 8008474:	468b      	mov	fp, r1
 8008476:	e656      	b.n	8008126 <_strtod_l+0x7e>
 8008478:	4b6f      	ldr	r3, [pc, #444]	; (8008638 <_strtod_l+0x590>)
 800847a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800847e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008482:	f7f8 f8c1 	bl	8000608 <__aeabi_dmul>
 8008486:	4606      	mov	r6, r0
 8008488:	4628      	mov	r0, r5
 800848a:	460f      	mov	r7, r1
 800848c:	f7f8 f842 	bl	8000514 <__aeabi_ui2d>
 8008490:	4602      	mov	r2, r0
 8008492:	460b      	mov	r3, r1
 8008494:	4630      	mov	r0, r6
 8008496:	4639      	mov	r1, r7
 8008498:	f7f7 ff00 	bl	800029c <__adddf3>
 800849c:	2c0f      	cmp	r4, #15
 800849e:	4682      	mov	sl, r0
 80084a0:	468b      	mov	fp, r1
 80084a2:	ddd5      	ble.n	8008450 <_strtod_l+0x3a8>
 80084a4:	9b06      	ldr	r3, [sp, #24]
 80084a6:	eba4 0808 	sub.w	r8, r4, r8
 80084aa:	4498      	add	r8, r3
 80084ac:	f1b8 0f00 	cmp.w	r8, #0
 80084b0:	f340 8096 	ble.w	80085e0 <_strtod_l+0x538>
 80084b4:	f018 030f 	ands.w	r3, r8, #15
 80084b8:	d00a      	beq.n	80084d0 <_strtod_l+0x428>
 80084ba:	495f      	ldr	r1, [pc, #380]	; (8008638 <_strtod_l+0x590>)
 80084bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084c0:	4652      	mov	r2, sl
 80084c2:	465b      	mov	r3, fp
 80084c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084c8:	f7f8 f89e 	bl	8000608 <__aeabi_dmul>
 80084cc:	4682      	mov	sl, r0
 80084ce:	468b      	mov	fp, r1
 80084d0:	f038 080f 	bics.w	r8, r8, #15
 80084d4:	d073      	beq.n	80085be <_strtod_l+0x516>
 80084d6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80084da:	dd47      	ble.n	800856c <_strtod_l+0x4c4>
 80084dc:	2400      	movs	r4, #0
 80084de:	46a0      	mov	r8, r4
 80084e0:	9407      	str	r4, [sp, #28]
 80084e2:	9405      	str	r4, [sp, #20]
 80084e4:	2322      	movs	r3, #34	; 0x22
 80084e6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008640 <_strtod_l+0x598>
 80084ea:	f8c9 3000 	str.w	r3, [r9]
 80084ee:	f04f 0a00 	mov.w	sl, #0
 80084f2:	9b07      	ldr	r3, [sp, #28]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f43f ae16 	beq.w	8008126 <_strtod_l+0x7e>
 80084fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80084fc:	4648      	mov	r0, r9
 80084fe:	f001 fe33 	bl	800a168 <_Bfree>
 8008502:	9905      	ldr	r1, [sp, #20]
 8008504:	4648      	mov	r0, r9
 8008506:	f001 fe2f 	bl	800a168 <_Bfree>
 800850a:	4641      	mov	r1, r8
 800850c:	4648      	mov	r0, r9
 800850e:	f001 fe2b 	bl	800a168 <_Bfree>
 8008512:	9907      	ldr	r1, [sp, #28]
 8008514:	4648      	mov	r0, r9
 8008516:	f001 fe27 	bl	800a168 <_Bfree>
 800851a:	4621      	mov	r1, r4
 800851c:	4648      	mov	r0, r9
 800851e:	f001 fe23 	bl	800a168 <_Bfree>
 8008522:	e600      	b.n	8008126 <_strtod_l+0x7e>
 8008524:	9a06      	ldr	r2, [sp, #24]
 8008526:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800852a:	4293      	cmp	r3, r2
 800852c:	dbba      	blt.n	80084a4 <_strtod_l+0x3fc>
 800852e:	4d42      	ldr	r5, [pc, #264]	; (8008638 <_strtod_l+0x590>)
 8008530:	f1c4 040f 	rsb	r4, r4, #15
 8008534:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008538:	4652      	mov	r2, sl
 800853a:	465b      	mov	r3, fp
 800853c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008540:	f7f8 f862 	bl	8000608 <__aeabi_dmul>
 8008544:	9b06      	ldr	r3, [sp, #24]
 8008546:	1b1c      	subs	r4, r3, r4
 8008548:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800854c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008550:	e78d      	b.n	800846e <_strtod_l+0x3c6>
 8008552:	f113 0f16 	cmn.w	r3, #22
 8008556:	dba5      	blt.n	80084a4 <_strtod_l+0x3fc>
 8008558:	4a37      	ldr	r2, [pc, #220]	; (8008638 <_strtod_l+0x590>)
 800855a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800855e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8008562:	4650      	mov	r0, sl
 8008564:	4659      	mov	r1, fp
 8008566:	f7f8 f979 	bl	800085c <__aeabi_ddiv>
 800856a:	e782      	b.n	8008472 <_strtod_l+0x3ca>
 800856c:	2300      	movs	r3, #0
 800856e:	4e33      	ldr	r6, [pc, #204]	; (800863c <_strtod_l+0x594>)
 8008570:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008574:	4650      	mov	r0, sl
 8008576:	4659      	mov	r1, fp
 8008578:	461d      	mov	r5, r3
 800857a:	f1b8 0f01 	cmp.w	r8, #1
 800857e:	dc21      	bgt.n	80085c4 <_strtod_l+0x51c>
 8008580:	b10b      	cbz	r3, 8008586 <_strtod_l+0x4de>
 8008582:	4682      	mov	sl, r0
 8008584:	468b      	mov	fp, r1
 8008586:	4b2d      	ldr	r3, [pc, #180]	; (800863c <_strtod_l+0x594>)
 8008588:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800858c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008590:	4652      	mov	r2, sl
 8008592:	465b      	mov	r3, fp
 8008594:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008598:	f7f8 f836 	bl	8000608 <__aeabi_dmul>
 800859c:	4b28      	ldr	r3, [pc, #160]	; (8008640 <_strtod_l+0x598>)
 800859e:	460a      	mov	r2, r1
 80085a0:	400b      	ands	r3, r1
 80085a2:	4928      	ldr	r1, [pc, #160]	; (8008644 <_strtod_l+0x59c>)
 80085a4:	428b      	cmp	r3, r1
 80085a6:	4682      	mov	sl, r0
 80085a8:	d898      	bhi.n	80084dc <_strtod_l+0x434>
 80085aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80085ae:	428b      	cmp	r3, r1
 80085b0:	bf86      	itte	hi
 80085b2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800864c <_strtod_l+0x5a4>
 80085b6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80085ba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80085be:	2300      	movs	r3, #0
 80085c0:	9304      	str	r3, [sp, #16]
 80085c2:	e077      	b.n	80086b4 <_strtod_l+0x60c>
 80085c4:	f018 0f01 	tst.w	r8, #1
 80085c8:	d006      	beq.n	80085d8 <_strtod_l+0x530>
 80085ca:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	f7f8 f819 	bl	8000608 <__aeabi_dmul>
 80085d6:	2301      	movs	r3, #1
 80085d8:	3501      	adds	r5, #1
 80085da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80085de:	e7cc      	b.n	800857a <_strtod_l+0x4d2>
 80085e0:	d0ed      	beq.n	80085be <_strtod_l+0x516>
 80085e2:	f1c8 0800 	rsb	r8, r8, #0
 80085e6:	f018 020f 	ands.w	r2, r8, #15
 80085ea:	d00a      	beq.n	8008602 <_strtod_l+0x55a>
 80085ec:	4b12      	ldr	r3, [pc, #72]	; (8008638 <_strtod_l+0x590>)
 80085ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085f2:	4650      	mov	r0, sl
 80085f4:	4659      	mov	r1, fp
 80085f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fa:	f7f8 f92f 	bl	800085c <__aeabi_ddiv>
 80085fe:	4682      	mov	sl, r0
 8008600:	468b      	mov	fp, r1
 8008602:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008606:	d0da      	beq.n	80085be <_strtod_l+0x516>
 8008608:	f1b8 0f1f 	cmp.w	r8, #31
 800860c:	dd20      	ble.n	8008650 <_strtod_l+0x5a8>
 800860e:	2400      	movs	r4, #0
 8008610:	46a0      	mov	r8, r4
 8008612:	9407      	str	r4, [sp, #28]
 8008614:	9405      	str	r4, [sp, #20]
 8008616:	2322      	movs	r3, #34	; 0x22
 8008618:	f04f 0a00 	mov.w	sl, #0
 800861c:	f04f 0b00 	mov.w	fp, #0
 8008620:	f8c9 3000 	str.w	r3, [r9]
 8008624:	e765      	b.n	80084f2 <_strtod_l+0x44a>
 8008626:	bf00      	nop
 8008628:	0800af89 	.word	0x0800af89
 800862c:	0800b013 	.word	0x0800b013
 8008630:	0800af91 	.word	0x0800af91
 8008634:	0800afd4 	.word	0x0800afd4
 8008638:	0800b050 	.word	0x0800b050
 800863c:	0800b028 	.word	0x0800b028
 8008640:	7ff00000 	.word	0x7ff00000
 8008644:	7ca00000 	.word	0x7ca00000
 8008648:	fff80000 	.word	0xfff80000
 800864c:	7fefffff 	.word	0x7fefffff
 8008650:	f018 0310 	ands.w	r3, r8, #16
 8008654:	bf18      	it	ne
 8008656:	236a      	movne	r3, #106	; 0x6a
 8008658:	4da0      	ldr	r5, [pc, #640]	; (80088dc <_strtod_l+0x834>)
 800865a:	9304      	str	r3, [sp, #16]
 800865c:	4650      	mov	r0, sl
 800865e:	4659      	mov	r1, fp
 8008660:	2300      	movs	r3, #0
 8008662:	f1b8 0f00 	cmp.w	r8, #0
 8008666:	f300 810a 	bgt.w	800887e <_strtod_l+0x7d6>
 800866a:	b10b      	cbz	r3, 8008670 <_strtod_l+0x5c8>
 800866c:	4682      	mov	sl, r0
 800866e:	468b      	mov	fp, r1
 8008670:	9b04      	ldr	r3, [sp, #16]
 8008672:	b1bb      	cbz	r3, 80086a4 <_strtod_l+0x5fc>
 8008674:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008678:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800867c:	2b00      	cmp	r3, #0
 800867e:	4659      	mov	r1, fp
 8008680:	dd10      	ble.n	80086a4 <_strtod_l+0x5fc>
 8008682:	2b1f      	cmp	r3, #31
 8008684:	f340 8107 	ble.w	8008896 <_strtod_l+0x7ee>
 8008688:	2b34      	cmp	r3, #52	; 0x34
 800868a:	bfde      	ittt	le
 800868c:	3b20      	suble	r3, #32
 800868e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8008692:	fa02 f303 	lslle.w	r3, r2, r3
 8008696:	f04f 0a00 	mov.w	sl, #0
 800869a:	bfcc      	ite	gt
 800869c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80086a0:	ea03 0b01 	andle.w	fp, r3, r1
 80086a4:	2200      	movs	r2, #0
 80086a6:	2300      	movs	r3, #0
 80086a8:	4650      	mov	r0, sl
 80086aa:	4659      	mov	r1, fp
 80086ac:	f7f8 fa14 	bl	8000ad8 <__aeabi_dcmpeq>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	d1ac      	bne.n	800860e <_strtod_l+0x566>
 80086b4:	9b07      	ldr	r3, [sp, #28]
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	9a05      	ldr	r2, [sp, #20]
 80086ba:	9908      	ldr	r1, [sp, #32]
 80086bc:	4623      	mov	r3, r4
 80086be:	4648      	mov	r0, r9
 80086c0:	f001 fda4 	bl	800a20c <__s2b>
 80086c4:	9007      	str	r0, [sp, #28]
 80086c6:	2800      	cmp	r0, #0
 80086c8:	f43f af08 	beq.w	80084dc <_strtod_l+0x434>
 80086cc:	9a06      	ldr	r2, [sp, #24]
 80086ce:	9b06      	ldr	r3, [sp, #24]
 80086d0:	2a00      	cmp	r2, #0
 80086d2:	f1c3 0300 	rsb	r3, r3, #0
 80086d6:	bfa8      	it	ge
 80086d8:	2300      	movge	r3, #0
 80086da:	930e      	str	r3, [sp, #56]	; 0x38
 80086dc:	2400      	movs	r4, #0
 80086de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80086e2:	9316      	str	r3, [sp, #88]	; 0x58
 80086e4:	46a0      	mov	r8, r4
 80086e6:	9b07      	ldr	r3, [sp, #28]
 80086e8:	4648      	mov	r0, r9
 80086ea:	6859      	ldr	r1, [r3, #4]
 80086ec:	f001 fd08 	bl	800a100 <_Balloc>
 80086f0:	9005      	str	r0, [sp, #20]
 80086f2:	2800      	cmp	r0, #0
 80086f4:	f43f aef6 	beq.w	80084e4 <_strtod_l+0x43c>
 80086f8:	9b07      	ldr	r3, [sp, #28]
 80086fa:	691a      	ldr	r2, [r3, #16]
 80086fc:	3202      	adds	r2, #2
 80086fe:	f103 010c 	add.w	r1, r3, #12
 8008702:	0092      	lsls	r2, r2, #2
 8008704:	300c      	adds	r0, #12
 8008706:	f7fe fe3b 	bl	8007380 <memcpy>
 800870a:	aa1e      	add	r2, sp, #120	; 0x78
 800870c:	a91d      	add	r1, sp, #116	; 0x74
 800870e:	ec4b ab10 	vmov	d0, sl, fp
 8008712:	4648      	mov	r0, r9
 8008714:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008718:	f002 f834 	bl	800a784 <__d2b>
 800871c:	901c      	str	r0, [sp, #112]	; 0x70
 800871e:	2800      	cmp	r0, #0
 8008720:	f43f aee0 	beq.w	80084e4 <_strtod_l+0x43c>
 8008724:	2101      	movs	r1, #1
 8008726:	4648      	mov	r0, r9
 8008728:	f001 fdfc 	bl	800a324 <__i2b>
 800872c:	4680      	mov	r8, r0
 800872e:	2800      	cmp	r0, #0
 8008730:	f43f aed8 	beq.w	80084e4 <_strtod_l+0x43c>
 8008734:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008736:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008738:	2e00      	cmp	r6, #0
 800873a:	bfab      	itete	ge
 800873c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800873e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008740:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008742:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8008744:	bfac      	ite	ge
 8008746:	18f7      	addge	r7, r6, r3
 8008748:	1b9d      	sublt	r5, r3, r6
 800874a:	9b04      	ldr	r3, [sp, #16]
 800874c:	1af6      	subs	r6, r6, r3
 800874e:	4416      	add	r6, r2
 8008750:	4b63      	ldr	r3, [pc, #396]	; (80088e0 <_strtod_l+0x838>)
 8008752:	3e01      	subs	r6, #1
 8008754:	429e      	cmp	r6, r3
 8008756:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800875a:	f280 80af 	bge.w	80088bc <_strtod_l+0x814>
 800875e:	1b9b      	subs	r3, r3, r6
 8008760:	2b1f      	cmp	r3, #31
 8008762:	eba2 0203 	sub.w	r2, r2, r3
 8008766:	f04f 0101 	mov.w	r1, #1
 800876a:	f300 809b 	bgt.w	80088a4 <_strtod_l+0x7fc>
 800876e:	fa01 f303 	lsl.w	r3, r1, r3
 8008772:	930f      	str	r3, [sp, #60]	; 0x3c
 8008774:	2300      	movs	r3, #0
 8008776:	930a      	str	r3, [sp, #40]	; 0x28
 8008778:	18be      	adds	r6, r7, r2
 800877a:	9b04      	ldr	r3, [sp, #16]
 800877c:	42b7      	cmp	r7, r6
 800877e:	4415      	add	r5, r2
 8008780:	441d      	add	r5, r3
 8008782:	463b      	mov	r3, r7
 8008784:	bfa8      	it	ge
 8008786:	4633      	movge	r3, r6
 8008788:	42ab      	cmp	r3, r5
 800878a:	bfa8      	it	ge
 800878c:	462b      	movge	r3, r5
 800878e:	2b00      	cmp	r3, #0
 8008790:	bfc2      	ittt	gt
 8008792:	1af6      	subgt	r6, r6, r3
 8008794:	1aed      	subgt	r5, r5, r3
 8008796:	1aff      	subgt	r7, r7, r3
 8008798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800879a:	b1bb      	cbz	r3, 80087cc <_strtod_l+0x724>
 800879c:	4641      	mov	r1, r8
 800879e:	461a      	mov	r2, r3
 80087a0:	4648      	mov	r0, r9
 80087a2:	f001 fe5f 	bl	800a464 <__pow5mult>
 80087a6:	4680      	mov	r8, r0
 80087a8:	2800      	cmp	r0, #0
 80087aa:	f43f ae9b 	beq.w	80084e4 <_strtod_l+0x43c>
 80087ae:	4601      	mov	r1, r0
 80087b0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80087b2:	4648      	mov	r0, r9
 80087b4:	f001 fdbf 	bl	800a336 <__multiply>
 80087b8:	900c      	str	r0, [sp, #48]	; 0x30
 80087ba:	2800      	cmp	r0, #0
 80087bc:	f43f ae92 	beq.w	80084e4 <_strtod_l+0x43c>
 80087c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80087c2:	4648      	mov	r0, r9
 80087c4:	f001 fcd0 	bl	800a168 <_Bfree>
 80087c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087ca:	931c      	str	r3, [sp, #112]	; 0x70
 80087cc:	2e00      	cmp	r6, #0
 80087ce:	dc7a      	bgt.n	80088c6 <_strtod_l+0x81e>
 80087d0:	9b06      	ldr	r3, [sp, #24]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	dd08      	ble.n	80087e8 <_strtod_l+0x740>
 80087d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80087d8:	9905      	ldr	r1, [sp, #20]
 80087da:	4648      	mov	r0, r9
 80087dc:	f001 fe42 	bl	800a464 <__pow5mult>
 80087e0:	9005      	str	r0, [sp, #20]
 80087e2:	2800      	cmp	r0, #0
 80087e4:	f43f ae7e 	beq.w	80084e4 <_strtod_l+0x43c>
 80087e8:	2d00      	cmp	r5, #0
 80087ea:	dd08      	ble.n	80087fe <_strtod_l+0x756>
 80087ec:	462a      	mov	r2, r5
 80087ee:	9905      	ldr	r1, [sp, #20]
 80087f0:	4648      	mov	r0, r9
 80087f2:	f001 fe85 	bl	800a500 <__lshift>
 80087f6:	9005      	str	r0, [sp, #20]
 80087f8:	2800      	cmp	r0, #0
 80087fa:	f43f ae73 	beq.w	80084e4 <_strtod_l+0x43c>
 80087fe:	2f00      	cmp	r7, #0
 8008800:	dd08      	ble.n	8008814 <_strtod_l+0x76c>
 8008802:	4641      	mov	r1, r8
 8008804:	463a      	mov	r2, r7
 8008806:	4648      	mov	r0, r9
 8008808:	f001 fe7a 	bl	800a500 <__lshift>
 800880c:	4680      	mov	r8, r0
 800880e:	2800      	cmp	r0, #0
 8008810:	f43f ae68 	beq.w	80084e4 <_strtod_l+0x43c>
 8008814:	9a05      	ldr	r2, [sp, #20]
 8008816:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008818:	4648      	mov	r0, r9
 800881a:	f001 fedf 	bl	800a5dc <__mdiff>
 800881e:	4604      	mov	r4, r0
 8008820:	2800      	cmp	r0, #0
 8008822:	f43f ae5f 	beq.w	80084e4 <_strtod_l+0x43c>
 8008826:	68c3      	ldr	r3, [r0, #12]
 8008828:	930c      	str	r3, [sp, #48]	; 0x30
 800882a:	2300      	movs	r3, #0
 800882c:	60c3      	str	r3, [r0, #12]
 800882e:	4641      	mov	r1, r8
 8008830:	f001 feba 	bl	800a5a8 <__mcmp>
 8008834:	2800      	cmp	r0, #0
 8008836:	da55      	bge.n	80088e4 <_strtod_l+0x83c>
 8008838:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800883a:	b9e3      	cbnz	r3, 8008876 <_strtod_l+0x7ce>
 800883c:	f1ba 0f00 	cmp.w	sl, #0
 8008840:	d119      	bne.n	8008876 <_strtod_l+0x7ce>
 8008842:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008846:	b9b3      	cbnz	r3, 8008876 <_strtod_l+0x7ce>
 8008848:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800884c:	0d1b      	lsrs	r3, r3, #20
 800884e:	051b      	lsls	r3, r3, #20
 8008850:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008854:	d90f      	bls.n	8008876 <_strtod_l+0x7ce>
 8008856:	6963      	ldr	r3, [r4, #20]
 8008858:	b913      	cbnz	r3, 8008860 <_strtod_l+0x7b8>
 800885a:	6923      	ldr	r3, [r4, #16]
 800885c:	2b01      	cmp	r3, #1
 800885e:	dd0a      	ble.n	8008876 <_strtod_l+0x7ce>
 8008860:	4621      	mov	r1, r4
 8008862:	2201      	movs	r2, #1
 8008864:	4648      	mov	r0, r9
 8008866:	f001 fe4b 	bl	800a500 <__lshift>
 800886a:	4641      	mov	r1, r8
 800886c:	4604      	mov	r4, r0
 800886e:	f001 fe9b 	bl	800a5a8 <__mcmp>
 8008872:	2800      	cmp	r0, #0
 8008874:	dc67      	bgt.n	8008946 <_strtod_l+0x89e>
 8008876:	9b04      	ldr	r3, [sp, #16]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d171      	bne.n	8008960 <_strtod_l+0x8b8>
 800887c:	e63d      	b.n	80084fa <_strtod_l+0x452>
 800887e:	f018 0f01 	tst.w	r8, #1
 8008882:	d004      	beq.n	800888e <_strtod_l+0x7e6>
 8008884:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008888:	f7f7 febe 	bl	8000608 <__aeabi_dmul>
 800888c:	2301      	movs	r3, #1
 800888e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008892:	3508      	adds	r5, #8
 8008894:	e6e5      	b.n	8008662 <_strtod_l+0x5ba>
 8008896:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800889a:	fa02 f303 	lsl.w	r3, r2, r3
 800889e:	ea03 0a0a 	and.w	sl, r3, sl
 80088a2:	e6ff      	b.n	80086a4 <_strtod_l+0x5fc>
 80088a4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80088a8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80088ac:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80088b0:	36e2      	adds	r6, #226	; 0xe2
 80088b2:	fa01 f306 	lsl.w	r3, r1, r6
 80088b6:	930a      	str	r3, [sp, #40]	; 0x28
 80088b8:	910f      	str	r1, [sp, #60]	; 0x3c
 80088ba:	e75d      	b.n	8008778 <_strtod_l+0x6d0>
 80088bc:	2300      	movs	r3, #0
 80088be:	930a      	str	r3, [sp, #40]	; 0x28
 80088c0:	2301      	movs	r3, #1
 80088c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80088c4:	e758      	b.n	8008778 <_strtod_l+0x6d0>
 80088c6:	4632      	mov	r2, r6
 80088c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80088ca:	4648      	mov	r0, r9
 80088cc:	f001 fe18 	bl	800a500 <__lshift>
 80088d0:	901c      	str	r0, [sp, #112]	; 0x70
 80088d2:	2800      	cmp	r0, #0
 80088d4:	f47f af7c 	bne.w	80087d0 <_strtod_l+0x728>
 80088d8:	e604      	b.n	80084e4 <_strtod_l+0x43c>
 80088da:	bf00      	nop
 80088dc:	0800afe8 	.word	0x0800afe8
 80088e0:	fffffc02 	.word	0xfffffc02
 80088e4:	465d      	mov	r5, fp
 80088e6:	f040 8086 	bne.w	80089f6 <_strtod_l+0x94e>
 80088ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088f0:	b32a      	cbz	r2, 800893e <_strtod_l+0x896>
 80088f2:	4aaf      	ldr	r2, [pc, #700]	; (8008bb0 <_strtod_l+0xb08>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d153      	bne.n	80089a0 <_strtod_l+0x8f8>
 80088f8:	9b04      	ldr	r3, [sp, #16]
 80088fa:	4650      	mov	r0, sl
 80088fc:	b1d3      	cbz	r3, 8008934 <_strtod_l+0x88c>
 80088fe:	4aad      	ldr	r2, [pc, #692]	; (8008bb4 <_strtod_l+0xb0c>)
 8008900:	402a      	ands	r2, r5
 8008902:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008906:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800890a:	d816      	bhi.n	800893a <_strtod_l+0x892>
 800890c:	0d12      	lsrs	r2, r2, #20
 800890e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008912:	fa01 f303 	lsl.w	r3, r1, r3
 8008916:	4298      	cmp	r0, r3
 8008918:	d142      	bne.n	80089a0 <_strtod_l+0x8f8>
 800891a:	4ba7      	ldr	r3, [pc, #668]	; (8008bb8 <_strtod_l+0xb10>)
 800891c:	429d      	cmp	r5, r3
 800891e:	d102      	bne.n	8008926 <_strtod_l+0x87e>
 8008920:	3001      	adds	r0, #1
 8008922:	f43f addf 	beq.w	80084e4 <_strtod_l+0x43c>
 8008926:	4ba3      	ldr	r3, [pc, #652]	; (8008bb4 <_strtod_l+0xb0c>)
 8008928:	402b      	ands	r3, r5
 800892a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800892e:	f04f 0a00 	mov.w	sl, #0
 8008932:	e7a0      	b.n	8008876 <_strtod_l+0x7ce>
 8008934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008938:	e7ed      	b.n	8008916 <_strtod_l+0x86e>
 800893a:	460b      	mov	r3, r1
 800893c:	e7eb      	b.n	8008916 <_strtod_l+0x86e>
 800893e:	bb7b      	cbnz	r3, 80089a0 <_strtod_l+0x8f8>
 8008940:	f1ba 0f00 	cmp.w	sl, #0
 8008944:	d12c      	bne.n	80089a0 <_strtod_l+0x8f8>
 8008946:	9904      	ldr	r1, [sp, #16]
 8008948:	4a9a      	ldr	r2, [pc, #616]	; (8008bb4 <_strtod_l+0xb0c>)
 800894a:	465b      	mov	r3, fp
 800894c:	b1f1      	cbz	r1, 800898c <_strtod_l+0x8e4>
 800894e:	ea02 010b 	and.w	r1, r2, fp
 8008952:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008956:	dc19      	bgt.n	800898c <_strtod_l+0x8e4>
 8008958:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800895c:	f77f ae5b 	ble.w	8008616 <_strtod_l+0x56e>
 8008960:	4a96      	ldr	r2, [pc, #600]	; (8008bbc <_strtod_l+0xb14>)
 8008962:	2300      	movs	r3, #0
 8008964:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008968:	4650      	mov	r0, sl
 800896a:	4659      	mov	r1, fp
 800896c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008970:	f7f7 fe4a 	bl	8000608 <__aeabi_dmul>
 8008974:	4682      	mov	sl, r0
 8008976:	468b      	mov	fp, r1
 8008978:	2900      	cmp	r1, #0
 800897a:	f47f adbe 	bne.w	80084fa <_strtod_l+0x452>
 800897e:	2800      	cmp	r0, #0
 8008980:	f47f adbb 	bne.w	80084fa <_strtod_l+0x452>
 8008984:	2322      	movs	r3, #34	; 0x22
 8008986:	f8c9 3000 	str.w	r3, [r9]
 800898a:	e5b6      	b.n	80084fa <_strtod_l+0x452>
 800898c:	4013      	ands	r3, r2
 800898e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008992:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008996:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800899a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800899e:	e76a      	b.n	8008876 <_strtod_l+0x7ce>
 80089a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089a2:	b193      	cbz	r3, 80089ca <_strtod_l+0x922>
 80089a4:	422b      	tst	r3, r5
 80089a6:	f43f af66 	beq.w	8008876 <_strtod_l+0x7ce>
 80089aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089ac:	9a04      	ldr	r2, [sp, #16]
 80089ae:	4650      	mov	r0, sl
 80089b0:	4659      	mov	r1, fp
 80089b2:	b173      	cbz	r3, 80089d2 <_strtod_l+0x92a>
 80089b4:	f7ff fb5c 	bl	8008070 <sulp>
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80089c0:	f7f7 fc6c 	bl	800029c <__adddf3>
 80089c4:	4682      	mov	sl, r0
 80089c6:	468b      	mov	fp, r1
 80089c8:	e755      	b.n	8008876 <_strtod_l+0x7ce>
 80089ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089cc:	ea13 0f0a 	tst.w	r3, sl
 80089d0:	e7e9      	b.n	80089a6 <_strtod_l+0x8fe>
 80089d2:	f7ff fb4d 	bl	8008070 <sulp>
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80089de:	f7f7 fc5b 	bl	8000298 <__aeabi_dsub>
 80089e2:	2200      	movs	r2, #0
 80089e4:	2300      	movs	r3, #0
 80089e6:	4682      	mov	sl, r0
 80089e8:	468b      	mov	fp, r1
 80089ea:	f7f8 f875 	bl	8000ad8 <__aeabi_dcmpeq>
 80089ee:	2800      	cmp	r0, #0
 80089f0:	f47f ae11 	bne.w	8008616 <_strtod_l+0x56e>
 80089f4:	e73f      	b.n	8008876 <_strtod_l+0x7ce>
 80089f6:	4641      	mov	r1, r8
 80089f8:	4620      	mov	r0, r4
 80089fa:	f001 ff12 	bl	800a822 <__ratio>
 80089fe:	ec57 6b10 	vmov	r6, r7, d0
 8008a02:	2200      	movs	r2, #0
 8008a04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a08:	ee10 0a10 	vmov	r0, s0
 8008a0c:	4639      	mov	r1, r7
 8008a0e:	f7f8 f877 	bl	8000b00 <__aeabi_dcmple>
 8008a12:	2800      	cmp	r0, #0
 8008a14:	d077      	beq.n	8008b06 <_strtod_l+0xa5e>
 8008a16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d04a      	beq.n	8008ab2 <_strtod_l+0xa0a>
 8008a1c:	4b68      	ldr	r3, [pc, #416]	; (8008bc0 <_strtod_l+0xb18>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008a24:	4f66      	ldr	r7, [pc, #408]	; (8008bc0 <_strtod_l+0xb18>)
 8008a26:	2600      	movs	r6, #0
 8008a28:	4b62      	ldr	r3, [pc, #392]	; (8008bb4 <_strtod_l+0xb0c>)
 8008a2a:	402b      	ands	r3, r5
 8008a2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a30:	4b64      	ldr	r3, [pc, #400]	; (8008bc4 <_strtod_l+0xb1c>)
 8008a32:	429a      	cmp	r2, r3
 8008a34:	f040 80ce 	bne.w	8008bd4 <_strtod_l+0xb2c>
 8008a38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008a3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a40:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8008a44:	ec4b ab10 	vmov	d0, sl, fp
 8008a48:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008a4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008a50:	f001 fe22 	bl	800a698 <__ulp>
 8008a54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a58:	ec53 2b10 	vmov	r2, r3, d0
 8008a5c:	f7f7 fdd4 	bl	8000608 <__aeabi_dmul>
 8008a60:	4652      	mov	r2, sl
 8008a62:	465b      	mov	r3, fp
 8008a64:	f7f7 fc1a 	bl	800029c <__adddf3>
 8008a68:	460b      	mov	r3, r1
 8008a6a:	4952      	ldr	r1, [pc, #328]	; (8008bb4 <_strtod_l+0xb0c>)
 8008a6c:	4a56      	ldr	r2, [pc, #344]	; (8008bc8 <_strtod_l+0xb20>)
 8008a6e:	4019      	ands	r1, r3
 8008a70:	4291      	cmp	r1, r2
 8008a72:	4682      	mov	sl, r0
 8008a74:	d95b      	bls.n	8008b2e <_strtod_l+0xa86>
 8008a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a78:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d103      	bne.n	8008a88 <_strtod_l+0x9e0>
 8008a80:	9b08      	ldr	r3, [sp, #32]
 8008a82:	3301      	adds	r3, #1
 8008a84:	f43f ad2e 	beq.w	80084e4 <_strtod_l+0x43c>
 8008a88:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008bb8 <_strtod_l+0xb10>
 8008a8c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008a90:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008a92:	4648      	mov	r0, r9
 8008a94:	f001 fb68 	bl	800a168 <_Bfree>
 8008a98:	9905      	ldr	r1, [sp, #20]
 8008a9a:	4648      	mov	r0, r9
 8008a9c:	f001 fb64 	bl	800a168 <_Bfree>
 8008aa0:	4641      	mov	r1, r8
 8008aa2:	4648      	mov	r0, r9
 8008aa4:	f001 fb60 	bl	800a168 <_Bfree>
 8008aa8:	4621      	mov	r1, r4
 8008aaa:	4648      	mov	r0, r9
 8008aac:	f001 fb5c 	bl	800a168 <_Bfree>
 8008ab0:	e619      	b.n	80086e6 <_strtod_l+0x63e>
 8008ab2:	f1ba 0f00 	cmp.w	sl, #0
 8008ab6:	d11a      	bne.n	8008aee <_strtod_l+0xa46>
 8008ab8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008abc:	b9eb      	cbnz	r3, 8008afa <_strtod_l+0xa52>
 8008abe:	2200      	movs	r2, #0
 8008ac0:	4b3f      	ldr	r3, [pc, #252]	; (8008bc0 <_strtod_l+0xb18>)
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	f7f8 f811 	bl	8000aec <__aeabi_dcmplt>
 8008aca:	b9c8      	cbnz	r0, 8008b00 <_strtod_l+0xa58>
 8008acc:	4630      	mov	r0, r6
 8008ace:	4639      	mov	r1, r7
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	4b3e      	ldr	r3, [pc, #248]	; (8008bcc <_strtod_l+0xb24>)
 8008ad4:	f7f7 fd98 	bl	8000608 <__aeabi_dmul>
 8008ad8:	4606      	mov	r6, r0
 8008ada:	460f      	mov	r7, r1
 8008adc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008ae0:	9618      	str	r6, [sp, #96]	; 0x60
 8008ae2:	9319      	str	r3, [sp, #100]	; 0x64
 8008ae4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008ae8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008aec:	e79c      	b.n	8008a28 <_strtod_l+0x980>
 8008aee:	f1ba 0f01 	cmp.w	sl, #1
 8008af2:	d102      	bne.n	8008afa <_strtod_l+0xa52>
 8008af4:	2d00      	cmp	r5, #0
 8008af6:	f43f ad8e 	beq.w	8008616 <_strtod_l+0x56e>
 8008afa:	2200      	movs	r2, #0
 8008afc:	4b34      	ldr	r3, [pc, #208]	; (8008bd0 <_strtod_l+0xb28>)
 8008afe:	e78f      	b.n	8008a20 <_strtod_l+0x978>
 8008b00:	2600      	movs	r6, #0
 8008b02:	4f32      	ldr	r7, [pc, #200]	; (8008bcc <_strtod_l+0xb24>)
 8008b04:	e7ea      	b.n	8008adc <_strtod_l+0xa34>
 8008b06:	4b31      	ldr	r3, [pc, #196]	; (8008bcc <_strtod_l+0xb24>)
 8008b08:	4630      	mov	r0, r6
 8008b0a:	4639      	mov	r1, r7
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f7f7 fd7b 	bl	8000608 <__aeabi_dmul>
 8008b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b14:	4606      	mov	r6, r0
 8008b16:	460f      	mov	r7, r1
 8008b18:	b933      	cbnz	r3, 8008b28 <_strtod_l+0xa80>
 8008b1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b1e:	9010      	str	r0, [sp, #64]	; 0x40
 8008b20:	9311      	str	r3, [sp, #68]	; 0x44
 8008b22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b26:	e7df      	b.n	8008ae8 <_strtod_l+0xa40>
 8008b28:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008b2c:	e7f9      	b.n	8008b22 <_strtod_l+0xa7a>
 8008b2e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008b32:	9b04      	ldr	r3, [sp, #16]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1ab      	bne.n	8008a90 <_strtod_l+0x9e8>
 8008b38:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008b3c:	0d1b      	lsrs	r3, r3, #20
 8008b3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b40:	051b      	lsls	r3, r3, #20
 8008b42:	429a      	cmp	r2, r3
 8008b44:	465d      	mov	r5, fp
 8008b46:	d1a3      	bne.n	8008a90 <_strtod_l+0x9e8>
 8008b48:	4639      	mov	r1, r7
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	f7f8 f80c 	bl	8000b68 <__aeabi_d2iz>
 8008b50:	f7f7 fcf0 	bl	8000534 <__aeabi_i2d>
 8008b54:	460b      	mov	r3, r1
 8008b56:	4602      	mov	r2, r0
 8008b58:	4639      	mov	r1, r7
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f7f7 fb9c 	bl	8000298 <__aeabi_dsub>
 8008b60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b62:	4606      	mov	r6, r0
 8008b64:	460f      	mov	r7, r1
 8008b66:	b933      	cbnz	r3, 8008b76 <_strtod_l+0xace>
 8008b68:	f1ba 0f00 	cmp.w	sl, #0
 8008b6c:	d103      	bne.n	8008b76 <_strtod_l+0xace>
 8008b6e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8008b72:	2d00      	cmp	r5, #0
 8008b74:	d06d      	beq.n	8008c52 <_strtod_l+0xbaa>
 8008b76:	a30a      	add	r3, pc, #40	; (adr r3, 8008ba0 <_strtod_l+0xaf8>)
 8008b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	4639      	mov	r1, r7
 8008b80:	f7f7 ffb4 	bl	8000aec <__aeabi_dcmplt>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	f47f acb8 	bne.w	80084fa <_strtod_l+0x452>
 8008b8a:	a307      	add	r3, pc, #28	; (adr r3, 8008ba8 <_strtod_l+0xb00>)
 8008b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b90:	4630      	mov	r0, r6
 8008b92:	4639      	mov	r1, r7
 8008b94:	f7f7 ffc8 	bl	8000b28 <__aeabi_dcmpgt>
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	f43f af79 	beq.w	8008a90 <_strtod_l+0x9e8>
 8008b9e:	e4ac      	b.n	80084fa <_strtod_l+0x452>
 8008ba0:	94a03595 	.word	0x94a03595
 8008ba4:	3fdfffff 	.word	0x3fdfffff
 8008ba8:	35afe535 	.word	0x35afe535
 8008bac:	3fe00000 	.word	0x3fe00000
 8008bb0:	000fffff 	.word	0x000fffff
 8008bb4:	7ff00000 	.word	0x7ff00000
 8008bb8:	7fefffff 	.word	0x7fefffff
 8008bbc:	39500000 	.word	0x39500000
 8008bc0:	3ff00000 	.word	0x3ff00000
 8008bc4:	7fe00000 	.word	0x7fe00000
 8008bc8:	7c9fffff 	.word	0x7c9fffff
 8008bcc:	3fe00000 	.word	0x3fe00000
 8008bd0:	bff00000 	.word	0xbff00000
 8008bd4:	9b04      	ldr	r3, [sp, #16]
 8008bd6:	b333      	cbz	r3, 8008c26 <_strtod_l+0xb7e>
 8008bd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bda:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008bde:	d822      	bhi.n	8008c26 <_strtod_l+0xb7e>
 8008be0:	a327      	add	r3, pc, #156	; (adr r3, 8008c80 <_strtod_l+0xbd8>)
 8008be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be6:	4630      	mov	r0, r6
 8008be8:	4639      	mov	r1, r7
 8008bea:	f7f7 ff89 	bl	8000b00 <__aeabi_dcmple>
 8008bee:	b1a0      	cbz	r0, 8008c1a <_strtod_l+0xb72>
 8008bf0:	4639      	mov	r1, r7
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	f7f7 ffe0 	bl	8000bb8 <__aeabi_d2uiz>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	bf08      	it	eq
 8008bfc:	2001      	moveq	r0, #1
 8008bfe:	f7f7 fc89 	bl	8000514 <__aeabi_ui2d>
 8008c02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c04:	4606      	mov	r6, r0
 8008c06:	460f      	mov	r7, r1
 8008c08:	bb03      	cbnz	r3, 8008c4c <_strtod_l+0xba4>
 8008c0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c0e:	9012      	str	r0, [sp, #72]	; 0x48
 8008c10:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c12:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008c16:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c1e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008c22:	1a9b      	subs	r3, r3, r2
 8008c24:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c26:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008c2a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8008c2e:	f001 fd33 	bl	800a698 <__ulp>
 8008c32:	4650      	mov	r0, sl
 8008c34:	ec53 2b10 	vmov	r2, r3, d0
 8008c38:	4659      	mov	r1, fp
 8008c3a:	f7f7 fce5 	bl	8000608 <__aeabi_dmul>
 8008c3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c42:	f7f7 fb2b 	bl	800029c <__adddf3>
 8008c46:	4682      	mov	sl, r0
 8008c48:	468b      	mov	fp, r1
 8008c4a:	e772      	b.n	8008b32 <_strtod_l+0xa8a>
 8008c4c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008c50:	e7df      	b.n	8008c12 <_strtod_l+0xb6a>
 8008c52:	a30d      	add	r3, pc, #52	; (adr r3, 8008c88 <_strtod_l+0xbe0>)
 8008c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c58:	f7f7 ff48 	bl	8000aec <__aeabi_dcmplt>
 8008c5c:	e79c      	b.n	8008b98 <_strtod_l+0xaf0>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	930d      	str	r3, [sp, #52]	; 0x34
 8008c62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	f7ff ba61 	b.w	800812e <_strtod_l+0x86>
 8008c6c:	2b65      	cmp	r3, #101	; 0x65
 8008c6e:	f04f 0200 	mov.w	r2, #0
 8008c72:	f43f ab4e 	beq.w	8008312 <_strtod_l+0x26a>
 8008c76:	2101      	movs	r1, #1
 8008c78:	4614      	mov	r4, r2
 8008c7a:	9104      	str	r1, [sp, #16]
 8008c7c:	f7ff bacb 	b.w	8008216 <_strtod_l+0x16e>
 8008c80:	ffc00000 	.word	0xffc00000
 8008c84:	41dfffff 	.word	0x41dfffff
 8008c88:	94a03595 	.word	0x94a03595
 8008c8c:	3fcfffff 	.word	0x3fcfffff

08008c90 <_strtod_r>:
 8008c90:	4b05      	ldr	r3, [pc, #20]	; (8008ca8 <_strtod_r+0x18>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	b410      	push	{r4}
 8008c96:	6a1b      	ldr	r3, [r3, #32]
 8008c98:	4c04      	ldr	r4, [pc, #16]	; (8008cac <_strtod_r+0x1c>)
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	bf08      	it	eq
 8008c9e:	4623      	moveq	r3, r4
 8008ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ca4:	f7ff ba00 	b.w	80080a8 <_strtod_l>
 8008ca8:	20000014 	.word	0x20000014
 8008cac:	20000078 	.word	0x20000078

08008cb0 <_strtol_l.isra.0>:
 8008cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb4:	4680      	mov	r8, r0
 8008cb6:	4689      	mov	r9, r1
 8008cb8:	4692      	mov	sl, r2
 8008cba:	461e      	mov	r6, r3
 8008cbc:	460f      	mov	r7, r1
 8008cbe:	463d      	mov	r5, r7
 8008cc0:	9808      	ldr	r0, [sp, #32]
 8008cc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008cc6:	f001 f9ed 	bl	800a0a4 <__locale_ctype_ptr_l>
 8008cca:	4420      	add	r0, r4
 8008ccc:	7843      	ldrb	r3, [r0, #1]
 8008cce:	f013 0308 	ands.w	r3, r3, #8
 8008cd2:	d132      	bne.n	8008d3a <_strtol_l.isra.0+0x8a>
 8008cd4:	2c2d      	cmp	r4, #45	; 0x2d
 8008cd6:	d132      	bne.n	8008d3e <_strtol_l.isra.0+0x8e>
 8008cd8:	787c      	ldrb	r4, [r7, #1]
 8008cda:	1cbd      	adds	r5, r7, #2
 8008cdc:	2201      	movs	r2, #1
 8008cde:	2e00      	cmp	r6, #0
 8008ce0:	d05d      	beq.n	8008d9e <_strtol_l.isra.0+0xee>
 8008ce2:	2e10      	cmp	r6, #16
 8008ce4:	d109      	bne.n	8008cfa <_strtol_l.isra.0+0x4a>
 8008ce6:	2c30      	cmp	r4, #48	; 0x30
 8008ce8:	d107      	bne.n	8008cfa <_strtol_l.isra.0+0x4a>
 8008cea:	782b      	ldrb	r3, [r5, #0]
 8008cec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008cf0:	2b58      	cmp	r3, #88	; 0x58
 8008cf2:	d14f      	bne.n	8008d94 <_strtol_l.isra.0+0xe4>
 8008cf4:	786c      	ldrb	r4, [r5, #1]
 8008cf6:	2610      	movs	r6, #16
 8008cf8:	3502      	adds	r5, #2
 8008cfa:	2a00      	cmp	r2, #0
 8008cfc:	bf14      	ite	ne
 8008cfe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008d02:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008d06:	2700      	movs	r7, #0
 8008d08:	fbb1 fcf6 	udiv	ip, r1, r6
 8008d0c:	4638      	mov	r0, r7
 8008d0e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008d12:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008d16:	2b09      	cmp	r3, #9
 8008d18:	d817      	bhi.n	8008d4a <_strtol_l.isra.0+0x9a>
 8008d1a:	461c      	mov	r4, r3
 8008d1c:	42a6      	cmp	r6, r4
 8008d1e:	dd23      	ble.n	8008d68 <_strtol_l.isra.0+0xb8>
 8008d20:	1c7b      	adds	r3, r7, #1
 8008d22:	d007      	beq.n	8008d34 <_strtol_l.isra.0+0x84>
 8008d24:	4584      	cmp	ip, r0
 8008d26:	d31c      	bcc.n	8008d62 <_strtol_l.isra.0+0xb2>
 8008d28:	d101      	bne.n	8008d2e <_strtol_l.isra.0+0x7e>
 8008d2a:	45a6      	cmp	lr, r4
 8008d2c:	db19      	blt.n	8008d62 <_strtol_l.isra.0+0xb2>
 8008d2e:	fb00 4006 	mla	r0, r0, r6, r4
 8008d32:	2701      	movs	r7, #1
 8008d34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d38:	e7eb      	b.n	8008d12 <_strtol_l.isra.0+0x62>
 8008d3a:	462f      	mov	r7, r5
 8008d3c:	e7bf      	b.n	8008cbe <_strtol_l.isra.0+0xe>
 8008d3e:	2c2b      	cmp	r4, #43	; 0x2b
 8008d40:	bf04      	itt	eq
 8008d42:	1cbd      	addeq	r5, r7, #2
 8008d44:	787c      	ldrbeq	r4, [r7, #1]
 8008d46:	461a      	mov	r2, r3
 8008d48:	e7c9      	b.n	8008cde <_strtol_l.isra.0+0x2e>
 8008d4a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008d4e:	2b19      	cmp	r3, #25
 8008d50:	d801      	bhi.n	8008d56 <_strtol_l.isra.0+0xa6>
 8008d52:	3c37      	subs	r4, #55	; 0x37
 8008d54:	e7e2      	b.n	8008d1c <_strtol_l.isra.0+0x6c>
 8008d56:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008d5a:	2b19      	cmp	r3, #25
 8008d5c:	d804      	bhi.n	8008d68 <_strtol_l.isra.0+0xb8>
 8008d5e:	3c57      	subs	r4, #87	; 0x57
 8008d60:	e7dc      	b.n	8008d1c <_strtol_l.isra.0+0x6c>
 8008d62:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008d66:	e7e5      	b.n	8008d34 <_strtol_l.isra.0+0x84>
 8008d68:	1c7b      	adds	r3, r7, #1
 8008d6a:	d108      	bne.n	8008d7e <_strtol_l.isra.0+0xce>
 8008d6c:	2322      	movs	r3, #34	; 0x22
 8008d6e:	f8c8 3000 	str.w	r3, [r8]
 8008d72:	4608      	mov	r0, r1
 8008d74:	f1ba 0f00 	cmp.w	sl, #0
 8008d78:	d107      	bne.n	8008d8a <_strtol_l.isra.0+0xda>
 8008d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d7e:	b102      	cbz	r2, 8008d82 <_strtol_l.isra.0+0xd2>
 8008d80:	4240      	negs	r0, r0
 8008d82:	f1ba 0f00 	cmp.w	sl, #0
 8008d86:	d0f8      	beq.n	8008d7a <_strtol_l.isra.0+0xca>
 8008d88:	b10f      	cbz	r7, 8008d8e <_strtol_l.isra.0+0xde>
 8008d8a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8008d8e:	f8ca 9000 	str.w	r9, [sl]
 8008d92:	e7f2      	b.n	8008d7a <_strtol_l.isra.0+0xca>
 8008d94:	2430      	movs	r4, #48	; 0x30
 8008d96:	2e00      	cmp	r6, #0
 8008d98:	d1af      	bne.n	8008cfa <_strtol_l.isra.0+0x4a>
 8008d9a:	2608      	movs	r6, #8
 8008d9c:	e7ad      	b.n	8008cfa <_strtol_l.isra.0+0x4a>
 8008d9e:	2c30      	cmp	r4, #48	; 0x30
 8008da0:	d0a3      	beq.n	8008cea <_strtol_l.isra.0+0x3a>
 8008da2:	260a      	movs	r6, #10
 8008da4:	e7a9      	b.n	8008cfa <_strtol_l.isra.0+0x4a>
	...

08008da8 <_strtol_r>:
 8008da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008daa:	4c06      	ldr	r4, [pc, #24]	; (8008dc4 <_strtol_r+0x1c>)
 8008dac:	4d06      	ldr	r5, [pc, #24]	; (8008dc8 <_strtol_r+0x20>)
 8008dae:	6824      	ldr	r4, [r4, #0]
 8008db0:	6a24      	ldr	r4, [r4, #32]
 8008db2:	2c00      	cmp	r4, #0
 8008db4:	bf08      	it	eq
 8008db6:	462c      	moveq	r4, r5
 8008db8:	9400      	str	r4, [sp, #0]
 8008dba:	f7ff ff79 	bl	8008cb0 <_strtol_l.isra.0>
 8008dbe:	b003      	add	sp, #12
 8008dc0:	bd30      	pop	{r4, r5, pc}
 8008dc2:	bf00      	nop
 8008dc4:	20000014 	.word	0x20000014
 8008dc8:	20000078 	.word	0x20000078

08008dcc <quorem>:
 8008dcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd0:	6903      	ldr	r3, [r0, #16]
 8008dd2:	690c      	ldr	r4, [r1, #16]
 8008dd4:	42a3      	cmp	r3, r4
 8008dd6:	4680      	mov	r8, r0
 8008dd8:	f2c0 8082 	blt.w	8008ee0 <quorem+0x114>
 8008ddc:	3c01      	subs	r4, #1
 8008dde:	f101 0714 	add.w	r7, r1, #20
 8008de2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008de6:	f100 0614 	add.w	r6, r0, #20
 8008dea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008dee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008df2:	eb06 030c 	add.w	r3, r6, ip
 8008df6:	3501      	adds	r5, #1
 8008df8:	eb07 090c 	add.w	r9, r7, ip
 8008dfc:	9301      	str	r3, [sp, #4]
 8008dfe:	fbb0 f5f5 	udiv	r5, r0, r5
 8008e02:	b395      	cbz	r5, 8008e6a <quorem+0x9e>
 8008e04:	f04f 0a00 	mov.w	sl, #0
 8008e08:	4638      	mov	r0, r7
 8008e0a:	46b6      	mov	lr, r6
 8008e0c:	46d3      	mov	fp, sl
 8008e0e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e12:	b293      	uxth	r3, r2
 8008e14:	fb05 a303 	mla	r3, r5, r3, sl
 8008e18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	ebab 0303 	sub.w	r3, fp, r3
 8008e22:	0c12      	lsrs	r2, r2, #16
 8008e24:	f8de b000 	ldr.w	fp, [lr]
 8008e28:	fb05 a202 	mla	r2, r5, r2, sl
 8008e2c:	fa13 f38b 	uxtah	r3, r3, fp
 8008e30:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008e34:	fa1f fb82 	uxth.w	fp, r2
 8008e38:	f8de 2000 	ldr.w	r2, [lr]
 8008e3c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008e40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e4a:	4581      	cmp	r9, r0
 8008e4c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008e50:	f84e 3b04 	str.w	r3, [lr], #4
 8008e54:	d2db      	bcs.n	8008e0e <quorem+0x42>
 8008e56:	f856 300c 	ldr.w	r3, [r6, ip]
 8008e5a:	b933      	cbnz	r3, 8008e6a <quorem+0x9e>
 8008e5c:	9b01      	ldr	r3, [sp, #4]
 8008e5e:	3b04      	subs	r3, #4
 8008e60:	429e      	cmp	r6, r3
 8008e62:	461a      	mov	r2, r3
 8008e64:	d330      	bcc.n	8008ec8 <quorem+0xfc>
 8008e66:	f8c8 4010 	str.w	r4, [r8, #16]
 8008e6a:	4640      	mov	r0, r8
 8008e6c:	f001 fb9c 	bl	800a5a8 <__mcmp>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	db25      	blt.n	8008ec0 <quorem+0xf4>
 8008e74:	3501      	adds	r5, #1
 8008e76:	4630      	mov	r0, r6
 8008e78:	f04f 0c00 	mov.w	ip, #0
 8008e7c:	f857 2b04 	ldr.w	r2, [r7], #4
 8008e80:	f8d0 e000 	ldr.w	lr, [r0]
 8008e84:	b293      	uxth	r3, r2
 8008e86:	ebac 0303 	sub.w	r3, ip, r3
 8008e8a:	0c12      	lsrs	r2, r2, #16
 8008e8c:	fa13 f38e 	uxtah	r3, r3, lr
 8008e90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008e94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e9e:	45b9      	cmp	r9, r7
 8008ea0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ea4:	f840 3b04 	str.w	r3, [r0], #4
 8008ea8:	d2e8      	bcs.n	8008e7c <quorem+0xb0>
 8008eaa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008eae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008eb2:	b92a      	cbnz	r2, 8008ec0 <quorem+0xf4>
 8008eb4:	3b04      	subs	r3, #4
 8008eb6:	429e      	cmp	r6, r3
 8008eb8:	461a      	mov	r2, r3
 8008eba:	d30b      	bcc.n	8008ed4 <quorem+0x108>
 8008ebc:	f8c8 4010 	str.w	r4, [r8, #16]
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	b003      	add	sp, #12
 8008ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec8:	6812      	ldr	r2, [r2, #0]
 8008eca:	3b04      	subs	r3, #4
 8008ecc:	2a00      	cmp	r2, #0
 8008ece:	d1ca      	bne.n	8008e66 <quorem+0x9a>
 8008ed0:	3c01      	subs	r4, #1
 8008ed2:	e7c5      	b.n	8008e60 <quorem+0x94>
 8008ed4:	6812      	ldr	r2, [r2, #0]
 8008ed6:	3b04      	subs	r3, #4
 8008ed8:	2a00      	cmp	r2, #0
 8008eda:	d1ef      	bne.n	8008ebc <quorem+0xf0>
 8008edc:	3c01      	subs	r4, #1
 8008ede:	e7ea      	b.n	8008eb6 <quorem+0xea>
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	e7ee      	b.n	8008ec2 <quorem+0xf6>
 8008ee4:	0000      	movs	r0, r0
	...

08008ee8 <_dtoa_r>:
 8008ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eec:	ec57 6b10 	vmov	r6, r7, d0
 8008ef0:	b097      	sub	sp, #92	; 0x5c
 8008ef2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ef4:	9106      	str	r1, [sp, #24]
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	920b      	str	r2, [sp, #44]	; 0x2c
 8008efa:	9312      	str	r3, [sp, #72]	; 0x48
 8008efc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f00:	e9cd 6700 	strd	r6, r7, [sp]
 8008f04:	b93d      	cbnz	r5, 8008f16 <_dtoa_r+0x2e>
 8008f06:	2010      	movs	r0, #16
 8008f08:	f001 f8e0 	bl	800a0cc <malloc>
 8008f0c:	6260      	str	r0, [r4, #36]	; 0x24
 8008f0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f12:	6005      	str	r5, [r0, #0]
 8008f14:	60c5      	str	r5, [r0, #12]
 8008f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f18:	6819      	ldr	r1, [r3, #0]
 8008f1a:	b151      	cbz	r1, 8008f32 <_dtoa_r+0x4a>
 8008f1c:	685a      	ldr	r2, [r3, #4]
 8008f1e:	604a      	str	r2, [r1, #4]
 8008f20:	2301      	movs	r3, #1
 8008f22:	4093      	lsls	r3, r2
 8008f24:	608b      	str	r3, [r1, #8]
 8008f26:	4620      	mov	r0, r4
 8008f28:	f001 f91e 	bl	800a168 <_Bfree>
 8008f2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f2e:	2200      	movs	r2, #0
 8008f30:	601a      	str	r2, [r3, #0]
 8008f32:	1e3b      	subs	r3, r7, #0
 8008f34:	bfbb      	ittet	lt
 8008f36:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008f3a:	9301      	strlt	r3, [sp, #4]
 8008f3c:	2300      	movge	r3, #0
 8008f3e:	2201      	movlt	r2, #1
 8008f40:	bfac      	ite	ge
 8008f42:	f8c8 3000 	strge.w	r3, [r8]
 8008f46:	f8c8 2000 	strlt.w	r2, [r8]
 8008f4a:	4baf      	ldr	r3, [pc, #700]	; (8009208 <_dtoa_r+0x320>)
 8008f4c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008f50:	ea33 0308 	bics.w	r3, r3, r8
 8008f54:	d114      	bne.n	8008f80 <_dtoa_r+0x98>
 8008f56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f58:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f5c:	6013      	str	r3, [r2, #0]
 8008f5e:	9b00      	ldr	r3, [sp, #0]
 8008f60:	b923      	cbnz	r3, 8008f6c <_dtoa_r+0x84>
 8008f62:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008f66:	2800      	cmp	r0, #0
 8008f68:	f000 8542 	beq.w	80099f0 <_dtoa_r+0xb08>
 8008f6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f6e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800921c <_dtoa_r+0x334>
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f000 8544 	beq.w	8009a00 <_dtoa_r+0xb18>
 8008f78:	f10b 0303 	add.w	r3, fp, #3
 8008f7c:	f000 bd3e 	b.w	80099fc <_dtoa_r+0xb14>
 8008f80:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008f84:	2200      	movs	r2, #0
 8008f86:	2300      	movs	r3, #0
 8008f88:	4630      	mov	r0, r6
 8008f8a:	4639      	mov	r1, r7
 8008f8c:	f7f7 fda4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f90:	4681      	mov	r9, r0
 8008f92:	b168      	cbz	r0, 8008fb0 <_dtoa_r+0xc8>
 8008f94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f96:	2301      	movs	r3, #1
 8008f98:	6013      	str	r3, [r2, #0]
 8008f9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f000 8524 	beq.w	80099ea <_dtoa_r+0xb02>
 8008fa2:	4b9a      	ldr	r3, [pc, #616]	; (800920c <_dtoa_r+0x324>)
 8008fa4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008fa6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8008faa:	6013      	str	r3, [r2, #0]
 8008fac:	f000 bd28 	b.w	8009a00 <_dtoa_r+0xb18>
 8008fb0:	aa14      	add	r2, sp, #80	; 0x50
 8008fb2:	a915      	add	r1, sp, #84	; 0x54
 8008fb4:	ec47 6b10 	vmov	d0, r6, r7
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f001 fbe3 	bl	800a784 <__d2b>
 8008fbe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008fc2:	9004      	str	r0, [sp, #16]
 8008fc4:	2d00      	cmp	r5, #0
 8008fc6:	d07c      	beq.n	80090c2 <_dtoa_r+0x1da>
 8008fc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fcc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008fd0:	46b2      	mov	sl, r6
 8008fd2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008fd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008fda:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008fde:	2200      	movs	r2, #0
 8008fe0:	4b8b      	ldr	r3, [pc, #556]	; (8009210 <_dtoa_r+0x328>)
 8008fe2:	4650      	mov	r0, sl
 8008fe4:	4659      	mov	r1, fp
 8008fe6:	f7f7 f957 	bl	8000298 <__aeabi_dsub>
 8008fea:	a381      	add	r3, pc, #516	; (adr r3, 80091f0 <_dtoa_r+0x308>)
 8008fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff0:	f7f7 fb0a 	bl	8000608 <__aeabi_dmul>
 8008ff4:	a380      	add	r3, pc, #512	; (adr r3, 80091f8 <_dtoa_r+0x310>)
 8008ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffa:	f7f7 f94f 	bl	800029c <__adddf3>
 8008ffe:	4606      	mov	r6, r0
 8009000:	4628      	mov	r0, r5
 8009002:	460f      	mov	r7, r1
 8009004:	f7f7 fa96 	bl	8000534 <__aeabi_i2d>
 8009008:	a37d      	add	r3, pc, #500	; (adr r3, 8009200 <_dtoa_r+0x318>)
 800900a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900e:	f7f7 fafb 	bl	8000608 <__aeabi_dmul>
 8009012:	4602      	mov	r2, r0
 8009014:	460b      	mov	r3, r1
 8009016:	4630      	mov	r0, r6
 8009018:	4639      	mov	r1, r7
 800901a:	f7f7 f93f 	bl	800029c <__adddf3>
 800901e:	4606      	mov	r6, r0
 8009020:	460f      	mov	r7, r1
 8009022:	f7f7 fda1 	bl	8000b68 <__aeabi_d2iz>
 8009026:	2200      	movs	r2, #0
 8009028:	4682      	mov	sl, r0
 800902a:	2300      	movs	r3, #0
 800902c:	4630      	mov	r0, r6
 800902e:	4639      	mov	r1, r7
 8009030:	f7f7 fd5c 	bl	8000aec <__aeabi_dcmplt>
 8009034:	b148      	cbz	r0, 800904a <_dtoa_r+0x162>
 8009036:	4650      	mov	r0, sl
 8009038:	f7f7 fa7c 	bl	8000534 <__aeabi_i2d>
 800903c:	4632      	mov	r2, r6
 800903e:	463b      	mov	r3, r7
 8009040:	f7f7 fd4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009044:	b908      	cbnz	r0, 800904a <_dtoa_r+0x162>
 8009046:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800904a:	f1ba 0f16 	cmp.w	sl, #22
 800904e:	d859      	bhi.n	8009104 <_dtoa_r+0x21c>
 8009050:	4970      	ldr	r1, [pc, #448]	; (8009214 <_dtoa_r+0x32c>)
 8009052:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009056:	e9dd 2300 	ldrd	r2, r3, [sp]
 800905a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800905e:	f7f7 fd63 	bl	8000b28 <__aeabi_dcmpgt>
 8009062:	2800      	cmp	r0, #0
 8009064:	d050      	beq.n	8009108 <_dtoa_r+0x220>
 8009066:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800906a:	2300      	movs	r3, #0
 800906c:	930f      	str	r3, [sp, #60]	; 0x3c
 800906e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009070:	1b5d      	subs	r5, r3, r5
 8009072:	f1b5 0801 	subs.w	r8, r5, #1
 8009076:	bf49      	itett	mi
 8009078:	f1c5 0301 	rsbmi	r3, r5, #1
 800907c:	2300      	movpl	r3, #0
 800907e:	9305      	strmi	r3, [sp, #20]
 8009080:	f04f 0800 	movmi.w	r8, #0
 8009084:	bf58      	it	pl
 8009086:	9305      	strpl	r3, [sp, #20]
 8009088:	f1ba 0f00 	cmp.w	sl, #0
 800908c:	db3e      	blt.n	800910c <_dtoa_r+0x224>
 800908e:	2300      	movs	r3, #0
 8009090:	44d0      	add	r8, sl
 8009092:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009096:	9307      	str	r3, [sp, #28]
 8009098:	9b06      	ldr	r3, [sp, #24]
 800909a:	2b09      	cmp	r3, #9
 800909c:	f200 8090 	bhi.w	80091c0 <_dtoa_r+0x2d8>
 80090a0:	2b05      	cmp	r3, #5
 80090a2:	bfc4      	itt	gt
 80090a4:	3b04      	subgt	r3, #4
 80090a6:	9306      	strgt	r3, [sp, #24]
 80090a8:	9b06      	ldr	r3, [sp, #24]
 80090aa:	f1a3 0302 	sub.w	r3, r3, #2
 80090ae:	bfcc      	ite	gt
 80090b0:	2500      	movgt	r5, #0
 80090b2:	2501      	movle	r5, #1
 80090b4:	2b03      	cmp	r3, #3
 80090b6:	f200 808f 	bhi.w	80091d8 <_dtoa_r+0x2f0>
 80090ba:	e8df f003 	tbb	[pc, r3]
 80090be:	7f7d      	.short	0x7f7d
 80090c0:	7131      	.short	0x7131
 80090c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80090c6:	441d      	add	r5, r3
 80090c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80090cc:	2820      	cmp	r0, #32
 80090ce:	dd13      	ble.n	80090f8 <_dtoa_r+0x210>
 80090d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80090d4:	9b00      	ldr	r3, [sp, #0]
 80090d6:	fa08 f800 	lsl.w	r8, r8, r0
 80090da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80090de:	fa23 f000 	lsr.w	r0, r3, r0
 80090e2:	ea48 0000 	orr.w	r0, r8, r0
 80090e6:	f7f7 fa15 	bl	8000514 <__aeabi_ui2d>
 80090ea:	2301      	movs	r3, #1
 80090ec:	4682      	mov	sl, r0
 80090ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80090f2:	3d01      	subs	r5, #1
 80090f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80090f6:	e772      	b.n	8008fde <_dtoa_r+0xf6>
 80090f8:	9b00      	ldr	r3, [sp, #0]
 80090fa:	f1c0 0020 	rsb	r0, r0, #32
 80090fe:	fa03 f000 	lsl.w	r0, r3, r0
 8009102:	e7f0      	b.n	80090e6 <_dtoa_r+0x1fe>
 8009104:	2301      	movs	r3, #1
 8009106:	e7b1      	b.n	800906c <_dtoa_r+0x184>
 8009108:	900f      	str	r0, [sp, #60]	; 0x3c
 800910a:	e7b0      	b.n	800906e <_dtoa_r+0x186>
 800910c:	9b05      	ldr	r3, [sp, #20]
 800910e:	eba3 030a 	sub.w	r3, r3, sl
 8009112:	9305      	str	r3, [sp, #20]
 8009114:	f1ca 0300 	rsb	r3, sl, #0
 8009118:	9307      	str	r3, [sp, #28]
 800911a:	2300      	movs	r3, #0
 800911c:	930e      	str	r3, [sp, #56]	; 0x38
 800911e:	e7bb      	b.n	8009098 <_dtoa_r+0x1b0>
 8009120:	2301      	movs	r3, #1
 8009122:	930a      	str	r3, [sp, #40]	; 0x28
 8009124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009126:	2b00      	cmp	r3, #0
 8009128:	dd59      	ble.n	80091de <_dtoa_r+0x2f6>
 800912a:	9302      	str	r3, [sp, #8]
 800912c:	4699      	mov	r9, r3
 800912e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009130:	2200      	movs	r2, #0
 8009132:	6072      	str	r2, [r6, #4]
 8009134:	2204      	movs	r2, #4
 8009136:	f102 0014 	add.w	r0, r2, #20
 800913a:	4298      	cmp	r0, r3
 800913c:	6871      	ldr	r1, [r6, #4]
 800913e:	d953      	bls.n	80091e8 <_dtoa_r+0x300>
 8009140:	4620      	mov	r0, r4
 8009142:	f000 ffdd 	bl	800a100 <_Balloc>
 8009146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009148:	6030      	str	r0, [r6, #0]
 800914a:	f1b9 0f0e 	cmp.w	r9, #14
 800914e:	f8d3 b000 	ldr.w	fp, [r3]
 8009152:	f200 80e6 	bhi.w	8009322 <_dtoa_r+0x43a>
 8009156:	2d00      	cmp	r5, #0
 8009158:	f000 80e3 	beq.w	8009322 <_dtoa_r+0x43a>
 800915c:	ed9d 7b00 	vldr	d7, [sp]
 8009160:	f1ba 0f00 	cmp.w	sl, #0
 8009164:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009168:	dd74      	ble.n	8009254 <_dtoa_r+0x36c>
 800916a:	4a2a      	ldr	r2, [pc, #168]	; (8009214 <_dtoa_r+0x32c>)
 800916c:	f00a 030f 	and.w	r3, sl, #15
 8009170:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009174:	ed93 7b00 	vldr	d7, [r3]
 8009178:	ea4f 162a 	mov.w	r6, sl, asr #4
 800917c:	06f0      	lsls	r0, r6, #27
 800917e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009182:	d565      	bpl.n	8009250 <_dtoa_r+0x368>
 8009184:	4b24      	ldr	r3, [pc, #144]	; (8009218 <_dtoa_r+0x330>)
 8009186:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800918a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800918e:	f7f7 fb65 	bl	800085c <__aeabi_ddiv>
 8009192:	e9cd 0100 	strd	r0, r1, [sp]
 8009196:	f006 060f 	and.w	r6, r6, #15
 800919a:	2503      	movs	r5, #3
 800919c:	4f1e      	ldr	r7, [pc, #120]	; (8009218 <_dtoa_r+0x330>)
 800919e:	e04c      	b.n	800923a <_dtoa_r+0x352>
 80091a0:	2301      	movs	r3, #1
 80091a2:	930a      	str	r3, [sp, #40]	; 0x28
 80091a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091a6:	4453      	add	r3, sl
 80091a8:	f103 0901 	add.w	r9, r3, #1
 80091ac:	9302      	str	r3, [sp, #8]
 80091ae:	464b      	mov	r3, r9
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	bfb8      	it	lt
 80091b4:	2301      	movlt	r3, #1
 80091b6:	e7ba      	b.n	800912e <_dtoa_r+0x246>
 80091b8:	2300      	movs	r3, #0
 80091ba:	e7b2      	b.n	8009122 <_dtoa_r+0x23a>
 80091bc:	2300      	movs	r3, #0
 80091be:	e7f0      	b.n	80091a2 <_dtoa_r+0x2ba>
 80091c0:	2501      	movs	r5, #1
 80091c2:	2300      	movs	r3, #0
 80091c4:	9306      	str	r3, [sp, #24]
 80091c6:	950a      	str	r5, [sp, #40]	; 0x28
 80091c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091cc:	9302      	str	r3, [sp, #8]
 80091ce:	4699      	mov	r9, r3
 80091d0:	2200      	movs	r2, #0
 80091d2:	2312      	movs	r3, #18
 80091d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80091d6:	e7aa      	b.n	800912e <_dtoa_r+0x246>
 80091d8:	2301      	movs	r3, #1
 80091da:	930a      	str	r3, [sp, #40]	; 0x28
 80091dc:	e7f4      	b.n	80091c8 <_dtoa_r+0x2e0>
 80091de:	2301      	movs	r3, #1
 80091e0:	9302      	str	r3, [sp, #8]
 80091e2:	4699      	mov	r9, r3
 80091e4:	461a      	mov	r2, r3
 80091e6:	e7f5      	b.n	80091d4 <_dtoa_r+0x2ec>
 80091e8:	3101      	adds	r1, #1
 80091ea:	6071      	str	r1, [r6, #4]
 80091ec:	0052      	lsls	r2, r2, #1
 80091ee:	e7a2      	b.n	8009136 <_dtoa_r+0x24e>
 80091f0:	636f4361 	.word	0x636f4361
 80091f4:	3fd287a7 	.word	0x3fd287a7
 80091f8:	8b60c8b3 	.word	0x8b60c8b3
 80091fc:	3fc68a28 	.word	0x3fc68a28
 8009200:	509f79fb 	.word	0x509f79fb
 8009204:	3fd34413 	.word	0x3fd34413
 8009208:	7ff00000 	.word	0x7ff00000
 800920c:	0800af95 	.word	0x0800af95
 8009210:	3ff80000 	.word	0x3ff80000
 8009214:	0800b050 	.word	0x0800b050
 8009218:	0800b028 	.word	0x0800b028
 800921c:	0800b019 	.word	0x0800b019
 8009220:	07f1      	lsls	r1, r6, #31
 8009222:	d508      	bpl.n	8009236 <_dtoa_r+0x34e>
 8009224:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800922c:	f7f7 f9ec 	bl	8000608 <__aeabi_dmul>
 8009230:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009234:	3501      	adds	r5, #1
 8009236:	1076      	asrs	r6, r6, #1
 8009238:	3708      	adds	r7, #8
 800923a:	2e00      	cmp	r6, #0
 800923c:	d1f0      	bne.n	8009220 <_dtoa_r+0x338>
 800923e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009242:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009246:	f7f7 fb09 	bl	800085c <__aeabi_ddiv>
 800924a:	e9cd 0100 	strd	r0, r1, [sp]
 800924e:	e01a      	b.n	8009286 <_dtoa_r+0x39e>
 8009250:	2502      	movs	r5, #2
 8009252:	e7a3      	b.n	800919c <_dtoa_r+0x2b4>
 8009254:	f000 80a0 	beq.w	8009398 <_dtoa_r+0x4b0>
 8009258:	f1ca 0600 	rsb	r6, sl, #0
 800925c:	4b9f      	ldr	r3, [pc, #636]	; (80094dc <_dtoa_r+0x5f4>)
 800925e:	4fa0      	ldr	r7, [pc, #640]	; (80094e0 <_dtoa_r+0x5f8>)
 8009260:	f006 020f 	and.w	r2, r6, #15
 8009264:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009270:	f7f7 f9ca 	bl	8000608 <__aeabi_dmul>
 8009274:	e9cd 0100 	strd	r0, r1, [sp]
 8009278:	1136      	asrs	r6, r6, #4
 800927a:	2300      	movs	r3, #0
 800927c:	2502      	movs	r5, #2
 800927e:	2e00      	cmp	r6, #0
 8009280:	d17f      	bne.n	8009382 <_dtoa_r+0x49a>
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1e1      	bne.n	800924a <_dtoa_r+0x362>
 8009286:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009288:	2b00      	cmp	r3, #0
 800928a:	f000 8087 	beq.w	800939c <_dtoa_r+0x4b4>
 800928e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009292:	2200      	movs	r2, #0
 8009294:	4b93      	ldr	r3, [pc, #588]	; (80094e4 <_dtoa_r+0x5fc>)
 8009296:	4630      	mov	r0, r6
 8009298:	4639      	mov	r1, r7
 800929a:	f7f7 fc27 	bl	8000aec <__aeabi_dcmplt>
 800929e:	2800      	cmp	r0, #0
 80092a0:	d07c      	beq.n	800939c <_dtoa_r+0x4b4>
 80092a2:	f1b9 0f00 	cmp.w	r9, #0
 80092a6:	d079      	beq.n	800939c <_dtoa_r+0x4b4>
 80092a8:	9b02      	ldr	r3, [sp, #8]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	dd35      	ble.n	800931a <_dtoa_r+0x432>
 80092ae:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80092b2:	9308      	str	r3, [sp, #32]
 80092b4:	4639      	mov	r1, r7
 80092b6:	2200      	movs	r2, #0
 80092b8:	4b8b      	ldr	r3, [pc, #556]	; (80094e8 <_dtoa_r+0x600>)
 80092ba:	4630      	mov	r0, r6
 80092bc:	f7f7 f9a4 	bl	8000608 <__aeabi_dmul>
 80092c0:	e9cd 0100 	strd	r0, r1, [sp]
 80092c4:	9f02      	ldr	r7, [sp, #8]
 80092c6:	3501      	adds	r5, #1
 80092c8:	4628      	mov	r0, r5
 80092ca:	f7f7 f933 	bl	8000534 <__aeabi_i2d>
 80092ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092d2:	f7f7 f999 	bl	8000608 <__aeabi_dmul>
 80092d6:	2200      	movs	r2, #0
 80092d8:	4b84      	ldr	r3, [pc, #528]	; (80094ec <_dtoa_r+0x604>)
 80092da:	f7f6 ffdf 	bl	800029c <__adddf3>
 80092de:	4605      	mov	r5, r0
 80092e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80092e4:	2f00      	cmp	r7, #0
 80092e6:	d15d      	bne.n	80093a4 <_dtoa_r+0x4bc>
 80092e8:	2200      	movs	r2, #0
 80092ea:	4b81      	ldr	r3, [pc, #516]	; (80094f0 <_dtoa_r+0x608>)
 80092ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092f0:	f7f6 ffd2 	bl	8000298 <__aeabi_dsub>
 80092f4:	462a      	mov	r2, r5
 80092f6:	4633      	mov	r3, r6
 80092f8:	e9cd 0100 	strd	r0, r1, [sp]
 80092fc:	f7f7 fc14 	bl	8000b28 <__aeabi_dcmpgt>
 8009300:	2800      	cmp	r0, #0
 8009302:	f040 8288 	bne.w	8009816 <_dtoa_r+0x92e>
 8009306:	462a      	mov	r2, r5
 8009308:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800930c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009310:	f7f7 fbec 	bl	8000aec <__aeabi_dcmplt>
 8009314:	2800      	cmp	r0, #0
 8009316:	f040 827c 	bne.w	8009812 <_dtoa_r+0x92a>
 800931a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800931e:	e9cd 2300 	strd	r2, r3, [sp]
 8009322:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009324:	2b00      	cmp	r3, #0
 8009326:	f2c0 8150 	blt.w	80095ca <_dtoa_r+0x6e2>
 800932a:	f1ba 0f0e 	cmp.w	sl, #14
 800932e:	f300 814c 	bgt.w	80095ca <_dtoa_r+0x6e2>
 8009332:	4b6a      	ldr	r3, [pc, #424]	; (80094dc <_dtoa_r+0x5f4>)
 8009334:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009338:	ed93 7b00 	vldr	d7, [r3]
 800933c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800933e:	2b00      	cmp	r3, #0
 8009340:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009344:	f280 80d8 	bge.w	80094f8 <_dtoa_r+0x610>
 8009348:	f1b9 0f00 	cmp.w	r9, #0
 800934c:	f300 80d4 	bgt.w	80094f8 <_dtoa_r+0x610>
 8009350:	f040 825e 	bne.w	8009810 <_dtoa_r+0x928>
 8009354:	2200      	movs	r2, #0
 8009356:	4b66      	ldr	r3, [pc, #408]	; (80094f0 <_dtoa_r+0x608>)
 8009358:	ec51 0b17 	vmov	r0, r1, d7
 800935c:	f7f7 f954 	bl	8000608 <__aeabi_dmul>
 8009360:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009364:	f7f7 fbd6 	bl	8000b14 <__aeabi_dcmpge>
 8009368:	464f      	mov	r7, r9
 800936a:	464e      	mov	r6, r9
 800936c:	2800      	cmp	r0, #0
 800936e:	f040 8234 	bne.w	80097da <_dtoa_r+0x8f2>
 8009372:	2331      	movs	r3, #49	; 0x31
 8009374:	f10b 0501 	add.w	r5, fp, #1
 8009378:	f88b 3000 	strb.w	r3, [fp]
 800937c:	f10a 0a01 	add.w	sl, sl, #1
 8009380:	e22f      	b.n	80097e2 <_dtoa_r+0x8fa>
 8009382:	07f2      	lsls	r2, r6, #31
 8009384:	d505      	bpl.n	8009392 <_dtoa_r+0x4aa>
 8009386:	e9d7 2300 	ldrd	r2, r3, [r7]
 800938a:	f7f7 f93d 	bl	8000608 <__aeabi_dmul>
 800938e:	3501      	adds	r5, #1
 8009390:	2301      	movs	r3, #1
 8009392:	1076      	asrs	r6, r6, #1
 8009394:	3708      	adds	r7, #8
 8009396:	e772      	b.n	800927e <_dtoa_r+0x396>
 8009398:	2502      	movs	r5, #2
 800939a:	e774      	b.n	8009286 <_dtoa_r+0x39e>
 800939c:	f8cd a020 	str.w	sl, [sp, #32]
 80093a0:	464f      	mov	r7, r9
 80093a2:	e791      	b.n	80092c8 <_dtoa_r+0x3e0>
 80093a4:	4b4d      	ldr	r3, [pc, #308]	; (80094dc <_dtoa_r+0x5f4>)
 80093a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80093aa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80093ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d047      	beq.n	8009444 <_dtoa_r+0x55c>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	2000      	movs	r0, #0
 80093ba:	494e      	ldr	r1, [pc, #312]	; (80094f4 <_dtoa_r+0x60c>)
 80093bc:	f7f7 fa4e 	bl	800085c <__aeabi_ddiv>
 80093c0:	462a      	mov	r2, r5
 80093c2:	4633      	mov	r3, r6
 80093c4:	f7f6 ff68 	bl	8000298 <__aeabi_dsub>
 80093c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80093cc:	465d      	mov	r5, fp
 80093ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093d2:	f7f7 fbc9 	bl	8000b68 <__aeabi_d2iz>
 80093d6:	4606      	mov	r6, r0
 80093d8:	f7f7 f8ac 	bl	8000534 <__aeabi_i2d>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093e4:	f7f6 ff58 	bl	8000298 <__aeabi_dsub>
 80093e8:	3630      	adds	r6, #48	; 0x30
 80093ea:	f805 6b01 	strb.w	r6, [r5], #1
 80093ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80093f2:	e9cd 0100 	strd	r0, r1, [sp]
 80093f6:	f7f7 fb79 	bl	8000aec <__aeabi_dcmplt>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d163      	bne.n	80094c6 <_dtoa_r+0x5de>
 80093fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009402:	2000      	movs	r0, #0
 8009404:	4937      	ldr	r1, [pc, #220]	; (80094e4 <_dtoa_r+0x5fc>)
 8009406:	f7f6 ff47 	bl	8000298 <__aeabi_dsub>
 800940a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800940e:	f7f7 fb6d 	bl	8000aec <__aeabi_dcmplt>
 8009412:	2800      	cmp	r0, #0
 8009414:	f040 80b7 	bne.w	8009586 <_dtoa_r+0x69e>
 8009418:	eba5 030b 	sub.w	r3, r5, fp
 800941c:	429f      	cmp	r7, r3
 800941e:	f77f af7c 	ble.w	800931a <_dtoa_r+0x432>
 8009422:	2200      	movs	r2, #0
 8009424:	4b30      	ldr	r3, [pc, #192]	; (80094e8 <_dtoa_r+0x600>)
 8009426:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800942a:	f7f7 f8ed 	bl	8000608 <__aeabi_dmul>
 800942e:	2200      	movs	r2, #0
 8009430:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009434:	4b2c      	ldr	r3, [pc, #176]	; (80094e8 <_dtoa_r+0x600>)
 8009436:	e9dd 0100 	ldrd	r0, r1, [sp]
 800943a:	f7f7 f8e5 	bl	8000608 <__aeabi_dmul>
 800943e:	e9cd 0100 	strd	r0, r1, [sp]
 8009442:	e7c4      	b.n	80093ce <_dtoa_r+0x4e6>
 8009444:	462a      	mov	r2, r5
 8009446:	4633      	mov	r3, r6
 8009448:	f7f7 f8de 	bl	8000608 <__aeabi_dmul>
 800944c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009450:	eb0b 0507 	add.w	r5, fp, r7
 8009454:	465e      	mov	r6, fp
 8009456:	e9dd 0100 	ldrd	r0, r1, [sp]
 800945a:	f7f7 fb85 	bl	8000b68 <__aeabi_d2iz>
 800945e:	4607      	mov	r7, r0
 8009460:	f7f7 f868 	bl	8000534 <__aeabi_i2d>
 8009464:	3730      	adds	r7, #48	; 0x30
 8009466:	4602      	mov	r2, r0
 8009468:	460b      	mov	r3, r1
 800946a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800946e:	f7f6 ff13 	bl	8000298 <__aeabi_dsub>
 8009472:	f806 7b01 	strb.w	r7, [r6], #1
 8009476:	42ae      	cmp	r6, r5
 8009478:	e9cd 0100 	strd	r0, r1, [sp]
 800947c:	f04f 0200 	mov.w	r2, #0
 8009480:	d126      	bne.n	80094d0 <_dtoa_r+0x5e8>
 8009482:	4b1c      	ldr	r3, [pc, #112]	; (80094f4 <_dtoa_r+0x60c>)
 8009484:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009488:	f7f6 ff08 	bl	800029c <__adddf3>
 800948c:	4602      	mov	r2, r0
 800948e:	460b      	mov	r3, r1
 8009490:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009494:	f7f7 fb48 	bl	8000b28 <__aeabi_dcmpgt>
 8009498:	2800      	cmp	r0, #0
 800949a:	d174      	bne.n	8009586 <_dtoa_r+0x69e>
 800949c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80094a0:	2000      	movs	r0, #0
 80094a2:	4914      	ldr	r1, [pc, #80]	; (80094f4 <_dtoa_r+0x60c>)
 80094a4:	f7f6 fef8 	bl	8000298 <__aeabi_dsub>
 80094a8:	4602      	mov	r2, r0
 80094aa:	460b      	mov	r3, r1
 80094ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094b0:	f7f7 fb1c 	bl	8000aec <__aeabi_dcmplt>
 80094b4:	2800      	cmp	r0, #0
 80094b6:	f43f af30 	beq.w	800931a <_dtoa_r+0x432>
 80094ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094be:	2b30      	cmp	r3, #48	; 0x30
 80094c0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80094c4:	d002      	beq.n	80094cc <_dtoa_r+0x5e4>
 80094c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80094ca:	e04a      	b.n	8009562 <_dtoa_r+0x67a>
 80094cc:	4615      	mov	r5, r2
 80094ce:	e7f4      	b.n	80094ba <_dtoa_r+0x5d2>
 80094d0:	4b05      	ldr	r3, [pc, #20]	; (80094e8 <_dtoa_r+0x600>)
 80094d2:	f7f7 f899 	bl	8000608 <__aeabi_dmul>
 80094d6:	e9cd 0100 	strd	r0, r1, [sp]
 80094da:	e7bc      	b.n	8009456 <_dtoa_r+0x56e>
 80094dc:	0800b050 	.word	0x0800b050
 80094e0:	0800b028 	.word	0x0800b028
 80094e4:	3ff00000 	.word	0x3ff00000
 80094e8:	40240000 	.word	0x40240000
 80094ec:	401c0000 	.word	0x401c0000
 80094f0:	40140000 	.word	0x40140000
 80094f4:	3fe00000 	.word	0x3fe00000
 80094f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80094fc:	465d      	mov	r5, fp
 80094fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009502:	4630      	mov	r0, r6
 8009504:	4639      	mov	r1, r7
 8009506:	f7f7 f9a9 	bl	800085c <__aeabi_ddiv>
 800950a:	f7f7 fb2d 	bl	8000b68 <__aeabi_d2iz>
 800950e:	4680      	mov	r8, r0
 8009510:	f7f7 f810 	bl	8000534 <__aeabi_i2d>
 8009514:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009518:	f7f7 f876 	bl	8000608 <__aeabi_dmul>
 800951c:	4602      	mov	r2, r0
 800951e:	460b      	mov	r3, r1
 8009520:	4630      	mov	r0, r6
 8009522:	4639      	mov	r1, r7
 8009524:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009528:	f7f6 feb6 	bl	8000298 <__aeabi_dsub>
 800952c:	f805 6b01 	strb.w	r6, [r5], #1
 8009530:	eba5 060b 	sub.w	r6, r5, fp
 8009534:	45b1      	cmp	r9, r6
 8009536:	4602      	mov	r2, r0
 8009538:	460b      	mov	r3, r1
 800953a:	d139      	bne.n	80095b0 <_dtoa_r+0x6c8>
 800953c:	f7f6 feae 	bl	800029c <__adddf3>
 8009540:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009544:	4606      	mov	r6, r0
 8009546:	460f      	mov	r7, r1
 8009548:	f7f7 faee 	bl	8000b28 <__aeabi_dcmpgt>
 800954c:	b9c8      	cbnz	r0, 8009582 <_dtoa_r+0x69a>
 800954e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009552:	4630      	mov	r0, r6
 8009554:	4639      	mov	r1, r7
 8009556:	f7f7 fabf 	bl	8000ad8 <__aeabi_dcmpeq>
 800955a:	b110      	cbz	r0, 8009562 <_dtoa_r+0x67a>
 800955c:	f018 0f01 	tst.w	r8, #1
 8009560:	d10f      	bne.n	8009582 <_dtoa_r+0x69a>
 8009562:	9904      	ldr	r1, [sp, #16]
 8009564:	4620      	mov	r0, r4
 8009566:	f000 fdff 	bl	800a168 <_Bfree>
 800956a:	2300      	movs	r3, #0
 800956c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800956e:	702b      	strb	r3, [r5, #0]
 8009570:	f10a 0301 	add.w	r3, sl, #1
 8009574:	6013      	str	r3, [r2, #0]
 8009576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009578:	2b00      	cmp	r3, #0
 800957a:	f000 8241 	beq.w	8009a00 <_dtoa_r+0xb18>
 800957e:	601d      	str	r5, [r3, #0]
 8009580:	e23e      	b.n	8009a00 <_dtoa_r+0xb18>
 8009582:	f8cd a020 	str.w	sl, [sp, #32]
 8009586:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800958a:	2a39      	cmp	r2, #57	; 0x39
 800958c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8009590:	d108      	bne.n	80095a4 <_dtoa_r+0x6bc>
 8009592:	459b      	cmp	fp, r3
 8009594:	d10a      	bne.n	80095ac <_dtoa_r+0x6c4>
 8009596:	9b08      	ldr	r3, [sp, #32]
 8009598:	3301      	adds	r3, #1
 800959a:	9308      	str	r3, [sp, #32]
 800959c:	2330      	movs	r3, #48	; 0x30
 800959e:	f88b 3000 	strb.w	r3, [fp]
 80095a2:	465b      	mov	r3, fp
 80095a4:	781a      	ldrb	r2, [r3, #0]
 80095a6:	3201      	adds	r2, #1
 80095a8:	701a      	strb	r2, [r3, #0]
 80095aa:	e78c      	b.n	80094c6 <_dtoa_r+0x5de>
 80095ac:	461d      	mov	r5, r3
 80095ae:	e7ea      	b.n	8009586 <_dtoa_r+0x69e>
 80095b0:	2200      	movs	r2, #0
 80095b2:	4b9b      	ldr	r3, [pc, #620]	; (8009820 <_dtoa_r+0x938>)
 80095b4:	f7f7 f828 	bl	8000608 <__aeabi_dmul>
 80095b8:	2200      	movs	r2, #0
 80095ba:	2300      	movs	r3, #0
 80095bc:	4606      	mov	r6, r0
 80095be:	460f      	mov	r7, r1
 80095c0:	f7f7 fa8a 	bl	8000ad8 <__aeabi_dcmpeq>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d09a      	beq.n	80094fe <_dtoa_r+0x616>
 80095c8:	e7cb      	b.n	8009562 <_dtoa_r+0x67a>
 80095ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095cc:	2a00      	cmp	r2, #0
 80095ce:	f000 808b 	beq.w	80096e8 <_dtoa_r+0x800>
 80095d2:	9a06      	ldr	r2, [sp, #24]
 80095d4:	2a01      	cmp	r2, #1
 80095d6:	dc6e      	bgt.n	80096b6 <_dtoa_r+0x7ce>
 80095d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80095da:	2a00      	cmp	r2, #0
 80095dc:	d067      	beq.n	80096ae <_dtoa_r+0x7c6>
 80095de:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80095e2:	9f07      	ldr	r7, [sp, #28]
 80095e4:	9d05      	ldr	r5, [sp, #20]
 80095e6:	9a05      	ldr	r2, [sp, #20]
 80095e8:	2101      	movs	r1, #1
 80095ea:	441a      	add	r2, r3
 80095ec:	4620      	mov	r0, r4
 80095ee:	9205      	str	r2, [sp, #20]
 80095f0:	4498      	add	r8, r3
 80095f2:	f000 fe97 	bl	800a324 <__i2b>
 80095f6:	4606      	mov	r6, r0
 80095f8:	2d00      	cmp	r5, #0
 80095fa:	dd0c      	ble.n	8009616 <_dtoa_r+0x72e>
 80095fc:	f1b8 0f00 	cmp.w	r8, #0
 8009600:	dd09      	ble.n	8009616 <_dtoa_r+0x72e>
 8009602:	4545      	cmp	r5, r8
 8009604:	9a05      	ldr	r2, [sp, #20]
 8009606:	462b      	mov	r3, r5
 8009608:	bfa8      	it	ge
 800960a:	4643      	movge	r3, r8
 800960c:	1ad2      	subs	r2, r2, r3
 800960e:	9205      	str	r2, [sp, #20]
 8009610:	1aed      	subs	r5, r5, r3
 8009612:	eba8 0803 	sub.w	r8, r8, r3
 8009616:	9b07      	ldr	r3, [sp, #28]
 8009618:	b1eb      	cbz	r3, 8009656 <_dtoa_r+0x76e>
 800961a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800961c:	2b00      	cmp	r3, #0
 800961e:	d067      	beq.n	80096f0 <_dtoa_r+0x808>
 8009620:	b18f      	cbz	r7, 8009646 <_dtoa_r+0x75e>
 8009622:	4631      	mov	r1, r6
 8009624:	463a      	mov	r2, r7
 8009626:	4620      	mov	r0, r4
 8009628:	f000 ff1c 	bl	800a464 <__pow5mult>
 800962c:	9a04      	ldr	r2, [sp, #16]
 800962e:	4601      	mov	r1, r0
 8009630:	4606      	mov	r6, r0
 8009632:	4620      	mov	r0, r4
 8009634:	f000 fe7f 	bl	800a336 <__multiply>
 8009638:	9904      	ldr	r1, [sp, #16]
 800963a:	9008      	str	r0, [sp, #32]
 800963c:	4620      	mov	r0, r4
 800963e:	f000 fd93 	bl	800a168 <_Bfree>
 8009642:	9b08      	ldr	r3, [sp, #32]
 8009644:	9304      	str	r3, [sp, #16]
 8009646:	9b07      	ldr	r3, [sp, #28]
 8009648:	1bda      	subs	r2, r3, r7
 800964a:	d004      	beq.n	8009656 <_dtoa_r+0x76e>
 800964c:	9904      	ldr	r1, [sp, #16]
 800964e:	4620      	mov	r0, r4
 8009650:	f000 ff08 	bl	800a464 <__pow5mult>
 8009654:	9004      	str	r0, [sp, #16]
 8009656:	2101      	movs	r1, #1
 8009658:	4620      	mov	r0, r4
 800965a:	f000 fe63 	bl	800a324 <__i2b>
 800965e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009660:	4607      	mov	r7, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	f000 81d0 	beq.w	8009a08 <_dtoa_r+0xb20>
 8009668:	461a      	mov	r2, r3
 800966a:	4601      	mov	r1, r0
 800966c:	4620      	mov	r0, r4
 800966e:	f000 fef9 	bl	800a464 <__pow5mult>
 8009672:	9b06      	ldr	r3, [sp, #24]
 8009674:	2b01      	cmp	r3, #1
 8009676:	4607      	mov	r7, r0
 8009678:	dc40      	bgt.n	80096fc <_dtoa_r+0x814>
 800967a:	9b00      	ldr	r3, [sp, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d139      	bne.n	80096f4 <_dtoa_r+0x80c>
 8009680:	9b01      	ldr	r3, [sp, #4]
 8009682:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009686:	2b00      	cmp	r3, #0
 8009688:	d136      	bne.n	80096f8 <_dtoa_r+0x810>
 800968a:	9b01      	ldr	r3, [sp, #4]
 800968c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009690:	0d1b      	lsrs	r3, r3, #20
 8009692:	051b      	lsls	r3, r3, #20
 8009694:	b12b      	cbz	r3, 80096a2 <_dtoa_r+0x7ba>
 8009696:	9b05      	ldr	r3, [sp, #20]
 8009698:	3301      	adds	r3, #1
 800969a:	9305      	str	r3, [sp, #20]
 800969c:	f108 0801 	add.w	r8, r8, #1
 80096a0:	2301      	movs	r3, #1
 80096a2:	9307      	str	r3, [sp, #28]
 80096a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d12a      	bne.n	8009700 <_dtoa_r+0x818>
 80096aa:	2001      	movs	r0, #1
 80096ac:	e030      	b.n	8009710 <_dtoa_r+0x828>
 80096ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80096b4:	e795      	b.n	80095e2 <_dtoa_r+0x6fa>
 80096b6:	9b07      	ldr	r3, [sp, #28]
 80096b8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80096bc:	42bb      	cmp	r3, r7
 80096be:	bfbf      	itttt	lt
 80096c0:	9b07      	ldrlt	r3, [sp, #28]
 80096c2:	9707      	strlt	r7, [sp, #28]
 80096c4:	1afa      	sublt	r2, r7, r3
 80096c6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80096c8:	bfbb      	ittet	lt
 80096ca:	189b      	addlt	r3, r3, r2
 80096cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80096ce:	1bdf      	subge	r7, r3, r7
 80096d0:	2700      	movlt	r7, #0
 80096d2:	f1b9 0f00 	cmp.w	r9, #0
 80096d6:	bfb5      	itete	lt
 80096d8:	9b05      	ldrlt	r3, [sp, #20]
 80096da:	9d05      	ldrge	r5, [sp, #20]
 80096dc:	eba3 0509 	sublt.w	r5, r3, r9
 80096e0:	464b      	movge	r3, r9
 80096e2:	bfb8      	it	lt
 80096e4:	2300      	movlt	r3, #0
 80096e6:	e77e      	b.n	80095e6 <_dtoa_r+0x6fe>
 80096e8:	9f07      	ldr	r7, [sp, #28]
 80096ea:	9d05      	ldr	r5, [sp, #20]
 80096ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80096ee:	e783      	b.n	80095f8 <_dtoa_r+0x710>
 80096f0:	9a07      	ldr	r2, [sp, #28]
 80096f2:	e7ab      	b.n	800964c <_dtoa_r+0x764>
 80096f4:	2300      	movs	r3, #0
 80096f6:	e7d4      	b.n	80096a2 <_dtoa_r+0x7ba>
 80096f8:	9b00      	ldr	r3, [sp, #0]
 80096fa:	e7d2      	b.n	80096a2 <_dtoa_r+0x7ba>
 80096fc:	2300      	movs	r3, #0
 80096fe:	9307      	str	r3, [sp, #28]
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009706:	6918      	ldr	r0, [r3, #16]
 8009708:	f000 fdbe 	bl	800a288 <__hi0bits>
 800970c:	f1c0 0020 	rsb	r0, r0, #32
 8009710:	4440      	add	r0, r8
 8009712:	f010 001f 	ands.w	r0, r0, #31
 8009716:	d047      	beq.n	80097a8 <_dtoa_r+0x8c0>
 8009718:	f1c0 0320 	rsb	r3, r0, #32
 800971c:	2b04      	cmp	r3, #4
 800971e:	dd3b      	ble.n	8009798 <_dtoa_r+0x8b0>
 8009720:	9b05      	ldr	r3, [sp, #20]
 8009722:	f1c0 001c 	rsb	r0, r0, #28
 8009726:	4403      	add	r3, r0
 8009728:	9305      	str	r3, [sp, #20]
 800972a:	4405      	add	r5, r0
 800972c:	4480      	add	r8, r0
 800972e:	9b05      	ldr	r3, [sp, #20]
 8009730:	2b00      	cmp	r3, #0
 8009732:	dd05      	ble.n	8009740 <_dtoa_r+0x858>
 8009734:	461a      	mov	r2, r3
 8009736:	9904      	ldr	r1, [sp, #16]
 8009738:	4620      	mov	r0, r4
 800973a:	f000 fee1 	bl	800a500 <__lshift>
 800973e:	9004      	str	r0, [sp, #16]
 8009740:	f1b8 0f00 	cmp.w	r8, #0
 8009744:	dd05      	ble.n	8009752 <_dtoa_r+0x86a>
 8009746:	4639      	mov	r1, r7
 8009748:	4642      	mov	r2, r8
 800974a:	4620      	mov	r0, r4
 800974c:	f000 fed8 	bl	800a500 <__lshift>
 8009750:	4607      	mov	r7, r0
 8009752:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009754:	b353      	cbz	r3, 80097ac <_dtoa_r+0x8c4>
 8009756:	4639      	mov	r1, r7
 8009758:	9804      	ldr	r0, [sp, #16]
 800975a:	f000 ff25 	bl	800a5a8 <__mcmp>
 800975e:	2800      	cmp	r0, #0
 8009760:	da24      	bge.n	80097ac <_dtoa_r+0x8c4>
 8009762:	2300      	movs	r3, #0
 8009764:	220a      	movs	r2, #10
 8009766:	9904      	ldr	r1, [sp, #16]
 8009768:	4620      	mov	r0, r4
 800976a:	f000 fd14 	bl	800a196 <__multadd>
 800976e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009770:	9004      	str	r0, [sp, #16]
 8009772:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009776:	2b00      	cmp	r3, #0
 8009778:	f000 814d 	beq.w	8009a16 <_dtoa_r+0xb2e>
 800977c:	2300      	movs	r3, #0
 800977e:	4631      	mov	r1, r6
 8009780:	220a      	movs	r2, #10
 8009782:	4620      	mov	r0, r4
 8009784:	f000 fd07 	bl	800a196 <__multadd>
 8009788:	9b02      	ldr	r3, [sp, #8]
 800978a:	2b00      	cmp	r3, #0
 800978c:	4606      	mov	r6, r0
 800978e:	dc4f      	bgt.n	8009830 <_dtoa_r+0x948>
 8009790:	9b06      	ldr	r3, [sp, #24]
 8009792:	2b02      	cmp	r3, #2
 8009794:	dd4c      	ble.n	8009830 <_dtoa_r+0x948>
 8009796:	e011      	b.n	80097bc <_dtoa_r+0x8d4>
 8009798:	d0c9      	beq.n	800972e <_dtoa_r+0x846>
 800979a:	9a05      	ldr	r2, [sp, #20]
 800979c:	331c      	adds	r3, #28
 800979e:	441a      	add	r2, r3
 80097a0:	9205      	str	r2, [sp, #20]
 80097a2:	441d      	add	r5, r3
 80097a4:	4498      	add	r8, r3
 80097a6:	e7c2      	b.n	800972e <_dtoa_r+0x846>
 80097a8:	4603      	mov	r3, r0
 80097aa:	e7f6      	b.n	800979a <_dtoa_r+0x8b2>
 80097ac:	f1b9 0f00 	cmp.w	r9, #0
 80097b0:	dc38      	bgt.n	8009824 <_dtoa_r+0x93c>
 80097b2:	9b06      	ldr	r3, [sp, #24]
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	dd35      	ble.n	8009824 <_dtoa_r+0x93c>
 80097b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80097bc:	9b02      	ldr	r3, [sp, #8]
 80097be:	b963      	cbnz	r3, 80097da <_dtoa_r+0x8f2>
 80097c0:	4639      	mov	r1, r7
 80097c2:	2205      	movs	r2, #5
 80097c4:	4620      	mov	r0, r4
 80097c6:	f000 fce6 	bl	800a196 <__multadd>
 80097ca:	4601      	mov	r1, r0
 80097cc:	4607      	mov	r7, r0
 80097ce:	9804      	ldr	r0, [sp, #16]
 80097d0:	f000 feea 	bl	800a5a8 <__mcmp>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	f73f adcc 	bgt.w	8009372 <_dtoa_r+0x48a>
 80097da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097dc:	465d      	mov	r5, fp
 80097de:	ea6f 0a03 	mvn.w	sl, r3
 80097e2:	f04f 0900 	mov.w	r9, #0
 80097e6:	4639      	mov	r1, r7
 80097e8:	4620      	mov	r0, r4
 80097ea:	f000 fcbd 	bl	800a168 <_Bfree>
 80097ee:	2e00      	cmp	r6, #0
 80097f0:	f43f aeb7 	beq.w	8009562 <_dtoa_r+0x67a>
 80097f4:	f1b9 0f00 	cmp.w	r9, #0
 80097f8:	d005      	beq.n	8009806 <_dtoa_r+0x91e>
 80097fa:	45b1      	cmp	r9, r6
 80097fc:	d003      	beq.n	8009806 <_dtoa_r+0x91e>
 80097fe:	4649      	mov	r1, r9
 8009800:	4620      	mov	r0, r4
 8009802:	f000 fcb1 	bl	800a168 <_Bfree>
 8009806:	4631      	mov	r1, r6
 8009808:	4620      	mov	r0, r4
 800980a:	f000 fcad 	bl	800a168 <_Bfree>
 800980e:	e6a8      	b.n	8009562 <_dtoa_r+0x67a>
 8009810:	2700      	movs	r7, #0
 8009812:	463e      	mov	r6, r7
 8009814:	e7e1      	b.n	80097da <_dtoa_r+0x8f2>
 8009816:	f8dd a020 	ldr.w	sl, [sp, #32]
 800981a:	463e      	mov	r6, r7
 800981c:	e5a9      	b.n	8009372 <_dtoa_r+0x48a>
 800981e:	bf00      	nop
 8009820:	40240000 	.word	0x40240000
 8009824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009826:	f8cd 9008 	str.w	r9, [sp, #8]
 800982a:	2b00      	cmp	r3, #0
 800982c:	f000 80fa 	beq.w	8009a24 <_dtoa_r+0xb3c>
 8009830:	2d00      	cmp	r5, #0
 8009832:	dd05      	ble.n	8009840 <_dtoa_r+0x958>
 8009834:	4631      	mov	r1, r6
 8009836:	462a      	mov	r2, r5
 8009838:	4620      	mov	r0, r4
 800983a:	f000 fe61 	bl	800a500 <__lshift>
 800983e:	4606      	mov	r6, r0
 8009840:	9b07      	ldr	r3, [sp, #28]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d04c      	beq.n	80098e0 <_dtoa_r+0x9f8>
 8009846:	6871      	ldr	r1, [r6, #4]
 8009848:	4620      	mov	r0, r4
 800984a:	f000 fc59 	bl	800a100 <_Balloc>
 800984e:	6932      	ldr	r2, [r6, #16]
 8009850:	3202      	adds	r2, #2
 8009852:	4605      	mov	r5, r0
 8009854:	0092      	lsls	r2, r2, #2
 8009856:	f106 010c 	add.w	r1, r6, #12
 800985a:	300c      	adds	r0, #12
 800985c:	f7fd fd90 	bl	8007380 <memcpy>
 8009860:	2201      	movs	r2, #1
 8009862:	4629      	mov	r1, r5
 8009864:	4620      	mov	r0, r4
 8009866:	f000 fe4b 	bl	800a500 <__lshift>
 800986a:	9b00      	ldr	r3, [sp, #0]
 800986c:	f8cd b014 	str.w	fp, [sp, #20]
 8009870:	f003 0301 	and.w	r3, r3, #1
 8009874:	46b1      	mov	r9, r6
 8009876:	9307      	str	r3, [sp, #28]
 8009878:	4606      	mov	r6, r0
 800987a:	4639      	mov	r1, r7
 800987c:	9804      	ldr	r0, [sp, #16]
 800987e:	f7ff faa5 	bl	8008dcc <quorem>
 8009882:	4649      	mov	r1, r9
 8009884:	4605      	mov	r5, r0
 8009886:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800988a:	9804      	ldr	r0, [sp, #16]
 800988c:	f000 fe8c 	bl	800a5a8 <__mcmp>
 8009890:	4632      	mov	r2, r6
 8009892:	9000      	str	r0, [sp, #0]
 8009894:	4639      	mov	r1, r7
 8009896:	4620      	mov	r0, r4
 8009898:	f000 fea0 	bl	800a5dc <__mdiff>
 800989c:	68c3      	ldr	r3, [r0, #12]
 800989e:	4602      	mov	r2, r0
 80098a0:	bb03      	cbnz	r3, 80098e4 <_dtoa_r+0x9fc>
 80098a2:	4601      	mov	r1, r0
 80098a4:	9008      	str	r0, [sp, #32]
 80098a6:	9804      	ldr	r0, [sp, #16]
 80098a8:	f000 fe7e 	bl	800a5a8 <__mcmp>
 80098ac:	9a08      	ldr	r2, [sp, #32]
 80098ae:	4603      	mov	r3, r0
 80098b0:	4611      	mov	r1, r2
 80098b2:	4620      	mov	r0, r4
 80098b4:	9308      	str	r3, [sp, #32]
 80098b6:	f000 fc57 	bl	800a168 <_Bfree>
 80098ba:	9b08      	ldr	r3, [sp, #32]
 80098bc:	b9a3      	cbnz	r3, 80098e8 <_dtoa_r+0xa00>
 80098be:	9a06      	ldr	r2, [sp, #24]
 80098c0:	b992      	cbnz	r2, 80098e8 <_dtoa_r+0xa00>
 80098c2:	9a07      	ldr	r2, [sp, #28]
 80098c4:	b982      	cbnz	r2, 80098e8 <_dtoa_r+0xa00>
 80098c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80098ca:	d029      	beq.n	8009920 <_dtoa_r+0xa38>
 80098cc:	9b00      	ldr	r3, [sp, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	dd01      	ble.n	80098d6 <_dtoa_r+0x9ee>
 80098d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80098d6:	9b05      	ldr	r3, [sp, #20]
 80098d8:	1c5d      	adds	r5, r3, #1
 80098da:	f883 8000 	strb.w	r8, [r3]
 80098de:	e782      	b.n	80097e6 <_dtoa_r+0x8fe>
 80098e0:	4630      	mov	r0, r6
 80098e2:	e7c2      	b.n	800986a <_dtoa_r+0x982>
 80098e4:	2301      	movs	r3, #1
 80098e6:	e7e3      	b.n	80098b0 <_dtoa_r+0x9c8>
 80098e8:	9a00      	ldr	r2, [sp, #0]
 80098ea:	2a00      	cmp	r2, #0
 80098ec:	db04      	blt.n	80098f8 <_dtoa_r+0xa10>
 80098ee:	d125      	bne.n	800993c <_dtoa_r+0xa54>
 80098f0:	9a06      	ldr	r2, [sp, #24]
 80098f2:	bb1a      	cbnz	r2, 800993c <_dtoa_r+0xa54>
 80098f4:	9a07      	ldr	r2, [sp, #28]
 80098f6:	bb0a      	cbnz	r2, 800993c <_dtoa_r+0xa54>
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	ddec      	ble.n	80098d6 <_dtoa_r+0x9ee>
 80098fc:	2201      	movs	r2, #1
 80098fe:	9904      	ldr	r1, [sp, #16]
 8009900:	4620      	mov	r0, r4
 8009902:	f000 fdfd 	bl	800a500 <__lshift>
 8009906:	4639      	mov	r1, r7
 8009908:	9004      	str	r0, [sp, #16]
 800990a:	f000 fe4d 	bl	800a5a8 <__mcmp>
 800990e:	2800      	cmp	r0, #0
 8009910:	dc03      	bgt.n	800991a <_dtoa_r+0xa32>
 8009912:	d1e0      	bne.n	80098d6 <_dtoa_r+0x9ee>
 8009914:	f018 0f01 	tst.w	r8, #1
 8009918:	d0dd      	beq.n	80098d6 <_dtoa_r+0x9ee>
 800991a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800991e:	d1d8      	bne.n	80098d2 <_dtoa_r+0x9ea>
 8009920:	9b05      	ldr	r3, [sp, #20]
 8009922:	9a05      	ldr	r2, [sp, #20]
 8009924:	1c5d      	adds	r5, r3, #1
 8009926:	2339      	movs	r3, #57	; 0x39
 8009928:	7013      	strb	r3, [r2, #0]
 800992a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800992e:	2b39      	cmp	r3, #57	; 0x39
 8009930:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8009934:	d04f      	beq.n	80099d6 <_dtoa_r+0xaee>
 8009936:	3301      	adds	r3, #1
 8009938:	7013      	strb	r3, [r2, #0]
 800993a:	e754      	b.n	80097e6 <_dtoa_r+0x8fe>
 800993c:	9a05      	ldr	r2, [sp, #20]
 800993e:	2b00      	cmp	r3, #0
 8009940:	f102 0501 	add.w	r5, r2, #1
 8009944:	dd06      	ble.n	8009954 <_dtoa_r+0xa6c>
 8009946:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800994a:	d0e9      	beq.n	8009920 <_dtoa_r+0xa38>
 800994c:	f108 0801 	add.w	r8, r8, #1
 8009950:	9b05      	ldr	r3, [sp, #20]
 8009952:	e7c2      	b.n	80098da <_dtoa_r+0x9f2>
 8009954:	9a02      	ldr	r2, [sp, #8]
 8009956:	f805 8c01 	strb.w	r8, [r5, #-1]
 800995a:	eba5 030b 	sub.w	r3, r5, fp
 800995e:	4293      	cmp	r3, r2
 8009960:	d021      	beq.n	80099a6 <_dtoa_r+0xabe>
 8009962:	2300      	movs	r3, #0
 8009964:	220a      	movs	r2, #10
 8009966:	9904      	ldr	r1, [sp, #16]
 8009968:	4620      	mov	r0, r4
 800996a:	f000 fc14 	bl	800a196 <__multadd>
 800996e:	45b1      	cmp	r9, r6
 8009970:	9004      	str	r0, [sp, #16]
 8009972:	f04f 0300 	mov.w	r3, #0
 8009976:	f04f 020a 	mov.w	r2, #10
 800997a:	4649      	mov	r1, r9
 800997c:	4620      	mov	r0, r4
 800997e:	d105      	bne.n	800998c <_dtoa_r+0xaa4>
 8009980:	f000 fc09 	bl	800a196 <__multadd>
 8009984:	4681      	mov	r9, r0
 8009986:	4606      	mov	r6, r0
 8009988:	9505      	str	r5, [sp, #20]
 800998a:	e776      	b.n	800987a <_dtoa_r+0x992>
 800998c:	f000 fc03 	bl	800a196 <__multadd>
 8009990:	4631      	mov	r1, r6
 8009992:	4681      	mov	r9, r0
 8009994:	2300      	movs	r3, #0
 8009996:	220a      	movs	r2, #10
 8009998:	4620      	mov	r0, r4
 800999a:	f000 fbfc 	bl	800a196 <__multadd>
 800999e:	4606      	mov	r6, r0
 80099a0:	e7f2      	b.n	8009988 <_dtoa_r+0xaa0>
 80099a2:	f04f 0900 	mov.w	r9, #0
 80099a6:	2201      	movs	r2, #1
 80099a8:	9904      	ldr	r1, [sp, #16]
 80099aa:	4620      	mov	r0, r4
 80099ac:	f000 fda8 	bl	800a500 <__lshift>
 80099b0:	4639      	mov	r1, r7
 80099b2:	9004      	str	r0, [sp, #16]
 80099b4:	f000 fdf8 	bl	800a5a8 <__mcmp>
 80099b8:	2800      	cmp	r0, #0
 80099ba:	dcb6      	bgt.n	800992a <_dtoa_r+0xa42>
 80099bc:	d102      	bne.n	80099c4 <_dtoa_r+0xadc>
 80099be:	f018 0f01 	tst.w	r8, #1
 80099c2:	d1b2      	bne.n	800992a <_dtoa_r+0xa42>
 80099c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80099c8:	2b30      	cmp	r3, #48	; 0x30
 80099ca:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80099ce:	f47f af0a 	bne.w	80097e6 <_dtoa_r+0x8fe>
 80099d2:	4615      	mov	r5, r2
 80099d4:	e7f6      	b.n	80099c4 <_dtoa_r+0xadc>
 80099d6:	4593      	cmp	fp, r2
 80099d8:	d105      	bne.n	80099e6 <_dtoa_r+0xafe>
 80099da:	2331      	movs	r3, #49	; 0x31
 80099dc:	f10a 0a01 	add.w	sl, sl, #1
 80099e0:	f88b 3000 	strb.w	r3, [fp]
 80099e4:	e6ff      	b.n	80097e6 <_dtoa_r+0x8fe>
 80099e6:	4615      	mov	r5, r2
 80099e8:	e79f      	b.n	800992a <_dtoa_r+0xa42>
 80099ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009a50 <_dtoa_r+0xb68>
 80099ee:	e007      	b.n	8009a00 <_dtoa_r+0xb18>
 80099f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009a54 <_dtoa_r+0xb6c>
 80099f6:	b11b      	cbz	r3, 8009a00 <_dtoa_r+0xb18>
 80099f8:	f10b 0308 	add.w	r3, fp, #8
 80099fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80099fe:	6013      	str	r3, [r2, #0]
 8009a00:	4658      	mov	r0, fp
 8009a02:	b017      	add	sp, #92	; 0x5c
 8009a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a08:	9b06      	ldr	r3, [sp, #24]
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	f77f ae35 	ble.w	800967a <_dtoa_r+0x792>
 8009a10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a12:	9307      	str	r3, [sp, #28]
 8009a14:	e649      	b.n	80096aa <_dtoa_r+0x7c2>
 8009a16:	9b02      	ldr	r3, [sp, #8]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	dc03      	bgt.n	8009a24 <_dtoa_r+0xb3c>
 8009a1c:	9b06      	ldr	r3, [sp, #24]
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	f73f aecc 	bgt.w	80097bc <_dtoa_r+0x8d4>
 8009a24:	465d      	mov	r5, fp
 8009a26:	4639      	mov	r1, r7
 8009a28:	9804      	ldr	r0, [sp, #16]
 8009a2a:	f7ff f9cf 	bl	8008dcc <quorem>
 8009a2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009a32:	f805 8b01 	strb.w	r8, [r5], #1
 8009a36:	9a02      	ldr	r2, [sp, #8]
 8009a38:	eba5 030b 	sub.w	r3, r5, fp
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	ddb0      	ble.n	80099a2 <_dtoa_r+0xaba>
 8009a40:	2300      	movs	r3, #0
 8009a42:	220a      	movs	r2, #10
 8009a44:	9904      	ldr	r1, [sp, #16]
 8009a46:	4620      	mov	r0, r4
 8009a48:	f000 fba5 	bl	800a196 <__multadd>
 8009a4c:	9004      	str	r0, [sp, #16]
 8009a4e:	e7ea      	b.n	8009a26 <_dtoa_r+0xb3e>
 8009a50:	0800af94 	.word	0x0800af94
 8009a54:	0800b010 	.word	0x0800b010

08009a58 <rshift>:
 8009a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a5a:	6906      	ldr	r6, [r0, #16]
 8009a5c:	114b      	asrs	r3, r1, #5
 8009a5e:	429e      	cmp	r6, r3
 8009a60:	f100 0414 	add.w	r4, r0, #20
 8009a64:	dd30      	ble.n	8009ac8 <rshift+0x70>
 8009a66:	f011 011f 	ands.w	r1, r1, #31
 8009a6a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009a6e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009a72:	d108      	bne.n	8009a86 <rshift+0x2e>
 8009a74:	4621      	mov	r1, r4
 8009a76:	42b2      	cmp	r2, r6
 8009a78:	460b      	mov	r3, r1
 8009a7a:	d211      	bcs.n	8009aa0 <rshift+0x48>
 8009a7c:	f852 3b04 	ldr.w	r3, [r2], #4
 8009a80:	f841 3b04 	str.w	r3, [r1], #4
 8009a84:	e7f7      	b.n	8009a76 <rshift+0x1e>
 8009a86:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009a8a:	f1c1 0c20 	rsb	ip, r1, #32
 8009a8e:	40cd      	lsrs	r5, r1
 8009a90:	3204      	adds	r2, #4
 8009a92:	4623      	mov	r3, r4
 8009a94:	42b2      	cmp	r2, r6
 8009a96:	4617      	mov	r7, r2
 8009a98:	d30c      	bcc.n	8009ab4 <rshift+0x5c>
 8009a9a:	601d      	str	r5, [r3, #0]
 8009a9c:	b105      	cbz	r5, 8009aa0 <rshift+0x48>
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	1b1a      	subs	r2, r3, r4
 8009aa2:	42a3      	cmp	r3, r4
 8009aa4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009aa8:	bf08      	it	eq
 8009aaa:	2300      	moveq	r3, #0
 8009aac:	6102      	str	r2, [r0, #16]
 8009aae:	bf08      	it	eq
 8009ab0:	6143      	streq	r3, [r0, #20]
 8009ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ab4:	683f      	ldr	r7, [r7, #0]
 8009ab6:	fa07 f70c 	lsl.w	r7, r7, ip
 8009aba:	433d      	orrs	r5, r7
 8009abc:	f843 5b04 	str.w	r5, [r3], #4
 8009ac0:	f852 5b04 	ldr.w	r5, [r2], #4
 8009ac4:	40cd      	lsrs	r5, r1
 8009ac6:	e7e5      	b.n	8009a94 <rshift+0x3c>
 8009ac8:	4623      	mov	r3, r4
 8009aca:	e7e9      	b.n	8009aa0 <rshift+0x48>

08009acc <__hexdig_fun>:
 8009acc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009ad0:	2b09      	cmp	r3, #9
 8009ad2:	d802      	bhi.n	8009ada <__hexdig_fun+0xe>
 8009ad4:	3820      	subs	r0, #32
 8009ad6:	b2c0      	uxtb	r0, r0
 8009ad8:	4770      	bx	lr
 8009ada:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009ade:	2b05      	cmp	r3, #5
 8009ae0:	d801      	bhi.n	8009ae6 <__hexdig_fun+0x1a>
 8009ae2:	3847      	subs	r0, #71	; 0x47
 8009ae4:	e7f7      	b.n	8009ad6 <__hexdig_fun+0xa>
 8009ae6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009aea:	2b05      	cmp	r3, #5
 8009aec:	d801      	bhi.n	8009af2 <__hexdig_fun+0x26>
 8009aee:	3827      	subs	r0, #39	; 0x27
 8009af0:	e7f1      	b.n	8009ad6 <__hexdig_fun+0xa>
 8009af2:	2000      	movs	r0, #0
 8009af4:	4770      	bx	lr

08009af6 <__gethex>:
 8009af6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afa:	b08b      	sub	sp, #44	; 0x2c
 8009afc:	468a      	mov	sl, r1
 8009afe:	9002      	str	r0, [sp, #8]
 8009b00:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009b02:	9306      	str	r3, [sp, #24]
 8009b04:	4690      	mov	r8, r2
 8009b06:	f000 fad0 	bl	800a0aa <__localeconv_l>
 8009b0a:	6803      	ldr	r3, [r0, #0]
 8009b0c:	9303      	str	r3, [sp, #12]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7f6 fb66 	bl	80001e0 <strlen>
 8009b14:	9b03      	ldr	r3, [sp, #12]
 8009b16:	9001      	str	r0, [sp, #4]
 8009b18:	4403      	add	r3, r0
 8009b1a:	f04f 0b00 	mov.w	fp, #0
 8009b1e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009b22:	9307      	str	r3, [sp, #28]
 8009b24:	f8da 3000 	ldr.w	r3, [sl]
 8009b28:	3302      	adds	r3, #2
 8009b2a:	461f      	mov	r7, r3
 8009b2c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b30:	2830      	cmp	r0, #48	; 0x30
 8009b32:	d06c      	beq.n	8009c0e <__gethex+0x118>
 8009b34:	f7ff ffca 	bl	8009acc <__hexdig_fun>
 8009b38:	4604      	mov	r4, r0
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	d16a      	bne.n	8009c14 <__gethex+0x11e>
 8009b3e:	9a01      	ldr	r2, [sp, #4]
 8009b40:	9903      	ldr	r1, [sp, #12]
 8009b42:	4638      	mov	r0, r7
 8009b44:	f001 f8f4 	bl	800ad30 <strncmp>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	d166      	bne.n	8009c1a <__gethex+0x124>
 8009b4c:	9b01      	ldr	r3, [sp, #4]
 8009b4e:	5cf8      	ldrb	r0, [r7, r3]
 8009b50:	18fe      	adds	r6, r7, r3
 8009b52:	f7ff ffbb 	bl	8009acc <__hexdig_fun>
 8009b56:	2800      	cmp	r0, #0
 8009b58:	d062      	beq.n	8009c20 <__gethex+0x12a>
 8009b5a:	4633      	mov	r3, r6
 8009b5c:	7818      	ldrb	r0, [r3, #0]
 8009b5e:	2830      	cmp	r0, #48	; 0x30
 8009b60:	461f      	mov	r7, r3
 8009b62:	f103 0301 	add.w	r3, r3, #1
 8009b66:	d0f9      	beq.n	8009b5c <__gethex+0x66>
 8009b68:	f7ff ffb0 	bl	8009acc <__hexdig_fun>
 8009b6c:	fab0 f580 	clz	r5, r0
 8009b70:	096d      	lsrs	r5, r5, #5
 8009b72:	4634      	mov	r4, r6
 8009b74:	f04f 0b01 	mov.w	fp, #1
 8009b78:	463a      	mov	r2, r7
 8009b7a:	4616      	mov	r6, r2
 8009b7c:	3201      	adds	r2, #1
 8009b7e:	7830      	ldrb	r0, [r6, #0]
 8009b80:	f7ff ffa4 	bl	8009acc <__hexdig_fun>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	d1f8      	bne.n	8009b7a <__gethex+0x84>
 8009b88:	9a01      	ldr	r2, [sp, #4]
 8009b8a:	9903      	ldr	r1, [sp, #12]
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	f001 f8cf 	bl	800ad30 <strncmp>
 8009b92:	b950      	cbnz	r0, 8009baa <__gethex+0xb4>
 8009b94:	b954      	cbnz	r4, 8009bac <__gethex+0xb6>
 8009b96:	9b01      	ldr	r3, [sp, #4]
 8009b98:	18f4      	adds	r4, r6, r3
 8009b9a:	4622      	mov	r2, r4
 8009b9c:	4616      	mov	r6, r2
 8009b9e:	3201      	adds	r2, #1
 8009ba0:	7830      	ldrb	r0, [r6, #0]
 8009ba2:	f7ff ff93 	bl	8009acc <__hexdig_fun>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d1f8      	bne.n	8009b9c <__gethex+0xa6>
 8009baa:	b10c      	cbz	r4, 8009bb0 <__gethex+0xba>
 8009bac:	1ba4      	subs	r4, r4, r6
 8009bae:	00a4      	lsls	r4, r4, #2
 8009bb0:	7833      	ldrb	r3, [r6, #0]
 8009bb2:	2b50      	cmp	r3, #80	; 0x50
 8009bb4:	d001      	beq.n	8009bba <__gethex+0xc4>
 8009bb6:	2b70      	cmp	r3, #112	; 0x70
 8009bb8:	d140      	bne.n	8009c3c <__gethex+0x146>
 8009bba:	7873      	ldrb	r3, [r6, #1]
 8009bbc:	2b2b      	cmp	r3, #43	; 0x2b
 8009bbe:	d031      	beq.n	8009c24 <__gethex+0x12e>
 8009bc0:	2b2d      	cmp	r3, #45	; 0x2d
 8009bc2:	d033      	beq.n	8009c2c <__gethex+0x136>
 8009bc4:	1c71      	adds	r1, r6, #1
 8009bc6:	f04f 0900 	mov.w	r9, #0
 8009bca:	7808      	ldrb	r0, [r1, #0]
 8009bcc:	f7ff ff7e 	bl	8009acc <__hexdig_fun>
 8009bd0:	1e43      	subs	r3, r0, #1
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	2b18      	cmp	r3, #24
 8009bd6:	d831      	bhi.n	8009c3c <__gethex+0x146>
 8009bd8:	f1a0 0210 	sub.w	r2, r0, #16
 8009bdc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009be0:	f7ff ff74 	bl	8009acc <__hexdig_fun>
 8009be4:	1e43      	subs	r3, r0, #1
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	2b18      	cmp	r3, #24
 8009bea:	d922      	bls.n	8009c32 <__gethex+0x13c>
 8009bec:	f1b9 0f00 	cmp.w	r9, #0
 8009bf0:	d000      	beq.n	8009bf4 <__gethex+0xfe>
 8009bf2:	4252      	negs	r2, r2
 8009bf4:	4414      	add	r4, r2
 8009bf6:	f8ca 1000 	str.w	r1, [sl]
 8009bfa:	b30d      	cbz	r5, 8009c40 <__gethex+0x14a>
 8009bfc:	f1bb 0f00 	cmp.w	fp, #0
 8009c00:	bf0c      	ite	eq
 8009c02:	2706      	moveq	r7, #6
 8009c04:	2700      	movne	r7, #0
 8009c06:	4638      	mov	r0, r7
 8009c08:	b00b      	add	sp, #44	; 0x2c
 8009c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c0e:	f10b 0b01 	add.w	fp, fp, #1
 8009c12:	e78a      	b.n	8009b2a <__gethex+0x34>
 8009c14:	2500      	movs	r5, #0
 8009c16:	462c      	mov	r4, r5
 8009c18:	e7ae      	b.n	8009b78 <__gethex+0x82>
 8009c1a:	463e      	mov	r6, r7
 8009c1c:	2501      	movs	r5, #1
 8009c1e:	e7c7      	b.n	8009bb0 <__gethex+0xba>
 8009c20:	4604      	mov	r4, r0
 8009c22:	e7fb      	b.n	8009c1c <__gethex+0x126>
 8009c24:	f04f 0900 	mov.w	r9, #0
 8009c28:	1cb1      	adds	r1, r6, #2
 8009c2a:	e7ce      	b.n	8009bca <__gethex+0xd4>
 8009c2c:	f04f 0901 	mov.w	r9, #1
 8009c30:	e7fa      	b.n	8009c28 <__gethex+0x132>
 8009c32:	230a      	movs	r3, #10
 8009c34:	fb03 0202 	mla	r2, r3, r2, r0
 8009c38:	3a10      	subs	r2, #16
 8009c3a:	e7cf      	b.n	8009bdc <__gethex+0xe6>
 8009c3c:	4631      	mov	r1, r6
 8009c3e:	e7da      	b.n	8009bf6 <__gethex+0x100>
 8009c40:	1bf3      	subs	r3, r6, r7
 8009c42:	3b01      	subs	r3, #1
 8009c44:	4629      	mov	r1, r5
 8009c46:	2b07      	cmp	r3, #7
 8009c48:	dc49      	bgt.n	8009cde <__gethex+0x1e8>
 8009c4a:	9802      	ldr	r0, [sp, #8]
 8009c4c:	f000 fa58 	bl	800a100 <_Balloc>
 8009c50:	9b01      	ldr	r3, [sp, #4]
 8009c52:	f100 0914 	add.w	r9, r0, #20
 8009c56:	f04f 0b00 	mov.w	fp, #0
 8009c5a:	f1c3 0301 	rsb	r3, r3, #1
 8009c5e:	4605      	mov	r5, r0
 8009c60:	f8cd 9010 	str.w	r9, [sp, #16]
 8009c64:	46da      	mov	sl, fp
 8009c66:	9308      	str	r3, [sp, #32]
 8009c68:	42b7      	cmp	r7, r6
 8009c6a:	d33b      	bcc.n	8009ce4 <__gethex+0x1ee>
 8009c6c:	9804      	ldr	r0, [sp, #16]
 8009c6e:	f840 ab04 	str.w	sl, [r0], #4
 8009c72:	eba0 0009 	sub.w	r0, r0, r9
 8009c76:	1080      	asrs	r0, r0, #2
 8009c78:	6128      	str	r0, [r5, #16]
 8009c7a:	0147      	lsls	r7, r0, #5
 8009c7c:	4650      	mov	r0, sl
 8009c7e:	f000 fb03 	bl	800a288 <__hi0bits>
 8009c82:	f8d8 6000 	ldr.w	r6, [r8]
 8009c86:	1a3f      	subs	r7, r7, r0
 8009c88:	42b7      	cmp	r7, r6
 8009c8a:	dd64      	ble.n	8009d56 <__gethex+0x260>
 8009c8c:	1bbf      	subs	r7, r7, r6
 8009c8e:	4639      	mov	r1, r7
 8009c90:	4628      	mov	r0, r5
 8009c92:	f000 fe13 	bl	800a8bc <__any_on>
 8009c96:	4682      	mov	sl, r0
 8009c98:	b178      	cbz	r0, 8009cba <__gethex+0x1c4>
 8009c9a:	1e7b      	subs	r3, r7, #1
 8009c9c:	1159      	asrs	r1, r3, #5
 8009c9e:	f003 021f 	and.w	r2, r3, #31
 8009ca2:	f04f 0a01 	mov.w	sl, #1
 8009ca6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009caa:	fa0a f202 	lsl.w	r2, sl, r2
 8009cae:	420a      	tst	r2, r1
 8009cb0:	d003      	beq.n	8009cba <__gethex+0x1c4>
 8009cb2:	4553      	cmp	r3, sl
 8009cb4:	dc46      	bgt.n	8009d44 <__gethex+0x24e>
 8009cb6:	f04f 0a02 	mov.w	sl, #2
 8009cba:	4639      	mov	r1, r7
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	f7ff fecb 	bl	8009a58 <rshift>
 8009cc2:	443c      	add	r4, r7
 8009cc4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009cc8:	42a3      	cmp	r3, r4
 8009cca:	da52      	bge.n	8009d72 <__gethex+0x27c>
 8009ccc:	4629      	mov	r1, r5
 8009cce:	9802      	ldr	r0, [sp, #8]
 8009cd0:	f000 fa4a 	bl	800a168 <_Bfree>
 8009cd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	6013      	str	r3, [r2, #0]
 8009cda:	27a3      	movs	r7, #163	; 0xa3
 8009cdc:	e793      	b.n	8009c06 <__gethex+0x110>
 8009cde:	3101      	adds	r1, #1
 8009ce0:	105b      	asrs	r3, r3, #1
 8009ce2:	e7b0      	b.n	8009c46 <__gethex+0x150>
 8009ce4:	1e73      	subs	r3, r6, #1
 8009ce6:	9305      	str	r3, [sp, #20]
 8009ce8:	9a07      	ldr	r2, [sp, #28]
 8009cea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d018      	beq.n	8009d24 <__gethex+0x22e>
 8009cf2:	f1bb 0f20 	cmp.w	fp, #32
 8009cf6:	d107      	bne.n	8009d08 <__gethex+0x212>
 8009cf8:	9b04      	ldr	r3, [sp, #16]
 8009cfa:	f8c3 a000 	str.w	sl, [r3]
 8009cfe:	3304      	adds	r3, #4
 8009d00:	f04f 0a00 	mov.w	sl, #0
 8009d04:	9304      	str	r3, [sp, #16]
 8009d06:	46d3      	mov	fp, sl
 8009d08:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009d0c:	f7ff fede 	bl	8009acc <__hexdig_fun>
 8009d10:	f000 000f 	and.w	r0, r0, #15
 8009d14:	fa00 f00b 	lsl.w	r0, r0, fp
 8009d18:	ea4a 0a00 	orr.w	sl, sl, r0
 8009d1c:	f10b 0b04 	add.w	fp, fp, #4
 8009d20:	9b05      	ldr	r3, [sp, #20]
 8009d22:	e00d      	b.n	8009d40 <__gethex+0x24a>
 8009d24:	9b05      	ldr	r3, [sp, #20]
 8009d26:	9a08      	ldr	r2, [sp, #32]
 8009d28:	4413      	add	r3, r2
 8009d2a:	42bb      	cmp	r3, r7
 8009d2c:	d3e1      	bcc.n	8009cf2 <__gethex+0x1fc>
 8009d2e:	4618      	mov	r0, r3
 8009d30:	9a01      	ldr	r2, [sp, #4]
 8009d32:	9903      	ldr	r1, [sp, #12]
 8009d34:	9309      	str	r3, [sp, #36]	; 0x24
 8009d36:	f000 fffb 	bl	800ad30 <strncmp>
 8009d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	d1d8      	bne.n	8009cf2 <__gethex+0x1fc>
 8009d40:	461e      	mov	r6, r3
 8009d42:	e791      	b.n	8009c68 <__gethex+0x172>
 8009d44:	1eb9      	subs	r1, r7, #2
 8009d46:	4628      	mov	r0, r5
 8009d48:	f000 fdb8 	bl	800a8bc <__any_on>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d0b2      	beq.n	8009cb6 <__gethex+0x1c0>
 8009d50:	f04f 0a03 	mov.w	sl, #3
 8009d54:	e7b1      	b.n	8009cba <__gethex+0x1c4>
 8009d56:	da09      	bge.n	8009d6c <__gethex+0x276>
 8009d58:	1bf7      	subs	r7, r6, r7
 8009d5a:	4629      	mov	r1, r5
 8009d5c:	463a      	mov	r2, r7
 8009d5e:	9802      	ldr	r0, [sp, #8]
 8009d60:	f000 fbce 	bl	800a500 <__lshift>
 8009d64:	1be4      	subs	r4, r4, r7
 8009d66:	4605      	mov	r5, r0
 8009d68:	f100 0914 	add.w	r9, r0, #20
 8009d6c:	f04f 0a00 	mov.w	sl, #0
 8009d70:	e7a8      	b.n	8009cc4 <__gethex+0x1ce>
 8009d72:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009d76:	42a0      	cmp	r0, r4
 8009d78:	dd6a      	ble.n	8009e50 <__gethex+0x35a>
 8009d7a:	1b04      	subs	r4, r0, r4
 8009d7c:	42a6      	cmp	r6, r4
 8009d7e:	dc2e      	bgt.n	8009dde <__gethex+0x2e8>
 8009d80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d022      	beq.n	8009dce <__gethex+0x2d8>
 8009d88:	2b03      	cmp	r3, #3
 8009d8a:	d024      	beq.n	8009dd6 <__gethex+0x2e0>
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d115      	bne.n	8009dbc <__gethex+0x2c6>
 8009d90:	42a6      	cmp	r6, r4
 8009d92:	d113      	bne.n	8009dbc <__gethex+0x2c6>
 8009d94:	2e01      	cmp	r6, #1
 8009d96:	dc0b      	bgt.n	8009db0 <__gethex+0x2ba>
 8009d98:	9a06      	ldr	r2, [sp, #24]
 8009d9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d9e:	6013      	str	r3, [r2, #0]
 8009da0:	2301      	movs	r3, #1
 8009da2:	612b      	str	r3, [r5, #16]
 8009da4:	f8c9 3000 	str.w	r3, [r9]
 8009da8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009daa:	2762      	movs	r7, #98	; 0x62
 8009dac:	601d      	str	r5, [r3, #0]
 8009dae:	e72a      	b.n	8009c06 <__gethex+0x110>
 8009db0:	1e71      	subs	r1, r6, #1
 8009db2:	4628      	mov	r0, r5
 8009db4:	f000 fd82 	bl	800a8bc <__any_on>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d1ed      	bne.n	8009d98 <__gethex+0x2a2>
 8009dbc:	4629      	mov	r1, r5
 8009dbe:	9802      	ldr	r0, [sp, #8]
 8009dc0:	f000 f9d2 	bl	800a168 <_Bfree>
 8009dc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	6013      	str	r3, [r2, #0]
 8009dca:	2750      	movs	r7, #80	; 0x50
 8009dcc:	e71b      	b.n	8009c06 <__gethex+0x110>
 8009dce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d0e1      	beq.n	8009d98 <__gethex+0x2a2>
 8009dd4:	e7f2      	b.n	8009dbc <__gethex+0x2c6>
 8009dd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1dd      	bne.n	8009d98 <__gethex+0x2a2>
 8009ddc:	e7ee      	b.n	8009dbc <__gethex+0x2c6>
 8009dde:	1e67      	subs	r7, r4, #1
 8009de0:	f1ba 0f00 	cmp.w	sl, #0
 8009de4:	d131      	bne.n	8009e4a <__gethex+0x354>
 8009de6:	b127      	cbz	r7, 8009df2 <__gethex+0x2fc>
 8009de8:	4639      	mov	r1, r7
 8009dea:	4628      	mov	r0, r5
 8009dec:	f000 fd66 	bl	800a8bc <__any_on>
 8009df0:	4682      	mov	sl, r0
 8009df2:	117a      	asrs	r2, r7, #5
 8009df4:	2301      	movs	r3, #1
 8009df6:	f007 071f 	and.w	r7, r7, #31
 8009dfa:	fa03 f707 	lsl.w	r7, r3, r7
 8009dfe:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009e02:	4621      	mov	r1, r4
 8009e04:	421f      	tst	r7, r3
 8009e06:	4628      	mov	r0, r5
 8009e08:	bf18      	it	ne
 8009e0a:	f04a 0a02 	orrne.w	sl, sl, #2
 8009e0e:	1b36      	subs	r6, r6, r4
 8009e10:	f7ff fe22 	bl	8009a58 <rshift>
 8009e14:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009e18:	2702      	movs	r7, #2
 8009e1a:	f1ba 0f00 	cmp.w	sl, #0
 8009e1e:	d048      	beq.n	8009eb2 <__gethex+0x3bc>
 8009e20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d015      	beq.n	8009e54 <__gethex+0x35e>
 8009e28:	2b03      	cmp	r3, #3
 8009e2a:	d017      	beq.n	8009e5c <__gethex+0x366>
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d109      	bne.n	8009e44 <__gethex+0x34e>
 8009e30:	f01a 0f02 	tst.w	sl, #2
 8009e34:	d006      	beq.n	8009e44 <__gethex+0x34e>
 8009e36:	f8d9 3000 	ldr.w	r3, [r9]
 8009e3a:	ea4a 0a03 	orr.w	sl, sl, r3
 8009e3e:	f01a 0f01 	tst.w	sl, #1
 8009e42:	d10e      	bne.n	8009e62 <__gethex+0x36c>
 8009e44:	f047 0710 	orr.w	r7, r7, #16
 8009e48:	e033      	b.n	8009eb2 <__gethex+0x3bc>
 8009e4a:	f04f 0a01 	mov.w	sl, #1
 8009e4e:	e7d0      	b.n	8009df2 <__gethex+0x2fc>
 8009e50:	2701      	movs	r7, #1
 8009e52:	e7e2      	b.n	8009e1a <__gethex+0x324>
 8009e54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e56:	f1c3 0301 	rsb	r3, r3, #1
 8009e5a:	9315      	str	r3, [sp, #84]	; 0x54
 8009e5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d0f0      	beq.n	8009e44 <__gethex+0x34e>
 8009e62:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009e66:	f105 0314 	add.w	r3, r5, #20
 8009e6a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009e6e:	eb03 010a 	add.w	r1, r3, sl
 8009e72:	f04f 0c00 	mov.w	ip, #0
 8009e76:	4618      	mov	r0, r3
 8009e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e7c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009e80:	d01c      	beq.n	8009ebc <__gethex+0x3c6>
 8009e82:	3201      	adds	r2, #1
 8009e84:	6002      	str	r2, [r0, #0]
 8009e86:	2f02      	cmp	r7, #2
 8009e88:	f105 0314 	add.w	r3, r5, #20
 8009e8c:	d138      	bne.n	8009f00 <__gethex+0x40a>
 8009e8e:	f8d8 2000 	ldr.w	r2, [r8]
 8009e92:	3a01      	subs	r2, #1
 8009e94:	42b2      	cmp	r2, r6
 8009e96:	d10a      	bne.n	8009eae <__gethex+0x3b8>
 8009e98:	1171      	asrs	r1, r6, #5
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	f006 061f 	and.w	r6, r6, #31
 8009ea0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009ea4:	fa02 f606 	lsl.w	r6, r2, r6
 8009ea8:	421e      	tst	r6, r3
 8009eaa:	bf18      	it	ne
 8009eac:	4617      	movne	r7, r2
 8009eae:	f047 0720 	orr.w	r7, r7, #32
 8009eb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009eb4:	601d      	str	r5, [r3, #0]
 8009eb6:	9b06      	ldr	r3, [sp, #24]
 8009eb8:	601c      	str	r4, [r3, #0]
 8009eba:	e6a4      	b.n	8009c06 <__gethex+0x110>
 8009ebc:	4299      	cmp	r1, r3
 8009ebe:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ec2:	d8d8      	bhi.n	8009e76 <__gethex+0x380>
 8009ec4:	68ab      	ldr	r3, [r5, #8]
 8009ec6:	4599      	cmp	r9, r3
 8009ec8:	db12      	blt.n	8009ef0 <__gethex+0x3fa>
 8009eca:	6869      	ldr	r1, [r5, #4]
 8009ecc:	9802      	ldr	r0, [sp, #8]
 8009ece:	3101      	adds	r1, #1
 8009ed0:	f000 f916 	bl	800a100 <_Balloc>
 8009ed4:	692a      	ldr	r2, [r5, #16]
 8009ed6:	3202      	adds	r2, #2
 8009ed8:	f105 010c 	add.w	r1, r5, #12
 8009edc:	4683      	mov	fp, r0
 8009ede:	0092      	lsls	r2, r2, #2
 8009ee0:	300c      	adds	r0, #12
 8009ee2:	f7fd fa4d 	bl	8007380 <memcpy>
 8009ee6:	4629      	mov	r1, r5
 8009ee8:	9802      	ldr	r0, [sp, #8]
 8009eea:	f000 f93d 	bl	800a168 <_Bfree>
 8009eee:	465d      	mov	r5, fp
 8009ef0:	692b      	ldr	r3, [r5, #16]
 8009ef2:	1c5a      	adds	r2, r3, #1
 8009ef4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009ef8:	612a      	str	r2, [r5, #16]
 8009efa:	2201      	movs	r2, #1
 8009efc:	615a      	str	r2, [r3, #20]
 8009efe:	e7c2      	b.n	8009e86 <__gethex+0x390>
 8009f00:	692a      	ldr	r2, [r5, #16]
 8009f02:	454a      	cmp	r2, r9
 8009f04:	dd0b      	ble.n	8009f1e <__gethex+0x428>
 8009f06:	2101      	movs	r1, #1
 8009f08:	4628      	mov	r0, r5
 8009f0a:	f7ff fda5 	bl	8009a58 <rshift>
 8009f0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f12:	3401      	adds	r4, #1
 8009f14:	42a3      	cmp	r3, r4
 8009f16:	f6ff aed9 	blt.w	8009ccc <__gethex+0x1d6>
 8009f1a:	2701      	movs	r7, #1
 8009f1c:	e7c7      	b.n	8009eae <__gethex+0x3b8>
 8009f1e:	f016 061f 	ands.w	r6, r6, #31
 8009f22:	d0fa      	beq.n	8009f1a <__gethex+0x424>
 8009f24:	449a      	add	sl, r3
 8009f26:	f1c6 0620 	rsb	r6, r6, #32
 8009f2a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009f2e:	f000 f9ab 	bl	800a288 <__hi0bits>
 8009f32:	42b0      	cmp	r0, r6
 8009f34:	dbe7      	blt.n	8009f06 <__gethex+0x410>
 8009f36:	e7f0      	b.n	8009f1a <__gethex+0x424>

08009f38 <L_shift>:
 8009f38:	f1c2 0208 	rsb	r2, r2, #8
 8009f3c:	0092      	lsls	r2, r2, #2
 8009f3e:	b570      	push	{r4, r5, r6, lr}
 8009f40:	f1c2 0620 	rsb	r6, r2, #32
 8009f44:	6843      	ldr	r3, [r0, #4]
 8009f46:	6804      	ldr	r4, [r0, #0]
 8009f48:	fa03 f506 	lsl.w	r5, r3, r6
 8009f4c:	432c      	orrs	r4, r5
 8009f4e:	40d3      	lsrs	r3, r2
 8009f50:	6004      	str	r4, [r0, #0]
 8009f52:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f56:	4288      	cmp	r0, r1
 8009f58:	d3f4      	bcc.n	8009f44 <L_shift+0xc>
 8009f5a:	bd70      	pop	{r4, r5, r6, pc}

08009f5c <__match>:
 8009f5c:	b530      	push	{r4, r5, lr}
 8009f5e:	6803      	ldr	r3, [r0, #0]
 8009f60:	3301      	adds	r3, #1
 8009f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f66:	b914      	cbnz	r4, 8009f6e <__match+0x12>
 8009f68:	6003      	str	r3, [r0, #0]
 8009f6a:	2001      	movs	r0, #1
 8009f6c:	bd30      	pop	{r4, r5, pc}
 8009f6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f72:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009f76:	2d19      	cmp	r5, #25
 8009f78:	bf98      	it	ls
 8009f7a:	3220      	addls	r2, #32
 8009f7c:	42a2      	cmp	r2, r4
 8009f7e:	d0f0      	beq.n	8009f62 <__match+0x6>
 8009f80:	2000      	movs	r0, #0
 8009f82:	e7f3      	b.n	8009f6c <__match+0x10>

08009f84 <__hexnan>:
 8009f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f88:	680b      	ldr	r3, [r1, #0]
 8009f8a:	6801      	ldr	r1, [r0, #0]
 8009f8c:	115f      	asrs	r7, r3, #5
 8009f8e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009f92:	f013 031f 	ands.w	r3, r3, #31
 8009f96:	b087      	sub	sp, #28
 8009f98:	bf18      	it	ne
 8009f9a:	3704      	addne	r7, #4
 8009f9c:	2500      	movs	r5, #0
 8009f9e:	1f3e      	subs	r6, r7, #4
 8009fa0:	4682      	mov	sl, r0
 8009fa2:	4690      	mov	r8, r2
 8009fa4:	9301      	str	r3, [sp, #4]
 8009fa6:	f847 5c04 	str.w	r5, [r7, #-4]
 8009faa:	46b1      	mov	r9, r6
 8009fac:	4634      	mov	r4, r6
 8009fae:	9502      	str	r5, [sp, #8]
 8009fb0:	46ab      	mov	fp, r5
 8009fb2:	784a      	ldrb	r2, [r1, #1]
 8009fb4:	1c4b      	adds	r3, r1, #1
 8009fb6:	9303      	str	r3, [sp, #12]
 8009fb8:	b342      	cbz	r2, 800a00c <__hexnan+0x88>
 8009fba:	4610      	mov	r0, r2
 8009fbc:	9105      	str	r1, [sp, #20]
 8009fbe:	9204      	str	r2, [sp, #16]
 8009fc0:	f7ff fd84 	bl	8009acc <__hexdig_fun>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d143      	bne.n	800a050 <__hexnan+0xcc>
 8009fc8:	9a04      	ldr	r2, [sp, #16]
 8009fca:	9905      	ldr	r1, [sp, #20]
 8009fcc:	2a20      	cmp	r2, #32
 8009fce:	d818      	bhi.n	800a002 <__hexnan+0x7e>
 8009fd0:	9b02      	ldr	r3, [sp, #8]
 8009fd2:	459b      	cmp	fp, r3
 8009fd4:	dd13      	ble.n	8009ffe <__hexnan+0x7a>
 8009fd6:	454c      	cmp	r4, r9
 8009fd8:	d206      	bcs.n	8009fe8 <__hexnan+0x64>
 8009fda:	2d07      	cmp	r5, #7
 8009fdc:	dc04      	bgt.n	8009fe8 <__hexnan+0x64>
 8009fde:	462a      	mov	r2, r5
 8009fe0:	4649      	mov	r1, r9
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f7ff ffa8 	bl	8009f38 <L_shift>
 8009fe8:	4544      	cmp	r4, r8
 8009fea:	d944      	bls.n	800a076 <__hexnan+0xf2>
 8009fec:	2300      	movs	r3, #0
 8009fee:	f1a4 0904 	sub.w	r9, r4, #4
 8009ff2:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ff6:	f8cd b008 	str.w	fp, [sp, #8]
 8009ffa:	464c      	mov	r4, r9
 8009ffc:	461d      	mov	r5, r3
 8009ffe:	9903      	ldr	r1, [sp, #12]
 800a000:	e7d7      	b.n	8009fb2 <__hexnan+0x2e>
 800a002:	2a29      	cmp	r2, #41	; 0x29
 800a004:	d14a      	bne.n	800a09c <__hexnan+0x118>
 800a006:	3102      	adds	r1, #2
 800a008:	f8ca 1000 	str.w	r1, [sl]
 800a00c:	f1bb 0f00 	cmp.w	fp, #0
 800a010:	d044      	beq.n	800a09c <__hexnan+0x118>
 800a012:	454c      	cmp	r4, r9
 800a014:	d206      	bcs.n	800a024 <__hexnan+0xa0>
 800a016:	2d07      	cmp	r5, #7
 800a018:	dc04      	bgt.n	800a024 <__hexnan+0xa0>
 800a01a:	462a      	mov	r2, r5
 800a01c:	4649      	mov	r1, r9
 800a01e:	4620      	mov	r0, r4
 800a020:	f7ff ff8a 	bl	8009f38 <L_shift>
 800a024:	4544      	cmp	r4, r8
 800a026:	d928      	bls.n	800a07a <__hexnan+0xf6>
 800a028:	4643      	mov	r3, r8
 800a02a:	f854 2b04 	ldr.w	r2, [r4], #4
 800a02e:	f843 2b04 	str.w	r2, [r3], #4
 800a032:	42a6      	cmp	r6, r4
 800a034:	d2f9      	bcs.n	800a02a <__hexnan+0xa6>
 800a036:	2200      	movs	r2, #0
 800a038:	f843 2b04 	str.w	r2, [r3], #4
 800a03c:	429e      	cmp	r6, r3
 800a03e:	d2fb      	bcs.n	800a038 <__hexnan+0xb4>
 800a040:	6833      	ldr	r3, [r6, #0]
 800a042:	b91b      	cbnz	r3, 800a04c <__hexnan+0xc8>
 800a044:	4546      	cmp	r6, r8
 800a046:	d127      	bne.n	800a098 <__hexnan+0x114>
 800a048:	2301      	movs	r3, #1
 800a04a:	6033      	str	r3, [r6, #0]
 800a04c:	2005      	movs	r0, #5
 800a04e:	e026      	b.n	800a09e <__hexnan+0x11a>
 800a050:	3501      	adds	r5, #1
 800a052:	2d08      	cmp	r5, #8
 800a054:	f10b 0b01 	add.w	fp, fp, #1
 800a058:	dd06      	ble.n	800a068 <__hexnan+0xe4>
 800a05a:	4544      	cmp	r4, r8
 800a05c:	d9cf      	bls.n	8009ffe <__hexnan+0x7a>
 800a05e:	2300      	movs	r3, #0
 800a060:	f844 3c04 	str.w	r3, [r4, #-4]
 800a064:	2501      	movs	r5, #1
 800a066:	3c04      	subs	r4, #4
 800a068:	6822      	ldr	r2, [r4, #0]
 800a06a:	f000 000f 	and.w	r0, r0, #15
 800a06e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a072:	6020      	str	r0, [r4, #0]
 800a074:	e7c3      	b.n	8009ffe <__hexnan+0x7a>
 800a076:	2508      	movs	r5, #8
 800a078:	e7c1      	b.n	8009ffe <__hexnan+0x7a>
 800a07a:	9b01      	ldr	r3, [sp, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d0df      	beq.n	800a040 <__hexnan+0xbc>
 800a080:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a084:	f1c3 0320 	rsb	r3, r3, #32
 800a088:	fa22 f303 	lsr.w	r3, r2, r3
 800a08c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a090:	401a      	ands	r2, r3
 800a092:	f847 2c04 	str.w	r2, [r7, #-4]
 800a096:	e7d3      	b.n	800a040 <__hexnan+0xbc>
 800a098:	3e04      	subs	r6, #4
 800a09a:	e7d1      	b.n	800a040 <__hexnan+0xbc>
 800a09c:	2004      	movs	r0, #4
 800a09e:	b007      	add	sp, #28
 800a0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0a4 <__locale_ctype_ptr_l>:
 800a0a4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a0a8:	4770      	bx	lr

0800a0aa <__localeconv_l>:
 800a0aa:	30f0      	adds	r0, #240	; 0xf0
 800a0ac:	4770      	bx	lr
	...

0800a0b0 <_localeconv_r>:
 800a0b0:	4b04      	ldr	r3, [pc, #16]	; (800a0c4 <_localeconv_r+0x14>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	6a18      	ldr	r0, [r3, #32]
 800a0b6:	4b04      	ldr	r3, [pc, #16]	; (800a0c8 <_localeconv_r+0x18>)
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	bf08      	it	eq
 800a0bc:	4618      	moveq	r0, r3
 800a0be:	30f0      	adds	r0, #240	; 0xf0
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop
 800a0c4:	20000014 	.word	0x20000014
 800a0c8:	20000078 	.word	0x20000078

0800a0cc <malloc>:
 800a0cc:	4b02      	ldr	r3, [pc, #8]	; (800a0d8 <malloc+0xc>)
 800a0ce:	4601      	mov	r1, r0
 800a0d0:	6818      	ldr	r0, [r3, #0]
 800a0d2:	f000 bc71 	b.w	800a9b8 <_malloc_r>
 800a0d6:	bf00      	nop
 800a0d8:	20000014 	.word	0x20000014

0800a0dc <__ascii_mbtowc>:
 800a0dc:	b082      	sub	sp, #8
 800a0de:	b901      	cbnz	r1, 800a0e2 <__ascii_mbtowc+0x6>
 800a0e0:	a901      	add	r1, sp, #4
 800a0e2:	b142      	cbz	r2, 800a0f6 <__ascii_mbtowc+0x1a>
 800a0e4:	b14b      	cbz	r3, 800a0fa <__ascii_mbtowc+0x1e>
 800a0e6:	7813      	ldrb	r3, [r2, #0]
 800a0e8:	600b      	str	r3, [r1, #0]
 800a0ea:	7812      	ldrb	r2, [r2, #0]
 800a0ec:	1c10      	adds	r0, r2, #0
 800a0ee:	bf18      	it	ne
 800a0f0:	2001      	movne	r0, #1
 800a0f2:	b002      	add	sp, #8
 800a0f4:	4770      	bx	lr
 800a0f6:	4610      	mov	r0, r2
 800a0f8:	e7fb      	b.n	800a0f2 <__ascii_mbtowc+0x16>
 800a0fa:	f06f 0001 	mvn.w	r0, #1
 800a0fe:	e7f8      	b.n	800a0f2 <__ascii_mbtowc+0x16>

0800a100 <_Balloc>:
 800a100:	b570      	push	{r4, r5, r6, lr}
 800a102:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a104:	4604      	mov	r4, r0
 800a106:	460e      	mov	r6, r1
 800a108:	b93d      	cbnz	r5, 800a11a <_Balloc+0x1a>
 800a10a:	2010      	movs	r0, #16
 800a10c:	f7ff ffde 	bl	800a0cc <malloc>
 800a110:	6260      	str	r0, [r4, #36]	; 0x24
 800a112:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a116:	6005      	str	r5, [r0, #0]
 800a118:	60c5      	str	r5, [r0, #12]
 800a11a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a11c:	68eb      	ldr	r3, [r5, #12]
 800a11e:	b183      	cbz	r3, 800a142 <_Balloc+0x42>
 800a120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a128:	b9b8      	cbnz	r0, 800a15a <_Balloc+0x5a>
 800a12a:	2101      	movs	r1, #1
 800a12c:	fa01 f506 	lsl.w	r5, r1, r6
 800a130:	1d6a      	adds	r2, r5, #5
 800a132:	0092      	lsls	r2, r2, #2
 800a134:	4620      	mov	r0, r4
 800a136:	f000 fbe2 	bl	800a8fe <_calloc_r>
 800a13a:	b160      	cbz	r0, 800a156 <_Balloc+0x56>
 800a13c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a140:	e00e      	b.n	800a160 <_Balloc+0x60>
 800a142:	2221      	movs	r2, #33	; 0x21
 800a144:	2104      	movs	r1, #4
 800a146:	4620      	mov	r0, r4
 800a148:	f000 fbd9 	bl	800a8fe <_calloc_r>
 800a14c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a14e:	60e8      	str	r0, [r5, #12]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1e4      	bne.n	800a120 <_Balloc+0x20>
 800a156:	2000      	movs	r0, #0
 800a158:	bd70      	pop	{r4, r5, r6, pc}
 800a15a:	6802      	ldr	r2, [r0, #0]
 800a15c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a160:	2300      	movs	r3, #0
 800a162:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a166:	e7f7      	b.n	800a158 <_Balloc+0x58>

0800a168 <_Bfree>:
 800a168:	b570      	push	{r4, r5, r6, lr}
 800a16a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a16c:	4606      	mov	r6, r0
 800a16e:	460d      	mov	r5, r1
 800a170:	b93c      	cbnz	r4, 800a182 <_Bfree+0x1a>
 800a172:	2010      	movs	r0, #16
 800a174:	f7ff ffaa 	bl	800a0cc <malloc>
 800a178:	6270      	str	r0, [r6, #36]	; 0x24
 800a17a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a17e:	6004      	str	r4, [r0, #0]
 800a180:	60c4      	str	r4, [r0, #12]
 800a182:	b13d      	cbz	r5, 800a194 <_Bfree+0x2c>
 800a184:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a186:	686a      	ldr	r2, [r5, #4]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a18e:	6029      	str	r1, [r5, #0]
 800a190:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a194:	bd70      	pop	{r4, r5, r6, pc}

0800a196 <__multadd>:
 800a196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a19a:	690d      	ldr	r5, [r1, #16]
 800a19c:	461f      	mov	r7, r3
 800a19e:	4606      	mov	r6, r0
 800a1a0:	460c      	mov	r4, r1
 800a1a2:	f101 0c14 	add.w	ip, r1, #20
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	f8dc 0000 	ldr.w	r0, [ip]
 800a1ac:	b281      	uxth	r1, r0
 800a1ae:	fb02 7101 	mla	r1, r2, r1, r7
 800a1b2:	0c0f      	lsrs	r7, r1, #16
 800a1b4:	0c00      	lsrs	r0, r0, #16
 800a1b6:	fb02 7000 	mla	r0, r2, r0, r7
 800a1ba:	b289      	uxth	r1, r1
 800a1bc:	3301      	adds	r3, #1
 800a1be:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a1c2:	429d      	cmp	r5, r3
 800a1c4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a1c8:	f84c 1b04 	str.w	r1, [ip], #4
 800a1cc:	dcec      	bgt.n	800a1a8 <__multadd+0x12>
 800a1ce:	b1d7      	cbz	r7, 800a206 <__multadd+0x70>
 800a1d0:	68a3      	ldr	r3, [r4, #8]
 800a1d2:	42ab      	cmp	r3, r5
 800a1d4:	dc12      	bgt.n	800a1fc <__multadd+0x66>
 800a1d6:	6861      	ldr	r1, [r4, #4]
 800a1d8:	4630      	mov	r0, r6
 800a1da:	3101      	adds	r1, #1
 800a1dc:	f7ff ff90 	bl	800a100 <_Balloc>
 800a1e0:	6922      	ldr	r2, [r4, #16]
 800a1e2:	3202      	adds	r2, #2
 800a1e4:	f104 010c 	add.w	r1, r4, #12
 800a1e8:	4680      	mov	r8, r0
 800a1ea:	0092      	lsls	r2, r2, #2
 800a1ec:	300c      	adds	r0, #12
 800a1ee:	f7fd f8c7 	bl	8007380 <memcpy>
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	f7ff ffb7 	bl	800a168 <_Bfree>
 800a1fa:	4644      	mov	r4, r8
 800a1fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a200:	3501      	adds	r5, #1
 800a202:	615f      	str	r7, [r3, #20]
 800a204:	6125      	str	r5, [r4, #16]
 800a206:	4620      	mov	r0, r4
 800a208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a20c <__s2b>:
 800a20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a210:	460c      	mov	r4, r1
 800a212:	4615      	mov	r5, r2
 800a214:	461f      	mov	r7, r3
 800a216:	2209      	movs	r2, #9
 800a218:	3308      	adds	r3, #8
 800a21a:	4606      	mov	r6, r0
 800a21c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a220:	2100      	movs	r1, #0
 800a222:	2201      	movs	r2, #1
 800a224:	429a      	cmp	r2, r3
 800a226:	db20      	blt.n	800a26a <__s2b+0x5e>
 800a228:	4630      	mov	r0, r6
 800a22a:	f7ff ff69 	bl	800a100 <_Balloc>
 800a22e:	9b08      	ldr	r3, [sp, #32]
 800a230:	6143      	str	r3, [r0, #20]
 800a232:	2d09      	cmp	r5, #9
 800a234:	f04f 0301 	mov.w	r3, #1
 800a238:	6103      	str	r3, [r0, #16]
 800a23a:	dd19      	ble.n	800a270 <__s2b+0x64>
 800a23c:	f104 0809 	add.w	r8, r4, #9
 800a240:	46c1      	mov	r9, r8
 800a242:	442c      	add	r4, r5
 800a244:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a248:	4601      	mov	r1, r0
 800a24a:	3b30      	subs	r3, #48	; 0x30
 800a24c:	220a      	movs	r2, #10
 800a24e:	4630      	mov	r0, r6
 800a250:	f7ff ffa1 	bl	800a196 <__multadd>
 800a254:	45a1      	cmp	r9, r4
 800a256:	d1f5      	bne.n	800a244 <__s2b+0x38>
 800a258:	eb08 0405 	add.w	r4, r8, r5
 800a25c:	3c08      	subs	r4, #8
 800a25e:	1b2d      	subs	r5, r5, r4
 800a260:	1963      	adds	r3, r4, r5
 800a262:	42bb      	cmp	r3, r7
 800a264:	db07      	blt.n	800a276 <__s2b+0x6a>
 800a266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a26a:	0052      	lsls	r2, r2, #1
 800a26c:	3101      	adds	r1, #1
 800a26e:	e7d9      	b.n	800a224 <__s2b+0x18>
 800a270:	340a      	adds	r4, #10
 800a272:	2509      	movs	r5, #9
 800a274:	e7f3      	b.n	800a25e <__s2b+0x52>
 800a276:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a27a:	4601      	mov	r1, r0
 800a27c:	3b30      	subs	r3, #48	; 0x30
 800a27e:	220a      	movs	r2, #10
 800a280:	4630      	mov	r0, r6
 800a282:	f7ff ff88 	bl	800a196 <__multadd>
 800a286:	e7eb      	b.n	800a260 <__s2b+0x54>

0800a288 <__hi0bits>:
 800a288:	0c02      	lsrs	r2, r0, #16
 800a28a:	0412      	lsls	r2, r2, #16
 800a28c:	4603      	mov	r3, r0
 800a28e:	b9b2      	cbnz	r2, 800a2be <__hi0bits+0x36>
 800a290:	0403      	lsls	r3, r0, #16
 800a292:	2010      	movs	r0, #16
 800a294:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a298:	bf04      	itt	eq
 800a29a:	021b      	lsleq	r3, r3, #8
 800a29c:	3008      	addeq	r0, #8
 800a29e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a2a2:	bf04      	itt	eq
 800a2a4:	011b      	lsleq	r3, r3, #4
 800a2a6:	3004      	addeq	r0, #4
 800a2a8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a2ac:	bf04      	itt	eq
 800a2ae:	009b      	lsleq	r3, r3, #2
 800a2b0:	3002      	addeq	r0, #2
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	db06      	blt.n	800a2c4 <__hi0bits+0x3c>
 800a2b6:	005b      	lsls	r3, r3, #1
 800a2b8:	d503      	bpl.n	800a2c2 <__hi0bits+0x3a>
 800a2ba:	3001      	adds	r0, #1
 800a2bc:	4770      	bx	lr
 800a2be:	2000      	movs	r0, #0
 800a2c0:	e7e8      	b.n	800a294 <__hi0bits+0xc>
 800a2c2:	2020      	movs	r0, #32
 800a2c4:	4770      	bx	lr

0800a2c6 <__lo0bits>:
 800a2c6:	6803      	ldr	r3, [r0, #0]
 800a2c8:	f013 0207 	ands.w	r2, r3, #7
 800a2cc:	4601      	mov	r1, r0
 800a2ce:	d00b      	beq.n	800a2e8 <__lo0bits+0x22>
 800a2d0:	07da      	lsls	r2, r3, #31
 800a2d2:	d423      	bmi.n	800a31c <__lo0bits+0x56>
 800a2d4:	0798      	lsls	r0, r3, #30
 800a2d6:	bf49      	itett	mi
 800a2d8:	085b      	lsrmi	r3, r3, #1
 800a2da:	089b      	lsrpl	r3, r3, #2
 800a2dc:	2001      	movmi	r0, #1
 800a2de:	600b      	strmi	r3, [r1, #0]
 800a2e0:	bf5c      	itt	pl
 800a2e2:	600b      	strpl	r3, [r1, #0]
 800a2e4:	2002      	movpl	r0, #2
 800a2e6:	4770      	bx	lr
 800a2e8:	b298      	uxth	r0, r3
 800a2ea:	b9a8      	cbnz	r0, 800a318 <__lo0bits+0x52>
 800a2ec:	0c1b      	lsrs	r3, r3, #16
 800a2ee:	2010      	movs	r0, #16
 800a2f0:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a2f4:	bf04      	itt	eq
 800a2f6:	0a1b      	lsreq	r3, r3, #8
 800a2f8:	3008      	addeq	r0, #8
 800a2fa:	071a      	lsls	r2, r3, #28
 800a2fc:	bf04      	itt	eq
 800a2fe:	091b      	lsreq	r3, r3, #4
 800a300:	3004      	addeq	r0, #4
 800a302:	079a      	lsls	r2, r3, #30
 800a304:	bf04      	itt	eq
 800a306:	089b      	lsreq	r3, r3, #2
 800a308:	3002      	addeq	r0, #2
 800a30a:	07da      	lsls	r2, r3, #31
 800a30c:	d402      	bmi.n	800a314 <__lo0bits+0x4e>
 800a30e:	085b      	lsrs	r3, r3, #1
 800a310:	d006      	beq.n	800a320 <__lo0bits+0x5a>
 800a312:	3001      	adds	r0, #1
 800a314:	600b      	str	r3, [r1, #0]
 800a316:	4770      	bx	lr
 800a318:	4610      	mov	r0, r2
 800a31a:	e7e9      	b.n	800a2f0 <__lo0bits+0x2a>
 800a31c:	2000      	movs	r0, #0
 800a31e:	4770      	bx	lr
 800a320:	2020      	movs	r0, #32
 800a322:	4770      	bx	lr

0800a324 <__i2b>:
 800a324:	b510      	push	{r4, lr}
 800a326:	460c      	mov	r4, r1
 800a328:	2101      	movs	r1, #1
 800a32a:	f7ff fee9 	bl	800a100 <_Balloc>
 800a32e:	2201      	movs	r2, #1
 800a330:	6144      	str	r4, [r0, #20]
 800a332:	6102      	str	r2, [r0, #16]
 800a334:	bd10      	pop	{r4, pc}

0800a336 <__multiply>:
 800a336:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33a:	4614      	mov	r4, r2
 800a33c:	690a      	ldr	r2, [r1, #16]
 800a33e:	6923      	ldr	r3, [r4, #16]
 800a340:	429a      	cmp	r2, r3
 800a342:	bfb8      	it	lt
 800a344:	460b      	movlt	r3, r1
 800a346:	4688      	mov	r8, r1
 800a348:	bfbc      	itt	lt
 800a34a:	46a0      	movlt	r8, r4
 800a34c:	461c      	movlt	r4, r3
 800a34e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a352:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a356:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a35a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a35e:	eb07 0609 	add.w	r6, r7, r9
 800a362:	42b3      	cmp	r3, r6
 800a364:	bfb8      	it	lt
 800a366:	3101      	addlt	r1, #1
 800a368:	f7ff feca 	bl	800a100 <_Balloc>
 800a36c:	f100 0514 	add.w	r5, r0, #20
 800a370:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a374:	462b      	mov	r3, r5
 800a376:	2200      	movs	r2, #0
 800a378:	4573      	cmp	r3, lr
 800a37a:	d316      	bcc.n	800a3aa <__multiply+0x74>
 800a37c:	f104 0214 	add.w	r2, r4, #20
 800a380:	f108 0114 	add.w	r1, r8, #20
 800a384:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a388:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	9b00      	ldr	r3, [sp, #0]
 800a390:	9201      	str	r2, [sp, #4]
 800a392:	4293      	cmp	r3, r2
 800a394:	d80c      	bhi.n	800a3b0 <__multiply+0x7a>
 800a396:	2e00      	cmp	r6, #0
 800a398:	dd03      	ble.n	800a3a2 <__multiply+0x6c>
 800a39a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d05d      	beq.n	800a45e <__multiply+0x128>
 800a3a2:	6106      	str	r6, [r0, #16]
 800a3a4:	b003      	add	sp, #12
 800a3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3aa:	f843 2b04 	str.w	r2, [r3], #4
 800a3ae:	e7e3      	b.n	800a378 <__multiply+0x42>
 800a3b0:	f8b2 b000 	ldrh.w	fp, [r2]
 800a3b4:	f1bb 0f00 	cmp.w	fp, #0
 800a3b8:	d023      	beq.n	800a402 <__multiply+0xcc>
 800a3ba:	4689      	mov	r9, r1
 800a3bc:	46ac      	mov	ip, r5
 800a3be:	f04f 0800 	mov.w	r8, #0
 800a3c2:	f859 4b04 	ldr.w	r4, [r9], #4
 800a3c6:	f8dc a000 	ldr.w	sl, [ip]
 800a3ca:	b2a3      	uxth	r3, r4
 800a3cc:	fa1f fa8a 	uxth.w	sl, sl
 800a3d0:	fb0b a303 	mla	r3, fp, r3, sl
 800a3d4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a3d8:	f8dc 4000 	ldr.w	r4, [ip]
 800a3dc:	4443      	add	r3, r8
 800a3de:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a3e2:	fb0b 840a 	mla	r4, fp, sl, r8
 800a3e6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a3ea:	46e2      	mov	sl, ip
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a3f2:	454f      	cmp	r7, r9
 800a3f4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a3f8:	f84a 3b04 	str.w	r3, [sl], #4
 800a3fc:	d82b      	bhi.n	800a456 <__multiply+0x120>
 800a3fe:	f8cc 8004 	str.w	r8, [ip, #4]
 800a402:	9b01      	ldr	r3, [sp, #4]
 800a404:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a408:	3204      	adds	r2, #4
 800a40a:	f1ba 0f00 	cmp.w	sl, #0
 800a40e:	d020      	beq.n	800a452 <__multiply+0x11c>
 800a410:	682b      	ldr	r3, [r5, #0]
 800a412:	4689      	mov	r9, r1
 800a414:	46a8      	mov	r8, r5
 800a416:	f04f 0b00 	mov.w	fp, #0
 800a41a:	f8b9 c000 	ldrh.w	ip, [r9]
 800a41e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a422:	fb0a 440c 	mla	r4, sl, ip, r4
 800a426:	445c      	add	r4, fp
 800a428:	46c4      	mov	ip, r8
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a430:	f84c 3b04 	str.w	r3, [ip], #4
 800a434:	f859 3b04 	ldr.w	r3, [r9], #4
 800a438:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a43c:	0c1b      	lsrs	r3, r3, #16
 800a43e:	fb0a b303 	mla	r3, sl, r3, fp
 800a442:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a446:	454f      	cmp	r7, r9
 800a448:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a44c:	d805      	bhi.n	800a45a <__multiply+0x124>
 800a44e:	f8c8 3004 	str.w	r3, [r8, #4]
 800a452:	3504      	adds	r5, #4
 800a454:	e79b      	b.n	800a38e <__multiply+0x58>
 800a456:	46d4      	mov	ip, sl
 800a458:	e7b3      	b.n	800a3c2 <__multiply+0x8c>
 800a45a:	46e0      	mov	r8, ip
 800a45c:	e7dd      	b.n	800a41a <__multiply+0xe4>
 800a45e:	3e01      	subs	r6, #1
 800a460:	e799      	b.n	800a396 <__multiply+0x60>
	...

0800a464 <__pow5mult>:
 800a464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a468:	4615      	mov	r5, r2
 800a46a:	f012 0203 	ands.w	r2, r2, #3
 800a46e:	4606      	mov	r6, r0
 800a470:	460f      	mov	r7, r1
 800a472:	d007      	beq.n	800a484 <__pow5mult+0x20>
 800a474:	3a01      	subs	r2, #1
 800a476:	4c21      	ldr	r4, [pc, #132]	; (800a4fc <__pow5mult+0x98>)
 800a478:	2300      	movs	r3, #0
 800a47a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a47e:	f7ff fe8a 	bl	800a196 <__multadd>
 800a482:	4607      	mov	r7, r0
 800a484:	10ad      	asrs	r5, r5, #2
 800a486:	d035      	beq.n	800a4f4 <__pow5mult+0x90>
 800a488:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a48a:	b93c      	cbnz	r4, 800a49c <__pow5mult+0x38>
 800a48c:	2010      	movs	r0, #16
 800a48e:	f7ff fe1d 	bl	800a0cc <malloc>
 800a492:	6270      	str	r0, [r6, #36]	; 0x24
 800a494:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a498:	6004      	str	r4, [r0, #0]
 800a49a:	60c4      	str	r4, [r0, #12]
 800a49c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a4a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4a4:	b94c      	cbnz	r4, 800a4ba <__pow5mult+0x56>
 800a4a6:	f240 2171 	movw	r1, #625	; 0x271
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	f7ff ff3a 	bl	800a324 <__i2b>
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	6003      	str	r3, [r0, #0]
 800a4ba:	f04f 0800 	mov.w	r8, #0
 800a4be:	07eb      	lsls	r3, r5, #31
 800a4c0:	d50a      	bpl.n	800a4d8 <__pow5mult+0x74>
 800a4c2:	4639      	mov	r1, r7
 800a4c4:	4622      	mov	r2, r4
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	f7ff ff35 	bl	800a336 <__multiply>
 800a4cc:	4639      	mov	r1, r7
 800a4ce:	4681      	mov	r9, r0
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f7ff fe49 	bl	800a168 <_Bfree>
 800a4d6:	464f      	mov	r7, r9
 800a4d8:	106d      	asrs	r5, r5, #1
 800a4da:	d00b      	beq.n	800a4f4 <__pow5mult+0x90>
 800a4dc:	6820      	ldr	r0, [r4, #0]
 800a4de:	b938      	cbnz	r0, 800a4f0 <__pow5mult+0x8c>
 800a4e0:	4622      	mov	r2, r4
 800a4e2:	4621      	mov	r1, r4
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	f7ff ff26 	bl	800a336 <__multiply>
 800a4ea:	6020      	str	r0, [r4, #0]
 800a4ec:	f8c0 8000 	str.w	r8, [r0]
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	e7e4      	b.n	800a4be <__pow5mult+0x5a>
 800a4f4:	4638      	mov	r0, r7
 800a4f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4fa:	bf00      	nop
 800a4fc:	0800b118 	.word	0x0800b118

0800a500 <__lshift>:
 800a500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a504:	460c      	mov	r4, r1
 800a506:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a50a:	6923      	ldr	r3, [r4, #16]
 800a50c:	6849      	ldr	r1, [r1, #4]
 800a50e:	eb0a 0903 	add.w	r9, sl, r3
 800a512:	68a3      	ldr	r3, [r4, #8]
 800a514:	4607      	mov	r7, r0
 800a516:	4616      	mov	r6, r2
 800a518:	f109 0501 	add.w	r5, r9, #1
 800a51c:	42ab      	cmp	r3, r5
 800a51e:	db32      	blt.n	800a586 <__lshift+0x86>
 800a520:	4638      	mov	r0, r7
 800a522:	f7ff fded 	bl	800a100 <_Balloc>
 800a526:	2300      	movs	r3, #0
 800a528:	4680      	mov	r8, r0
 800a52a:	f100 0114 	add.w	r1, r0, #20
 800a52e:	461a      	mov	r2, r3
 800a530:	4553      	cmp	r3, sl
 800a532:	db2b      	blt.n	800a58c <__lshift+0x8c>
 800a534:	6920      	ldr	r0, [r4, #16]
 800a536:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a53a:	f104 0314 	add.w	r3, r4, #20
 800a53e:	f016 021f 	ands.w	r2, r6, #31
 800a542:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a546:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a54a:	d025      	beq.n	800a598 <__lshift+0x98>
 800a54c:	f1c2 0e20 	rsb	lr, r2, #32
 800a550:	2000      	movs	r0, #0
 800a552:	681e      	ldr	r6, [r3, #0]
 800a554:	468a      	mov	sl, r1
 800a556:	4096      	lsls	r6, r2
 800a558:	4330      	orrs	r0, r6
 800a55a:	f84a 0b04 	str.w	r0, [sl], #4
 800a55e:	f853 0b04 	ldr.w	r0, [r3], #4
 800a562:	459c      	cmp	ip, r3
 800a564:	fa20 f00e 	lsr.w	r0, r0, lr
 800a568:	d814      	bhi.n	800a594 <__lshift+0x94>
 800a56a:	6048      	str	r0, [r1, #4]
 800a56c:	b108      	cbz	r0, 800a572 <__lshift+0x72>
 800a56e:	f109 0502 	add.w	r5, r9, #2
 800a572:	3d01      	subs	r5, #1
 800a574:	4638      	mov	r0, r7
 800a576:	f8c8 5010 	str.w	r5, [r8, #16]
 800a57a:	4621      	mov	r1, r4
 800a57c:	f7ff fdf4 	bl	800a168 <_Bfree>
 800a580:	4640      	mov	r0, r8
 800a582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a586:	3101      	adds	r1, #1
 800a588:	005b      	lsls	r3, r3, #1
 800a58a:	e7c7      	b.n	800a51c <__lshift+0x1c>
 800a58c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a590:	3301      	adds	r3, #1
 800a592:	e7cd      	b.n	800a530 <__lshift+0x30>
 800a594:	4651      	mov	r1, sl
 800a596:	e7dc      	b.n	800a552 <__lshift+0x52>
 800a598:	3904      	subs	r1, #4
 800a59a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a59e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5a2:	459c      	cmp	ip, r3
 800a5a4:	d8f9      	bhi.n	800a59a <__lshift+0x9a>
 800a5a6:	e7e4      	b.n	800a572 <__lshift+0x72>

0800a5a8 <__mcmp>:
 800a5a8:	6903      	ldr	r3, [r0, #16]
 800a5aa:	690a      	ldr	r2, [r1, #16]
 800a5ac:	1a9b      	subs	r3, r3, r2
 800a5ae:	b530      	push	{r4, r5, lr}
 800a5b0:	d10c      	bne.n	800a5cc <__mcmp+0x24>
 800a5b2:	0092      	lsls	r2, r2, #2
 800a5b4:	3014      	adds	r0, #20
 800a5b6:	3114      	adds	r1, #20
 800a5b8:	1884      	adds	r4, r0, r2
 800a5ba:	4411      	add	r1, r2
 800a5bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a5c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a5c4:	4295      	cmp	r5, r2
 800a5c6:	d003      	beq.n	800a5d0 <__mcmp+0x28>
 800a5c8:	d305      	bcc.n	800a5d6 <__mcmp+0x2e>
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	bd30      	pop	{r4, r5, pc}
 800a5d0:	42a0      	cmp	r0, r4
 800a5d2:	d3f3      	bcc.n	800a5bc <__mcmp+0x14>
 800a5d4:	e7fa      	b.n	800a5cc <__mcmp+0x24>
 800a5d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5da:	e7f7      	b.n	800a5cc <__mcmp+0x24>

0800a5dc <__mdiff>:
 800a5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e0:	460d      	mov	r5, r1
 800a5e2:	4607      	mov	r7, r0
 800a5e4:	4611      	mov	r1, r2
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	4614      	mov	r4, r2
 800a5ea:	f7ff ffdd 	bl	800a5a8 <__mcmp>
 800a5ee:	1e06      	subs	r6, r0, #0
 800a5f0:	d108      	bne.n	800a604 <__mdiff+0x28>
 800a5f2:	4631      	mov	r1, r6
 800a5f4:	4638      	mov	r0, r7
 800a5f6:	f7ff fd83 	bl	800a100 <_Balloc>
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a604:	bfa4      	itt	ge
 800a606:	4623      	movge	r3, r4
 800a608:	462c      	movge	r4, r5
 800a60a:	4638      	mov	r0, r7
 800a60c:	6861      	ldr	r1, [r4, #4]
 800a60e:	bfa6      	itte	ge
 800a610:	461d      	movge	r5, r3
 800a612:	2600      	movge	r6, #0
 800a614:	2601      	movlt	r6, #1
 800a616:	f7ff fd73 	bl	800a100 <_Balloc>
 800a61a:	692b      	ldr	r3, [r5, #16]
 800a61c:	60c6      	str	r6, [r0, #12]
 800a61e:	6926      	ldr	r6, [r4, #16]
 800a620:	f105 0914 	add.w	r9, r5, #20
 800a624:	f104 0214 	add.w	r2, r4, #20
 800a628:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a62c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a630:	f100 0514 	add.w	r5, r0, #20
 800a634:	f04f 0e00 	mov.w	lr, #0
 800a638:	f852 ab04 	ldr.w	sl, [r2], #4
 800a63c:	f859 4b04 	ldr.w	r4, [r9], #4
 800a640:	fa1e f18a 	uxtah	r1, lr, sl
 800a644:	b2a3      	uxth	r3, r4
 800a646:	1ac9      	subs	r1, r1, r3
 800a648:	0c23      	lsrs	r3, r4, #16
 800a64a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a64e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a652:	b289      	uxth	r1, r1
 800a654:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a658:	45c8      	cmp	r8, r9
 800a65a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a65e:	4694      	mov	ip, r2
 800a660:	f845 3b04 	str.w	r3, [r5], #4
 800a664:	d8e8      	bhi.n	800a638 <__mdiff+0x5c>
 800a666:	45bc      	cmp	ip, r7
 800a668:	d304      	bcc.n	800a674 <__mdiff+0x98>
 800a66a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a66e:	b183      	cbz	r3, 800a692 <__mdiff+0xb6>
 800a670:	6106      	str	r6, [r0, #16]
 800a672:	e7c5      	b.n	800a600 <__mdiff+0x24>
 800a674:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a678:	fa1e f381 	uxtah	r3, lr, r1
 800a67c:	141a      	asrs	r2, r3, #16
 800a67e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a682:	b29b      	uxth	r3, r3
 800a684:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a688:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a68c:	f845 3b04 	str.w	r3, [r5], #4
 800a690:	e7e9      	b.n	800a666 <__mdiff+0x8a>
 800a692:	3e01      	subs	r6, #1
 800a694:	e7e9      	b.n	800a66a <__mdiff+0x8e>
	...

0800a698 <__ulp>:
 800a698:	4b12      	ldr	r3, [pc, #72]	; (800a6e4 <__ulp+0x4c>)
 800a69a:	ee10 2a90 	vmov	r2, s1
 800a69e:	401a      	ands	r2, r3
 800a6a0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	dd04      	ble.n	800a6b2 <__ulp+0x1a>
 800a6a8:	2000      	movs	r0, #0
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	ec41 0b10 	vmov	d0, r0, r1
 800a6b0:	4770      	bx	lr
 800a6b2:	425b      	negs	r3, r3
 800a6b4:	151b      	asrs	r3, r3, #20
 800a6b6:	2b13      	cmp	r3, #19
 800a6b8:	f04f 0000 	mov.w	r0, #0
 800a6bc:	f04f 0100 	mov.w	r1, #0
 800a6c0:	dc04      	bgt.n	800a6cc <__ulp+0x34>
 800a6c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a6c6:	fa42 f103 	asr.w	r1, r2, r3
 800a6ca:	e7ef      	b.n	800a6ac <__ulp+0x14>
 800a6cc:	3b14      	subs	r3, #20
 800a6ce:	2b1e      	cmp	r3, #30
 800a6d0:	f04f 0201 	mov.w	r2, #1
 800a6d4:	bfda      	itte	le
 800a6d6:	f1c3 031f 	rsble	r3, r3, #31
 800a6da:	fa02 f303 	lslle.w	r3, r2, r3
 800a6de:	4613      	movgt	r3, r2
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	e7e3      	b.n	800a6ac <__ulp+0x14>
 800a6e4:	7ff00000 	.word	0x7ff00000

0800a6e8 <__b2d>:
 800a6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ea:	6905      	ldr	r5, [r0, #16]
 800a6ec:	f100 0714 	add.w	r7, r0, #20
 800a6f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a6f4:	1f2e      	subs	r6, r5, #4
 800a6f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f7ff fdc4 	bl	800a288 <__hi0bits>
 800a700:	f1c0 0320 	rsb	r3, r0, #32
 800a704:	280a      	cmp	r0, #10
 800a706:	600b      	str	r3, [r1, #0]
 800a708:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a780 <__b2d+0x98>
 800a70c:	dc14      	bgt.n	800a738 <__b2d+0x50>
 800a70e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a712:	fa24 f10e 	lsr.w	r1, r4, lr
 800a716:	42b7      	cmp	r7, r6
 800a718:	ea41 030c 	orr.w	r3, r1, ip
 800a71c:	bf34      	ite	cc
 800a71e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a722:	2100      	movcs	r1, #0
 800a724:	3015      	adds	r0, #21
 800a726:	fa04 f000 	lsl.w	r0, r4, r0
 800a72a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a72e:	ea40 0201 	orr.w	r2, r0, r1
 800a732:	ec43 2b10 	vmov	d0, r2, r3
 800a736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a738:	42b7      	cmp	r7, r6
 800a73a:	bf3a      	itte	cc
 800a73c:	f1a5 0608 	subcc.w	r6, r5, #8
 800a740:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a744:	2100      	movcs	r1, #0
 800a746:	380b      	subs	r0, #11
 800a748:	d015      	beq.n	800a776 <__b2d+0x8e>
 800a74a:	4084      	lsls	r4, r0
 800a74c:	f1c0 0520 	rsb	r5, r0, #32
 800a750:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800a754:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800a758:	42be      	cmp	r6, r7
 800a75a:	fa21 fc05 	lsr.w	ip, r1, r5
 800a75e:	ea44 030c 	orr.w	r3, r4, ip
 800a762:	bf8c      	ite	hi
 800a764:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a768:	2400      	movls	r4, #0
 800a76a:	fa01 f000 	lsl.w	r0, r1, r0
 800a76e:	40ec      	lsrs	r4, r5
 800a770:	ea40 0204 	orr.w	r2, r0, r4
 800a774:	e7dd      	b.n	800a732 <__b2d+0x4a>
 800a776:	ea44 030c 	orr.w	r3, r4, ip
 800a77a:	460a      	mov	r2, r1
 800a77c:	e7d9      	b.n	800a732 <__b2d+0x4a>
 800a77e:	bf00      	nop
 800a780:	3ff00000 	.word	0x3ff00000

0800a784 <__d2b>:
 800a784:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a788:	460e      	mov	r6, r1
 800a78a:	2101      	movs	r1, #1
 800a78c:	ec59 8b10 	vmov	r8, r9, d0
 800a790:	4615      	mov	r5, r2
 800a792:	f7ff fcb5 	bl	800a100 <_Balloc>
 800a796:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a79a:	4607      	mov	r7, r0
 800a79c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7a0:	bb34      	cbnz	r4, 800a7f0 <__d2b+0x6c>
 800a7a2:	9301      	str	r3, [sp, #4]
 800a7a4:	f1b8 0300 	subs.w	r3, r8, #0
 800a7a8:	d027      	beq.n	800a7fa <__d2b+0x76>
 800a7aa:	a802      	add	r0, sp, #8
 800a7ac:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a7b0:	f7ff fd89 	bl	800a2c6 <__lo0bits>
 800a7b4:	9900      	ldr	r1, [sp, #0]
 800a7b6:	b1f0      	cbz	r0, 800a7f6 <__d2b+0x72>
 800a7b8:	9a01      	ldr	r2, [sp, #4]
 800a7ba:	f1c0 0320 	rsb	r3, r0, #32
 800a7be:	fa02 f303 	lsl.w	r3, r2, r3
 800a7c2:	430b      	orrs	r3, r1
 800a7c4:	40c2      	lsrs	r2, r0
 800a7c6:	617b      	str	r3, [r7, #20]
 800a7c8:	9201      	str	r2, [sp, #4]
 800a7ca:	9b01      	ldr	r3, [sp, #4]
 800a7cc:	61bb      	str	r3, [r7, #24]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	bf14      	ite	ne
 800a7d2:	2102      	movne	r1, #2
 800a7d4:	2101      	moveq	r1, #1
 800a7d6:	6139      	str	r1, [r7, #16]
 800a7d8:	b1c4      	cbz	r4, 800a80c <__d2b+0x88>
 800a7da:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a7de:	4404      	add	r4, r0
 800a7e0:	6034      	str	r4, [r6, #0]
 800a7e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7e6:	6028      	str	r0, [r5, #0]
 800a7e8:	4638      	mov	r0, r7
 800a7ea:	b003      	add	sp, #12
 800a7ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7f4:	e7d5      	b.n	800a7a2 <__d2b+0x1e>
 800a7f6:	6179      	str	r1, [r7, #20]
 800a7f8:	e7e7      	b.n	800a7ca <__d2b+0x46>
 800a7fa:	a801      	add	r0, sp, #4
 800a7fc:	f7ff fd63 	bl	800a2c6 <__lo0bits>
 800a800:	9b01      	ldr	r3, [sp, #4]
 800a802:	617b      	str	r3, [r7, #20]
 800a804:	2101      	movs	r1, #1
 800a806:	6139      	str	r1, [r7, #16]
 800a808:	3020      	adds	r0, #32
 800a80a:	e7e5      	b.n	800a7d8 <__d2b+0x54>
 800a80c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a810:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a814:	6030      	str	r0, [r6, #0]
 800a816:	6918      	ldr	r0, [r3, #16]
 800a818:	f7ff fd36 	bl	800a288 <__hi0bits>
 800a81c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a820:	e7e1      	b.n	800a7e6 <__d2b+0x62>

0800a822 <__ratio>:
 800a822:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a826:	4688      	mov	r8, r1
 800a828:	4669      	mov	r1, sp
 800a82a:	4681      	mov	r9, r0
 800a82c:	f7ff ff5c 	bl	800a6e8 <__b2d>
 800a830:	a901      	add	r1, sp, #4
 800a832:	4640      	mov	r0, r8
 800a834:	ec57 6b10 	vmov	r6, r7, d0
 800a838:	f7ff ff56 	bl	800a6e8 <__b2d>
 800a83c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a840:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a844:	eba3 0c02 	sub.w	ip, r3, r2
 800a848:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a84c:	1a9b      	subs	r3, r3, r2
 800a84e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a852:	ec5b ab10 	vmov	sl, fp, d0
 800a856:	2b00      	cmp	r3, #0
 800a858:	bfce      	itee	gt
 800a85a:	463a      	movgt	r2, r7
 800a85c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a860:	465a      	movle	r2, fp
 800a862:	4659      	mov	r1, fp
 800a864:	463d      	mov	r5, r7
 800a866:	bfd4      	ite	le
 800a868:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a86c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800a870:	4630      	mov	r0, r6
 800a872:	ee10 2a10 	vmov	r2, s0
 800a876:	460b      	mov	r3, r1
 800a878:	4629      	mov	r1, r5
 800a87a:	f7f5 ffef 	bl	800085c <__aeabi_ddiv>
 800a87e:	ec41 0b10 	vmov	d0, r0, r1
 800a882:	b003      	add	sp, #12
 800a884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a888 <__copybits>:
 800a888:	3901      	subs	r1, #1
 800a88a:	b510      	push	{r4, lr}
 800a88c:	1149      	asrs	r1, r1, #5
 800a88e:	6914      	ldr	r4, [r2, #16]
 800a890:	3101      	adds	r1, #1
 800a892:	f102 0314 	add.w	r3, r2, #20
 800a896:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a89a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a89e:	42a3      	cmp	r3, r4
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	d303      	bcc.n	800a8ac <__copybits+0x24>
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	428a      	cmp	r2, r1
 800a8a8:	d305      	bcc.n	800a8b6 <__copybits+0x2e>
 800a8aa:	bd10      	pop	{r4, pc}
 800a8ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8b0:	f840 2b04 	str.w	r2, [r0], #4
 800a8b4:	e7f3      	b.n	800a89e <__copybits+0x16>
 800a8b6:	f842 3b04 	str.w	r3, [r2], #4
 800a8ba:	e7f4      	b.n	800a8a6 <__copybits+0x1e>

0800a8bc <__any_on>:
 800a8bc:	f100 0214 	add.w	r2, r0, #20
 800a8c0:	6900      	ldr	r0, [r0, #16]
 800a8c2:	114b      	asrs	r3, r1, #5
 800a8c4:	4298      	cmp	r0, r3
 800a8c6:	b510      	push	{r4, lr}
 800a8c8:	db11      	blt.n	800a8ee <__any_on+0x32>
 800a8ca:	dd0a      	ble.n	800a8e2 <__any_on+0x26>
 800a8cc:	f011 011f 	ands.w	r1, r1, #31
 800a8d0:	d007      	beq.n	800a8e2 <__any_on+0x26>
 800a8d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a8d6:	fa24 f001 	lsr.w	r0, r4, r1
 800a8da:	fa00 f101 	lsl.w	r1, r0, r1
 800a8de:	428c      	cmp	r4, r1
 800a8e0:	d10b      	bne.n	800a8fa <__any_on+0x3e>
 800a8e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d803      	bhi.n	800a8f2 <__any_on+0x36>
 800a8ea:	2000      	movs	r0, #0
 800a8ec:	bd10      	pop	{r4, pc}
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	e7f7      	b.n	800a8e2 <__any_on+0x26>
 800a8f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a8f6:	2900      	cmp	r1, #0
 800a8f8:	d0f5      	beq.n	800a8e6 <__any_on+0x2a>
 800a8fa:	2001      	movs	r0, #1
 800a8fc:	e7f6      	b.n	800a8ec <__any_on+0x30>

0800a8fe <_calloc_r>:
 800a8fe:	b538      	push	{r3, r4, r5, lr}
 800a900:	fb02 f401 	mul.w	r4, r2, r1
 800a904:	4621      	mov	r1, r4
 800a906:	f000 f857 	bl	800a9b8 <_malloc_r>
 800a90a:	4605      	mov	r5, r0
 800a90c:	b118      	cbz	r0, 800a916 <_calloc_r+0x18>
 800a90e:	4622      	mov	r2, r4
 800a910:	2100      	movs	r1, #0
 800a912:	f7fc fd40 	bl	8007396 <memset>
 800a916:	4628      	mov	r0, r5
 800a918:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a91c <_free_r>:
 800a91c:	b538      	push	{r3, r4, r5, lr}
 800a91e:	4605      	mov	r5, r0
 800a920:	2900      	cmp	r1, #0
 800a922:	d045      	beq.n	800a9b0 <_free_r+0x94>
 800a924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a928:	1f0c      	subs	r4, r1, #4
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	bfb8      	it	lt
 800a92e:	18e4      	addlt	r4, r4, r3
 800a930:	f000 fa36 	bl	800ada0 <__malloc_lock>
 800a934:	4a1f      	ldr	r2, [pc, #124]	; (800a9b4 <_free_r+0x98>)
 800a936:	6813      	ldr	r3, [r2, #0]
 800a938:	4610      	mov	r0, r2
 800a93a:	b933      	cbnz	r3, 800a94a <_free_r+0x2e>
 800a93c:	6063      	str	r3, [r4, #4]
 800a93e:	6014      	str	r4, [r2, #0]
 800a940:	4628      	mov	r0, r5
 800a942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a946:	f000 ba2c 	b.w	800ada2 <__malloc_unlock>
 800a94a:	42a3      	cmp	r3, r4
 800a94c:	d90c      	bls.n	800a968 <_free_r+0x4c>
 800a94e:	6821      	ldr	r1, [r4, #0]
 800a950:	1862      	adds	r2, r4, r1
 800a952:	4293      	cmp	r3, r2
 800a954:	bf04      	itt	eq
 800a956:	681a      	ldreq	r2, [r3, #0]
 800a958:	685b      	ldreq	r3, [r3, #4]
 800a95a:	6063      	str	r3, [r4, #4]
 800a95c:	bf04      	itt	eq
 800a95e:	1852      	addeq	r2, r2, r1
 800a960:	6022      	streq	r2, [r4, #0]
 800a962:	6004      	str	r4, [r0, #0]
 800a964:	e7ec      	b.n	800a940 <_free_r+0x24>
 800a966:	4613      	mov	r3, r2
 800a968:	685a      	ldr	r2, [r3, #4]
 800a96a:	b10a      	cbz	r2, 800a970 <_free_r+0x54>
 800a96c:	42a2      	cmp	r2, r4
 800a96e:	d9fa      	bls.n	800a966 <_free_r+0x4a>
 800a970:	6819      	ldr	r1, [r3, #0]
 800a972:	1858      	adds	r0, r3, r1
 800a974:	42a0      	cmp	r0, r4
 800a976:	d10b      	bne.n	800a990 <_free_r+0x74>
 800a978:	6820      	ldr	r0, [r4, #0]
 800a97a:	4401      	add	r1, r0
 800a97c:	1858      	adds	r0, r3, r1
 800a97e:	4282      	cmp	r2, r0
 800a980:	6019      	str	r1, [r3, #0]
 800a982:	d1dd      	bne.n	800a940 <_free_r+0x24>
 800a984:	6810      	ldr	r0, [r2, #0]
 800a986:	6852      	ldr	r2, [r2, #4]
 800a988:	605a      	str	r2, [r3, #4]
 800a98a:	4401      	add	r1, r0
 800a98c:	6019      	str	r1, [r3, #0]
 800a98e:	e7d7      	b.n	800a940 <_free_r+0x24>
 800a990:	d902      	bls.n	800a998 <_free_r+0x7c>
 800a992:	230c      	movs	r3, #12
 800a994:	602b      	str	r3, [r5, #0]
 800a996:	e7d3      	b.n	800a940 <_free_r+0x24>
 800a998:	6820      	ldr	r0, [r4, #0]
 800a99a:	1821      	adds	r1, r4, r0
 800a99c:	428a      	cmp	r2, r1
 800a99e:	bf04      	itt	eq
 800a9a0:	6811      	ldreq	r1, [r2, #0]
 800a9a2:	6852      	ldreq	r2, [r2, #4]
 800a9a4:	6062      	str	r2, [r4, #4]
 800a9a6:	bf04      	itt	eq
 800a9a8:	1809      	addeq	r1, r1, r0
 800a9aa:	6021      	streq	r1, [r4, #0]
 800a9ac:	605c      	str	r4, [r3, #4]
 800a9ae:	e7c7      	b.n	800a940 <_free_r+0x24>
 800a9b0:	bd38      	pop	{r3, r4, r5, pc}
 800a9b2:	bf00      	nop
 800a9b4:	20004b2c 	.word	0x20004b2c

0800a9b8 <_malloc_r>:
 800a9b8:	b570      	push	{r4, r5, r6, lr}
 800a9ba:	1ccd      	adds	r5, r1, #3
 800a9bc:	f025 0503 	bic.w	r5, r5, #3
 800a9c0:	3508      	adds	r5, #8
 800a9c2:	2d0c      	cmp	r5, #12
 800a9c4:	bf38      	it	cc
 800a9c6:	250c      	movcc	r5, #12
 800a9c8:	2d00      	cmp	r5, #0
 800a9ca:	4606      	mov	r6, r0
 800a9cc:	db01      	blt.n	800a9d2 <_malloc_r+0x1a>
 800a9ce:	42a9      	cmp	r1, r5
 800a9d0:	d903      	bls.n	800a9da <_malloc_r+0x22>
 800a9d2:	230c      	movs	r3, #12
 800a9d4:	6033      	str	r3, [r6, #0]
 800a9d6:	2000      	movs	r0, #0
 800a9d8:	bd70      	pop	{r4, r5, r6, pc}
 800a9da:	f000 f9e1 	bl	800ada0 <__malloc_lock>
 800a9de:	4a21      	ldr	r2, [pc, #132]	; (800aa64 <_malloc_r+0xac>)
 800a9e0:	6814      	ldr	r4, [r2, #0]
 800a9e2:	4621      	mov	r1, r4
 800a9e4:	b991      	cbnz	r1, 800aa0c <_malloc_r+0x54>
 800a9e6:	4c20      	ldr	r4, [pc, #128]	; (800aa68 <_malloc_r+0xb0>)
 800a9e8:	6823      	ldr	r3, [r4, #0]
 800a9ea:	b91b      	cbnz	r3, 800a9f4 <_malloc_r+0x3c>
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	f000 f98f 	bl	800ad10 <_sbrk_r>
 800a9f2:	6020      	str	r0, [r4, #0]
 800a9f4:	4629      	mov	r1, r5
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	f000 f98a 	bl	800ad10 <_sbrk_r>
 800a9fc:	1c43      	adds	r3, r0, #1
 800a9fe:	d124      	bne.n	800aa4a <_malloc_r+0x92>
 800aa00:	230c      	movs	r3, #12
 800aa02:	6033      	str	r3, [r6, #0]
 800aa04:	4630      	mov	r0, r6
 800aa06:	f000 f9cc 	bl	800ada2 <__malloc_unlock>
 800aa0a:	e7e4      	b.n	800a9d6 <_malloc_r+0x1e>
 800aa0c:	680b      	ldr	r3, [r1, #0]
 800aa0e:	1b5b      	subs	r3, r3, r5
 800aa10:	d418      	bmi.n	800aa44 <_malloc_r+0x8c>
 800aa12:	2b0b      	cmp	r3, #11
 800aa14:	d90f      	bls.n	800aa36 <_malloc_r+0x7e>
 800aa16:	600b      	str	r3, [r1, #0]
 800aa18:	50cd      	str	r5, [r1, r3]
 800aa1a:	18cc      	adds	r4, r1, r3
 800aa1c:	4630      	mov	r0, r6
 800aa1e:	f000 f9c0 	bl	800ada2 <__malloc_unlock>
 800aa22:	f104 000b 	add.w	r0, r4, #11
 800aa26:	1d23      	adds	r3, r4, #4
 800aa28:	f020 0007 	bic.w	r0, r0, #7
 800aa2c:	1ac3      	subs	r3, r0, r3
 800aa2e:	d0d3      	beq.n	800a9d8 <_malloc_r+0x20>
 800aa30:	425a      	negs	r2, r3
 800aa32:	50e2      	str	r2, [r4, r3]
 800aa34:	e7d0      	b.n	800a9d8 <_malloc_r+0x20>
 800aa36:	428c      	cmp	r4, r1
 800aa38:	684b      	ldr	r3, [r1, #4]
 800aa3a:	bf16      	itet	ne
 800aa3c:	6063      	strne	r3, [r4, #4]
 800aa3e:	6013      	streq	r3, [r2, #0]
 800aa40:	460c      	movne	r4, r1
 800aa42:	e7eb      	b.n	800aa1c <_malloc_r+0x64>
 800aa44:	460c      	mov	r4, r1
 800aa46:	6849      	ldr	r1, [r1, #4]
 800aa48:	e7cc      	b.n	800a9e4 <_malloc_r+0x2c>
 800aa4a:	1cc4      	adds	r4, r0, #3
 800aa4c:	f024 0403 	bic.w	r4, r4, #3
 800aa50:	42a0      	cmp	r0, r4
 800aa52:	d005      	beq.n	800aa60 <_malloc_r+0xa8>
 800aa54:	1a21      	subs	r1, r4, r0
 800aa56:	4630      	mov	r0, r6
 800aa58:	f000 f95a 	bl	800ad10 <_sbrk_r>
 800aa5c:	3001      	adds	r0, #1
 800aa5e:	d0cf      	beq.n	800aa00 <_malloc_r+0x48>
 800aa60:	6025      	str	r5, [r4, #0]
 800aa62:	e7db      	b.n	800aa1c <_malloc_r+0x64>
 800aa64:	20004b2c 	.word	0x20004b2c
 800aa68:	20004b30 	.word	0x20004b30

0800aa6c <__ssputs_r>:
 800aa6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa70:	688e      	ldr	r6, [r1, #8]
 800aa72:	429e      	cmp	r6, r3
 800aa74:	4682      	mov	sl, r0
 800aa76:	460c      	mov	r4, r1
 800aa78:	4690      	mov	r8, r2
 800aa7a:	4699      	mov	r9, r3
 800aa7c:	d837      	bhi.n	800aaee <__ssputs_r+0x82>
 800aa7e:	898a      	ldrh	r2, [r1, #12]
 800aa80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa84:	d031      	beq.n	800aaea <__ssputs_r+0x7e>
 800aa86:	6825      	ldr	r5, [r4, #0]
 800aa88:	6909      	ldr	r1, [r1, #16]
 800aa8a:	1a6f      	subs	r7, r5, r1
 800aa8c:	6965      	ldr	r5, [r4, #20]
 800aa8e:	2302      	movs	r3, #2
 800aa90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa94:	fb95 f5f3 	sdiv	r5, r5, r3
 800aa98:	f109 0301 	add.w	r3, r9, #1
 800aa9c:	443b      	add	r3, r7
 800aa9e:	429d      	cmp	r5, r3
 800aaa0:	bf38      	it	cc
 800aaa2:	461d      	movcc	r5, r3
 800aaa4:	0553      	lsls	r3, r2, #21
 800aaa6:	d530      	bpl.n	800ab0a <__ssputs_r+0x9e>
 800aaa8:	4629      	mov	r1, r5
 800aaaa:	f7ff ff85 	bl	800a9b8 <_malloc_r>
 800aaae:	4606      	mov	r6, r0
 800aab0:	b950      	cbnz	r0, 800aac8 <__ssputs_r+0x5c>
 800aab2:	230c      	movs	r3, #12
 800aab4:	f8ca 3000 	str.w	r3, [sl]
 800aab8:	89a3      	ldrh	r3, [r4, #12]
 800aaba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aabe:	81a3      	strh	r3, [r4, #12]
 800aac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aac8:	463a      	mov	r2, r7
 800aaca:	6921      	ldr	r1, [r4, #16]
 800aacc:	f7fc fc58 	bl	8007380 <memcpy>
 800aad0:	89a3      	ldrh	r3, [r4, #12]
 800aad2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aada:	81a3      	strh	r3, [r4, #12]
 800aadc:	6126      	str	r6, [r4, #16]
 800aade:	6165      	str	r5, [r4, #20]
 800aae0:	443e      	add	r6, r7
 800aae2:	1bed      	subs	r5, r5, r7
 800aae4:	6026      	str	r6, [r4, #0]
 800aae6:	60a5      	str	r5, [r4, #8]
 800aae8:	464e      	mov	r6, r9
 800aaea:	454e      	cmp	r6, r9
 800aaec:	d900      	bls.n	800aaf0 <__ssputs_r+0x84>
 800aaee:	464e      	mov	r6, r9
 800aaf0:	4632      	mov	r2, r6
 800aaf2:	4641      	mov	r1, r8
 800aaf4:	6820      	ldr	r0, [r4, #0]
 800aaf6:	f000 f93a 	bl	800ad6e <memmove>
 800aafa:	68a3      	ldr	r3, [r4, #8]
 800aafc:	1b9b      	subs	r3, r3, r6
 800aafe:	60a3      	str	r3, [r4, #8]
 800ab00:	6823      	ldr	r3, [r4, #0]
 800ab02:	441e      	add	r6, r3
 800ab04:	6026      	str	r6, [r4, #0]
 800ab06:	2000      	movs	r0, #0
 800ab08:	e7dc      	b.n	800aac4 <__ssputs_r+0x58>
 800ab0a:	462a      	mov	r2, r5
 800ab0c:	f000 f94a 	bl	800ada4 <_realloc_r>
 800ab10:	4606      	mov	r6, r0
 800ab12:	2800      	cmp	r0, #0
 800ab14:	d1e2      	bne.n	800aadc <__ssputs_r+0x70>
 800ab16:	6921      	ldr	r1, [r4, #16]
 800ab18:	4650      	mov	r0, sl
 800ab1a:	f7ff feff 	bl	800a91c <_free_r>
 800ab1e:	e7c8      	b.n	800aab2 <__ssputs_r+0x46>

0800ab20 <_svfiprintf_r>:
 800ab20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab24:	461d      	mov	r5, r3
 800ab26:	898b      	ldrh	r3, [r1, #12]
 800ab28:	061f      	lsls	r7, r3, #24
 800ab2a:	b09d      	sub	sp, #116	; 0x74
 800ab2c:	4680      	mov	r8, r0
 800ab2e:	460c      	mov	r4, r1
 800ab30:	4616      	mov	r6, r2
 800ab32:	d50f      	bpl.n	800ab54 <_svfiprintf_r+0x34>
 800ab34:	690b      	ldr	r3, [r1, #16]
 800ab36:	b96b      	cbnz	r3, 800ab54 <_svfiprintf_r+0x34>
 800ab38:	2140      	movs	r1, #64	; 0x40
 800ab3a:	f7ff ff3d 	bl	800a9b8 <_malloc_r>
 800ab3e:	6020      	str	r0, [r4, #0]
 800ab40:	6120      	str	r0, [r4, #16]
 800ab42:	b928      	cbnz	r0, 800ab50 <_svfiprintf_r+0x30>
 800ab44:	230c      	movs	r3, #12
 800ab46:	f8c8 3000 	str.w	r3, [r8]
 800ab4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab4e:	e0c8      	b.n	800ace2 <_svfiprintf_r+0x1c2>
 800ab50:	2340      	movs	r3, #64	; 0x40
 800ab52:	6163      	str	r3, [r4, #20]
 800ab54:	2300      	movs	r3, #0
 800ab56:	9309      	str	r3, [sp, #36]	; 0x24
 800ab58:	2320      	movs	r3, #32
 800ab5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab5e:	2330      	movs	r3, #48	; 0x30
 800ab60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab64:	9503      	str	r5, [sp, #12]
 800ab66:	f04f 0b01 	mov.w	fp, #1
 800ab6a:	4637      	mov	r7, r6
 800ab6c:	463d      	mov	r5, r7
 800ab6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ab72:	b10b      	cbz	r3, 800ab78 <_svfiprintf_r+0x58>
 800ab74:	2b25      	cmp	r3, #37	; 0x25
 800ab76:	d13e      	bne.n	800abf6 <_svfiprintf_r+0xd6>
 800ab78:	ebb7 0a06 	subs.w	sl, r7, r6
 800ab7c:	d00b      	beq.n	800ab96 <_svfiprintf_r+0x76>
 800ab7e:	4653      	mov	r3, sl
 800ab80:	4632      	mov	r2, r6
 800ab82:	4621      	mov	r1, r4
 800ab84:	4640      	mov	r0, r8
 800ab86:	f7ff ff71 	bl	800aa6c <__ssputs_r>
 800ab8a:	3001      	adds	r0, #1
 800ab8c:	f000 80a4 	beq.w	800acd8 <_svfiprintf_r+0x1b8>
 800ab90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab92:	4453      	add	r3, sl
 800ab94:	9309      	str	r3, [sp, #36]	; 0x24
 800ab96:	783b      	ldrb	r3, [r7, #0]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f000 809d 	beq.w	800acd8 <_svfiprintf_r+0x1b8>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aba8:	9304      	str	r3, [sp, #16]
 800abaa:	9307      	str	r3, [sp, #28]
 800abac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abb0:	931a      	str	r3, [sp, #104]	; 0x68
 800abb2:	462f      	mov	r7, r5
 800abb4:	2205      	movs	r2, #5
 800abb6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800abba:	4850      	ldr	r0, [pc, #320]	; (800acfc <_svfiprintf_r+0x1dc>)
 800abbc:	f7f5 fb18 	bl	80001f0 <memchr>
 800abc0:	9b04      	ldr	r3, [sp, #16]
 800abc2:	b9d0      	cbnz	r0, 800abfa <_svfiprintf_r+0xda>
 800abc4:	06d9      	lsls	r1, r3, #27
 800abc6:	bf44      	itt	mi
 800abc8:	2220      	movmi	r2, #32
 800abca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800abce:	071a      	lsls	r2, r3, #28
 800abd0:	bf44      	itt	mi
 800abd2:	222b      	movmi	r2, #43	; 0x2b
 800abd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800abd8:	782a      	ldrb	r2, [r5, #0]
 800abda:	2a2a      	cmp	r2, #42	; 0x2a
 800abdc:	d015      	beq.n	800ac0a <_svfiprintf_r+0xea>
 800abde:	9a07      	ldr	r2, [sp, #28]
 800abe0:	462f      	mov	r7, r5
 800abe2:	2000      	movs	r0, #0
 800abe4:	250a      	movs	r5, #10
 800abe6:	4639      	mov	r1, r7
 800abe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abec:	3b30      	subs	r3, #48	; 0x30
 800abee:	2b09      	cmp	r3, #9
 800abf0:	d94d      	bls.n	800ac8e <_svfiprintf_r+0x16e>
 800abf2:	b1b8      	cbz	r0, 800ac24 <_svfiprintf_r+0x104>
 800abf4:	e00f      	b.n	800ac16 <_svfiprintf_r+0xf6>
 800abf6:	462f      	mov	r7, r5
 800abf8:	e7b8      	b.n	800ab6c <_svfiprintf_r+0x4c>
 800abfa:	4a40      	ldr	r2, [pc, #256]	; (800acfc <_svfiprintf_r+0x1dc>)
 800abfc:	1a80      	subs	r0, r0, r2
 800abfe:	fa0b f000 	lsl.w	r0, fp, r0
 800ac02:	4318      	orrs	r0, r3
 800ac04:	9004      	str	r0, [sp, #16]
 800ac06:	463d      	mov	r5, r7
 800ac08:	e7d3      	b.n	800abb2 <_svfiprintf_r+0x92>
 800ac0a:	9a03      	ldr	r2, [sp, #12]
 800ac0c:	1d11      	adds	r1, r2, #4
 800ac0e:	6812      	ldr	r2, [r2, #0]
 800ac10:	9103      	str	r1, [sp, #12]
 800ac12:	2a00      	cmp	r2, #0
 800ac14:	db01      	blt.n	800ac1a <_svfiprintf_r+0xfa>
 800ac16:	9207      	str	r2, [sp, #28]
 800ac18:	e004      	b.n	800ac24 <_svfiprintf_r+0x104>
 800ac1a:	4252      	negs	r2, r2
 800ac1c:	f043 0302 	orr.w	r3, r3, #2
 800ac20:	9207      	str	r2, [sp, #28]
 800ac22:	9304      	str	r3, [sp, #16]
 800ac24:	783b      	ldrb	r3, [r7, #0]
 800ac26:	2b2e      	cmp	r3, #46	; 0x2e
 800ac28:	d10c      	bne.n	800ac44 <_svfiprintf_r+0x124>
 800ac2a:	787b      	ldrb	r3, [r7, #1]
 800ac2c:	2b2a      	cmp	r3, #42	; 0x2a
 800ac2e:	d133      	bne.n	800ac98 <_svfiprintf_r+0x178>
 800ac30:	9b03      	ldr	r3, [sp, #12]
 800ac32:	1d1a      	adds	r2, r3, #4
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	9203      	str	r2, [sp, #12]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	bfb8      	it	lt
 800ac3c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ac40:	3702      	adds	r7, #2
 800ac42:	9305      	str	r3, [sp, #20]
 800ac44:	4d2e      	ldr	r5, [pc, #184]	; (800ad00 <_svfiprintf_r+0x1e0>)
 800ac46:	7839      	ldrb	r1, [r7, #0]
 800ac48:	2203      	movs	r2, #3
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	f7f5 fad0 	bl	80001f0 <memchr>
 800ac50:	b138      	cbz	r0, 800ac62 <_svfiprintf_r+0x142>
 800ac52:	2340      	movs	r3, #64	; 0x40
 800ac54:	1b40      	subs	r0, r0, r5
 800ac56:	fa03 f000 	lsl.w	r0, r3, r0
 800ac5a:	9b04      	ldr	r3, [sp, #16]
 800ac5c:	4303      	orrs	r3, r0
 800ac5e:	3701      	adds	r7, #1
 800ac60:	9304      	str	r3, [sp, #16]
 800ac62:	7839      	ldrb	r1, [r7, #0]
 800ac64:	4827      	ldr	r0, [pc, #156]	; (800ad04 <_svfiprintf_r+0x1e4>)
 800ac66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac6a:	2206      	movs	r2, #6
 800ac6c:	1c7e      	adds	r6, r7, #1
 800ac6e:	f7f5 fabf 	bl	80001f0 <memchr>
 800ac72:	2800      	cmp	r0, #0
 800ac74:	d038      	beq.n	800ace8 <_svfiprintf_r+0x1c8>
 800ac76:	4b24      	ldr	r3, [pc, #144]	; (800ad08 <_svfiprintf_r+0x1e8>)
 800ac78:	bb13      	cbnz	r3, 800acc0 <_svfiprintf_r+0x1a0>
 800ac7a:	9b03      	ldr	r3, [sp, #12]
 800ac7c:	3307      	adds	r3, #7
 800ac7e:	f023 0307 	bic.w	r3, r3, #7
 800ac82:	3308      	adds	r3, #8
 800ac84:	9303      	str	r3, [sp, #12]
 800ac86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac88:	444b      	add	r3, r9
 800ac8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ac8c:	e76d      	b.n	800ab6a <_svfiprintf_r+0x4a>
 800ac8e:	fb05 3202 	mla	r2, r5, r2, r3
 800ac92:	2001      	movs	r0, #1
 800ac94:	460f      	mov	r7, r1
 800ac96:	e7a6      	b.n	800abe6 <_svfiprintf_r+0xc6>
 800ac98:	2300      	movs	r3, #0
 800ac9a:	3701      	adds	r7, #1
 800ac9c:	9305      	str	r3, [sp, #20]
 800ac9e:	4619      	mov	r1, r3
 800aca0:	250a      	movs	r5, #10
 800aca2:	4638      	mov	r0, r7
 800aca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aca8:	3a30      	subs	r2, #48	; 0x30
 800acaa:	2a09      	cmp	r2, #9
 800acac:	d903      	bls.n	800acb6 <_svfiprintf_r+0x196>
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d0c8      	beq.n	800ac44 <_svfiprintf_r+0x124>
 800acb2:	9105      	str	r1, [sp, #20]
 800acb4:	e7c6      	b.n	800ac44 <_svfiprintf_r+0x124>
 800acb6:	fb05 2101 	mla	r1, r5, r1, r2
 800acba:	2301      	movs	r3, #1
 800acbc:	4607      	mov	r7, r0
 800acbe:	e7f0      	b.n	800aca2 <_svfiprintf_r+0x182>
 800acc0:	ab03      	add	r3, sp, #12
 800acc2:	9300      	str	r3, [sp, #0]
 800acc4:	4622      	mov	r2, r4
 800acc6:	4b11      	ldr	r3, [pc, #68]	; (800ad0c <_svfiprintf_r+0x1ec>)
 800acc8:	a904      	add	r1, sp, #16
 800acca:	4640      	mov	r0, r8
 800accc:	f7fc fc00 	bl	80074d0 <_printf_float>
 800acd0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800acd4:	4681      	mov	r9, r0
 800acd6:	d1d6      	bne.n	800ac86 <_svfiprintf_r+0x166>
 800acd8:	89a3      	ldrh	r3, [r4, #12]
 800acda:	065b      	lsls	r3, r3, #25
 800acdc:	f53f af35 	bmi.w	800ab4a <_svfiprintf_r+0x2a>
 800ace0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ace2:	b01d      	add	sp, #116	; 0x74
 800ace4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace8:	ab03      	add	r3, sp, #12
 800acea:	9300      	str	r3, [sp, #0]
 800acec:	4622      	mov	r2, r4
 800acee:	4b07      	ldr	r3, [pc, #28]	; (800ad0c <_svfiprintf_r+0x1ec>)
 800acf0:	a904      	add	r1, sp, #16
 800acf2:	4640      	mov	r0, r8
 800acf4:	f7fc fea2 	bl	8007a3c <_printf_i>
 800acf8:	e7ea      	b.n	800acd0 <_svfiprintf_r+0x1b0>
 800acfa:	bf00      	nop
 800acfc:	0800b124 	.word	0x0800b124
 800ad00:	0800b12a 	.word	0x0800b12a
 800ad04:	0800b12e 	.word	0x0800b12e
 800ad08:	080074d1 	.word	0x080074d1
 800ad0c:	0800aa6d 	.word	0x0800aa6d

0800ad10 <_sbrk_r>:
 800ad10:	b538      	push	{r3, r4, r5, lr}
 800ad12:	4c06      	ldr	r4, [pc, #24]	; (800ad2c <_sbrk_r+0x1c>)
 800ad14:	2300      	movs	r3, #0
 800ad16:	4605      	mov	r5, r0
 800ad18:	4608      	mov	r0, r1
 800ad1a:	6023      	str	r3, [r4, #0]
 800ad1c:	f7f7 f848 	bl	8001db0 <_sbrk>
 800ad20:	1c43      	adds	r3, r0, #1
 800ad22:	d102      	bne.n	800ad2a <_sbrk_r+0x1a>
 800ad24:	6823      	ldr	r3, [r4, #0]
 800ad26:	b103      	cbz	r3, 800ad2a <_sbrk_r+0x1a>
 800ad28:	602b      	str	r3, [r5, #0]
 800ad2a:	bd38      	pop	{r3, r4, r5, pc}
 800ad2c:	20004d14 	.word	0x20004d14

0800ad30 <strncmp>:
 800ad30:	b510      	push	{r4, lr}
 800ad32:	b16a      	cbz	r2, 800ad50 <strncmp+0x20>
 800ad34:	3901      	subs	r1, #1
 800ad36:	1884      	adds	r4, r0, r2
 800ad38:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ad3c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d103      	bne.n	800ad4c <strncmp+0x1c>
 800ad44:	42a0      	cmp	r0, r4
 800ad46:	d001      	beq.n	800ad4c <strncmp+0x1c>
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d1f5      	bne.n	800ad38 <strncmp+0x8>
 800ad4c:	1a98      	subs	r0, r3, r2
 800ad4e:	bd10      	pop	{r4, pc}
 800ad50:	4610      	mov	r0, r2
 800ad52:	e7fc      	b.n	800ad4e <strncmp+0x1e>

0800ad54 <__ascii_wctomb>:
 800ad54:	b149      	cbz	r1, 800ad6a <__ascii_wctomb+0x16>
 800ad56:	2aff      	cmp	r2, #255	; 0xff
 800ad58:	bf85      	ittet	hi
 800ad5a:	238a      	movhi	r3, #138	; 0x8a
 800ad5c:	6003      	strhi	r3, [r0, #0]
 800ad5e:	700a      	strbls	r2, [r1, #0]
 800ad60:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ad64:	bf98      	it	ls
 800ad66:	2001      	movls	r0, #1
 800ad68:	4770      	bx	lr
 800ad6a:	4608      	mov	r0, r1
 800ad6c:	4770      	bx	lr

0800ad6e <memmove>:
 800ad6e:	4288      	cmp	r0, r1
 800ad70:	b510      	push	{r4, lr}
 800ad72:	eb01 0302 	add.w	r3, r1, r2
 800ad76:	d807      	bhi.n	800ad88 <memmove+0x1a>
 800ad78:	1e42      	subs	r2, r0, #1
 800ad7a:	4299      	cmp	r1, r3
 800ad7c:	d00a      	beq.n	800ad94 <memmove+0x26>
 800ad7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad82:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ad86:	e7f8      	b.n	800ad7a <memmove+0xc>
 800ad88:	4283      	cmp	r3, r0
 800ad8a:	d9f5      	bls.n	800ad78 <memmove+0xa>
 800ad8c:	1881      	adds	r1, r0, r2
 800ad8e:	1ad2      	subs	r2, r2, r3
 800ad90:	42d3      	cmn	r3, r2
 800ad92:	d100      	bne.n	800ad96 <memmove+0x28>
 800ad94:	bd10      	pop	{r4, pc}
 800ad96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad9a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ad9e:	e7f7      	b.n	800ad90 <memmove+0x22>

0800ada0 <__malloc_lock>:
 800ada0:	4770      	bx	lr

0800ada2 <__malloc_unlock>:
 800ada2:	4770      	bx	lr

0800ada4 <_realloc_r>:
 800ada4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada6:	4607      	mov	r7, r0
 800ada8:	4614      	mov	r4, r2
 800adaa:	460e      	mov	r6, r1
 800adac:	b921      	cbnz	r1, 800adb8 <_realloc_r+0x14>
 800adae:	4611      	mov	r1, r2
 800adb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800adb4:	f7ff be00 	b.w	800a9b8 <_malloc_r>
 800adb8:	b922      	cbnz	r2, 800adc4 <_realloc_r+0x20>
 800adba:	f7ff fdaf 	bl	800a91c <_free_r>
 800adbe:	4625      	mov	r5, r4
 800adc0:	4628      	mov	r0, r5
 800adc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adc4:	f000 f814 	bl	800adf0 <_malloc_usable_size_r>
 800adc8:	42a0      	cmp	r0, r4
 800adca:	d20f      	bcs.n	800adec <_realloc_r+0x48>
 800adcc:	4621      	mov	r1, r4
 800adce:	4638      	mov	r0, r7
 800add0:	f7ff fdf2 	bl	800a9b8 <_malloc_r>
 800add4:	4605      	mov	r5, r0
 800add6:	2800      	cmp	r0, #0
 800add8:	d0f2      	beq.n	800adc0 <_realloc_r+0x1c>
 800adda:	4631      	mov	r1, r6
 800addc:	4622      	mov	r2, r4
 800adde:	f7fc facf 	bl	8007380 <memcpy>
 800ade2:	4631      	mov	r1, r6
 800ade4:	4638      	mov	r0, r7
 800ade6:	f7ff fd99 	bl	800a91c <_free_r>
 800adea:	e7e9      	b.n	800adc0 <_realloc_r+0x1c>
 800adec:	4635      	mov	r5, r6
 800adee:	e7e7      	b.n	800adc0 <_realloc_r+0x1c>

0800adf0 <_malloc_usable_size_r>:
 800adf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adf4:	1f18      	subs	r0, r3, #4
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	bfbc      	itt	lt
 800adfa:	580b      	ldrlt	r3, [r1, r0]
 800adfc:	18c0      	addlt	r0, r0, r3
 800adfe:	4770      	bx	lr

0800ae00 <_init>:
 800ae00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae02:	bf00      	nop
 800ae04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae06:	bc08      	pop	{r3}
 800ae08:	469e      	mov	lr, r3
 800ae0a:	4770      	bx	lr

0800ae0c <_fini>:
 800ae0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0e:	bf00      	nop
 800ae10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae12:	bc08      	pop	{r3}
 800ae14:	469e      	mov	lr, r3
 800ae16:	4770      	bx	lr
